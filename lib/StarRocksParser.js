// Generated from C:/Users/chenzhihui/Desktop/StarRocks.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import StarRocksListener from './StarRocksListener.js';
const serializedATN = [4,1,532,8006,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,2,369,7,369,
2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,2,375,7,375,
2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,2,381,7,381,
2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,
2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,
2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,
2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,7,417,
2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,2,423,7,423,
2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,2,429,7,429,
2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,2,435,7,435,
2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,2,441,7,441,
2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,2,447,7,447,
2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,
2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,
2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,
2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,7,483,
2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,2,489,7,489,
2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,2,495,7,495,
2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,2,501,7,501,
2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,2,507,7,507,
2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,1,0,4,0,1026,8,0,11,0,12,
0,1027,1,0,1,0,1,1,1,1,1,1,1,1,3,1,1036,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,1274,8,3,1,4,1,4,
1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,1290,8,7,1,7,1,7,1,7,
1,7,3,7,1296,8,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,1304,8,7,3,7,1306,8,7,1,8,1,
8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1324,8,8,1,
9,1,9,1,9,1,9,1,9,3,9,1331,8,9,1,9,1,9,1,9,3,9,1336,8,9,1,9,1,9,3,9,1340,
8,9,1,9,3,9,1343,8,9,1,9,3,9,1346,8,9,1,10,1,10,1,10,1,10,3,10,1352,8,10,
1,10,1,10,1,10,3,10,1357,8,10,1,10,1,10,3,10,1361,8,10,1,11,1,11,1,11,1,
11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
1,14,1,14,1,14,3,14,1384,8,14,1,15,1,15,3,15,1388,8,15,1,15,1,15,1,15,1,
15,3,15,1394,8,15,1,15,1,15,1,15,1,15,1,15,5,15,1401,8,15,10,15,12,15,1404,
9,15,1,15,1,15,5,15,1408,8,15,10,15,12,15,1411,9,15,1,15,1,15,3,15,1415,
8,15,1,15,3,15,1418,8,15,1,15,3,15,1421,8,15,1,15,3,15,1424,8,15,1,15,3,
15,1427,8,15,1,15,3,15,1430,8,15,1,15,3,15,1433,8,15,1,15,3,15,1436,8,15,
1,15,3,15,1439,8,15,1,15,3,15,1442,8,15,1,16,1,16,3,16,1446,8,16,1,16,3,
16,1449,8,16,1,16,3,16,1452,8,16,1,16,3,16,1455,8,16,1,16,3,16,1458,8,16,
1,16,1,16,1,16,3,16,1463,8,16,1,16,3,16,1466,8,16,1,17,1,17,1,17,1,17,1,
17,1,17,1,17,1,17,3,17,1476,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,3,18,1488,8,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,1498,
8,20,3,20,1500,8,20,1,20,3,20,1503,8,20,1,21,1,21,1,21,1,21,1,22,3,22,1510,
8,22,1,22,1,22,1,22,1,22,1,22,3,22,1517,8,22,1,22,3,22,1520,8,22,1,22,1,
22,1,23,3,23,1525,8,23,1,23,1,23,3,23,1529,8,23,1,23,1,23,1,24,1,24,1,24,
1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,3,26,1544,8,26,1,27,1,27,3,27,1548,
8,27,1,28,1,28,1,28,1,28,1,28,5,28,1555,8,28,10,28,12,28,1558,9,28,1,28,
1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,1571,8,29,1,30,1,
30,1,30,1,30,1,30,5,30,1578,8,30,10,30,12,30,1581,9,30,1,30,1,30,1,31,1,
31,1,31,3,31,1588,8,31,1,31,3,31,1591,8,31,1,31,3,31,1594,8,31,1,32,1,32,
1,32,1,32,1,33,1,33,1,33,1,34,1,34,3,34,1605,8,34,1,35,1,35,1,35,3,35,1610,
8,35,1,36,1,36,3,36,1614,8,36,1,36,1,36,1,36,1,36,3,36,1620,8,36,1,36,1,
36,1,36,1,36,1,36,5,36,1627,8,36,10,36,12,36,1630,9,36,1,36,1,36,5,36,1634,
8,36,10,36,12,36,1637,9,36,1,36,1,36,1,36,5,36,1642,8,36,10,36,12,36,1645,
9,36,3,36,1647,8,36,1,36,1,36,3,36,1651,8,36,1,36,3,36,1654,8,36,1,36,3,
36,1657,8,36,1,36,3,36,1660,8,36,1,36,3,36,1663,8,36,1,36,3,36,1666,8,36,
1,36,3,36,1669,8,36,1,36,1,36,1,36,1,37,1,37,3,37,1676,8,37,1,37,1,37,1,
37,3,37,1681,8,37,1,37,1,37,3,37,1685,8,37,1,38,1,38,1,38,1,38,1,38,1,38,
1,38,1,39,1,39,1,39,1,39,1,39,1,39,5,39,1700,8,39,10,39,12,39,1703,9,39,
1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,1713,8,39,10,39,12,39,1716,
9,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,1726,8,39,10,39,12,39,
1729,9,39,3,39,1731,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1741,
8,40,3,40,1743,8,40,1,40,3,40,1746,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,
42,1,42,1,42,1,43,1,43,3,43,1759,8,43,1,43,1,43,1,43,3,43,1764,8,43,1,43,
1,43,1,43,1,43,3,43,1770,8,43,1,44,1,44,1,44,1,44,1,44,3,44,1777,8,44,1,
44,1,44,1,44,1,44,3,44,1783,8,44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1791,
8,45,1,45,1,45,1,46,1,46,3,46,1797,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,
46,1805,8,46,1,46,1,46,1,46,1,46,3,46,1811,8,46,1,47,1,47,1,47,1,47,1,47,
3,47,1818,8,47,1,47,1,47,1,47,1,47,3,47,1824,8,47,1,48,1,48,1,48,1,48,1,
48,1,48,1,48,1,48,1,48,5,48,1835,8,48,10,48,12,48,1838,9,48,1,48,1,48,3,
48,1842,8,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1850,8,49,1,49,1,49,3,49,
1854,8,49,1,49,1,49,1,49,1,49,1,49,5,49,1861,8,49,10,49,12,49,1864,9,49,
3,49,1866,8,49,1,49,3,49,1869,8,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1877,
8,49,1,49,1,49,3,49,1881,8,49,1,49,1,49,1,49,1,49,1,49,5,49,1888,8,49,10,
49,12,49,1891,9,49,3,49,1893,8,49,1,49,3,49,1896,8,49,3,49,1898,8,49,1,50,
1,50,1,50,3,50,1903,8,50,1,50,1,50,3,50,1907,8,50,1,51,1,51,3,51,1911,8,
51,1,51,1,51,1,51,1,51,3,51,1917,8,51,1,51,1,51,3,51,1921,8,51,1,51,3,51,
1924,8,51,1,51,3,51,1927,8,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,
52,1,52,3,52,1939,8,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,3,54,1949,
8,54,1,55,1,55,1,55,1,55,3,55,1955,8,55,1,55,1,55,1,55,1,55,1,55,1,55,5,
55,1963,8,55,10,55,12,55,1966,9,55,1,55,3,55,1969,8,55,1,55,1,55,1,55,1,
55,1,55,1,55,3,55,1977,8,55,1,56,1,56,3,56,1981,8,56,1,56,1,56,1,56,1,56,
1,56,3,56,1988,8,56,1,56,1,56,1,56,1,56,1,56,5,56,1995,8,56,10,56,12,56,
1998,9,56,3,56,2000,8,56,1,56,3,56,2003,8,56,1,57,1,57,1,57,1,57,1,57,1,
57,1,58,1,58,1,58,3,58,2014,8,58,1,58,1,58,1,58,1,58,3,58,2020,8,58,1,58,
1,58,1,58,1,58,1,58,5,58,2027,8,58,10,58,12,58,2030,9,58,1,58,1,58,3,58,
2034,8,58,1,58,3,58,2037,8,58,1,58,1,58,3,58,2041,8,58,1,58,1,58,1,58,1,
59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2053,8,59,10,59,12,59,2056,9,59,1,
59,1,59,3,59,2060,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2084,8,
59,1,59,1,59,3,59,2088,8,59,1,60,1,60,1,60,1,60,3,60,2094,8,60,1,60,1,60,
1,61,1,61,3,61,2100,8,61,1,62,1,62,1,62,3,62,2105,8,62,1,62,5,62,2108,8,
62,10,62,12,62,2111,9,62,1,62,1,62,1,62,1,62,3,62,2117,8,62,1,63,1,63,3,
63,2121,8,63,1,64,1,64,1,64,1,64,3,64,2127,8,64,1,65,1,65,1,65,1,65,1,65,
1,65,3,65,2135,8,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,
66,3,66,2148,8,66,1,66,1,66,1,66,1,66,1,66,5,66,2155,8,66,10,66,12,66,2158,
9,66,1,66,1,66,5,66,2162,8,66,10,66,12,66,2165,9,66,1,66,1,66,3,66,2169,
8,66,1,66,3,66,2172,8,66,1,66,5,66,2175,8,66,10,66,12,66,2178,9,66,1,66,
1,66,1,66,1,67,1,67,1,67,1,67,1,67,5,67,2188,8,67,10,67,12,67,2191,9,67,
1,67,1,67,3,67,2195,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,2204,8,
68,1,69,1,69,1,69,1,69,1,69,3,69,2211,8,69,1,69,1,69,1,69,1,69,3,69,2217,
8,69,1,70,1,70,1,70,1,70,1,70,3,70,2224,8,70,1,70,1,70,1,71,1,71,1,71,1,
71,1,71,1,71,1,71,1,71,3,71,2236,8,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,
2244,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,2253,8,72,3,72,2255,8,
72,1,72,3,72,2258,8,72,1,72,1,72,1,72,3,72,2263,8,72,1,72,1,72,1,72,3,72,
2268,8,72,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2276,8,73,1,74,1,74,1,74,1,
74,1,74,1,74,1,74,1,74,1,74,3,74,2287,8,74,1,75,1,75,1,75,1,75,1,75,1,75,
1,76,1,76,1,76,1,76,1,76,1,76,3,76,2301,8,76,1,77,1,77,1,77,1,77,1,77,1,
77,1,77,3,77,2310,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,2319,8,78,
1,78,1,78,3,78,2323,8,78,1,79,1,79,1,79,1,79,1,79,3,79,2330,8,79,1,80,1,
80,1,80,1,80,1,80,1,80,3,80,2338,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2356,8,82,1,82,1,82,1,
82,1,82,1,82,1,83,1,83,3,83,2365,8,83,1,83,3,83,2368,8,83,1,83,1,83,3,83,
2372,8,83,1,84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,2385,
8,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,88,1,88,1,
88,1,88,1,88,1,88,5,88,2404,8,88,10,88,12,88,2407,9,88,1,89,1,89,1,89,1,
89,1,90,1,90,1,90,1,90,1,90,1,90,3,90,2419,8,90,1,90,1,90,3,90,2423,8,90,
1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,3,92,2436,8,92,1,
92,1,92,1,93,1,93,1,93,1,93,3,93,2444,8,93,1,94,1,94,1,94,1,94,1,94,1,95,
1,95,1,95,1,95,1,95,1,95,3,95,2457,8,95,1,95,1,95,1,95,1,95,3,95,2463,8,
95,1,95,3,95,2466,8,95,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,98,1,98,
1,98,1,98,1,98,3,98,2481,8,98,1,99,1,99,1,99,1,99,1,99,3,99,2488,8,99,1,
99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,5,100,2499,8,100,10,100,
12,100,2502,9,100,1,101,1,101,3,101,2506,8,101,1,102,1,102,1,102,1,103,1,
103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,
105,1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,2534,8,106,
1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,2543,8,106,1,106,1,106,1,
106,3,106,2548,8,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,2557,
8,106,1,106,1,106,1,106,3,106,2562,8,106,3,106,2564,8,106,1,107,1,107,1,
107,1,107,3,107,2570,8,107,1,107,1,107,1,107,3,107,2575,8,107,1,108,1,108,
1,108,1,108,1,108,1,108,1,108,1,108,1,108,5,108,2586,8,108,10,108,12,108,
2589,9,108,1,108,1,108,3,108,2593,8,108,1,109,1,109,1,109,1,109,3,109,2599,
8,109,1,110,1,110,1,110,1,110,1,111,1,111,1,111,3,111,2608,8,111,1,112,1,
112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,113,3,113,2621,8,113,
1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
1,115,3,115,2672,8,115,1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,1,
118,1,118,1,118,1,118,1,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,5,
119,2694,8,119,10,119,12,119,2697,9,119,1,119,1,119,1,119,3,119,2702,8,119,
1,120,1,120,1,120,1,120,1,120,5,120,2709,8,120,10,120,12,120,2712,9,120,
1,120,1,120,1,120,3,120,2717,8,120,1,120,3,120,2720,8,120,1,121,1,121,1,
121,1,121,1,121,5,121,2727,8,121,10,121,12,121,2730,9,121,1,122,1,122,1,
122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,2745,
8,122,1,123,1,123,1,123,1,123,1,123,1,123,5,123,2753,8,123,10,123,12,123,
2756,9,123,1,123,1,123,1,123,3,123,2761,8,123,1,124,1,124,1,124,1,124,1,
124,1,124,5,124,2769,8,124,10,124,12,124,2772,9,124,1,124,1,124,1,124,3,
124,2777,8,124,1,125,1,125,1,125,1,125,1,125,1,125,5,125,2785,8,125,10,125,
12,125,2788,9,125,1,125,1,125,1,125,1,125,1,125,1,125,5,125,2796,8,125,10,
125,12,125,2799,9,125,1,125,1,125,1,125,1,125,3,125,2805,8,125,1,126,1,126,
1,126,1,126,1,126,3,126,2812,8,126,1,127,1,127,1,127,1,128,1,128,1,128,1,
128,1,128,1,129,1,129,1,129,1,129,1,129,5,129,2827,8,129,10,129,12,129,2830,
9,129,1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,1,130,1,130,5,130,
2842,8,130,10,130,12,130,2845,9,130,1,130,1,130,1,130,1,130,1,131,1,131,
1,131,1,131,1,131,5,131,2856,8,131,10,131,12,131,2859,9,131,1,131,1,131,
1,131,1,131,1,132,1,132,1,132,1,132,1,132,1,132,5,132,2871,8,132,10,132,
12,132,2874,9,132,1,132,1,132,1,132,1,132,1,133,1,133,1,133,1,133,1,133,
1,133,3,133,2886,8,133,3,133,2888,8,133,1,133,3,133,2891,8,133,1,134,1,134,
1,134,1,134,1,135,1,135,1,135,1,136,1,136,1,136,1,136,1,137,1,137,1,137,
1,138,1,138,1,138,1,138,1,139,3,139,2912,8,139,1,139,3,139,2915,8,139,1,
139,3,139,2918,8,139,1,139,3,139,2921,8,139,1,139,3,139,2924,8,139,1,140,
1,140,1,140,1,140,1,140,1,140,3,140,2932,8,140,1,140,1,140,3,140,2936,8,
140,1,140,3,140,2939,8,140,1,141,1,141,1,141,1,141,1,141,1,141,5,141,2947,
8,141,10,141,12,141,2950,9,141,1,141,1,141,1,141,3,141,2955,8,141,1,141,
3,141,2958,8,141,1,142,1,142,1,142,1,142,1,142,3,142,2965,8,142,1,142,3,
142,2968,8,142,1,143,1,143,1,143,1,143,1,143,1,143,3,143,2976,8,143,1,143,
1,143,3,143,2980,8,143,1,143,3,143,2983,8,143,1,144,1,144,1,144,1,144,1,
144,1,144,1,145,1,145,1,145,1,145,1,145,3,145,2996,8,145,1,145,3,145,2999,
8,145,1,146,1,146,1,146,1,146,1,146,1,147,3,147,3007,8,147,1,147,1,147,1,
147,3,147,3012,8,147,1,148,1,148,3,148,3016,8,148,1,149,1,149,1,149,1,149,
5,149,3022,8,149,10,149,12,149,3025,9,149,1,150,1,150,1,150,1,150,1,150,
1,150,1,150,1,150,1,150,3,150,3036,8,150,1,150,3,150,3039,8,150,1,151,1,
151,1,151,1,151,1,151,1,151,1,151,3,151,3048,8,151,1,152,1,152,3,152,3052,
8,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,
3064,8,152,1,152,1,152,1,152,3,152,3069,8,152,1,153,1,153,3,153,3073,8,153,
1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,3,153,3085,8,
153,1,153,1,153,1,153,3,153,3090,8,153,1,154,1,154,1,154,1,154,3,154,3096,
8,154,1,154,1,154,1,155,1,155,1,155,1,155,3,155,3104,8,155,1,155,1,155,1,
156,1,156,1,156,1,157,1,157,1,157,1,157,3,157,3115,8,157,1,157,3,157,3118,
8,157,1,158,1,158,1,158,1,158,3,158,3124,8,158,1,158,3,158,3127,8,158,1,
158,3,158,3130,8,158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
1,159,1,159,1,159,1,159,1,159,3,159,3146,8,159,1,160,1,160,1,160,1,160,1,
161,1,161,1,161,1,162,1,162,1,162,1,163,1,163,1,164,1,164,1,165,1,165,1,
165,1,165,5,165,3166,8,165,10,165,12,165,3169,9,165,1,165,1,165,1,166,1,
166,1,166,1,166,1,166,1,166,1,166,1,167,1,167,3,167,3182,8,167,1,167,1,167,
1,167,3,167,3187,8,167,1,167,3,167,3190,8,167,1,167,3,167,3193,8,167,1,167,
1,167,3,167,3197,8,167,1,167,1,167,3,167,3201,8,167,1,167,3,167,3204,8,167,
1,167,3,167,3207,8,167,3,167,3209,8,167,1,168,1,168,3,168,3213,8,168,1,168,
1,168,1,168,3,168,3218,8,168,1,168,1,168,1,168,1,168,3,168,3224,8,168,1,
168,3,168,3227,8,168,1,168,3,168,3230,8,168,1,168,1,168,3,168,3234,8,168,
1,168,1,168,1,168,3,168,3239,8,168,1,168,1,168,3,168,3243,8,168,1,168,1,
168,3,168,3247,8,168,1,168,1,168,1,168,3,168,3252,8,168,1,168,1,168,1,168,
3,168,3257,8,168,3,168,3259,8,168,1,169,1,169,1,169,1,170,1,170,1,170,1,
170,1,170,1,170,1,170,3,170,3271,8,170,1,170,1,170,1,170,1,170,1,170,3,170,
3278,8,170,1,171,1,171,1,171,1,171,1,171,3,171,3285,8,171,1,172,1,172,1,
172,1,172,1,172,1,173,3,173,3293,8,173,1,173,1,173,1,173,1,173,3,173,3299,
8,173,1,173,3,173,3302,8,173,1,173,1,173,1,173,1,173,1,173,3,173,3309,8,
173,1,173,5,173,3312,8,173,10,173,12,173,3315,9,173,1,173,3,173,3318,8,173,
1,173,1,173,1,173,1,173,1,173,5,173,3325,8,173,10,173,12,173,3328,9,173,
3,173,3330,8,173,1,174,1,174,1,174,1,174,3,174,3336,8,174,1,175,1,175,1,
175,3,175,3341,8,175,1,176,3,176,3344,8,176,1,176,3,176,3347,8,176,1,176,
1,176,1,176,1,176,1,176,1,176,1,176,3,176,3356,8,176,1,177,3,177,3359,8,
177,1,177,3,177,3362,8,177,1,177,1,177,1,177,1,177,3,177,3368,8,177,1,177,
1,177,3,177,3372,8,177,1,177,1,177,3,177,3376,8,177,1,178,1,178,1,178,1,
178,1,178,1,178,3,178,3384,8,178,1,178,1,178,1,178,1,178,1,178,1,178,5,178,
3392,8,178,10,178,12,178,3395,9,178,3,178,3397,8,178,1,178,3,178,3400,8,
178,1,178,1,178,1,178,3,178,3405,8,178,1,179,1,179,1,179,1,179,1,179,1,179,
1,179,3,179,3414,8,179,1,179,1,179,1,179,1,179,5,179,3420,8,179,10,179,12,
179,3423,9,179,3,179,3425,8,179,1,179,3,179,3428,8,179,1,179,3,179,3431,
8,179,1,180,1,180,1,180,1,180,1,181,1,181,1,181,1,181,1,181,1,181,3,181,
3443,8,181,1,182,1,182,1,182,1,182,1,182,1,183,1,183,1,183,1,183,1,183,1,
184,1,184,1,184,1,185,1,185,1,185,3,185,3461,8,185,1,185,1,185,1,185,3,185,
3466,8,185,5,185,3468,8,185,10,185,12,185,3471,9,185,1,185,1,185,1,186,1,
186,1,187,1,187,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,3486,8,188,
1,188,1,188,1,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,3497,8,189,1,
189,1,189,1,190,1,190,1,190,1,190,1,190,1,190,1,190,3,190,3508,8,190,1,190,
1,190,1,191,1,191,3,191,3514,8,191,1,191,1,191,1,191,1,191,1,191,1,191,3,
191,3522,8,191,1,191,3,191,3525,8,191,1,191,1,191,3,191,3529,8,191,1,191,
1,191,3,191,3533,8,191,1,191,1,191,1,191,1,191,1,191,5,191,3540,8,191,10,
191,12,191,3543,9,191,3,191,3545,8,191,1,191,3,191,3548,8,191,1,192,1,192,
1,192,1,192,1,192,1,192,3,192,3556,8,192,1,192,1,192,1,192,1,193,1,193,1,
193,1,193,1,193,1,193,1,193,3,193,3568,8,193,1,193,1,193,1,194,1,194,3,194,
3574,8,194,1,194,1,194,1,194,1,194,1,194,1,194,3,194,3582,8,194,1,194,3,
194,3585,8,194,1,194,1,194,3,194,3589,8,194,1,194,1,194,3,194,3593,8,194,
1,194,1,194,1,194,1,194,1,194,5,194,3600,8,194,10,194,12,194,3603,9,194,
3,194,3605,8,194,1,194,3,194,3608,8,194,1,195,1,195,3,195,3612,8,195,1,195,
1,195,1,195,3,195,3617,8,195,1,195,3,195,3620,8,195,1,195,1,195,1,195,3,
195,3625,8,195,1,195,3,195,3628,8,195,1,196,1,196,1,196,1,196,5,196,3634,
8,196,10,196,12,196,3637,9,196,1,196,1,196,1,196,1,196,1,196,5,196,3644,
8,196,10,196,12,196,3647,9,196,1,196,1,196,1,196,1,196,3,196,3653,8,196,
1,197,1,197,1,197,1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
1,198,1,198,3,198,3669,8,198,1,198,3,198,3672,8,198,1,199,1,199,1,199,1,
199,3,199,3678,8,199,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
5,200,3689,8,200,10,200,12,200,3692,9,200,1,201,1,201,1,201,3,201,3697,8,
201,1,201,1,201,3,201,3701,8,201,1,201,1,201,1,201,3,201,3706,8,201,1,201,
1,201,1,201,3,201,3711,8,201,1,201,1,201,1,201,3,201,3716,8,201,1,201,1,
201,1,201,1,201,1,201,1,201,5,201,3724,8,201,10,201,12,201,3727,9,201,1,
201,1,201,3,201,3731,8,201,1,201,3,201,3734,8,201,1,201,1,201,3,201,3738,
8,201,1,202,1,202,1,202,1,202,1,203,1,203,1,203,3,203,3747,8,203,1,203,1,
203,3,203,3751,8,203,1,204,1,204,1,204,1,204,1,204,3,204,3758,8,204,1,205,
1,205,1,205,1,205,1,205,3,205,3765,8,205,1,206,1,206,1,206,1,206,1,207,1,
207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,5,207,3783,
8,207,10,207,12,207,3786,9,207,3,207,3788,8,207,1,208,1,208,3,208,3792,8,
208,1,208,1,208,1,208,3,208,3797,8,208,1,208,1,208,1,208,3,208,3802,8,208,
1,209,1,209,1,209,1,209,1,210,1,210,1,210,1,211,1,211,1,211,1,211,1,211,
1,211,3,211,3817,8,211,1,211,1,211,3,211,3821,8,211,1,211,1,211,1,211,1,
211,1,211,5,211,3828,8,211,10,211,12,211,3831,9,211,3,211,3833,8,211,1,211,
1,211,1,211,1,211,1,211,5,211,3840,8,211,10,211,12,211,3843,9,211,1,211,
1,211,1,212,1,212,1,212,1,212,1,212,1,213,1,213,1,213,1,213,1,213,1,213,
1,213,1,213,5,213,3860,8,213,10,213,12,213,3863,9,213,1,213,1,213,1,213,
1,213,1,213,1,213,1,213,1,213,1,213,5,213,3874,8,213,10,213,12,213,3877,
9,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
1,213,1,213,1,213,1,213,1,213,1,213,1,213,5,213,3897,8,213,10,213,12,213,
3900,9,213,1,213,1,213,3,213,3904,8,213,1,214,1,214,3,214,3908,8,214,1,214,
1,214,1,214,1,214,1,214,3,214,3915,8,214,1,214,1,214,1,214,3,214,3920,8,
214,3,214,3922,8,214,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,
3,215,3933,8,215,1,216,1,216,3,216,3937,8,216,1,216,1,216,1,216,3,216,3942,
8,216,1,217,1,217,1,217,1,217,1,217,1,217,1,218,1,218,1,218,1,218,1,219,
1,219,1,219,1,220,1,220,1,220,1,220,1,221,1,221,3,221,3963,8,221,1,221,3,
221,3966,8,221,1,221,1,221,1,221,3,221,3971,8,221,1,221,1,221,1,221,1,221,
3,221,3977,8,221,1,222,1,222,3,222,3981,8,222,1,222,1,222,1,222,3,222,3986,
8,222,1,222,1,222,1,222,1,222,1,222,1,223,1,223,1,223,3,223,3996,8,223,1,
223,3,223,3999,8,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,
1,223,3,223,4011,8,223,1,223,3,223,4014,8,223,1,224,1,224,1,224,1,225,3,
225,4020,8,225,1,225,1,225,5,225,4024,8,225,10,225,12,225,4027,9,225,1,225,
1,225,3,225,4031,8,225,1,226,1,226,1,226,1,226,3,226,4037,8,226,1,226,3,
226,4040,8,226,1,226,1,226,3,226,4044,8,226,1,226,1,226,3,226,4048,8,226,
1,226,1,226,1,226,1,226,3,226,4054,8,226,1,226,1,226,1,226,3,226,4059,8,
226,3,226,4061,8,226,1,227,1,227,1,227,3,227,4066,8,227,1,227,1,227,1,228,
1,228,1,228,1,228,5,228,4074,8,228,10,228,12,228,4077,9,228,1,228,1,228,
1,229,1,229,1,229,1,229,3,229,4085,8,229,1,229,1,229,1,229,1,229,3,229,4091,
8,229,1,229,1,229,1,229,1,229,3,229,4097,8,229,1,229,1,229,1,229,1,229,3,
229,4103,8,229,1,229,3,229,4106,8,229,1,229,3,229,4109,8,229,1,229,3,229,
4112,8,229,1,229,1,229,1,229,1,229,1,229,3,229,4119,8,229,1,229,1,229,3,
229,4123,8,229,1,229,1,229,3,229,4127,8,229,1,229,1,229,1,229,1,229,1,229,
3,229,4134,8,229,1,229,1,229,1,229,1,229,3,229,4140,8,229,1,229,1,229,3,
229,4144,8,229,1,229,1,229,3,229,4148,8,229,3,229,4150,8,229,1,230,1,230,
1,230,1,230,3,230,4156,8,230,1,230,1,230,1,230,3,230,4161,8,230,1,230,1,
230,1,230,3,230,4166,8,230,1,230,1,230,1,230,3,230,4171,8,230,1,230,1,230,
1,231,1,231,1,231,3,231,4178,8,231,1,231,1,231,1,231,1,231,3,231,4184,8,
231,3,231,4186,8,231,1,232,1,232,1,232,1,232,3,232,4192,8,232,1,233,1,233,
1,233,3,233,4197,8,233,1,233,1,233,3,233,4201,8,233,1,233,1,233,3,233,4205,
8,233,1,233,1,233,1,233,1,233,1,233,5,233,4212,8,233,10,233,12,233,4215,
9,233,3,233,4217,8,233,1,233,3,233,4220,8,233,1,234,1,234,1,234,1,234,1,
234,3,234,4227,8,234,1,234,1,234,3,234,4231,8,234,1,234,3,234,4234,8,234,
1,234,1,234,1,234,1,234,1,234,3,234,4241,8,234,1,235,1,235,1,235,1,235,3,
235,4247,8,235,1,235,1,235,3,235,4251,8,235,1,236,1,236,1,236,1,236,1,236,
1,236,3,236,4259,8,236,1,236,1,236,3,236,4263,8,236,1,237,1,237,1,237,1,
237,1,237,1,238,1,238,1,238,1,239,1,239,1,239,1,240,1,240,1,240,1,241,1,
241,1,241,1,241,1,241,1,241,3,241,4285,8,241,1,241,1,241,1,241,1,241,3,241,
4291,8,241,1,242,1,242,1,242,1,242,1,242,1,242,3,242,4299,8,242,1,243,1,
243,1,243,1,243,3,243,4305,8,243,1,244,1,244,1,244,1,244,1,244,1,244,3,244,
4313,8,244,1,245,1,245,1,245,1,245,3,245,4319,8,245,1,245,1,245,1,245,1,
245,3,245,4325,8,245,1,246,1,246,1,246,1,247,1,247,1,247,1,248,1,248,1,248,
1,249,1,249,1,249,1,250,1,250,1,250,1,250,1,251,1,251,1,251,1,252,1,252,
1,252,1,252,1,252,1,252,1,252,3,252,4353,8,252,1,253,1,253,1,253,1,253,1,
254,1,254,3,254,4361,8,254,1,254,1,254,1,254,3,254,4366,8,254,1,255,1,255,
1,255,1,255,3,255,4372,8,255,1,256,1,256,1,256,1,256,1,256,3,256,4379,8,
256,1,257,1,257,3,257,4383,8,257,1,257,1,257,1,257,1,257,1,257,3,257,4390,
8,257,1,258,1,258,1,258,1,258,1,258,1,258,1,258,1,258,3,258,4400,8,258,1,
258,1,258,3,258,4404,8,258,1,258,1,258,1,258,1,258,1,258,5,258,4411,8,258,
10,258,12,258,4414,9,258,3,258,4416,8,258,1,258,3,258,4419,8,258,3,258,4421,
8,258,1,259,1,259,1,259,1,259,3,259,4427,8,259,1,259,1,259,3,259,4431,8,
259,1,260,1,260,3,260,4435,8,260,1,260,1,260,1,260,3,260,4440,8,260,1,260,
1,260,1,260,1,260,3,260,4446,8,260,1,261,1,261,1,261,1,261,3,261,4452,8,
261,1,261,1,261,3,261,4456,8,261,1,261,1,261,1,261,1,261,3,261,4462,8,261,
1,261,1,261,3,261,4466,8,261,3,261,4468,8,261,1,262,1,262,3,262,4472,8,262,
1,262,1,262,1,262,1,262,1,262,3,262,4479,8,262,1,263,1,263,1,263,3,263,4484,
8,263,1,264,1,264,1,264,1,265,1,265,1,265,1,265,1,265,3,265,4494,8,265,1,
265,1,265,3,265,4498,8,265,1,265,1,265,1,265,3,265,4503,8,265,1,265,3,265,
4506,8,265,1,266,1,266,1,266,1,266,3,266,4512,8,266,1,266,1,266,1,267,1,
267,1,267,1,267,3,267,4520,8,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
3,267,4529,8,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,4537,8,267,1,
267,1,267,1,267,1,267,3,267,4543,8,267,1,267,1,267,1,267,1,267,3,267,4549,
8,267,1,268,1,268,1,268,1,269,1,269,1,269,1,269,1,269,1,269,1,269,3,269,
4561,8,269,3,269,4563,8,269,1,270,1,270,1,270,1,270,1,270,1,270,3,270,4571,
8,270,1,271,1,271,1,271,1,271,1,271,3,271,4578,8,271,1,271,1,271,3,271,4582,
8,271,1,272,1,272,1,272,1,272,3,272,4588,8,272,1,272,1,272,1,272,1,272,1,
272,1,272,1,273,1,273,1,273,1,273,3,273,4600,8,273,1,273,1,273,1,274,1,274,
1,274,1,275,1,275,1,275,1,275,3,275,4611,8,275,1,275,1,275,1,275,1,275,1,
275,1,275,1,275,1,275,3,275,4621,8,275,1,276,1,276,1,276,1,276,3,276,4627,
8,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,3,276,4637,8,276,1,
277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,3,277,4650,
8,277,1,277,1,277,1,277,3,277,4655,8,277,1,278,1,278,1,278,1,278,1,278,1,
278,3,278,4663,8,278,1,278,1,278,1,278,1,279,3,279,4669,8,279,1,279,1,279,
1,279,3,279,4674,8,279,1,280,1,280,1,280,1,280,1,280,1,280,1,280,5,280,4683,
8,280,10,280,12,280,4686,9,280,1,280,1,280,1,280,1,280,1,280,3,280,4693,
8,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,3,280,4704,8,
280,1,280,1,280,1,280,1,280,3,280,4710,8,280,1,280,1,280,1,280,1,280,1,280,
1,280,1,280,3,280,4719,8,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,
280,1,280,3,280,4730,8,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,
1,280,1,280,3,280,4742,8,280,1,280,1,280,1,280,1,280,1,280,1,280,1,280,1,
280,1,280,1,280,1,280,3,280,4755,8,280,1,280,1,280,1,280,1,280,1,280,3,280,
4762,8,280,3,280,4764,8,280,1,281,1,281,1,281,1,281,1,281,1,281,1,281,5,
281,4773,8,281,10,281,12,281,4776,9,281,1,281,1,281,1,281,1,281,1,281,1,
281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,3,281,4792,8,281,1,281,
1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
1,281,1,281,1,281,1,281,1,281,1,281,3,281,4825,8,281,1,281,1,281,1,281,3,
281,4830,8,281,1,282,1,282,1,282,1,282,1,282,1,282,3,282,4838,8,282,1,282,
1,282,1,282,1,282,1,282,1,282,3,282,4846,8,282,1,283,1,283,1,283,3,283,4851,
8,283,1,283,1,283,1,283,1,283,1,283,1,283,3,283,4859,8,283,3,283,4861,8,
283,1,284,1,284,1,284,3,284,4866,8,284,1,285,1,285,1,285,5,285,4871,8,285,
10,285,12,285,4874,9,285,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,
1,286,1,286,5,286,4886,8,286,10,286,12,286,4889,9,286,1,287,1,287,1,287,
5,287,4894,8,287,10,287,12,287,4897,9,287,1,288,1,288,3,288,4901,8,288,1,
288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,
288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,3,288,4924,8,288,1,288,
1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,
1,288,1,288,3,288,4941,8,288,1,289,1,289,1,289,1,289,1,289,1,289,1,289,1,
289,1,289,1,289,1,289,1,289,1,289,1,289,3,289,4957,8,289,1,290,1,290,1,290,
1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,
1,290,1,290,1,290,3,290,4977,8,290,1,291,1,291,1,291,1,291,1,291,1,291,1,
292,1,292,1,292,1,292,1,292,1,292,1,292,1,293,1,293,1,293,1,293,1,293,1,
294,1,294,1,294,1,294,1,295,1,295,1,295,1,295,1,295,1,295,1,296,1,296,1,
296,1,296,1,296,1,296,1,297,1,297,1,297,1,297,1,297,1,298,1,298,1,298,1,
298,1,299,1,299,1,299,1,299,1,299,1,299,1,300,1,300,1,300,1,300,1,300,1,
300,1,300,3,300,5035,8,300,1,300,1,300,3,300,5039,8,300,1,300,1,300,1,300,
1,300,1,300,1,300,1,300,1,300,1,300,5,300,5050,8,300,10,300,12,300,5053,
9,300,1,300,1,300,3,300,5057,8,300,1,300,1,300,3,300,5061,8,300,1,301,1,
301,1,301,1,301,1,301,1,301,1,301,3,301,5070,8,301,1,302,1,302,1,302,1,302,
3,302,5076,8,302,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,
303,1,303,3,303,5089,8,303,1,303,1,303,1,303,1,303,3,303,5095,8,303,3,303,
5097,8,303,1,303,1,303,1,303,1,303,1,303,5,303,5104,8,303,10,303,12,303,
5107,9,303,1,303,1,303,3,303,5111,8,303,1,303,1,303,3,303,5115,8,303,1,304,
1,304,1,304,1,304,1,304,1,304,1,304,3,304,5124,8,304,1,305,1,305,1,305,1,
305,3,305,5130,8,305,1,305,1,305,3,305,5134,8,305,1,306,1,306,1,306,1,306,
1,306,1,306,3,306,5142,8,306,1,307,1,307,1,307,3,307,5147,8,307,1,307,1,
307,1,307,1,307,1,307,3,307,5154,8,307,1,307,1,307,1,307,1,307,1,307,3,307,
5161,8,307,1,308,1,308,1,308,1,308,1,309,1,309,1,309,1,309,1,310,1,310,1,
310,1,310,1,310,5,310,5176,8,310,10,310,12,310,5179,9,310,1,311,1,311,1,
311,1,312,1,312,1,312,1,313,1,313,1,313,1,313,1,313,1,313,5,313,5193,8,313,
10,313,12,313,5196,9,313,1,314,1,314,1,314,1,314,1,314,1,314,5,314,5204,
8,314,10,314,12,314,5207,9,314,1,315,1,315,1,315,1,315,1,316,1,316,1,316,
1,316,1,316,1,316,1,317,1,317,1,317,1,317,1,317,1,317,3,317,5225,8,317,1,
317,1,317,1,317,3,317,5230,8,317,1,317,1,317,3,317,5234,8,317,1,318,1,318,
1,318,1,318,1,319,1,319,1,319,1,319,1,319,1,320,1,320,1,320,1,320,1,321,
1,321,1,321,1,321,1,321,5,321,5254,8,321,10,321,12,321,5257,9,321,1,321,
1,321,1,321,1,321,3,321,5263,8,321,1,321,3,321,5266,8,321,1,322,1,322,1,
322,1,322,3,322,5272,8,322,1,322,1,322,1,322,1,322,1,322,3,322,5279,8,322,
1,322,3,322,5282,8,322,1,322,3,322,5285,8,322,1,323,1,323,1,323,1,323,3,
323,5291,8,323,1,323,1,323,1,323,1,323,3,323,5297,8,323,1,324,1,324,1,324,
1,324,3,324,5303,8,324,1,324,1,324,1,324,1,324,3,324,5309,8,324,1,324,1,
324,1,324,1,324,1,324,5,324,5316,8,324,10,324,12,324,5319,9,324,3,324,5321,
8,324,1,324,3,324,5324,8,324,1,325,1,325,1,325,1,325,1,325,3,325,5331,8,
325,1,326,1,326,1,326,1,326,1,327,1,327,1,327,1,327,1,327,3,327,5342,8,327,
1,327,1,327,1,328,1,328,1,328,1,328,1,328,3,328,5351,8,328,1,328,1,328,1,
329,1,329,1,329,1,329,3,329,5359,8,329,1,330,1,330,1,330,1,330,1,330,1,330,
3,330,5367,8,330,1,330,1,330,1,330,1,331,1,331,1,331,1,331,3,331,5376,8,
331,1,331,1,331,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,3,
332,5389,8,332,1,333,1,333,1,333,1,333,1,333,1,334,1,334,1,334,1,334,1,335,
1,335,1,335,1,335,1,335,1,335,1,335,1,335,3,335,5408,8,335,1,335,1,335,1,
335,1,335,1,335,5,335,5415,8,335,10,335,12,335,5418,9,335,3,335,5420,8,335,
1,335,3,335,5423,8,335,1,336,1,336,1,336,1,336,5,336,5429,8,336,10,336,12,
336,5432,9,336,1,337,1,337,1,337,1,337,1,337,3,337,5439,8,337,1,337,1,337,
3,337,5443,8,337,1,337,1,337,1,337,3,337,5448,8,337,1,337,1,337,1,337,3,
337,5453,8,337,3,337,5455,8,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,
1,337,3,337,5465,8,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,
337,1,337,3,337,5477,8,337,1,337,1,337,1,337,1,337,1,337,3,337,5484,8,337,
1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,3,337,5495,8,337,1,
337,1,337,3,337,5499,8,337,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
1,338,1,338,3,338,5511,8,338,1,339,1,339,1,339,1,339,3,339,5517,8,339,1,
340,1,340,1,340,1,340,1,341,1,341,1,341,1,341,1,341,1,341,1,341,3,341,5530,
8,341,1,342,1,342,1,342,1,342,3,342,5536,8,342,1,343,1,343,1,343,1,343,3,
343,5542,8,343,1,343,1,343,1,344,1,344,1,344,5,344,5549,8,344,10,344,12,
344,5552,9,344,1,345,1,345,1,345,1,345,1,345,1,345,1,346,1,346,1,346,1,346,
1,346,5,346,5565,8,346,10,346,12,346,5568,9,346,1,346,1,346,3,346,5572,8,
346,1,347,1,347,3,347,5576,8,347,1,347,3,347,5579,8,347,1,347,1,347,1,348,
1,348,3,348,5585,8,348,1,348,3,348,5588,8,348,1,348,3,348,5591,8,348,1,349,
1,349,1,349,1,349,1,349,1,349,1,350,1,350,1,350,1,350,1,351,1,351,1,351,
1,351,1,351,1,351,1,352,1,352,1,352,1,352,1,353,1,353,1,353,1,353,1,353,
3,353,5618,8,353,1,353,1,353,3,353,5622,8,353,1,353,3,353,5625,8,353,1,354,
1,354,1,354,1,354,3,354,5631,8,354,1,354,1,354,1,355,1,355,1,355,1,355,3,
355,5639,8,355,1,355,1,355,1,356,1,356,1,356,1,356,3,356,5647,8,356,1,356,
1,356,1,357,1,357,3,357,5653,8,357,1,357,1,357,3,357,5657,8,357,1,357,1,
357,1,358,1,358,1,358,1,358,3,358,5665,8,358,1,359,1,359,1,359,1,359,1,359,
1,359,1,360,1,360,1,360,1,360,1,360,1,360,3,360,5679,8,360,1,360,1,360,1,
360,1,360,1,360,3,360,5686,8,360,1,361,1,361,1,361,1,361,1,361,1,362,1,362,
1,362,1,362,1,362,3,362,5698,8,362,1,362,1,362,3,362,5702,8,362,3,362,5704,
8,362,1,363,1,363,3,363,5708,8,363,1,363,1,363,3,363,5712,8,363,1,363,3,
363,5715,8,363,1,363,3,363,5718,8,363,1,363,3,363,5721,8,363,1,364,1,364,
3,364,5725,8,364,1,364,1,364,3,364,5729,8,364,1,364,3,364,5732,8,364,1,364,
3,364,5735,8,364,1,364,3,364,5738,8,364,1,365,1,365,1,365,1,365,1,366,1,
366,1,367,4,367,5747,8,367,11,367,12,367,5748,1,368,1,368,3,368,5753,8,368,
1,368,1,368,3,368,5757,8,368,1,369,3,369,5760,8,369,1,369,1,369,1,370,1,
370,1,370,1,370,5,370,5768,8,370,10,370,12,370,5771,9,370,1,371,1,371,1,
371,1,371,1,371,1,371,5,371,5779,8,371,10,371,12,371,5782,9,371,3,371,5784,
8,371,1,371,3,371,5787,8,371,1,372,3,372,5790,8,372,1,372,1,372,1,372,1,
372,1,372,1,372,1,372,3,372,5799,8,372,1,372,1,372,1,372,1,372,1,372,1,372,
1,372,3,372,5808,8,372,1,372,1,372,1,372,1,372,3,372,5814,8,372,1,372,1,
372,1,372,1,372,1,372,3,372,5821,8,372,1,373,1,373,1,374,1,374,1,374,3,374,
5828,8,374,1,374,1,374,1,374,3,374,5833,8,374,1,374,1,374,1,374,1,374,3,
374,5839,8,374,1,374,5,374,5842,8,374,10,374,12,374,5845,9,374,1,375,1,375,
1,375,1,375,1,376,1,376,1,376,1,376,1,377,1,377,3,377,5857,8,377,1,377,1,
377,3,377,5861,8,377,1,378,1,378,1,378,3,378,5866,8,378,1,379,1,379,1,379,
1,379,3,379,5872,8,379,1,379,1,379,1,379,1,379,1,379,3,379,5879,8,379,1,
380,1,380,3,380,5883,8,380,1,380,1,380,1,380,5,380,5888,8,380,10,380,12,
380,5891,9,380,1,380,1,380,1,380,3,380,5896,8,380,1,380,1,380,1,380,3,380,
5901,8,380,1,380,1,380,3,380,5905,8,380,1,380,1,380,1,380,1,380,1,380,3,
380,5912,8,380,1,381,1,381,1,381,3,381,5917,8,381,3,381,5919,8,381,1,381,
1,381,3,381,5923,8,381,1,382,1,382,1,382,3,382,5928,8,382,1,382,1,382,1,
382,1,382,3,382,5934,8,382,1,382,1,382,1,382,1,382,1,382,1,382,1,382,5,382,
5943,8,382,10,382,12,382,5946,9,382,1,382,1,382,1,382,3,382,5951,8,382,1,
383,1,383,3,383,5955,8,383,1,383,1,383,5,383,5959,8,383,10,383,12,383,5962,
9,383,1,383,1,383,1,384,1,384,3,384,5968,8,384,1,384,1,384,1,384,1,384,1,
384,1,385,1,385,1,386,1,386,3,386,5979,8,386,1,386,1,386,3,386,5983,8,386,
3,386,5985,8,386,1,386,1,386,1,386,1,386,1,386,3,386,5992,8,386,1,387,1,
387,1,387,3,387,5997,8,387,1,387,5,387,6000,8,387,10,387,12,387,6003,9,387,
1,388,1,388,5,388,6007,8,388,10,388,12,388,6010,9,388,1,388,1,388,1,388,
5,388,6015,8,388,10,388,12,388,6018,9,388,1,388,1,388,3,388,6022,8,388,1,
389,1,389,3,389,6026,8,389,1,389,3,389,6029,8,389,1,389,3,389,6032,8,389,
1,389,3,389,6035,8,389,1,389,3,389,6038,8,389,1,389,3,389,6041,8,389,1,389,
3,389,6044,8,389,1,389,3,389,6047,8,389,1,389,1,389,3,389,6051,8,389,1,389,
1,389,1,389,1,389,1,389,5,389,6058,8,389,10,389,12,389,6061,9,389,1,389,
1,389,3,389,6065,8,389,1,389,1,389,3,389,6069,8,389,3,389,6071,8,389,1,389,
1,389,3,389,6075,8,389,1,389,1,389,3,389,6079,8,389,3,389,6081,8,389,1,389,
1,389,1,389,1,389,1,389,3,389,6088,8,389,1,389,1,389,3,389,6092,8,389,3,
389,6094,8,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,3,389,6104,
8,389,1,389,1,389,3,389,6108,8,389,3,389,6110,8,389,1,389,1,389,1,389,3,
389,6115,8,389,1,389,1,389,3,389,6119,8,389,3,389,6121,8,389,1,389,1,389,
1,389,1,389,3,389,6127,8,389,1,390,1,390,1,390,1,390,1,390,5,390,6134,8,
390,10,390,12,390,6137,9,390,1,390,1,390,1,390,3,390,6142,8,390,1,390,1,
390,1,390,1,390,1,390,5,390,6149,8,390,10,390,12,390,6152,9,390,1,390,1,
390,1,390,1,391,1,391,3,391,6159,8,391,1,391,1,391,3,391,6163,8,391,3,391,
6165,8,391,1,392,1,392,3,392,6169,8,392,1,392,3,392,6172,8,392,1,392,1,392,
3,392,6176,8,392,3,392,6178,8,392,1,393,1,393,3,393,6182,8,393,1,394,1,394,
3,394,6186,8,394,1,395,1,395,1,395,5,395,6191,8,395,10,395,12,395,6194,9,
395,1,396,1,396,1,396,1,396,1,397,1,397,3,397,6202,8,397,1,397,3,397,6205,
8,397,1,397,1,397,3,397,6209,8,397,1,397,1,397,3,397,6213,8,397,1,397,3,
397,6216,8,397,1,397,1,397,1,397,3,397,6221,8,397,1,398,1,398,1,398,1,398,
1,398,1,398,3,398,6229,8,398,1,399,1,399,1,399,1,399,1,399,1,399,1,399,1,
399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,1,
399,1,399,1,399,1,399,1,399,1,399,1,399,1,399,3,399,6258,8,399,1,400,1,400,
1,400,1,400,5,400,6264,8,400,10,400,12,400,6267,9,400,1,400,1,400,1,400,
1,400,1,400,1,400,1,400,1,400,1,400,3,400,6278,8,400,1,401,1,401,1,401,1,
401,1,402,1,402,1,402,1,402,1,402,1,402,1,402,5,402,6291,8,402,10,402,12,
402,6294,9,402,1,402,1,402,3,402,6298,8,402,1,403,1,403,1,403,1,403,5,403,
6304,8,403,10,403,12,403,6307,9,403,1,403,1,403,1,404,3,404,6312,8,404,1,
404,1,404,1,404,1,404,1,404,5,404,6319,8,404,10,404,12,404,6322,9,404,1,
404,1,404,1,404,3,404,6327,8,404,1,404,1,404,1,404,3,404,6332,8,404,1,405,
1,405,1,405,1,405,1,405,5,405,6339,8,405,10,405,12,405,6342,9,405,1,405,
1,405,1,406,1,406,1,406,1,406,1,406,5,406,6351,8,406,10,406,12,406,6354,
9,406,1,406,1,406,1,407,1,407,1,407,1,407,1,407,1,408,1,408,3,408,6365,8,
408,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,5,409,6375,8,409,10,
409,12,409,6378,9,409,3,409,6380,8,409,1,410,1,410,1,410,1,410,1,411,1,411,
1,411,1,411,1,411,5,411,6391,8,411,10,411,12,411,6394,9,411,1,411,1,411,
1,412,1,412,1,412,1,412,5,412,6402,8,412,10,412,12,412,6405,9,412,1,412,
1,412,1,413,1,413,3,413,6411,8,413,1,414,1,414,1,414,5,414,6416,8,414,10,
414,12,414,6419,9,414,1,415,1,415,1,415,1,415,1,416,1,416,1,416,1,417,1,
417,3,417,6430,8,417,1,417,1,417,1,417,3,417,6435,8,417,1,417,1,417,1,417,
1,417,1,417,1,417,5,417,6443,8,417,10,417,12,417,6446,9,417,1,418,1,418,
1,418,5,418,6451,8,418,10,418,12,418,6454,9,418,1,419,1,419,1,419,1,419,
1,419,1,419,3,419,6462,8,419,1,419,1,419,1,419,1,419,1,419,1,419,1,419,1,
419,1,419,1,419,1,419,5,419,6475,8,419,10,419,12,419,6478,9,419,1,420,1,
420,3,420,6482,8,420,1,420,3,420,6485,8,420,1,421,1,421,1,421,1,421,4,421,
6491,8,421,11,421,12,421,6492,1,421,1,421,3,421,6497,8,421,1,421,1,421,1,
421,1,421,1,421,1,422,3,422,6505,8,422,1,422,1,422,1,422,1,422,1,422,1,422,
3,422,6513,8,422,1,422,1,422,1,422,1,422,1,422,1,422,3,422,6521,8,422,1,
422,1,422,1,422,1,422,1,422,1,422,3,422,6529,8,422,1,422,1,422,3,422,6533,
8,422,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,
1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,1,423,
1,423,1,423,1,423,1,423,5,423,6562,8,423,10,423,12,423,6565,9,423,1,424,
1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,
1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,
1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,
1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,4,424,6614,8,
424,11,424,12,424,6615,1,424,1,424,3,424,6620,8,424,1,424,1,424,1,424,1,
424,4,424,6626,8,424,11,424,12,424,6627,1,424,1,424,3,424,6632,8,424,1,424,
1,424,1,424,3,424,6637,8,424,1,424,1,424,3,424,6641,8,424,1,424,1,424,1,
424,1,424,3,424,6647,8,424,1,424,1,424,1,424,1,424,1,424,3,424,6654,8,424,
1,424,1,424,1,424,3,424,6659,8,424,1,424,1,424,1,424,1,424,1,424,1,424,1,
424,3,424,6668,8,424,1,424,1,424,3,424,6672,8,424,1,424,1,424,1,424,1,424,
1,424,3,424,6679,8,424,1,424,1,424,1,424,1,424,1,424,1,424,3,424,6687,8,
424,1,424,1,424,1,424,1,424,3,424,6693,8,424,1,424,1,424,1,424,1,424,1,424,
1,424,1,424,1,424,3,424,6703,8,424,1,424,1,424,3,424,6707,8,424,1,424,1,
424,1,424,1,424,5,424,6713,8,424,10,424,12,424,6716,9,424,1,425,1,425,1,
425,1,425,1,425,1,425,1,425,1,425,1,425,1,425,3,425,6728,8,425,1,426,1,426,
1,426,1,426,1,426,1,426,1,426,1,426,1,426,1,426,1,426,1,426,5,426,6742,8,
426,10,426,12,426,6745,9,426,3,426,6747,8,426,1,426,1,426,1,426,1,426,1,
426,1,426,5,426,6755,8,426,10,426,12,426,6758,9,426,3,426,6760,8,426,1,426,
1,426,1,426,1,426,1,426,1,426,3,426,6768,8,426,1,426,1,426,1,426,1,426,1,
426,1,426,1,426,1,426,5,426,6778,8,426,10,426,12,426,6781,9,426,3,426,6783,
8,426,1,426,1,426,1,426,1,426,1,426,1,426,5,426,6791,8,426,10,426,12,426,
6794,9,426,3,426,6796,8,426,1,426,1,426,3,426,6800,8,426,3,426,6802,8,426,
1,427,1,427,1,427,3,427,6807,8,427,1,427,1,427,1,427,1,427,1,427,1,427,3,
427,6815,8,427,1,427,1,427,1,427,1,427,1,427,3,427,6822,8,427,3,427,6824,
8,427,1,427,1,427,1,427,5,427,6829,8,427,10,427,12,427,6832,9,427,3,427,
6834,8,427,1,427,1,427,1,427,1,427,3,427,6840,8,427,1,427,1,427,1,427,1,
427,1,427,1,427,3,427,6848,8,427,1,427,1,427,1,427,1,427,1,427,1,427,3,427,
6856,8,427,1,427,1,427,1,427,1,427,1,427,1,427,3,427,6864,8,427,1,427,1,
427,1,427,1,427,1,427,1,427,5,427,6872,8,427,10,427,12,427,6875,9,427,3,
427,6877,8,427,1,427,1,427,1,427,1,427,1,427,1,427,1,427,1,427,1,427,1,427,
5,427,6889,8,427,10,427,12,427,6892,9,427,3,427,6894,8,427,1,427,1,427,1,
427,1,427,1,427,3,427,6901,8,427,1,427,1,427,1,427,5,427,6906,8,427,10,427,
12,427,6909,9,427,1,427,1,427,1,427,1,427,1,427,5,427,6916,8,427,10,427,
12,427,6919,9,427,3,427,6921,8,427,1,427,1,427,3,427,6925,8,427,1,427,1,
427,3,427,6929,8,427,1,428,1,428,1,428,1,429,1,429,1,429,1,429,1,429,3,429,
6939,8,429,1,429,1,429,1,430,1,430,1,431,1,431,1,431,1,431,1,431,1,431,1,
431,1,431,1,431,1,431,1,431,1,431,1,431,1,431,1,431,3,431,6960,8,431,1,431,
1,431,1,431,3,431,6965,8,431,3,431,6967,8,431,1,432,1,432,1,432,3,432,6972,
8,432,1,432,1,432,1,432,3,432,6977,8,432,1,432,1,432,1,432,3,432,6982,8,
432,1,432,1,432,1,432,3,432,6987,8,432,1,432,1,432,1,432,3,432,6992,8,432,
3,432,6994,8,432,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,
433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,5,433,7016,
8,433,10,433,12,433,7019,9,433,3,433,7021,8,433,1,433,1,433,1,433,1,433,
1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,
1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,
1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,
1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,5,433,7072,8,433,10,
433,12,433,7075,9,433,3,433,7077,8,433,1,433,1,433,1,433,1,433,1,433,1,433,
1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,
1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,
1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,
1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,1,433,
1,433,1,433,1,433,1,433,3,433,7137,8,433,1,434,1,434,1,434,1,434,1,434,1,
434,1,434,1,434,1,434,1,434,1,434,1,434,1,434,1,434,1,434,1,434,1,434,1,
434,3,434,7157,8,434,1,434,1,434,1,434,1,434,1,434,3,434,7164,8,434,1,434,
1,434,5,434,7168,8,434,10,434,12,434,7171,9,434,3,434,7173,8,434,1,434,1,
434,3,434,7177,8,434,1,434,1,434,1,434,1,434,3,434,7183,8,434,1,434,1,434,
5,434,7187,8,434,10,434,12,434,7190,9,434,3,434,7192,8,434,1,434,1,434,3,
434,7196,8,434,1,434,1,434,1,434,1,434,3,434,7202,8,434,1,434,1,434,5,434,
7206,8,434,10,434,12,434,7209,9,434,3,434,7211,8,434,1,434,1,434,3,434,7215,
8,434,1,434,1,434,1,434,1,434,3,434,7221,8,434,1,434,1,434,5,434,7225,8,
434,10,434,12,434,7228,9,434,3,434,7230,8,434,1,434,1,434,3,434,7234,8,434,
3,434,7236,8,434,1,435,1,435,1,435,1,435,1,435,1,436,1,436,1,436,3,436,7246,
8,436,1,436,1,436,1,436,1,436,1,436,5,436,7253,8,436,10,436,12,436,7256,
9,436,3,436,7258,8,436,1,436,1,436,1,436,1,436,1,436,5,436,7265,8,436,10,
436,12,436,7268,9,436,3,436,7270,8,436,1,436,3,436,7273,8,436,1,436,1,436,
1,437,1,437,1,437,1,438,1,438,1,438,1,438,1,438,1,438,1,438,1,438,1,438,
1,438,1,438,1,438,1,438,1,438,1,438,1,438,3,438,7296,8,438,1,439,1,439,1,
439,1,439,1,439,1,439,1,439,1,439,1,439,3,439,7307,8,439,1,440,1,440,1,440,
1,440,1,440,1,440,1,440,3,440,7316,8,440,3,440,7318,8,440,1,440,1,440,1,
440,1,440,3,440,7324,8,440,1,440,1,440,1,440,1,440,1,440,1,440,1,440,1,440,
3,440,7334,8,440,3,440,7336,8,440,1,440,1,440,1,440,1,440,1,440,1,440,3,
440,7344,8,440,3,440,7346,8,440,3,440,7348,8,440,1,441,1,441,3,441,7352,
8,441,1,442,1,442,3,442,7356,8,442,1,442,1,442,3,442,7360,8,442,1,443,1,
443,3,443,7364,8,443,1,444,1,444,1,444,3,444,7369,8,444,1,445,1,445,3,445,
7373,8,445,1,446,1,446,1,446,1,446,1,446,1,446,1,446,1,446,5,446,7383,8,
446,10,446,12,446,7386,9,446,3,446,7388,8,446,1,446,1,446,1,446,1,446,1,
446,1,446,1,446,1,446,1,446,1,446,5,446,7400,8,446,10,446,12,446,7403,9,
446,3,446,7405,8,446,1,446,1,446,1,446,1,446,1,446,3,446,7412,8,446,1,446,
1,446,1,446,1,446,1,446,5,446,7419,8,446,10,446,12,446,7422,9,446,3,446,
7424,8,446,1,446,1,446,1,446,1,446,1,446,3,446,7431,8,446,1,446,1,446,1,
446,1,446,1,446,1,446,1,446,1,446,5,446,7441,8,446,10,446,12,446,7444,9,
446,3,446,7446,8,446,1,446,1,446,1,446,1,446,1,446,1,446,1,446,1,446,1,446,
1,446,5,446,7458,8,446,10,446,12,446,7461,9,446,3,446,7463,8,446,1,447,1,
447,3,447,7467,8,447,1,448,1,448,1,448,1,448,3,448,7473,8,448,1,448,1,448,
1,448,1,448,1,448,3,448,7480,8,448,1,449,1,449,1,449,1,449,3,449,7486,8,
449,1,449,1,449,1,449,1,449,1,449,3,449,7493,8,449,1,450,1,450,1,450,1,450,
5,450,7499,8,450,10,450,12,450,7502,9,450,1,450,1,450,1,451,1,451,1,451,
1,451,5,451,7510,8,451,10,451,12,451,7513,9,451,1,451,1,451,1,452,1,452,
3,452,7519,8,452,1,453,1,453,3,453,7523,8,453,1,454,1,454,1,454,1,454,5,
454,7529,8,454,10,454,12,454,7532,9,454,1,454,1,454,1,455,1,455,1,455,1,
455,5,455,7540,8,455,10,455,12,455,7543,9,455,1,455,1,455,1,456,1,456,3,
456,7549,8,456,1,457,1,457,1,457,1,457,3,457,7555,8,457,1,457,1,457,1,457,
1,457,3,457,7561,8,457,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,
458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,
458,1,458,1,458,1,458,1,458,1,458,3,458,7589,8,458,1,459,1,459,1,459,1,459,
1,459,1,459,1,459,1,459,1,459,1,460,1,460,1,460,1,460,3,460,7604,8,460,1,
460,1,460,1,460,1,460,1,460,1,460,3,460,7612,8,460,1,461,1,461,1,461,1,461,
5,461,7618,8,461,10,461,12,461,7621,9,461,1,461,1,461,1,462,1,462,1,462,
1,462,1,463,1,463,3,463,7631,8,463,1,464,1,464,1,464,1,464,1,464,1,464,3,
464,7639,8,464,1,464,1,464,1,464,1,464,3,464,7645,8,464,1,465,1,465,1,465,
1,465,1,465,1,465,3,465,7653,8,465,1,465,1,465,1,465,1,465,1,465,1,465,1,
465,1,465,1,465,3,465,7664,8,465,3,465,7666,8,465,1,466,1,466,3,466,7670,
8,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,3,466,7679,8,466,1,466,1,
466,1,466,1,466,1,466,1,466,1,466,3,466,7688,8,466,1,467,1,467,1,468,1,468,
1,468,1,468,1,468,5,468,7697,8,468,10,468,12,468,7700,9,468,1,468,1,468,
1,469,1,469,1,469,1,470,1,470,1,470,1,470,5,470,7711,8,470,10,470,12,470,
7714,9,470,1,470,1,470,1,471,1,471,1,471,5,471,7721,8,471,10,471,12,471,
7724,9,471,1,472,1,472,1,472,1,472,1,473,1,473,5,473,7732,8,473,10,473,12,
473,7735,9,473,1,474,1,474,1,474,1,474,1,475,1,475,1,476,1,476,1,476,1,477,
1,477,1,477,1,477,3,477,7750,8,477,1,477,3,477,7753,8,477,1,478,1,478,1,
478,1,478,3,478,7759,8,478,1,479,1,479,1,480,1,480,1,481,1,481,1,482,1,482,
1,483,1,483,1,483,1,483,1,484,1,484,1,484,1,484,1,485,1,485,1,486,1,486,
1,487,1,487,1,488,1,488,1,488,1,488,1,488,3,488,7788,8,488,1,489,1,489,1,
489,1,489,1,489,1,490,1,490,1,490,1,490,1,490,1,490,1,490,1,491,1,491,3,
491,7804,8,491,1,491,1,491,1,492,1,492,1,492,5,492,7811,8,492,10,492,12,
492,7814,9,492,1,493,1,493,1,493,1,493,1,493,1,494,1,494,1,494,1,494,1,495,
1,495,1,495,3,495,7828,8,495,1,495,1,495,3,495,7832,8,495,1,495,1,495,3,
495,7836,8,495,1,495,1,495,3,495,7840,8,495,1,495,1,495,3,495,7844,8,495,
1,495,1,495,3,495,7848,8,495,1,495,1,495,3,495,7852,8,495,1,495,1,495,3,
495,7856,8,495,1,495,1,495,3,495,7860,8,495,1,495,1,495,3,495,7864,8,495,
1,495,1,495,1,495,1,495,1,495,1,495,1,495,3,495,7873,8,495,1,495,1,495,3,
495,7877,8,495,1,495,1,495,1,495,1,495,1,495,1,495,1,495,1,495,3,495,7887,
8,495,1,495,1,495,3,495,7891,8,495,3,495,7893,8,495,1,496,1,496,1,496,1,
496,1,496,3,496,7900,8,496,1,496,3,496,7903,8,496,1,497,1,497,1,497,1,497,
5,497,7909,8,497,10,497,12,497,7912,9,497,1,498,1,498,1,499,3,499,7917,8,
499,1,499,1,499,1,499,1,499,1,499,1,500,1,500,1,500,1,500,3,500,7928,8,500,
1,501,1,501,1,501,3,501,7933,8,501,1,502,1,502,1,502,1,502,5,502,7939,8,
502,10,502,12,502,7942,9,502,1,502,1,502,1,503,1,503,1,503,1,503,5,503,7950,
8,503,10,503,12,503,7953,9,503,1,503,1,503,1,504,1,504,3,504,7959,8,504,
1,505,1,505,1,505,5,505,7964,8,505,10,505,12,505,7967,9,505,1,506,1,506,
1,506,3,506,7972,8,506,1,507,1,507,1,507,1,507,1,507,1,507,1,507,1,507,1,
507,1,507,1,507,3,507,7985,8,507,1,508,1,508,1,508,1,508,1,509,1,509,1,509,
5,509,7994,8,509,10,509,12,509,7997,9,509,1,510,1,510,1,510,3,510,8002,8,
510,1,511,1,511,1,511,1,4010,5,748,834,838,846,848,512,0,2,4,6,8,10,12,14,
16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,
362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,
398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,
434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,
470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,
506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,
542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,
578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,
614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,
650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,
686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,
722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,
758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,
794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,
830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,
866,868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900,
902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,
938,940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,
974,976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,
1008,1010,1012,1014,1016,1018,1020,1022,0,62,1,1,528,528,2,0,168,168,198,
198,2,0,101,101,382,382,2,0,147,147,424,424,4,0,17,17,131,131,318,318,447,
447,4,0,44,44,216,216,271,271,462,462,2,0,75,75,153,153,3,0,74,74,289,289,
371,371,1,0,122,123,2,0,201,202,223,224,2,0,215,215,275,275,2,0,13,13,266,
266,2,0,29,29,413,413,2,0,163,163,281,281,2,0,198,198,436,436,2,0,38,38,
92,92,3,0,106,106,190,190,261,261,2,0,214,214,217,217,2,0,171,171,379,379,
2,0,220,220,404,404,2,0,54,54,174,174,2,0,17,17,418,418,2,0,172,172,323,
323,1,0,420,421,2,0,139,139,471,471,1,0,454,455,2,0,27,27,55,55,1,0,60,61,
2,0,169,169,514,514,3,0,415,415,430,430,464,464,3,0,142,142,262,262,446,
446,2,0,28,28,122,122,2,0,157,157,229,229,2,0,18,18,125,125,1,0,298,299,
2,0,107,107,129,129,2,0,21,21,502,502,2,0,292,292,501,501,3,0,236,236,345,
345,367,367,3,0,264,264,498,500,504,504,1,0,496,497,2,0,496,497,508,508,
1,0,103,104,2,0,162,162,315,315,1,0,172,173,1,0,418,419,1,0,465,466,2,0,
122,123,145,145,5,0,20,20,86,86,246,246,381,381,463,463,5,0,18,18,245,245,
341,341,429,429,458,458,2,0,117,117,195,195,2,0,12,12,199,199,4,0,174,174,
240,240,390,390,463,463,1,0,517,518,1,0,519,520,1,0,488,494,2,0,152,152,
440,440,4,0,105,105,189,189,260,260,384,384,9,0,105,105,189,189,257,258,
260,260,267,267,332,332,384,384,472,472,479,479,2,0,62,62,160,160,2,0,108,
112,279,280,94,0,11,12,14,17,22,23,25,26,29,40,43,43,45,49,51,54,56,57,59,
63,66,66,68,71,73,73,75,79,81,84,86,87,91,93,99,100,103,107,113,113,118,
120,124,124,126,127,131,132,134,141,143,143,146,151,153,154,156,157,160,
163,166,167,169,170,173,174,176,176,181,182,184,185,187,192,194,194,197,
197,199,200,202,202,205,205,209,211,213,213,217,217,219,220,226,226,229,
229,234,235,238,238,240,240,243,254,256,256,259,263,265,275,278,284,286,
288,290,291,299,304,306,316,319,322,324,337,339,339,341,344,347,347,349,
350,352,363,365,365,368,373,376,381,384,385,387,390,392,392,394,395,398,
408,410,413,415,417,419,424,426,426,428,432,434,435,437,439,441,445,448,
449,452,452,454,455,457,457,459,459,461,472,475,475,477,484,486,487,495,
495,529,529,9023,0,1025,1,0,0,0,2,1035,1,0,0,0,4,1037,1,0,0,0,6,1273,1,0,
0,0,8,1275,1,0,0,0,10,1278,1,0,0,0,12,1281,1,0,0,0,14,1305,1,0,0,0,16,1323,
1,0,0,0,18,1325,1,0,0,0,20,1347,1,0,0,0,22,1362,1,0,0,0,24,1367,1,0,0,0,
26,1373,1,0,0,0,28,1383,1,0,0,0,30,1385,1,0,0,0,32,1443,1,0,0,0,34,1475,
1,0,0,0,36,1477,1,0,0,0,38,1489,1,0,0,0,40,1492,1,0,0,0,42,1504,1,0,0,0,
44,1509,1,0,0,0,46,1524,1,0,0,0,48,1532,1,0,0,0,50,1536,1,0,0,0,52,1543,
1,0,0,0,54,1545,1,0,0,0,56,1549,1,0,0,0,58,1570,1,0,0,0,60,1572,1,0,0,0,
62,1584,1,0,0,0,64,1595,1,0,0,0,66,1599,1,0,0,0,68,1604,1,0,0,0,70,1609,
1,0,0,0,72,1611,1,0,0,0,74,1673,1,0,0,0,76,1686,1,0,0,0,78,1730,1,0,0,0,
80,1732,1,0,0,0,82,1747,1,0,0,0,84,1753,1,0,0,0,86,1756,1,0,0,0,88,1771,
1,0,0,0,90,1784,1,0,0,0,92,1794,1,0,0,0,94,1812,1,0,0,0,96,1825,1,0,0,0,
98,1897,1,0,0,0,100,1899,1,0,0,0,102,1908,1,0,0,0,104,1931,1,0,0,0,106,1940,
1,0,0,0,108,1944,1,0,0,0,110,1976,1,0,0,0,112,1978,1,0,0,0,114,2004,1,0,
0,0,116,2010,1,0,0,0,118,2087,1,0,0,0,120,2089,1,0,0,0,122,2097,1,0,0,0,
124,2101,1,0,0,0,126,2120,1,0,0,0,128,2122,1,0,0,0,130,2128,1,0,0,0,132,
2141,1,0,0,0,134,2194,1,0,0,0,136,2203,1,0,0,0,138,2205,1,0,0,0,140,2218,
1,0,0,0,142,2243,1,0,0,0,144,2245,1,0,0,0,146,2269,1,0,0,0,148,2277,1,0,
0,0,150,2288,1,0,0,0,152,2294,1,0,0,0,154,2302,1,0,0,0,156,2311,1,0,0,0,
158,2324,1,0,0,0,160,2331,1,0,0,0,162,2339,1,0,0,0,164,2347,1,0,0,0,166,
2362,1,0,0,0,168,2373,1,0,0,0,170,2375,1,0,0,0,172,2386,1,0,0,0,174,2393,
1,0,0,0,176,2397,1,0,0,0,178,2408,1,0,0,0,180,2412,1,0,0,0,182,2426,1,0,
0,0,184,2431,1,0,0,0,186,2439,1,0,0,0,188,2445,1,0,0,0,190,2450,1,0,0,0,
192,2467,1,0,0,0,194,2471,1,0,0,0,196,2475,1,0,0,0,198,2482,1,0,0,0,200,
2491,1,0,0,0,202,2505,1,0,0,0,204,2507,1,0,0,0,206,2510,1,0,0,0,208,2514,
1,0,0,0,210,2519,1,0,0,0,212,2563,1,0,0,0,214,2565,1,0,0,0,216,2576,1,0,
0,0,218,2594,1,0,0,0,220,2600,1,0,0,0,222,2604,1,0,0,0,224,2609,1,0,0,0,
226,2620,1,0,0,0,228,2622,1,0,0,0,230,2671,1,0,0,0,232,2673,1,0,0,0,234,
2677,1,0,0,0,236,2681,1,0,0,0,238,2688,1,0,0,0,240,2703,1,0,0,0,242,2721,
1,0,0,0,244,2744,1,0,0,0,246,2746,1,0,0,0,248,2762,1,0,0,0,250,2804,1,0,
0,0,252,2806,1,0,0,0,254,2813,1,0,0,0,256,2816,1,0,0,0,258,2821,1,0,0,0,
260,2835,1,0,0,0,262,2850,1,0,0,0,264,2864,1,0,0,0,266,2879,1,0,0,0,268,
2892,1,0,0,0,270,2896,1,0,0,0,272,2899,1,0,0,0,274,2903,1,0,0,0,276,2906,
1,0,0,0,278,2911,1,0,0,0,280,2925,1,0,0,0,282,2940,1,0,0,0,284,2959,1,0,
0,0,286,2969,1,0,0,0,288,2984,1,0,0,0,290,2990,1,0,0,0,292,3000,1,0,0,0,
294,3006,1,0,0,0,296,3015,1,0,0,0,298,3017,1,0,0,0,300,3026,1,0,0,0,302,
3040,1,0,0,0,304,3068,1,0,0,0,306,3089,1,0,0,0,308,3091,1,0,0,0,310,3099,
1,0,0,0,312,3107,1,0,0,0,314,3114,1,0,0,0,316,3123,1,0,0,0,318,3145,1,0,
0,0,320,3147,1,0,0,0,322,3151,1,0,0,0,324,3154,1,0,0,0,326,3157,1,0,0,0,
328,3159,1,0,0,0,330,3161,1,0,0,0,332,3172,1,0,0,0,334,3208,1,0,0,0,336,
3258,1,0,0,0,338,3260,1,0,0,0,340,3277,1,0,0,0,342,3279,1,0,0,0,344,3286,
1,0,0,0,346,3292,1,0,0,0,348,3335,1,0,0,0,350,3340,1,0,0,0,352,3343,1,0,
0,0,354,3358,1,0,0,0,356,3377,1,0,0,0,358,3406,1,0,0,0,360,3432,1,0,0,0,
362,3442,1,0,0,0,364,3444,1,0,0,0,366,3449,1,0,0,0,368,3454,1,0,0,0,370,
3457,1,0,0,0,372,3474,1,0,0,0,374,3476,1,0,0,0,376,3478,1,0,0,0,378,3489,
1,0,0,0,380,3500,1,0,0,0,382,3511,1,0,0,0,384,3549,1,0,0,0,386,3560,1,0,
0,0,388,3571,1,0,0,0,390,3609,1,0,0,0,392,3652,1,0,0,0,394,3654,1,0,0,0,
396,3658,1,0,0,0,398,3673,1,0,0,0,400,3679,1,0,0,0,402,3737,1,0,0,0,404,
3739,1,0,0,0,406,3743,1,0,0,0,408,3752,1,0,0,0,410,3759,1,0,0,0,412,3766,
1,0,0,0,414,3787,1,0,0,0,416,3789,1,0,0,0,418,3803,1,0,0,0,420,3807,1,0,
0,0,422,3810,1,0,0,0,424,3846,1,0,0,0,426,3903,1,0,0,0,428,3921,1,0,0,0,
430,3932,1,0,0,0,432,3934,1,0,0,0,434,3943,1,0,0,0,436,3949,1,0,0,0,438,
3953,1,0,0,0,440,3956,1,0,0,0,442,3960,1,0,0,0,444,3978,1,0,0,0,446,3992,
1,0,0,0,448,4015,1,0,0,0,450,4019,1,0,0,0,452,4060,1,0,0,0,454,4065,1,0,
0,0,456,4069,1,0,0,0,458,4149,1,0,0,0,460,4151,1,0,0,0,462,4185,1,0,0,0,
464,4187,1,0,0,0,466,4193,1,0,0,0,468,4240,1,0,0,0,470,4242,1,0,0,0,472,
4252,1,0,0,0,474,4264,1,0,0,0,476,4269,1,0,0,0,478,4272,1,0,0,0,480,4275,
1,0,0,0,482,4278,1,0,0,0,484,4292,1,0,0,0,486,4300,1,0,0,0,488,4306,1,0,
0,0,490,4314,1,0,0,0,492,4326,1,0,0,0,494,4329,1,0,0,0,496,4332,1,0,0,0,
498,4335,1,0,0,0,500,4338,1,0,0,0,502,4342,1,0,0,0,504,4345,1,0,0,0,506,
4354,1,0,0,0,508,4358,1,0,0,0,510,4367,1,0,0,0,512,4373,1,0,0,0,514,4380,
1,0,0,0,516,4420,1,0,0,0,518,4422,1,0,0,0,520,4432,1,0,0,0,522,4467,1,0,
0,0,524,4469,1,0,0,0,526,4480,1,0,0,0,528,4485,1,0,0,0,530,4488,1,0,0,0,
532,4507,1,0,0,0,534,4548,1,0,0,0,536,4550,1,0,0,0,538,4562,1,0,0,0,540,
4564,1,0,0,0,542,4572,1,0,0,0,544,4583,1,0,0,0,546,4595,1,0,0,0,548,4603,
1,0,0,0,550,4620,1,0,0,0,552,4636,1,0,0,0,554,4654,1,0,0,0,556,4656,1,0,
0,0,558,4673,1,0,0,0,560,4763,1,0,0,0,562,4829,1,0,0,0,564,4845,1,0,0,0,
566,4860,1,0,0,0,568,4862,1,0,0,0,570,4867,1,0,0,0,572,4875,1,0,0,0,574,
4890,1,0,0,0,576,4940,1,0,0,0,578,4956,1,0,0,0,580,4976,1,0,0,0,582,4978,
1,0,0,0,584,4984,1,0,0,0,586,4991,1,0,0,0,588,4996,1,0,0,0,590,5000,1,0,
0,0,592,5006,1,0,0,0,594,5012,1,0,0,0,596,5017,1,0,0,0,598,5021,1,0,0,0,
600,5027,1,0,0,0,602,5062,1,0,0,0,604,5071,1,0,0,0,606,5077,1,0,0,0,608,
5116,1,0,0,0,610,5125,1,0,0,0,612,5135,1,0,0,0,614,5143,1,0,0,0,616,5162,
1,0,0,0,618,5166,1,0,0,0,620,5170,1,0,0,0,622,5180,1,0,0,0,624,5183,1,0,
0,0,626,5186,1,0,0,0,628,5197,1,0,0,0,630,5208,1,0,0,0,632,5212,1,0,0,0,
634,5218,1,0,0,0,636,5235,1,0,0,0,638,5239,1,0,0,0,640,5244,1,0,0,0,642,
5248,1,0,0,0,644,5267,1,0,0,0,646,5286,1,0,0,0,648,5298,1,0,0,0,650,5325,
1,0,0,0,652,5332,1,0,0,0,654,5336,1,0,0,0,656,5345,1,0,0,0,658,5354,1,0,
0,0,660,5360,1,0,0,0,662,5371,1,0,0,0,664,5388,1,0,0,0,666,5390,1,0,0,0,
668,5395,1,0,0,0,670,5399,1,0,0,0,672,5424,1,0,0,0,674,5498,1,0,0,0,676,
5510,1,0,0,0,678,5516,1,0,0,0,680,5518,1,0,0,0,682,5529,1,0,0,0,684,5535,
1,0,0,0,686,5537,1,0,0,0,688,5545,1,0,0,0,690,5553,1,0,0,0,692,5571,1,0,
0,0,694,5573,1,0,0,0,696,5590,1,0,0,0,698,5592,1,0,0,0,700,5598,1,0,0,0,
702,5602,1,0,0,0,704,5608,1,0,0,0,706,5612,1,0,0,0,708,5626,1,0,0,0,710,
5634,1,0,0,0,712,5642,1,0,0,0,714,5650,1,0,0,0,716,5660,1,0,0,0,718,5666,
1,0,0,0,720,5685,1,0,0,0,722,5687,1,0,0,0,724,5703,1,0,0,0,726,5705,1,0,
0,0,728,5722,1,0,0,0,730,5739,1,0,0,0,732,5743,1,0,0,0,734,5746,1,0,0,0,
736,5752,1,0,0,0,738,5759,1,0,0,0,740,5763,1,0,0,0,742,5772,1,0,0,0,744,
5820,1,0,0,0,746,5822,1,0,0,0,748,5827,1,0,0,0,750,5846,1,0,0,0,752,5850,
1,0,0,0,754,5854,1,0,0,0,756,5865,1,0,0,0,758,5878,1,0,0,0,760,5880,1,0,
0,0,762,5922,1,0,0,0,764,5950,1,0,0,0,766,5952,1,0,0,0,768,5965,1,0,0,0,
770,5974,1,0,0,0,772,5991,1,0,0,0,774,5993,1,0,0,0,776,6021,1,0,0,0,778,
6126,1,0,0,0,780,6128,1,0,0,0,782,6156,1,0,0,0,784,6168,1,0,0,0,786,6179,
1,0,0,0,788,6185,1,0,0,0,790,6187,1,0,0,0,792,6195,1,0,0,0,794,6220,1,0,
0,0,796,6228,1,0,0,0,798,6257,1,0,0,0,800,6277,1,0,0,0,802,6279,1,0,0,0,
804,6297,1,0,0,0,806,6299,1,0,0,0,808,6331,1,0,0,0,810,6333,1,0,0,0,812,
6345,1,0,0,0,814,6357,1,0,0,0,816,6364,1,0,0,0,818,6366,1,0,0,0,820,6381,
1,0,0,0,822,6385,1,0,0,0,824,6397,1,0,0,0,826,6410,1,0,0,0,828,6412,1,0,
0,0,830,6420,1,0,0,0,832,6424,1,0,0,0,834,6434,1,0,0,0,836,6447,1,0,0,0,
838,6455,1,0,0,0,840,6484,1,0,0,0,842,6486,1,0,0,0,844,6532,1,0,0,0,846,
6534,1,0,0,0,848,6671,1,0,0,0,850,6727,1,0,0,0,852,6801,1,0,0,0,854,6928,
1,0,0,0,856,6930,1,0,0,0,858,6933,1,0,0,0,860,6942,1,0,0,0,862,6966,1,0,
0,0,864,6993,1,0,0,0,866,7136,1,0,0,0,868,7235,1,0,0,0,870,7237,1,0,0,0,
872,7242,1,0,0,0,874,7276,1,0,0,0,876,7295,1,0,0,0,878,7306,1,0,0,0,880,
7347,1,0,0,0,882,7349,1,0,0,0,884,7353,1,0,0,0,886,7361,1,0,0,0,888,7365,
1,0,0,0,890,7372,1,0,0,0,892,7462,1,0,0,0,894,7466,1,0,0,0,896,7468,1,0,
0,0,898,7481,1,0,0,0,900,7494,1,0,0,0,902,7505,1,0,0,0,904,7518,1,0,0,0,
906,7522,1,0,0,0,908,7524,1,0,0,0,910,7535,1,0,0,0,912,7548,1,0,0,0,914,
7550,1,0,0,0,916,7588,1,0,0,0,918,7590,1,0,0,0,920,7611,1,0,0,0,922,7613,
1,0,0,0,924,7624,1,0,0,0,926,7630,1,0,0,0,928,7644,1,0,0,0,930,7665,1,0,
0,0,932,7667,1,0,0,0,934,7689,1,0,0,0,936,7691,1,0,0,0,938,7703,1,0,0,0,
940,7706,1,0,0,0,942,7717,1,0,0,0,944,7725,1,0,0,0,946,7729,1,0,0,0,948,
7736,1,0,0,0,950,7740,1,0,0,0,952,7742,1,0,0,0,954,7745,1,0,0,0,956,7754,
1,0,0,0,958,7760,1,0,0,0,960,7762,1,0,0,0,962,7764,1,0,0,0,964,7766,1,0,
0,0,966,7768,1,0,0,0,968,7772,1,0,0,0,970,7776,1,0,0,0,972,7778,1,0,0,0,
974,7780,1,0,0,0,976,7787,1,0,0,0,978,7789,1,0,0,0,980,7794,1,0,0,0,982,
7803,1,0,0,0,984,7807,1,0,0,0,986,7815,1,0,0,0,988,7820,1,0,0,0,990,7892,
1,0,0,0,992,7894,1,0,0,0,994,7904,1,0,0,0,996,7913,1,0,0,0,998,7916,1,0,
0,0,1000,7927,1,0,0,0,1002,7929,1,0,0,0,1004,7934,1,0,0,0,1006,7945,1,0,
0,0,1008,7958,1,0,0,0,1010,7960,1,0,0,0,1012,7971,1,0,0,0,1014,7984,1,0,
0,0,1016,7986,1,0,0,0,1018,7990,1,0,0,0,1020,8001,1,0,0,0,1022,8003,1,0,
0,0,1024,1026,3,2,1,0,1025,1024,1,0,0,0,1026,1027,1,0,0,0,1027,1025,1,0,
0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,1030,5,0,0,1,1030,1,1,0,0,0,
1031,1032,3,6,3,0,1032,1033,7,0,0,0,1033,1036,1,0,0,0,1034,1036,3,4,2,0,
1035,1031,1,0,0,0,1035,1034,1,0,0,0,1036,3,1,0,0,0,1037,1038,5,528,0,0,1038,
5,1,0,0,0,1039,1274,3,736,368,0,1040,1274,3,8,4,0,1041,1274,3,10,5,0,1042,
1274,3,12,6,0,1043,1274,3,14,7,0,1044,1274,3,16,8,0,1045,1274,3,18,9,0,1046,
1274,3,20,10,0,1047,1274,3,22,11,0,1048,1274,3,24,12,0,1049,1274,3,26,13,
0,1050,1274,3,28,14,0,1051,1274,3,30,15,0,1052,1274,3,72,36,0,1053,1274,
3,102,51,0,1054,1274,3,90,45,0,1055,1274,3,74,37,0,1056,1274,3,76,38,0,1057,
1274,3,106,53,0,1058,1274,3,108,54,0,1059,1274,3,86,43,0,1060,1274,3,100,
50,0,1061,1274,3,94,47,0,1062,1274,3,92,46,0,1063,1274,3,96,48,0,1064,1274,
3,78,39,0,1065,1274,3,110,55,0,1066,1274,3,98,49,0,1067,1274,3,88,44,0,1068,
1274,3,116,58,0,1069,1274,3,118,59,0,1070,1274,3,120,60,0,1071,1274,3,112,
56,0,1072,1274,3,114,57,0,1073,1274,3,80,40,0,1074,1274,3,82,41,0,1075,1274,
3,104,52,0,1076,1274,3,124,62,0,1077,1274,3,128,64,0,1078,1274,3,132,66,
0,1079,1274,3,138,69,0,1080,1274,3,140,70,0,1081,1274,3,142,71,0,1082,1274,
3,144,72,0,1083,1274,3,146,73,0,1084,1274,3,180,90,0,1085,1274,3,184,92,
0,1086,1274,3,186,93,0,1087,1274,3,182,91,0,1088,1274,3,188,94,0,1089,1274,
3,346,173,0,1090,1274,3,352,176,0,1091,1274,3,354,177,0,1092,1274,3,356,
178,0,1093,1274,3,358,179,0,1094,1274,3,376,188,0,1095,1274,3,378,189,0,
1096,1274,3,380,190,0,1097,1274,3,382,191,0,1098,1274,3,384,192,0,1099,1274,
3,386,193,0,1100,1274,3,388,194,0,1101,1274,3,148,74,0,1102,1274,3,150,75,
0,1103,1274,3,152,76,0,1104,1274,3,154,77,0,1105,1274,3,156,78,0,1106,1274,
3,158,79,0,1107,1274,3,160,80,0,1108,1274,3,162,81,0,1109,1274,3,164,82,
0,1110,1274,3,166,83,0,1111,1274,3,168,84,0,1112,1274,3,690,345,0,1113,1274,
3,170,85,0,1114,1274,3,172,86,0,1115,1274,3,174,87,0,1116,1274,3,176,88,
0,1117,1274,3,178,89,0,1118,1274,3,390,195,0,1119,1274,3,394,197,0,1120,
1274,3,402,201,0,1121,1274,3,404,202,0,1122,1274,3,398,199,0,1123,1274,3,
400,200,0,1124,1274,3,406,203,0,1125,1274,3,408,204,0,1126,1274,3,410,205,
0,1127,1274,3,412,206,0,1128,1274,3,414,207,0,1129,1274,3,422,211,0,1130,
1274,3,424,212,0,1131,1274,3,426,213,0,1132,1274,3,428,214,0,1133,1274,3,
430,215,0,1134,1274,3,432,216,0,1135,1274,3,434,217,0,1136,1274,3,436,218,
0,1137,1274,3,438,219,0,1138,1274,3,442,221,0,1139,1274,3,444,222,0,1140,
1274,3,446,223,0,1141,1274,3,452,226,0,1142,1274,3,466,233,0,1143,1274,3,
468,234,0,1144,1274,3,470,235,0,1145,1274,3,472,236,0,1146,1274,3,476,238,
0,1147,1274,3,478,239,0,1148,1274,3,480,240,0,1149,1274,3,482,241,0,1150,
1274,3,484,242,0,1151,1274,3,486,243,0,1152,1274,3,488,244,0,1153,1274,3,
490,245,0,1154,1274,3,492,246,0,1155,1274,3,494,247,0,1156,1274,3,496,248,
0,1157,1274,3,498,249,0,1158,1274,3,500,250,0,1159,1274,3,502,251,0,1160,
1274,3,504,252,0,1161,1274,3,506,253,0,1162,1274,3,508,254,0,1163,1274,3,
510,255,0,1164,1274,3,512,256,0,1165,1274,3,514,257,0,1166,1274,3,516,258,
0,1167,1274,3,518,259,0,1168,1274,3,520,260,0,1169,1274,3,522,261,0,1170,
1274,3,524,262,0,1171,1274,3,526,263,0,1172,1274,3,528,264,0,1173,1274,3,
530,265,0,1174,1274,3,532,266,0,1175,1274,3,534,267,0,1176,1274,3,536,268,
0,1177,1274,3,538,269,0,1178,1274,3,540,270,0,1179,1274,3,542,271,0,1180,
1274,3,544,272,0,1181,1274,3,546,273,0,1182,1274,3,548,274,0,1183,1274,3,
550,275,0,1184,1274,3,552,276,0,1185,1274,3,554,277,0,1186,1274,3,556,278,
0,1187,1274,3,560,280,0,1188,1274,3,562,281,0,1189,1274,3,564,282,0,1190,
1274,3,582,291,0,1191,1274,3,584,292,0,1192,1274,3,586,293,0,1193,1274,3,
588,294,0,1194,1274,3,590,295,0,1195,1274,3,592,296,0,1196,1274,3,594,297,
0,1197,1274,3,596,298,0,1198,1274,3,598,299,0,1199,1274,3,600,300,0,1200,
1274,3,602,301,0,1201,1274,3,604,302,0,1202,1274,3,606,303,0,1203,1274,3,
608,304,0,1204,1274,3,610,305,0,1205,1274,3,612,306,0,1206,1274,3,614,307,
0,1207,1274,3,616,308,0,1208,1274,3,618,309,0,1209,1274,3,620,310,0,1210,
1274,3,622,311,0,1211,1274,3,624,312,0,1212,1274,3,626,313,0,1213,1274,3,
628,314,0,1214,1274,3,630,315,0,1215,1274,3,634,317,0,1216,1274,3,636,318,
0,1217,1274,3,638,319,0,1218,1274,3,640,320,0,1219,1274,3,642,321,0,1220,
1274,3,644,322,0,1221,1274,3,646,323,0,1222,1274,3,648,324,0,1223,1274,3,
650,325,0,1224,1274,3,652,326,0,1225,1274,3,654,327,0,1226,1274,3,656,328,
0,1227,1274,3,658,329,0,1228,1274,3,672,336,0,1229,1274,3,686,343,0,1230,
1274,3,190,95,0,1231,1274,3,200,100,0,1232,1274,3,198,99,0,1233,1274,3,196,
98,0,1234,1274,3,208,104,0,1235,1274,3,210,105,0,1236,1274,3,660,330,0,1237,
1274,3,662,331,0,1238,1274,3,666,333,0,1239,1274,3,670,335,0,1240,1274,3,
668,334,0,1241,1274,3,474,237,0,1242,1274,3,212,106,0,1243,1274,3,214,107,
0,1244,1274,3,814,407,0,1245,1274,3,818,409,0,1246,1274,3,820,410,0,1247,
1274,3,216,108,0,1248,1274,3,218,109,0,1249,1274,3,220,110,0,1250,1274,3,
222,111,0,1251,1274,3,224,112,0,1252,1274,3,698,349,0,1253,1274,3,700,350,
0,1254,1274,3,702,351,0,1255,1274,3,704,352,0,1256,1274,3,706,353,0,1257,
1274,3,708,354,0,1258,1274,3,710,355,0,1259,1274,3,712,356,0,1260,1274,3,
714,357,0,1261,1274,3,716,358,0,1262,1274,3,718,359,0,1263,1274,3,720,360,
0,1264,1274,3,722,361,0,1265,1274,3,724,362,0,1266,1274,3,726,363,0,1267,
1274,3,728,364,0,1268,1274,3,730,365,0,1269,1274,3,416,208,0,1270,1274,3,
418,209,0,1271,1274,3,420,210,0,1272,1274,3,692,346,0,1273,1039,1,0,0,0,
1273,1040,1,0,0,0,1273,1041,1,0,0,0,1273,1042,1,0,0,0,1273,1043,1,0,0,0,
1273,1044,1,0,0,0,1273,1045,1,0,0,0,1273,1046,1,0,0,0,1273,1047,1,0,0,0,
1273,1048,1,0,0,0,1273,1049,1,0,0,0,1273,1050,1,0,0,0,1273,1051,1,0,0,0,
1273,1052,1,0,0,0,1273,1053,1,0,0,0,1273,1054,1,0,0,0,1273,1055,1,0,0,0,
1273,1056,1,0,0,0,1273,1057,1,0,0,0,1273,1058,1,0,0,0,1273,1059,1,0,0,0,
1273,1060,1,0,0,0,1273,1061,1,0,0,0,1273,1062,1,0,0,0,1273,1063,1,0,0,0,
1273,1064,1,0,0,0,1273,1065,1,0,0,0,1273,1066,1,0,0,0,1273,1067,1,0,0,0,
1273,1068,1,0,0,0,1273,1069,1,0,0,0,1273,1070,1,0,0,0,1273,1071,1,0,0,0,
1273,1072,1,0,0,0,1273,1073,1,0,0,0,1273,1074,1,0,0,0,1273,1075,1,0,0,0,
1273,1076,1,0,0,0,1273,1077,1,0,0,0,1273,1078,1,0,0,0,1273,1079,1,0,0,0,
1273,1080,1,0,0,0,1273,1081,1,0,0,0,1273,1082,1,0,0,0,1273,1083,1,0,0,0,
1273,1084,1,0,0,0,1273,1085,1,0,0,0,1273,1086,1,0,0,0,1273,1087,1,0,0,0,
1273,1088,1,0,0,0,1273,1089,1,0,0,0,1273,1090,1,0,0,0,1273,1091,1,0,0,0,
1273,1092,1,0,0,0,1273,1093,1,0,0,0,1273,1094,1,0,0,0,1273,1095,1,0,0,0,
1273,1096,1,0,0,0,1273,1097,1,0,0,0,1273,1098,1,0,0,0,1273,1099,1,0,0,0,
1273,1100,1,0,0,0,1273,1101,1,0,0,0,1273,1102,1,0,0,0,1273,1103,1,0,0,0,
1273,1104,1,0,0,0,1273,1105,1,0,0,0,1273,1106,1,0,0,0,1273,1107,1,0,0,0,
1273,1108,1,0,0,0,1273,1109,1,0,0,0,1273,1110,1,0,0,0,1273,1111,1,0,0,0,
1273,1112,1,0,0,0,1273,1113,1,0,0,0,1273,1114,1,0,0,0,1273,1115,1,0,0,0,
1273,1116,1,0,0,0,1273,1117,1,0,0,0,1273,1118,1,0,0,0,1273,1119,1,0,0,0,
1273,1120,1,0,0,0,1273,1121,1,0,0,0,1273,1122,1,0,0,0,1273,1123,1,0,0,0,
1273,1124,1,0,0,0,1273,1125,1,0,0,0,1273,1126,1,0,0,0,1273,1127,1,0,0,0,
1273,1128,1,0,0,0,1273,1129,1,0,0,0,1273,1130,1,0,0,0,1273,1131,1,0,0,0,
1273,1132,1,0,0,0,1273,1133,1,0,0,0,1273,1134,1,0,0,0,1273,1135,1,0,0,0,
1273,1136,1,0,0,0,1273,1137,1,0,0,0,1273,1138,1,0,0,0,1273,1139,1,0,0,0,
1273,1140,1,0,0,0,1273,1141,1,0,0,0,1273,1142,1,0,0,0,1273,1143,1,0,0,0,
1273,1144,1,0,0,0,1273,1145,1,0,0,0,1273,1146,1,0,0,0,1273,1147,1,0,0,0,
1273,1148,1,0,0,0,1273,1149,1,0,0,0,1273,1150,1,0,0,0,1273,1151,1,0,0,0,
1273,1152,1,0,0,0,1273,1153,1,0,0,0,1273,1154,1,0,0,0,1273,1155,1,0,0,0,
1273,1156,1,0,0,0,1273,1157,1,0,0,0,1273,1158,1,0,0,0,1273,1159,1,0,0,0,
1273,1160,1,0,0,0,1273,1161,1,0,0,0,1273,1162,1,0,0,0,1273,1163,1,0,0,0,
1273,1164,1,0,0,0,1273,1165,1,0,0,0,1273,1166,1,0,0,0,1273,1167,1,0,0,0,
1273,1168,1,0,0,0,1273,1169,1,0,0,0,1273,1170,1,0,0,0,1273,1171,1,0,0,0,
1273,1172,1,0,0,0,1273,1173,1,0,0,0,1273,1174,1,0,0,0,1273,1175,1,0,0,0,
1273,1176,1,0,0,0,1273,1177,1,0,0,0,1273,1178,1,0,0,0,1273,1179,1,0,0,0,
1273,1180,1,0,0,0,1273,1181,1,0,0,0,1273,1182,1,0,0,0,1273,1183,1,0,0,0,
1273,1184,1,0,0,0,1273,1185,1,0,0,0,1273,1186,1,0,0,0,1273,1187,1,0,0,0,
1273,1188,1,0,0,0,1273,1189,1,0,0,0,1273,1190,1,0,0,0,1273,1191,1,0,0,0,
1273,1192,1,0,0,0,1273,1193,1,0,0,0,1273,1194,1,0,0,0,1273,1195,1,0,0,0,
1273,1196,1,0,0,0,1273,1197,1,0,0,0,1273,1198,1,0,0,0,1273,1199,1,0,0,0,
1273,1200,1,0,0,0,1273,1201,1,0,0,0,1273,1202,1,0,0,0,1273,1203,1,0,0,0,
1273,1204,1,0,0,0,1273,1205,1,0,0,0,1273,1206,1,0,0,0,1273,1207,1,0,0,0,
1273,1208,1,0,0,0,1273,1209,1,0,0,0,1273,1210,1,0,0,0,1273,1211,1,0,0,0,
1273,1212,1,0,0,0,1273,1213,1,0,0,0,1273,1214,1,0,0,0,1273,1215,1,0,0,0,
1273,1216,1,0,0,0,1273,1217,1,0,0,0,1273,1218,1,0,0,0,1273,1219,1,0,0,0,
1273,1220,1,0,0,0,1273,1221,1,0,0,0,1273,1222,1,0,0,0,1273,1223,1,0,0,0,
1273,1224,1,0,0,0,1273,1225,1,0,0,0,1273,1226,1,0,0,0,1273,1227,1,0,0,0,
1273,1228,1,0,0,0,1273,1229,1,0,0,0,1273,1230,1,0,0,0,1273,1231,1,0,0,0,
1273,1232,1,0,0,0,1273,1233,1,0,0,0,1273,1234,1,0,0,0,1273,1235,1,0,0,0,
1273,1236,1,0,0,0,1273,1237,1,0,0,0,1273,1238,1,0,0,0,1273,1239,1,0,0,0,
1273,1240,1,0,0,0,1273,1241,1,0,0,0,1273,1242,1,0,0,0,1273,1243,1,0,0,0,
1273,1244,1,0,0,0,1273,1245,1,0,0,0,1273,1246,1,0,0,0,1273,1247,1,0,0,0,
1273,1248,1,0,0,0,1273,1249,1,0,0,0,1273,1250,1,0,0,0,1273,1251,1,0,0,0,
1273,1252,1,0,0,0,1273,1253,1,0,0,0,1273,1254,1,0,0,0,1273,1255,1,0,0,0,
1273,1256,1,0,0,0,1273,1257,1,0,0,0,1273,1258,1,0,0,0,1273,1259,1,0,0,0,
1273,1260,1,0,0,0,1273,1261,1,0,0,0,1273,1262,1,0,0,0,1273,1263,1,0,0,0,
1273,1264,1,0,0,0,1273,1265,1,0,0,0,1273,1266,1,0,0,0,1273,1267,1,0,0,0,
1273,1268,1,0,0,0,1273,1269,1,0,0,0,1273,1270,1,0,0,0,1273,1271,1,0,0,0,
1273,1272,1,0,0,0,1274,7,1,0,0,0,1275,1276,5,453,0,0,1276,1277,3,994,497,
0,1277,9,1,0,0,0,1278,1279,5,453,0,0,1279,1280,3,958,479,0,1280,11,1,0,0,
0,1281,1282,5,391,0,0,1282,1283,5,60,0,0,1283,1284,3,1008,504,0,1284,13,
1,0,0,0,1285,1286,5,396,0,0,1286,1289,5,102,0,0,1287,1288,7,1,0,0,1288,1290,
3,994,497,0,1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,1295,1,0,0,0,1291,1292,
5,236,0,0,1292,1296,3,958,479,0,1293,1294,5,474,0,0,1294,1296,3,834,417,
0,1295,1291,1,0,0,0,1295,1293,1,0,0,0,1295,1296,1,0,0,0,1296,1306,1,0,0,
0,1297,1298,5,396,0,0,1298,1303,5,383,0,0,1299,1300,5,236,0,0,1300,1304,
3,958,479,0,1301,1302,5,474,0,0,1302,1304,3,834,417,0,1303,1299,1,0,0,0,
1303,1301,1,0,0,0,1303,1304,1,0,0,0,1304,1306,1,0,0,0,1305,1285,1,0,0,0,
1305,1297,1,0,0,0,1306,15,1,0,0,0,1307,1308,5,19,0,0,1308,1309,5,101,0,0,
1309,1310,3,1000,500,0,1310,1311,5,391,0,0,1311,1312,5,99,0,0,1312,1313,
5,336,0,0,1313,1314,3,1000,500,0,1314,1324,1,0,0,0,1315,1316,5,19,0,0,1316,
1317,5,101,0,0,1317,1318,3,1000,500,0,1318,1319,5,391,0,0,1319,1320,5,353,
0,0,1320,1321,5,336,0,0,1321,1322,5,514,0,0,1322,1324,1,0,0,0,1323,1307,
1,0,0,0,1323,1315,1,0,0,0,1324,17,1,0,0,0,1325,1326,5,88,0,0,1326,1330,7,
2,0,0,1327,1328,5,193,0,0,1328,1329,5,276,0,0,1329,1331,5,144,0,0,1330,1327,
1,0,0,0,1330,1331,1,0,0,0,1331,1335,1,0,0,0,1332,1333,3,1000,500,0,1333,
1334,5,1,0,0,1334,1336,1,0,0,0,1335,1332,1,0,0,0,1335,1336,1,0,0,0,1336,
1337,1,0,0,0,1337,1339,3,1000,500,0,1338,1340,3,44,22,0,1339,1338,1,0,0,
0,1339,1340,1,0,0,0,1340,1342,1,0,0,0,1341,1343,3,46,23,0,1342,1341,1,0,
0,0,1342,1343,1,0,0,0,1343,1345,1,0,0,0,1344,1346,3,936,468,0,1345,1344,
1,0,0,0,1345,1346,1,0,0,0,1346,19,1,0,0,0,1347,1348,5,129,0,0,1348,1351,
7,2,0,0,1349,1350,5,193,0,0,1350,1352,5,144,0,0,1351,1349,1,0,0,0,1351,1352,
1,0,0,0,1352,1356,1,0,0,0,1353,1354,3,1000,500,0,1354,1355,5,1,0,0,1355,
1357,1,0,0,0,1356,1353,1,0,0,0,1356,1357,1,0,0,0,1357,1358,1,0,0,0,1358,
1360,3,1000,500,0,1359,1361,5,165,0,0,1360,1359,1,0,0,0,1360,1361,1,0,0,
0,1361,21,1,0,0,0,1362,1363,5,396,0,0,1363,1364,5,88,0,0,1364,1365,7,2,0,
0,1365,1366,3,1000,500,0,1366,23,1,0,0,0,1367,1368,5,19,0,0,1368,1369,5,
101,0,0,1369,1370,3,1000,500,0,1370,1371,5,348,0,0,1371,1372,3,1000,500,
0,1372,25,1,0,0,0,1373,1374,5,342,0,0,1374,1375,7,2,0,0,1375,1376,3,1000,
500,0,1376,27,1,0,0,0,1377,1378,5,396,0,0,1378,1384,5,99,0,0,1379,1380,5,
396,0,0,1380,1381,5,99,0,0,1381,1382,5,168,0,0,1382,1384,3,994,497,0,1383,
1377,1,0,0,0,1383,1379,1,0,0,0,1384,29,1,0,0,0,1385,1387,5,88,0,0,1386,1388,
7,3,0,0,1387,1386,1,0,0,0,1387,1388,1,0,0,0,1388,1389,1,0,0,0,1389,1393,
5,418,0,0,1390,1391,5,193,0,0,1391,1392,5,276,0,0,1392,1394,5,144,0,0,1393,
1390,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,1396,3,994,497,0,1396,
1397,5,2,0,0,1397,1402,3,32,16,0,1398,1399,5,3,0,0,1399,1401,3,32,16,0,1400,
1398,1,0,0,0,1401,1404,1,0,0,0,1402,1400,1,0,0,0,1402,1403,1,0,0,0,1403,
1409,1,0,0,0,1404,1402,1,0,0,0,1405,1406,5,3,0,0,1406,1408,3,40,20,0,1407,
1405,1,0,0,0,1408,1411,1,0,0,0,1409,1407,1,0,0,0,1409,1410,1,0,0,0,1410,
1412,1,0,0,0,1411,1409,1,0,0,0,1412,1414,5,4,0,0,1413,1415,3,42,21,0,1414,
1413,1,0,0,0,1414,1415,1,0,0,0,1415,1417,1,0,0,0,1416,1418,3,44,22,0,1417,
1416,1,0,0,0,1417,1418,1,0,0,0,1418,1420,1,0,0,0,1419,1421,3,48,24,0,1420,
1419,1,0,0,0,1420,1421,1,0,0,0,1421,1423,1,0,0,0,1422,1424,3,952,476,0,1423,
1422,1,0,0,0,1423,1424,1,0,0,0,1424,1426,1,0,0,0,1425,1427,3,892,446,0,1426,
1425,1,0,0,0,1426,1427,1,0,0,0,1427,1429,1,0,0,0,1428,1430,3,930,465,0,1429,
1428,1,0,0,0,1429,1430,1,0,0,0,1430,1432,1,0,0,0,1431,1433,3,50,25,0,1432,
1431,1,0,0,0,1432,1433,1,0,0,0,1433,1435,1,0,0,0,1434,1436,3,60,30,0,1435,
1434,1,0,0,0,1435,1436,1,0,0,0,1436,1438,1,0,0,0,1437,1439,3,936,468,0,1438,
1437,1,0,0,0,1438,1439,1,0,0,0,1439,1441,1,0,0,0,1440,1442,3,938,469,0,1441,
1440,1,0,0,0,1441,1442,1,0,0,0,1442,31,1,0,0,0,1443,1445,3,1000,500,0,1444,
1446,3,976,488,0,1445,1444,1,0,0,0,1445,1446,1,0,0,0,1446,1448,1,0,0,0,1447,
1449,3,34,17,0,1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,1451,1,0,0,0,1450,
1452,5,223,0,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,1454,1,0,0,0,1453,
1455,3,58,29,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1457,1,0,0,0,1456,
1458,3,52,26,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,1462,1,0,0,0,1459,
1463,3,36,18,0,1460,1463,5,33,0,0,1461,1463,3,38,19,0,1462,1459,1,0,0,0,
1462,1460,1,0,0,0,1462,1461,1,0,0,0,1462,1463,1,0,0,0,1463,1465,1,0,0,0,
1464,1466,3,952,476,0,1465,1464,1,0,0,0,1465,1466,1,0,0,0,1466,33,1,0,0,
0,1467,1468,5,64,0,0,1468,1469,5,391,0,0,1469,1476,3,1000,500,0,1470,1471,
5,66,0,0,1471,1476,3,1000,500,0,1472,1473,5,65,0,0,1473,1474,5,391,0,0,1474,
1476,3,1000,500,0,1475,1467,1,0,0,0,1475,1470,1,0,0,0,1475,1472,1,0,0,0,
1476,35,1,0,0,0,1477,1487,5,114,0,0,1478,1488,3,958,479,0,1479,1488,5,277,
0,0,1480,1488,5,97,0,0,1481,1482,5,2,0,0,1482,1483,3,994,497,0,1483,1484,
5,2,0,0,1484,1485,5,4,0,0,1485,1486,5,4,0,0,1486,1488,1,0,0,0,1487,1478,
1,0,0,0,1487,1479,1,0,0,0,1487,1480,1,0,0,0,1487,1481,1,0,0,0,1488,37,1,
0,0,0,1489,1490,5,27,0,0,1490,1491,3,834,417,0,1491,39,1,0,0,0,1492,1493,
5,201,0,0,1493,1494,3,1000,500,0,1494,1499,3,1006,503,0,1495,1497,3,84,42,
0,1496,1498,3,940,470,0,1497,1496,1,0,0,0,1497,1498,1,0,0,0,1498,1500,1,
0,0,0,1499,1495,1,0,0,0,1499,1500,1,0,0,0,1500,1502,1,0,0,0,1501,1503,3,
952,476,0,1502,1501,1,0,0,0,1502,1503,1,0,0,0,1503,41,1,0,0,0,1504,1505,
5,137,0,0,1505,1506,5,488,0,0,1506,1507,3,1000,500,0,1507,43,1,0,0,0,1508,
1510,5,114,0,0,1509,1508,1,0,0,0,1509,1510,1,0,0,0,1510,1516,1,0,0,0,1511,
1512,5,64,0,0,1512,1517,5,391,0,0,1513,1517,5,66,0,0,1514,1515,5,65,0,0,
1515,1517,5,391,0,0,1516,1511,1,0,0,0,1516,1513,1,0,0,0,1516,1514,1,0,0,
0,1517,1519,1,0,0,0,1518,1520,5,488,0,0,1519,1518,1,0,0,0,1519,1520,1,0,
0,0,1520,1521,1,0,0,0,1521,1522,3,1008,504,0,1522,45,1,0,0,0,1523,1525,5,
114,0,0,1524,1523,1,0,0,0,1524,1525,1,0,0,0,1525,1526,1,0,0,0,1526,1528,
5,72,0,0,1527,1529,5,488,0,0,1528,1527,1,0,0,0,1528,1529,1,0,0,0,1529,1530,
1,0,0,0,1530,1531,3,1008,504,0,1531,47,1,0,0,0,1532,1533,7,4,0,0,1533,1534,
5,223,0,0,1534,1535,3,1006,503,0,1535,49,1,0,0,0,1536,1537,5,293,0,0,1537,
1538,5,55,0,0,1538,1539,3,1006,503,0,1539,51,1,0,0,0,1540,1544,5,277,0,0,
1541,1542,5,276,0,0,1542,1544,5,277,0,0,1543,1540,1,0,0,0,1543,1541,1,0,
0,0,1544,53,1,0,0,0,1545,1547,3,976,488,0,1546,1548,3,52,26,0,1547,1546,
1,0,0,0,1547,1548,1,0,0,0,1548,55,1,0,0,0,1549,1550,3,1000,500,0,1550,1551,
5,2,0,0,1551,1556,3,54,27,0,1552,1553,5,3,0,0,1553,1555,3,54,27,0,1554,1552,
1,0,0,0,1555,1558,1,0,0,0,1556,1554,1,0,0,0,1556,1557,1,0,0,0,1557,1559,
1,0,0,0,1558,1556,1,0,0,0,1559,1560,5,4,0,0,1560,57,1,0,0,0,1561,1571,5,
411,0,0,1562,1571,5,254,0,0,1563,1571,5,259,0,0,1564,1571,5,351,0,0,1565,
1571,5,187,0,0,1566,1571,5,45,0,0,1567,1571,5,306,0,0,1568,1571,5,352,0,
0,1569,1571,3,56,28,0,1570,1561,1,0,0,0,1570,1562,1,0,0,0,1570,1563,1,0,
0,0,1570,1564,1,0,0,0,1570,1565,1,0,0,0,1570,1566,1,0,0,0,1570,1567,1,0,
0,0,1570,1568,1,0,0,0,1570,1569,1,0,0,0,1571,59,1,0,0,0,1572,1573,5,371,
0,0,1573,1574,5,2,0,0,1574,1579,3,62,31,0,1575,1576,5,3,0,0,1576,1578,3,
62,31,0,1577,1575,1,0,0,0,1578,1581,1,0,0,0,1579,1577,1,0,0,0,1579,1580,
1,0,0,0,1580,1582,1,0,0,0,1581,1579,1,0,0,0,1582,1583,5,4,0,0,1583,61,1,
0,0,0,1584,1585,3,1000,500,0,1585,1587,3,1006,503,0,1586,1588,3,64,32,0,
1587,1586,1,0,0,0,1587,1588,1,0,0,0,1588,1590,1,0,0,0,1589,1591,3,66,33,
0,1590,1589,1,0,0,0,1590,1591,1,0,0,0,1591,1593,1,0,0,0,1592,1594,3,936,
468,0,1593,1592,1,0,0,0,1593,1594,1,0,0,0,1594,63,1,0,0,0,1595,1596,5,131,
0,0,1596,1597,5,223,0,0,1597,1598,3,1006,503,0,1598,65,1,0,0,0,1599,1600,
5,168,0,0,1600,1601,3,1000,500,0,1601,67,1,0,0,0,1602,1603,5,292,0,0,1603,
1605,5,351,0,0,1604,1602,1,0,0,0,1604,1605,1,0,0,0,1605,69,1,0,0,0,1606,
1607,5,193,0,0,1607,1608,5,276,0,0,1608,1610,5,144,0,0,1609,1606,1,0,0,0,
1609,1610,1,0,0,0,1610,71,1,0,0,0,1611,1613,5,88,0,0,1612,1614,5,424,0,0,
1613,1612,1,0,0,0,1613,1614,1,0,0,0,1614,1615,1,0,0,0,1615,1619,5,418,0,
0,1616,1617,5,193,0,0,1617,1618,5,276,0,0,1618,1620,5,144,0,0,1619,1616,
1,0,0,0,1619,1620,1,0,0,0,1620,1621,1,0,0,0,1621,1650,3,994,497,0,1622,1646,
5,2,0,0,1623,1628,3,1000,500,0,1624,1625,5,3,0,0,1625,1627,3,1000,500,0,
1626,1624,1,0,0,0,1627,1630,1,0,0,0,1628,1626,1,0,0,0,1628,1629,1,0,0,0,
1629,1635,1,0,0,0,1630,1628,1,0,0,0,1631,1632,5,3,0,0,1632,1634,3,40,20,
0,1633,1631,1,0,0,0,1634,1637,1,0,0,0,1635,1633,1,0,0,0,1635,1636,1,0,0,
0,1636,1647,1,0,0,0,1637,1635,1,0,0,0,1638,1643,3,40,20,0,1639,1640,5,3,
0,0,1640,1642,3,40,20,0,1641,1639,1,0,0,0,1642,1645,1,0,0,0,1643,1641,1,
0,0,0,1643,1644,1,0,0,0,1644,1647,1,0,0,0,1645,1643,1,0,0,0,1646,1623,1,
0,0,0,1646,1638,1,0,0,0,1647,1648,1,0,0,0,1648,1649,5,4,0,0,1649,1651,1,
0,0,0,1650,1622,1,0,0,0,1650,1651,1,0,0,0,1651,1653,1,0,0,0,1652,1654,3,
48,24,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1656,1,0,0,0,1655,1657,
3,952,476,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,1659,1,0,0,0,1658,1660,
3,892,446,0,1659,1658,1,0,0,0,1659,1660,1,0,0,0,1660,1662,1,0,0,0,1661,1663,
3,930,465,0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,1663,1665,1,0,0,0,1664,1666,
3,50,25,0,1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,1668,1,0,0,0,1667,1669,
3,936,468,0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,1669,1670,1,0,0,0,1670,1671,
5,27,0,0,1671,1672,3,736,368,0,1672,73,1,0,0,0,1673,1675,5,129,0,0,1674,
1676,5,424,0,0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,1676,1677,1,0,0,0,1677,
1680,5,418,0,0,1678,1679,5,193,0,0,1679,1681,5,144,0,0,1680,1678,1,0,0,0,
1680,1681,1,0,0,0,1681,1682,1,0,0,0,1682,1684,3,994,497,0,1683,1685,5,165,
0,0,1684,1683,1,0,0,0,1684,1685,1,0,0,0,1685,75,1,0,0,0,1686,1687,5,68,0,
0,1687,1688,5,424,0,0,1688,1689,5,418,0,0,1689,1690,5,285,0,0,1690,1691,
5,390,0,0,1691,1692,3,958,479,0,1692,77,1,0,0,0,1693,1694,5,19,0,0,1694,
1695,5,418,0,0,1695,1696,3,994,497,0,1696,1701,3,230,115,0,1697,1698,5,3,
0,0,1698,1700,3,230,115,0,1699,1697,1,0,0,0,1700,1703,1,0,0,0,1701,1699,
1,0,0,0,1701,1702,1,0,0,0,1702,1731,1,0,0,0,1703,1701,1,0,0,0,1704,1705,
5,19,0,0,1705,1706,5,418,0,0,1706,1707,3,994,497,0,1707,1708,5,13,0,0,1708,
1709,5,371,0,0,1709,1714,3,62,31,0,1710,1711,5,3,0,0,1711,1713,3,62,31,0,
1712,1710,1,0,0,0,1713,1716,1,0,0,0,1714,1712,1,0,0,0,1714,1715,1,0,0,0,
1715,1731,1,0,0,0,1716,1714,1,0,0,0,1717,1718,5,19,0,0,1718,1719,5,418,0,
0,1719,1720,3,994,497,0,1720,1721,5,129,0,0,1721,1722,5,371,0,0,1722,1727,
3,1000,500,0,1723,1724,5,3,0,0,1724,1726,3,1000,500,0,1725,1723,1,0,0,0,
1726,1729,1,0,0,0,1727,1725,1,0,0,0,1727,1728,1,0,0,0,1728,1731,1,0,0,0,
1729,1727,1,0,0,0,1730,1693,1,0,0,0,1730,1704,1,0,0,0,1730,1717,1,0,0,0,
1731,79,1,0,0,0,1732,1733,5,88,0,0,1733,1734,5,201,0,0,1734,1735,3,1000,
500,0,1735,1736,5,285,0,0,1736,1737,3,994,497,0,1737,1742,3,1006,503,0,1738,
1740,3,84,42,0,1739,1741,3,940,470,0,1740,1739,1,0,0,0,1740,1741,1,0,0,0,
1741,1743,1,0,0,0,1742,1738,1,0,0,0,1742,1743,1,0,0,0,1743,1745,1,0,0,0,
1744,1746,3,952,476,0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,81,1,0,0,
0,1747,1748,5,129,0,0,1748,1749,5,201,0,0,1749,1750,3,1000,500,0,1750,1751,
5,285,0,0,1751,1752,3,994,497,0,1752,83,1,0,0,0,1753,1754,5,456,0,0,1754,
1755,7,5,0,0,1755,85,1,0,0,0,1756,1758,5,396,0,0,1757,1759,5,171,0,0,1758,
1757,1,0,0,0,1758,1759,1,0,0,0,1759,1760,1,0,0,0,1760,1763,5,419,0,0,1761,
1762,7,1,0,0,1762,1764,3,994,497,0,1763,1761,1,0,0,0,1763,1764,1,0,0,0,1764,
1769,1,0,0,0,1765,1766,5,236,0,0,1766,1770,3,958,479,0,1767,1768,5,474,0,
0,1768,1770,3,834,417,0,1769,1765,1,0,0,0,1769,1767,1,0,0,0,1769,1770,1,
0,0,0,1770,87,1,0,0,0,1771,1772,5,396,0,0,1772,1773,5,424,0,0,1773,1776,
5,419,0,0,1774,1775,7,1,0,0,1775,1777,3,994,497,0,1776,1774,1,0,0,0,1776,
1777,1,0,0,0,1777,1782,1,0,0,0,1778,1779,5,236,0,0,1779,1783,3,958,479,0,
1780,1781,5,474,0,0,1781,1783,3,834,417,0,1782,1778,1,0,0,0,1782,1780,1,
0,0,0,1782,1783,1,0,0,0,1783,89,1,0,0,0,1784,1785,5,396,0,0,1785,1790,5,
88,0,0,1786,1791,5,418,0,0,1787,1791,5,465,0,0,1788,1789,5,253,0,0,1789,
1791,5,465,0,0,1790,1786,1,0,0,0,1790,1787,1,0,0,0,1790,1788,1,0,0,0,1791,
1792,1,0,0,0,1792,1793,3,994,497,0,1793,91,1,0,0,0,1794,1796,5,396,0,0,1795,
1797,5,171,0,0,1796,1795,1,0,0,0,1796,1797,1,0,0,0,1797,1798,1,0,0,0,1798,
1799,7,6,0,0,1799,1800,7,1,0,0,1800,1801,3,994,497,0,1801,1804,1,0,0,0,1802,
1803,7,1,0,0,1803,1805,3,994,497,0,1804,1802,1,0,0,0,1804,1805,1,0,0,0,1805,
1810,1,0,0,0,1806,1807,5,236,0,0,1807,1811,3,958,479,0,1808,1809,5,474,0,
0,1809,1811,3,834,417,0,1810,1806,1,0,0,0,1810,1808,1,0,0,0,1810,1811,1,
0,0,0,1811,93,1,0,0,0,1812,1813,5,396,0,0,1813,1814,5,418,0,0,1814,1817,
5,404,0,0,1815,1816,7,1,0,0,1816,1818,3,994,497,0,1817,1815,1,0,0,0,1817,
1818,1,0,0,0,1818,1823,1,0,0,0,1819,1820,5,236,0,0,1820,1824,3,958,479,0,
1821,1822,5,474,0,0,1822,1824,3,834,417,0,1823,1819,1,0,0,0,1823,1821,1,
0,0,0,1823,1824,1,0,0,0,1824,95,1,0,0,0,1825,1826,5,343,0,0,1826,1827,5,
147,0,0,1827,1828,5,418,0,0,1828,1841,3,994,497,0,1829,1830,5,298,0,0,1830,
1831,5,2,0,0,1831,1836,3,958,479,0,1832,1833,5,3,0,0,1833,1835,3,958,479,
0,1834,1832,1,0,0,0,1835,1838,1,0,0,0,1836,1834,1,0,0,0,1836,1837,1,0,0,
0,1837,1839,1,0,0,0,1838,1836,1,0,0,0,1839,1840,5,4,0,0,1840,1842,1,0,0,
0,1841,1829,1,0,0,0,1841,1842,1,0,0,0,1842,97,1,0,0,0,1843,1844,5,396,0,
0,1844,1845,5,19,0,0,1845,1846,5,418,0,0,1846,1849,7,7,0,0,1847,1848,7,1,
0,0,1848,1850,3,994,497,0,1849,1847,1,0,0,0,1849,1850,1,0,0,0,1850,1853,
1,0,0,0,1851,1852,5,474,0,0,1852,1854,3,834,417,0,1853,1851,1,0,0,0,1853,
1854,1,0,0,0,1854,1865,1,0,0,0,1855,1856,5,293,0,0,1856,1857,5,55,0,0,1857,
1862,3,754,377,0,1858,1859,5,3,0,0,1859,1861,3,754,377,0,1860,1858,1,0,0,
0,1861,1864,1,0,0,0,1862,1860,1,0,0,0,1862,1863,1,0,0,0,1863,1866,1,0,0,
0,1864,1862,1,0,0,0,1865,1855,1,0,0,0,1865,1866,1,0,0,0,1866,1868,1,0,0,
0,1867,1869,3,758,379,0,1868,1867,1,0,0,0,1868,1869,1,0,0,0,1869,1898,1,
0,0,0,1870,1871,5,396,0,0,1871,1872,5,19,0,0,1872,1873,5,253,0,0,1873,1876,
5,465,0,0,1874,1875,7,1,0,0,1875,1877,3,994,497,0,1876,1874,1,0,0,0,1876,
1877,1,0,0,0,1877,1880,1,0,0,0,1878,1879,5,474,0,0,1879,1881,3,834,417,0,
1880,1878,1,0,0,0,1880,1881,1,0,0,0,1881,1892,1,0,0,0,1882,1883,5,293,0,
0,1883,1884,5,55,0,0,1884,1889,3,754,377,0,1885,1886,5,3,0,0,1886,1888,3,
754,377,0,1887,1885,1,0,0,0,1888,1891,1,0,0,0,1889,1887,1,0,0,0,1889,1890,
1,0,0,0,1890,1893,1,0,0,0,1891,1889,1,0,0,0,1892,1882,1,0,0,0,1892,1893,
1,0,0,0,1893,1895,1,0,0,0,1894,1896,3,758,379,0,1895,1894,1,0,0,0,1895,1896,
1,0,0,0,1896,1898,1,0,0,0,1897,1843,1,0,0,0,1897,1870,1,0,0,0,1898,99,1,
0,0,0,1899,1906,7,8,0,0,1900,1902,3,994,497,0,1901,1903,5,18,0,0,1902,1901,
1,0,0,0,1902,1903,1,0,0,0,1903,1907,1,0,0,0,1904,1905,5,155,0,0,1905,1907,
3,940,470,0,1906,1900,1,0,0,0,1906,1904,1,0,0,0,1907,101,1,0,0,0,1908,1910,
5,88,0,0,1909,1911,7,3,0,0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,1912,
1,0,0,0,1912,1916,5,418,0,0,1913,1914,5,193,0,0,1914,1915,5,276,0,0,1915,
1917,5,144,0,0,1916,1913,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,
1920,3,994,497,0,1919,1921,3,892,446,0,1920,1919,1,0,0,0,1920,1921,1,0,0,
0,1921,1923,1,0,0,0,1922,1924,3,930,465,0,1923,1922,1,0,0,0,1923,1924,1,
0,0,0,1924,1926,1,0,0,0,1925,1927,3,936,468,0,1926,1925,1,0,0,0,1926,1927,
1,0,0,0,1927,1928,1,0,0,0,1928,1929,5,236,0,0,1929,1930,3,994,497,0,1930,
103,1,0,0,0,1931,1932,5,396,0,0,1932,1933,7,9,0,0,1933,1934,7,1,0,0,1934,
1935,3,994,497,0,1935,1938,1,0,0,0,1936,1937,7,1,0,0,1937,1939,3,994,497,
0,1938,1936,1,0,0,0,1938,1939,1,0,0,0,1939,105,1,0,0,0,1940,1941,5,342,0,
0,1941,1942,5,418,0,0,1942,1943,3,994,497,0,1943,107,1,0,0,0,1944,1945,5,
441,0,0,1945,1946,5,418,0,0,1946,1948,3,994,497,0,1947,1949,3,808,404,0,
1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,109,1,0,0,0,1950,1951,5,57,0,0,
1951,1952,5,19,0,0,1952,1954,5,418,0,0,1953,1955,7,7,0,0,1954,1953,1,0,0,
0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,1957,5,168,0,0,1957,1968,3,994,
497,0,1958,1959,5,2,0,0,1959,1964,5,514,0,0,1960,1961,5,3,0,0,1961,1963,
5,514,0,0,1962,1960,1,0,0,0,1963,1966,1,0,0,0,1964,1962,1,0,0,0,1964,1965,
1,0,0,0,1965,1967,1,0,0,0,1966,1964,1,0,0,0,1967,1969,5,4,0,0,1968,1958,
1,0,0,0,1968,1969,1,0,0,0,1969,1977,1,0,0,0,1970,1971,5,57,0,0,1971,1972,
5,19,0,0,1972,1973,5,253,0,0,1973,1974,5,465,0,0,1974,1975,5,168,0,0,1975,
1977,3,994,497,0,1976,1950,1,0,0,0,1976,1970,1,0,0,0,1977,111,1,0,0,0,1978,
1980,5,396,0,0,1979,1981,5,424,0,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,
1982,1,0,0,0,1982,1983,5,299,0,0,1983,1984,5,168,0,0,1984,1987,3,994,497,
0,1985,1986,5,474,0,0,1986,1988,3,834,417,0,1987,1985,1,0,0,0,1987,1988,
1,0,0,0,1988,1999,1,0,0,0,1989,1990,5,293,0,0,1990,1991,5,55,0,0,1991,1996,
3,754,377,0,1992,1993,5,3,0,0,1993,1995,3,754,377,0,1994,1992,1,0,0,0,1995,
1998,1,0,0,0,1996,1994,1,0,0,0,1996,1997,1,0,0,0,1997,2000,1,0,0,0,1998,
1996,1,0,0,0,1999,1989,1,0,0,0,1999,2000,1,0,0,0,2000,2002,1,0,0,0,2001,
2003,3,758,379,0,2002,2001,1,0,0,0,2002,2003,1,0,0,0,2003,113,1,0,0,0,2004,
2005,5,342,0,0,2005,2006,5,298,0,0,2006,2007,3,1000,500,0,2007,2008,5,168,
0,0,2008,2009,3,994,497,0,2009,115,1,0,0,0,2010,2013,5,88,0,0,2011,2012,
5,292,0,0,2012,2014,5,351,0,0,2013,2011,1,0,0,0,2013,2014,1,0,0,0,2014,2015,
1,0,0,0,2015,2019,5,465,0,0,2016,2017,5,193,0,0,2017,2018,5,276,0,0,2018,
2020,5,144,0,0,2019,2016,1,0,0,0,2019,2020,1,0,0,0,2020,2021,1,0,0,0,2021,
2033,3,994,497,0,2022,2023,5,2,0,0,2023,2028,3,122,61,0,2024,2025,5,3,0,
0,2025,2027,3,122,61,0,2026,2024,1,0,0,0,2027,2030,1,0,0,0,2028,2026,1,0,
0,0,2028,2029,1,0,0,0,2029,2031,1,0,0,0,2030,2028,1,0,0,0,2031,2032,5,4,
0,0,2032,2034,1,0,0,0,2033,2022,1,0,0,0,2033,2034,1,0,0,0,2034,2036,1,0,
0,0,2035,2037,3,952,476,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,2040,
1,0,0,0,2038,2039,5,385,0,0,2039,2041,7,10,0,0,2040,2038,1,0,0,0,2040,2041,
1,0,0,0,2041,2042,1,0,0,0,2042,2043,5,27,0,0,2043,2044,3,736,368,0,2044,
117,1,0,0,0,2045,2046,5,19,0,0,2046,2047,5,465,0,0,2047,2059,3,994,497,0,
2048,2049,5,2,0,0,2049,2054,3,122,61,0,2050,2051,5,3,0,0,2051,2053,3,122,
61,0,2052,2050,1,0,0,0,2053,2056,1,0,0,0,2054,2052,1,0,0,0,2054,2055,1,0,
0,0,2055,2057,1,0,0,0,2056,2054,1,0,0,0,2057,2058,5,4,0,0,2058,2060,1,0,
0,0,2059,2048,1,0,0,0,2059,2060,1,0,0,0,2060,2061,1,0,0,0,2061,2062,5,27,
0,0,2062,2063,3,736,368,0,2063,2088,1,0,0,0,2064,2065,5,19,0,0,2065,2066,
5,465,0,0,2066,2067,3,994,497,0,2067,2068,5,391,0,0,2068,2069,5,385,0,0,
2069,2070,7,10,0,0,2070,2088,1,0,0,0,2071,2072,5,19,0,0,2072,2073,5,465,
0,0,2073,2074,3,994,497,0,2074,2075,5,391,0,0,2075,2076,3,936,468,0,2076,
2088,1,0,0,0,2077,2078,5,19,0,0,2078,2079,5,465,0,0,2079,2080,3,994,497,
0,2080,2081,7,11,0,0,2081,2083,5,118,0,0,2082,2084,5,401,0,0,2083,2082,1,
0,0,0,2083,2084,1,0,0,0,2084,2085,1,0,0,0,2085,2086,3,736,368,0,2086,2088,
1,0,0,0,2087,2045,1,0,0,0,2087,2064,1,0,0,0,2087,2071,1,0,0,0,2087,2077,
1,0,0,0,2088,119,1,0,0,0,2089,2090,5,129,0,0,2090,2093,5,465,0,0,2091,2092,
5,193,0,0,2092,2094,5,144,0,0,2093,2091,1,0,0,0,2093,2094,1,0,0,0,2094,2095,
1,0,0,0,2095,2096,3,994,497,0,2096,121,1,0,0,0,2097,2099,3,1000,500,0,2098,
2100,3,952,476,0,2099,2098,1,0,0,0,2099,2100,1,0,0,0,2100,123,1,0,0,0,2101,
2102,5,410,0,0,2102,2104,5,423,0,0,2103,2105,3,994,497,0,2104,2103,1,0,0,
0,2104,2105,1,0,0,0,2105,2109,1,0,0,0,2106,2108,3,126,63,0,2107,2106,1,0,
0,0,2108,2111,1,0,0,0,2109,2107,1,0,0,0,2109,2110,1,0,0,0,2110,2112,1,0,
0,0,2111,2109,1,0,0,0,2112,2116,5,27,0,0,2113,2117,3,72,36,0,2114,2117,3,
346,173,0,2115,2117,3,642,321,0,2116,2113,1,0,0,0,2116,2114,1,0,0,0,2116,
2115,1,0,0,0,2117,125,1,0,0,0,2118,2121,3,936,468,0,2119,2121,3,130,65,0,
2120,2118,1,0,0,0,2120,2119,1,0,0,0,2121,127,1,0,0,0,2122,2123,5,129,0,0,
2123,2124,5,423,0,0,2124,2126,3,994,497,0,2125,2127,5,165,0,0,2126,2125,
1,0,0,0,2126,2127,1,0,0,0,2127,129,1,0,0,0,2128,2134,5,380,0,0,2129,2130,
5,402,0,0,2130,2131,5,2,0,0,2131,2132,3,958,479,0,2132,2133,5,4,0,0,2133,
2135,1,0,0,0,2134,2129,1,0,0,0,2134,2135,1,0,0,0,2135,2136,1,0,0,0,2136,
2137,5,149,0,0,2137,2138,5,2,0,0,2138,2139,3,968,484,0,2139,2140,5,4,0,0,
2140,131,1,0,0,0,2141,2142,5,88,0,0,2142,2143,5,253,0,0,2143,2147,5,465,
0,0,2144,2145,5,193,0,0,2145,2146,5,276,0,0,2146,2148,5,144,0,0,2147,2144,
1,0,0,0,2147,2148,1,0,0,0,2148,2149,1,0,0,0,2149,2168,3,994,497,0,2150,2151,
5,2,0,0,2151,2156,3,122,61,0,2152,2153,5,3,0,0,2153,2155,3,122,61,0,2154,
2152,1,0,0,0,2155,2158,1,0,0,0,2156,2154,1,0,0,0,2156,2157,1,0,0,0,2157,
2163,1,0,0,0,2158,2156,1,0,0,0,2159,2160,5,3,0,0,2160,2162,3,40,20,0,2161,
2159,1,0,0,0,2162,2165,1,0,0,0,2163,2161,1,0,0,0,2163,2164,1,0,0,0,2164,
2166,1,0,0,0,2165,2163,1,0,0,0,2166,2167,5,4,0,0,2167,2169,1,0,0,0,2168,
2150,1,0,0,0,2168,2169,1,0,0,0,2169,2171,1,0,0,0,2170,2172,3,952,476,0,2171,
2170,1,0,0,0,2171,2172,1,0,0,0,2172,2176,1,0,0,0,2173,2175,3,136,68,0,2174,
2173,1,0,0,0,2175,2178,1,0,0,0,2176,2174,1,0,0,0,2176,2177,1,0,0,0,2177,
2179,1,0,0,0,2178,2176,1,0,0,0,2179,2180,5,27,0,0,2180,2181,3,736,368,0,
2181,133,1,0,0,0,2182,2195,3,848,424,0,2183,2184,5,2,0,0,2184,2189,3,848,
424,0,2185,2186,5,3,0,0,2186,2188,3,848,424,0,2187,2185,1,0,0,0,2188,2191,
1,0,0,0,2189,2187,1,0,0,0,2189,2190,1,0,0,0,2190,2192,1,0,0,0,2191,2189,
1,0,0,0,2192,2193,5,4,0,0,2193,2195,1,0,0,0,2194,2182,1,0,0,0,2194,2183,
1,0,0,0,2195,135,1,0,0,0,2196,2197,5,298,0,0,2197,2198,5,55,0,0,2198,2204,
3,134,67,0,2199,2204,3,930,465,0,2200,2204,3,50,25,0,2201,2204,3,932,466,
0,2202,2204,3,936,468,0,2203,2196,1,0,0,0,2203,2199,1,0,0,0,2203,2200,1,
0,0,0,2203,2201,1,0,0,0,2203,2202,1,0,0,0,2204,137,1,0,0,0,2205,2206,5,396,
0,0,2206,2207,5,253,0,0,2207,2210,5,466,0,0,2208,2209,7,1,0,0,2209,2211,
3,994,497,0,2210,2208,1,0,0,0,2210,2211,1,0,0,0,2211,2216,1,0,0,0,2212,2213,
5,236,0,0,2213,2217,3,958,479,0,2214,2215,5,474,0,0,2215,2217,3,834,417,
0,2216,2212,1,0,0,0,2216,2214,1,0,0,0,2216,2217,1,0,0,0,2217,139,1,0,0,0,
2218,2219,5,129,0,0,2219,2220,5,253,0,0,2220,2223,5,465,0,0,2221,2222,5,
193,0,0,2222,2224,5,144,0,0,2223,2221,1,0,0,0,2223,2224,1,0,0,0,2224,2225,
1,0,0,0,2225,2226,3,994,497,0,2226,141,1,0,0,0,2227,2228,5,19,0,0,2228,2229,
5,253,0,0,2229,2230,5,465,0,0,2230,2235,3,994,497,0,2231,2236,3,932,466,
0,2232,2236,3,270,135,0,2233,2236,3,274,137,0,2234,2236,3,272,136,0,2235,
2231,1,0,0,0,2235,2232,1,0,0,0,2235,2233,1,0,0,0,2235,2234,1,0,0,0,2236,
2244,1,0,0,0,2237,2238,5,19,0,0,2238,2239,5,253,0,0,2239,2240,5,465,0,0,
2240,2241,3,994,497,0,2241,2242,3,934,467,0,2242,2244,1,0,0,0,2243,2227,
1,0,0,0,2243,2237,1,0,0,0,2244,143,1,0,0,0,2245,2246,5,343,0,0,2246,2247,
5,253,0,0,2247,2248,5,465,0,0,2248,2254,3,994,497,0,2249,2252,5,298,0,0,
2250,2253,3,918,459,0,2251,2253,3,904,452,0,2252,2250,1,0,0,0,2252,2251,
1,0,0,0,2253,2255,1,0,0,0,2254,2249,1,0,0,0,2254,2255,1,0,0,0,2255,2257,
1,0,0,0,2256,2258,5,165,0,0,2257,2256,1,0,0,0,2257,2258,1,0,0,0,2258,2262,
1,0,0,0,2259,2260,5,476,0,0,2260,2261,7,12,0,0,2261,2263,5,265,0,0,2262,
2259,1,0,0,0,2262,2263,1,0,0,0,2263,2267,1,0,0,0,2264,2265,5,476,0,0,2265,
2266,5,319,0,0,2266,2268,5,514,0,0,2267,2264,1,0,0,0,2267,2268,1,0,0,0,2268,
145,1,0,0,0,2269,2270,5,57,0,0,2270,2271,5,343,0,0,2271,2272,5,253,0,0,2272,
2273,5,465,0,0,2273,2275,3,994,497,0,2274,2276,5,165,0,0,2275,2274,1,0,0,
0,2275,2276,1,0,0,0,2276,147,1,0,0,0,2277,2278,5,14,0,0,2278,2279,5,391,
0,0,2279,2280,5,169,0,0,2280,2281,5,82,0,0,2281,2282,5,2,0,0,2282,2283,3,
944,472,0,2283,2286,5,4,0,0,2284,2285,5,476,0,0,2285,2287,5,487,0,0,2286,
2284,1,0,0,0,2286,2287,1,0,0,0,2287,149,1,0,0,0,2288,2289,5,14,0,0,2289,
2290,5,391,0,0,2290,2291,5,353,0,0,2291,2292,5,404,0,0,2292,2293,3,936,468,
0,2293,151,1,0,0,0,2294,2295,5,14,0,0,2295,2296,5,396,0,0,2296,2297,5,169,
0,0,2297,2300,5,82,0,0,2298,2299,5,236,0,0,2299,2301,3,958,479,0,2300,2298,
1,0,0,0,2300,2301,1,0,0,0,2301,153,1,0,0,0,2302,2303,5,14,0,0,2303,2304,
5,396,0,0,2304,2305,5,353,0,0,2305,2306,5,127,0,0,2306,2307,5,168,0,0,2307,
2309,3,994,497,0,2308,2310,3,808,404,0,2309,2308,1,0,0,0,2309,2310,1,0,0,
0,2310,155,1,0,0,0,2311,2312,5,14,0,0,2312,2313,5,396,0,0,2313,2314,5,353,
0,0,2314,2315,5,404,0,0,2315,2316,5,168,0,0,2316,2318,3,994,497,0,2317,2319,
3,808,404,0,2318,2317,1,0,0,0,2318,2319,1,0,0,0,2319,2322,1,0,0,0,2320,2321,
5,474,0,0,2321,2323,3,834,417,0,2322,2320,1,0,0,0,2322,2323,1,0,0,0,2323,
157,1,0,0,0,2324,2325,5,14,0,0,2325,2326,5,349,0,0,2326,2327,5,418,0,0,2327,
2329,3,994,497,0,2328,2330,3,808,404,0,2329,2328,1,0,0,0,2329,2330,1,0,0,
0,2330,159,1,0,0,0,2331,2332,5,14,0,0,2332,2333,5,57,0,0,2333,2334,5,349,
0,0,2334,2335,5,418,0,0,2335,2337,3,994,497,0,2336,2338,3,808,404,0,2337,
2336,1,0,0,0,2337,2338,1,0,0,0,2338,161,1,0,0,0,2339,2340,5,14,0,0,2340,
2341,5,67,0,0,2341,2342,3,812,406,0,2342,2343,5,327,0,0,2343,2344,5,2,0,
0,2344,2345,3,944,472,0,2345,2346,5,4,0,0,2346,163,1,0,0,0,2347,2348,5,14,
0,0,2348,2349,5,391,0,0,2349,2350,5,418,0,0,2350,2351,3,994,497,0,2351,2352,
5,298,0,0,2352,2355,5,2,0,0,2353,2356,3,1008,504,0,2354,2356,5,514,0,0,2355,
2353,1,0,0,0,2355,2354,1,0,0,0,2356,2357,1,0,0,0,2357,2358,5,4,0,0,2358,
2359,5,464,0,0,2359,2360,5,436,0,0,2360,2361,5,514,0,0,2361,165,1,0,0,0,
2362,2367,5,225,0,0,2363,2365,5,83,0,0,2364,2363,1,0,0,0,2364,2365,1,0,0,
0,2365,2368,1,0,0,0,2366,2368,5,333,0,0,2367,2364,1,0,0,0,2367,2366,1,0,
0,0,2368,2371,1,0,0,0,2369,2372,5,514,0,0,2370,2372,3,958,479,0,2371,2369,
1,0,0,0,2371,2370,1,0,0,0,2372,167,1,0,0,0,2373,2374,5,413,0,0,2374,169,
1,0,0,0,2375,2376,5,14,0,0,2376,2377,5,391,0,0,2377,2378,5,32,0,0,2378,2379,
5,70,0,0,2379,2380,5,398,0,0,2380,2384,5,285,0,0,2381,2382,5,406,0,0,2382,
2383,5,467,0,0,2383,2385,3,1000,500,0,2384,2381,1,0,0,0,2384,2385,1,0,0,
0,2385,171,1,0,0,0,2386,2387,5,14,0,0,2387,2388,5,391,0,0,2388,2389,5,32,
0,0,2389,2390,5,70,0,0,2390,2391,5,398,0,0,2391,2392,5,283,0,0,2392,173,
1,0,0,0,2393,2394,5,19,0,0,2394,2395,5,414,0,0,2395,2396,3,230,115,0,2396,
175,1,0,0,0,2397,2398,5,57,0,0,2398,2399,5,113,0,0,2399,2400,5,35,0,0,2400,
2405,3,958,479,0,2401,2402,5,3,0,0,2402,2404,3,958,479,0,2403,2401,1,0,0,
0,2404,2407,1,0,0,0,2405,2403,1,0,0,0,2405,2406,1,0,0,0,2406,177,1,0,0,0,
2407,2405,1,0,0,0,2408,2409,5,396,0,0,2409,2410,5,81,0,0,2410,2411,5,274,
0,0,2411,179,1,0,0,0,2412,2413,5,88,0,0,2413,2414,5,147,0,0,2414,2418,5,
60,0,0,2415,2416,5,193,0,0,2416,2417,5,276,0,0,2417,2419,5,144,0,0,2418,
2415,1,0,0,0,2418,2419,1,0,0,0,2419,2420,1,0,0,0,2420,2422,3,1008,504,0,
2421,2423,3,952,476,0,2422,2421,1,0,0,0,2422,2423,1,0,0,0,2423,2424,1,0,
0,0,2424,2425,3,936,468,0,2425,181,1,0,0,0,2426,2427,5,396,0,0,2427,2428,
5,88,0,0,2428,2429,5,60,0,0,2429,2430,3,1008,504,0,2430,183,1,0,0,0,2431,
2432,5,129,0,0,2432,2435,5,60,0,0,2433,2434,5,193,0,0,2434,2436,5,144,0,
0,2435,2433,1,0,0,0,2435,2436,1,0,0,0,2436,2437,1,0,0,0,2437,2438,3,1008,
504,0,2438,185,1,0,0,0,2439,2440,5,396,0,0,2440,2443,5,61,0,0,2441,2442,
5,236,0,0,2442,2444,3,958,479,0,2443,2441,1,0,0,0,2443,2444,1,0,0,0,2444,
187,1,0,0,0,2445,2446,5,19,0,0,2446,2447,5,60,0,0,2447,2448,3,1008,504,0,
2448,2449,3,274,137,0,2449,189,1,0,0,0,2450,2451,5,88,0,0,2451,2452,5,406,
0,0,2452,2456,5,467,0,0,2453,2454,5,193,0,0,2454,2455,5,276,0,0,2455,2457,
5,144,0,0,2456,2453,1,0,0,0,2456,2457,1,0,0,0,2457,2458,1,0,0,0,2458,2459,
3,1008,504,0,2459,2460,3,192,96,0,2460,2462,3,194,97,0,2461,2463,3,952,476,
0,2462,2461,1,0,0,0,2462,2463,1,0,0,0,2463,2465,1,0,0,0,2464,2466,3,936,
468,0,2465,2464,1,0,0,0,2465,2466,1,0,0,0,2466,191,1,0,0,0,2467,2468,5,442,
0,0,2468,2469,5,488,0,0,2469,2470,3,1000,500,0,2470,193,1,0,0,0,2471,2472,
5,244,0,0,2472,2473,5,488,0,0,2473,2474,3,908,454,0,2474,195,1,0,0,0,2475,
2476,5,396,0,0,2476,2477,5,406,0,0,2477,2480,5,468,0,0,2478,2479,5,236,0,
0,2479,2481,3,958,479,0,2480,2478,1,0,0,0,2480,2481,1,0,0,0,2481,197,1,0,
0,0,2482,2483,5,129,0,0,2483,2484,5,406,0,0,2484,2487,5,467,0,0,2485,2486,
5,193,0,0,2486,2488,5,144,0,0,2487,2485,1,0,0,0,2487,2488,1,0,0,0,2488,2489,
1,0,0,0,2489,2490,3,1008,504,0,2490,199,1,0,0,0,2491,2492,5,19,0,0,2492,
2493,5,406,0,0,2493,2494,5,467,0,0,2494,2495,3,1008,504,0,2495,2500,3,202,
101,0,2496,2497,5,3,0,0,2497,2499,3,202,101,0,2498,2496,1,0,0,0,2499,2502,
1,0,0,0,2500,2498,1,0,0,0,2500,2501,1,0,0,0,2501,201,1,0,0,0,2502,2500,1,
0,0,0,2503,2506,3,206,103,0,2504,2506,3,204,102,0,2505,2503,1,0,0,0,2505,
2504,1,0,0,0,2506,203,1,0,0,0,2507,2508,5,391,0,0,2508,2509,3,940,470,0,
2509,205,1,0,0,0,2510,2511,5,76,0,0,2511,2512,5,488,0,0,2512,2513,3,958,
479,0,2513,207,1,0,0,0,2514,2515,7,8,0,0,2515,2516,5,406,0,0,2516,2517,5,
467,0,0,2517,2518,3,1008,504,0,2518,209,1,0,0,0,2519,2520,5,391,0,0,2520,
2521,3,1008,504,0,2521,2522,5,27,0,0,2522,2523,5,114,0,0,2523,2524,5,406,
0,0,2524,2525,5,467,0,0,2525,211,1,0,0,0,2526,2527,5,14,0,0,2527,2528,5,
124,0,0,2528,2529,5,150,0,0,2529,2533,3,958,479,0,2530,2531,5,285,0,0,2531,
2532,5,35,0,0,2532,2534,3,958,479,0,2533,2530,1,0,0,0,2533,2534,1,0,0,0,
2534,2564,1,0,0,0,2535,2536,5,14,0,0,2536,2537,5,134,0,0,2537,2538,5,150,
0,0,2538,2542,3,958,479,0,2539,2540,5,476,0,0,2540,2541,5,514,0,0,2541,2543,
5,429,0,0,2542,2539,1,0,0,0,2542,2543,1,0,0,0,2543,2547,1,0,0,0,2544,2545,
5,285,0,0,2545,2546,5,35,0,0,2546,2548,3,958,479,0,2547,2544,1,0,0,0,2547,
2548,1,0,0,0,2548,2564,1,0,0,0,2549,2550,5,14,0,0,2550,2551,5,134,0,0,2551,
2552,5,150,0,0,2552,2556,3,958,479,0,2553,2554,5,476,0,0,2554,2555,5,515,
0,0,2555,2557,5,321,0,0,2556,2553,1,0,0,0,2556,2557,1,0,0,0,2557,2561,1,
0,0,0,2558,2559,5,285,0,0,2559,2560,5,35,0,0,2560,2562,3,958,479,0,2561,
2558,1,0,0,0,2561,2562,1,0,0,0,2562,2564,1,0,0,0,2563,2526,1,0,0,0,2563,
2535,1,0,0,0,2563,2549,1,0,0,0,2564,213,1,0,0,0,2565,2566,5,396,0,0,2566,
2569,5,151,0,0,2567,2568,5,236,0,0,2568,2570,3,958,479,0,2569,2567,1,0,0,
0,2569,2570,1,0,0,0,2570,2574,1,0,0,0,2571,2572,5,285,0,0,2572,2573,5,35,
0,0,2573,2575,3,958,479,0,2574,2571,1,0,0,0,2574,2575,1,0,0,0,2575,215,1,
0,0,0,2576,2577,5,88,0,0,2577,2578,5,119,0,0,2578,2579,3,228,114,0,2579,
2580,5,456,0,0,2580,2581,3,994,497,0,2581,2582,5,2,0,0,2582,2587,3,226,113,
0,2583,2584,5,3,0,0,2584,2586,3,226,113,0,2585,2583,1,0,0,0,2586,2589,1,
0,0,0,2587,2585,1,0,0,0,2587,2588,1,0,0,0,2588,2590,1,0,0,0,2589,2587,1,
0,0,0,2590,2592,5,4,0,0,2591,2593,3,936,468,0,2592,2591,1,0,0,0,2592,2593,
1,0,0,0,2593,217,1,0,0,0,2594,2595,5,129,0,0,2595,2596,5,119,0,0,2596,2598,
3,994,497,0,2597,2599,5,56,0,0,2598,2597,1,0,0,0,2598,2599,1,0,0,0,2599,
219,1,0,0,0,2600,2601,5,343,0,0,2601,2602,5,119,0,0,2602,2603,3,994,497,
0,2603,221,1,0,0,0,2604,2605,5,396,0,0,2605,2607,5,119,0,0,2606,2608,3,994,
497,0,2607,2606,1,0,0,0,2607,2608,1,0,0,0,2608,223,1,0,0,0,2609,2610,5,57,
0,0,2610,2611,5,343,0,0,2611,2612,5,119,0,0,2612,2613,3,994,497,0,2613,225,
1,0,0,0,2614,2615,3,994,497,0,2615,2616,5,223,0,0,2616,2621,1,0,0,0,2617,
2618,3,994,497,0,2618,2619,5,457,0,0,2619,2621,1,0,0,0,2620,2614,1,0,0,0,
2620,2617,1,0,0,0,2621,227,1,0,0,0,2622,2623,3,994,497,0,2623,229,1,0,0,
0,2624,2672,3,232,116,0,2625,2672,3,234,117,0,2626,2672,3,236,118,0,2627,
2672,3,238,119,0,2628,2672,3,240,120,0,2629,2672,3,242,121,0,2630,2672,3,
244,122,0,2631,2672,3,246,123,0,2632,2672,3,248,124,0,2633,2672,3,250,125,
0,2634,2672,3,252,126,0,2635,2672,3,254,127,0,2636,2672,3,256,128,0,2637,
2672,3,258,129,0,2638,2672,3,260,130,0,2639,2672,3,262,131,0,2640,2672,3,
264,132,0,2641,2672,3,266,133,0,2642,2672,3,268,134,0,2643,2672,3,270,135,
0,2644,2672,3,272,136,0,2645,2672,3,274,137,0,2646,2672,3,280,140,0,2647,
2672,3,282,141,0,2648,2672,3,284,142,0,2649,2672,3,286,143,0,2650,2672,3,
288,144,0,2651,2672,3,290,145,0,2652,2672,3,292,146,0,2653,2672,3,294,147,
0,2654,2672,3,276,138,0,2655,2672,3,278,139,0,2656,2672,3,300,150,0,2657,
2672,3,302,151,0,2658,2672,3,306,153,0,2659,2672,3,304,152,0,2660,2672,3,
308,154,0,2661,2672,3,310,155,0,2662,2672,3,312,156,0,2663,2672,3,332,166,
0,2664,2672,3,334,167,0,2665,2672,3,336,168,0,2666,2672,3,928,464,0,2667,
2672,3,338,169,0,2668,2672,3,340,170,0,2669,2672,3,342,171,0,2670,2672,3,
344,172,0,2671,2624,1,0,0,0,2671,2625,1,0,0,0,2671,2626,1,0,0,0,2671,2627,
1,0,0,0,2671,2628,1,0,0,0,2671,2629,1,0,0,0,2671,2630,1,0,0,0,2671,2631,
1,0,0,0,2671,2632,1,0,0,0,2671,2633,1,0,0,0,2671,2634,1,0,0,0,2671,2635,
1,0,0,0,2671,2636,1,0,0,0,2671,2637,1,0,0,0,2671,2638,1,0,0,0,2671,2639,
1,0,0,0,2671,2640,1,0,0,0,2671,2641,1,0,0,0,2671,2642,1,0,0,0,2671,2643,
1,0,0,0,2671,2644,1,0,0,0,2671,2645,1,0,0,0,2671,2646,1,0,0,0,2671,2647,
1,0,0,0,2671,2648,1,0,0,0,2671,2649,1,0,0,0,2671,2650,1,0,0,0,2671,2651,
1,0,0,0,2671,2652,1,0,0,0,2671,2653,1,0,0,0,2671,2654,1,0,0,0,2671,2655,
1,0,0,0,2671,2656,1,0,0,0,2671,2657,1,0,0,0,2671,2658,1,0,0,0,2671,2659,
1,0,0,0,2671,2660,1,0,0,0,2671,2661,1,0,0,0,2671,2662,1,0,0,0,2671,2663,
1,0,0,0,2671,2664,1,0,0,0,2671,2665,1,0,0,0,2671,2666,1,0,0,0,2671,2667,
1,0,0,0,2671,2668,1,0,0,0,2671,2669,1,0,0,0,2671,2670,1,0,0,0,2672,231,1,
0,0,0,2673,2674,5,13,0,0,2674,2675,7,13,0,0,2675,2676,3,958,479,0,2676,233,
1,0,0,0,2677,2678,5,129,0,0,2678,2679,7,13,0,0,2679,2680,3,958,479,0,2680,
235,1,0,0,0,2681,2682,5,266,0,0,2682,2683,5,169,0,0,2683,2684,5,188,0,0,
2684,2685,3,958,479,0,2685,2686,5,436,0,0,2686,2687,3,958,479,0,2687,237,
1,0,0,0,2688,2689,5,13,0,0,2689,2690,5,35,0,0,2690,2695,3,958,479,0,2691,
2692,5,3,0,0,2692,2694,3,958,479,0,2693,2691,1,0,0,0,2694,2697,1,0,0,0,2695,
2693,1,0,0,0,2695,2696,1,0,0,0,2696,2701,1,0,0,0,2697,2695,1,0,0,0,2698,
2699,5,214,0,0,2699,2700,5,469,0,0,2700,2702,3,1008,504,0,2701,2698,1,0,
0,0,2701,2702,1,0,0,0,2702,239,1,0,0,0,2703,2704,5,129,0,0,2704,2705,5,35,
0,0,2705,2710,3,958,479,0,2706,2707,5,3,0,0,2707,2709,3,958,479,0,2708,2706,
1,0,0,0,2709,2712,1,0,0,0,2710,2708,1,0,0,0,2710,2711,1,0,0,0,2711,2716,
1,0,0,0,2712,2710,1,0,0,0,2713,2714,5,168,0,0,2714,2715,5,469,0,0,2715,2717,
3,1008,504,0,2716,2713,1,0,0,0,2716,2717,1,0,0,0,2717,2719,1,0,0,0,2718,
2720,5,165,0,0,2719,2718,1,0,0,0,2719,2720,1,0,0,0,2720,241,1,0,0,0,2721,
2722,5,113,0,0,2722,2723,5,35,0,0,2723,2728,3,958,479,0,2724,2725,5,3,0,
0,2725,2727,3,958,479,0,2726,2724,1,0,0,0,2727,2730,1,0,0,0,2728,2726,1,
0,0,0,2728,2729,1,0,0,0,2729,243,1,0,0,0,2730,2728,1,0,0,0,2731,2732,5,266,
0,0,2732,2733,5,35,0,0,2733,2734,5,188,0,0,2734,2735,3,958,479,0,2735,2736,
5,436,0,0,2736,2737,3,958,479,0,2737,2745,1,0,0,0,2738,2739,5,266,0,0,2739,
2740,5,35,0,0,2740,2741,3,958,479,0,2741,2742,5,391,0,0,2742,2743,3,940,
470,0,2743,2745,1,0,0,0,2744,2731,1,0,0,0,2744,2738,1,0,0,0,2745,245,1,0,
0,0,2746,2747,5,13,0,0,2747,2748,5,81,0,0,2748,2749,5,273,0,0,2749,2754,
3,958,479,0,2750,2751,5,3,0,0,2751,2753,3,958,479,0,2752,2750,1,0,0,0,2753,
2756,1,0,0,0,2754,2752,1,0,0,0,2754,2755,1,0,0,0,2755,2760,1,0,0,0,2756,
2754,1,0,0,0,2757,2758,5,214,0,0,2758,2759,5,469,0,0,2759,2761,3,1008,504,
0,2760,2757,1,0,0,0,2760,2761,1,0,0,0,2761,247,1,0,0,0,2762,2763,5,129,0,
0,2763,2764,5,81,0,0,2764,2765,5,273,0,0,2765,2770,3,958,479,0,2766,2767,
5,3,0,0,2767,2769,3,958,479,0,2768,2766,1,0,0,0,2769,2772,1,0,0,0,2770,2768,
1,0,0,0,2770,2771,1,0,0,0,2771,2776,1,0,0,0,2772,2770,1,0,0,0,2773,2774,
5,168,0,0,2774,2775,5,469,0,0,2775,2777,3,1008,504,0,2776,2773,1,0,0,0,2776,
2777,1,0,0,0,2777,249,1,0,0,0,2778,2779,5,13,0,0,2779,2780,5,52,0,0,2780,
2781,3,1008,504,0,2781,2786,3,958,479,0,2782,2783,5,3,0,0,2783,2785,3,958,
479,0,2784,2782,1,0,0,0,2785,2788,1,0,0,0,2786,2784,1,0,0,0,2786,2787,1,
0,0,0,2787,2805,1,0,0,0,2788,2786,1,0,0,0,2789,2790,5,129,0,0,2790,2791,
5,52,0,0,2791,2792,3,1008,504,0,2792,2797,3,958,479,0,2793,2794,5,3,0,0,
2794,2796,3,958,479,0,2795,2793,1,0,0,0,2796,2799,1,0,0,0,2797,2795,1,0,
0,0,2797,2798,1,0,0,0,2798,2805,1,0,0,0,2799,2797,1,0,0,0,2800,2801,5,129,
0,0,2801,2802,5,18,0,0,2802,2803,5,52,0,0,2803,2805,3,1008,504,0,2804,2778,
1,0,0,0,2804,2789,1,0,0,0,2804,2800,1,0,0,0,2805,251,1,0,0,0,2806,2807,5,
391,0,0,2807,2808,5,239,0,0,2808,2809,5,139,0,0,2809,2811,5,191,0,0,2810,
2812,3,936,468,0,2811,2810,1,0,0,0,2811,2812,1,0,0,0,2812,253,1,0,0,0,2813,
2814,5,88,0,0,2814,2815,5,197,0,0,2815,255,1,0,0,0,2816,2817,5,68,0,0,2817,
2818,5,420,0,0,2818,2819,5,381,0,0,2819,2820,5,335,0,0,2820,257,1,0,0,0,
2821,2822,5,113,0,0,2822,2823,5,483,0,0,2823,2828,3,958,479,0,2824,2825,
5,3,0,0,2825,2827,3,958,479,0,2826,2824,1,0,0,0,2827,2830,1,0,0,0,2828,2826,
1,0,0,0,2828,2829,1,0,0,0,2829,2831,1,0,0,0,2830,2828,1,0,0,0,2831,2832,
5,285,0,0,2832,2833,5,35,0,0,2833,2834,3,958,479,0,2834,259,1,0,0,0,2835,
2836,5,57,0,0,2836,2837,5,113,0,0,2837,2838,5,483,0,0,2838,2843,3,958,479,
0,2839,2840,5,3,0,0,2840,2842,3,958,479,0,2841,2839,1,0,0,0,2842,2845,1,
0,0,0,2843,2841,1,0,0,0,2843,2844,1,0,0,0,2844,2846,1,0,0,0,2845,2843,1,
0,0,0,2846,2847,5,285,0,0,2847,2848,5,35,0,0,2848,2849,3,958,479,0,2849,
261,1,0,0,0,2850,2851,5,124,0,0,2851,2852,5,483,0,0,2852,2857,3,958,479,
0,2853,2854,5,3,0,0,2854,2856,3,958,479,0,2855,2853,1,0,0,0,2856,2859,1,
0,0,0,2857,2855,1,0,0,0,2857,2858,1,0,0,0,2858,2860,1,0,0,0,2859,2857,1,
0,0,0,2860,2861,5,285,0,0,2861,2862,5,35,0,0,2862,2863,3,958,479,0,2863,
263,1,0,0,0,2864,2865,5,57,0,0,2865,2866,5,124,0,0,2866,2867,5,483,0,0,2867,
2872,3,958,479,0,2868,2869,5,3,0,0,2869,2871,3,958,479,0,2870,2868,1,0,0,
0,2871,2874,1,0,0,0,2872,2870,1,0,0,0,2872,2873,1,0,0,0,2873,2875,1,0,0,
0,2874,2872,1,0,0,0,2875,2876,5,285,0,0,2876,2877,5,35,0,0,2877,2878,3,958,
479,0,2878,265,1,0,0,0,2879,2880,5,13,0,0,2880,2881,5,201,0,0,2881,2882,
3,1000,500,0,2882,2887,3,1006,503,0,2883,2885,3,84,42,0,2884,2886,3,940,
470,0,2885,2884,1,0,0,0,2885,2886,1,0,0,0,2886,2888,1,0,0,0,2887,2883,1,
0,0,0,2887,2888,1,0,0,0,2888,2890,1,0,0,0,2889,2891,3,952,476,0,2890,2889,
1,0,0,0,2890,2891,1,0,0,0,2891,267,1,0,0,0,2892,2893,5,129,0,0,2893,2894,
5,201,0,0,2894,2895,3,1000,500,0,2895,269,1,0,0,0,2896,2897,5,348,0,0,2897,
2898,3,1000,500,0,2898,271,1,0,0,0,2899,2900,5,416,0,0,2900,2901,5,476,0,
0,2901,2902,3,1000,500,0,2902,273,1,0,0,0,2903,2904,5,391,0,0,2904,2905,
3,940,470,0,2905,275,1,0,0,0,2906,2907,5,76,0,0,2907,2908,5,488,0,0,2908,
2909,3,958,479,0,2909,277,1,0,0,0,2910,2912,3,808,404,0,2911,2910,1,0,0,
0,2911,2912,1,0,0,0,2912,2914,1,0,0,0,2913,2915,3,48,24,0,2914,2913,1,0,
0,0,2914,2915,1,0,0,0,2915,2917,1,0,0,0,2916,2918,3,892,446,0,2917,2916,
1,0,0,0,2917,2918,1,0,0,0,2918,2920,1,0,0,0,2919,2921,3,50,25,0,2920,2919,
1,0,0,0,2920,2921,1,0,0,0,2921,2923,1,0,0,0,2922,2924,3,930,465,0,2923,2922,
1,0,0,0,2923,2924,1,0,0,0,2924,279,1,0,0,0,2925,2926,5,13,0,0,2926,2927,
5,74,0,0,2927,2931,3,32,16,0,2928,2932,5,157,0,0,2929,2930,5,16,0,0,2930,
2932,3,1000,500,0,2931,2928,1,0,0,0,2931,2929,1,0,0,0,2931,2932,1,0,0,0,
2932,2935,1,0,0,0,2933,2934,7,14,0,0,2934,2936,3,1000,500,0,2935,2933,1,
0,0,0,2935,2936,1,0,0,0,2936,2938,1,0,0,0,2937,2939,3,936,468,0,2938,2937,
1,0,0,0,2938,2939,1,0,0,0,2939,281,1,0,0,0,2940,2941,5,13,0,0,2941,2942,
5,74,0,0,2942,2943,5,2,0,0,2943,2948,3,32,16,0,2944,2945,5,3,0,0,2945,2947,
3,32,16,0,2946,2944,1,0,0,0,2947,2950,1,0,0,0,2948,2946,1,0,0,0,2948,2949,
1,0,0,0,2949,2951,1,0,0,0,2950,2948,1,0,0,0,2951,2954,5,4,0,0,2952,2953,
7,14,0,0,2953,2955,3,1000,500,0,2954,2952,1,0,0,0,2954,2955,1,0,0,0,2955,
2957,1,0,0,0,2956,2958,3,936,468,0,2957,2956,1,0,0,0,2957,2958,1,0,0,0,2958,
283,1,0,0,0,2959,2960,5,129,0,0,2960,2961,5,74,0,0,2961,2964,3,1000,500,
0,2962,2963,5,168,0,0,2963,2965,3,1000,500,0,2964,2962,1,0,0,0,2964,2965,
1,0,0,0,2965,2967,1,0,0,0,2966,2968,3,936,468,0,2967,2966,1,0,0,0,2967,2968,
1,0,0,0,2968,285,1,0,0,0,2969,2970,5,266,0,0,2970,2971,5,74,0,0,2971,2975,
3,32,16,0,2972,2976,5,157,0,0,2973,2974,5,16,0,0,2974,2976,3,1000,500,0,
2975,2972,1,0,0,0,2975,2973,1,0,0,0,2975,2976,1,0,0,0,2976,2979,1,0,0,0,
2977,2978,5,168,0,0,2978,2980,3,1000,500,0,2979,2977,1,0,0,0,2979,2980,1,
0,0,0,2980,2982,1,0,0,0,2981,2983,3,936,468,0,2982,2981,1,0,0,0,2982,2983,
1,0,0,0,2983,287,1,0,0,0,2984,2985,5,348,0,0,2985,2986,5,74,0,0,2986,2987,
3,1000,500,0,2987,2988,5,436,0,0,2988,2989,3,1000,500,0,2989,289,1,0,0,0,
2990,2991,5,293,0,0,2991,2992,5,55,0,0,2992,2995,3,1006,503,0,2993,2994,
5,168,0,0,2994,2996,3,1000,500,0,2995,2993,1,0,0,0,2995,2996,1,0,0,0,2996,
2998,1,0,0,0,2997,2999,3,936,468,0,2998,2997,1,0,0,0,2998,2999,1,0,0,0,2999,
291,1,0,0,0,3000,3001,5,348,0,0,3001,3002,5,371,0,0,3002,3003,3,1000,500,
0,3003,3004,3,1000,500,0,3004,293,1,0,0,0,3005,3007,7,15,0,0,3006,3005,1,
0,0,0,3006,3007,1,0,0,0,3007,3008,1,0,0,0,3008,3011,5,79,0,0,3009,3012,3,
1000,500,0,3010,3012,3,1006,503,0,3011,3009,1,0,0,0,3011,3010,1,0,0,0,3011,
3012,1,0,0,0,3012,295,1,0,0,0,3013,3016,3,1000,500,0,3014,3016,5,495,0,0,
3015,3013,1,0,0,0,3015,3014,1,0,0,0,3016,297,1,0,0,0,3017,3023,3,296,148,
0,3018,3022,5,524,0,0,3019,3020,5,1,0,0,3020,3022,3,296,148,0,3021,3018,
1,0,0,0,3021,3019,1,0,0,0,3022,3025,1,0,0,0,3023,3021,1,0,0,0,3023,3024,
1,0,0,0,3024,299,1,0,0,0,3025,3023,1,0,0,0,3026,3027,5,266,0,0,3027,3028,
5,74,0,0,3028,3029,3,1000,500,0,3029,3030,5,13,0,0,3030,3031,5,486,0,0,3031,
3035,3,982,491,0,3032,3036,5,157,0,0,3033,3034,5,16,0,0,3034,3036,3,1000,
500,0,3035,3032,1,0,0,0,3035,3033,1,0,0,0,3035,3036,1,0,0,0,3036,3038,1,
0,0,0,3037,3039,3,936,468,0,3038,3037,1,0,0,0,3038,3039,1,0,0,0,3039,301,
1,0,0,0,3040,3041,5,266,0,0,3041,3042,5,74,0,0,3042,3043,3,1000,500,0,3043,
3044,5,129,0,0,3044,3045,5,486,0,0,3045,3047,3,298,149,0,3046,3048,3,936,
468,0,3047,3046,1,0,0,0,3047,3048,1,0,0,0,3048,303,1,0,0,0,3049,3050,5,88,
0,0,3050,3052,5,292,0,0,3051,3049,1,0,0,0,3051,3052,1,0,0,0,3052,3053,1,
0,0,0,3053,3054,5,351,0,0,3054,3055,5,422,0,0,3055,3056,3,1000,500,0,3056,
3057,3,314,157,0,3057,3069,1,0,0,0,3058,3059,5,88,0,0,3059,3063,5,422,0,
0,3060,3061,5,193,0,0,3061,3062,5,276,0,0,3062,3064,5,144,0,0,3063,3060,
1,0,0,0,3063,3064,1,0,0,0,3064,3065,1,0,0,0,3065,3066,3,1000,500,0,3066,
3067,3,314,157,0,3067,3069,1,0,0,0,3068,3051,1,0,0,0,3068,3058,1,0,0,0,3069,
305,1,0,0,0,3070,3071,5,88,0,0,3071,3073,5,292,0,0,3072,3070,1,0,0,0,3072,
3073,1,0,0,0,3073,3074,1,0,0,0,3074,3075,5,351,0,0,3075,3076,5,51,0,0,3076,
3077,3,1000,500,0,3077,3078,3,316,158,0,3078,3090,1,0,0,0,3079,3080,5,88,
0,0,3080,3084,5,51,0,0,3081,3082,5,193,0,0,3082,3083,5,276,0,0,3083,3085,
5,144,0,0,3084,3081,1,0,0,0,3084,3085,1,0,0,0,3085,3086,1,0,0,0,3086,3087,
3,1000,500,0,3087,3088,3,316,158,0,3088,3090,1,0,0,0,3089,3072,1,0,0,0,3089,
3079,1,0,0,0,3090,307,1,0,0,0,3091,3092,5,129,0,0,3092,3095,5,51,0,0,3093,
3094,5,193,0,0,3094,3096,5,144,0,0,3095,3093,1,0,0,0,3095,3096,1,0,0,0,3096,
3097,1,0,0,0,3097,3098,3,1000,500,0,3098,309,1,0,0,0,3099,3100,5,129,0,0,
3100,3103,5,422,0,0,3101,3102,5,193,0,0,3102,3104,5,144,0,0,3103,3101,1,
0,0,0,3103,3104,1,0,0,0,3104,3105,1,0,0,0,3105,3106,3,1000,500,0,3106,311,
1,0,0,0,3107,3108,5,143,0,0,3108,3109,3,852,426,0,3109,313,1,0,0,0,3110,
3111,5,27,0,0,3111,3112,5,282,0,0,3112,3113,5,464,0,0,3113,3115,3,326,163,
0,3114,3110,1,0,0,0,3114,3115,1,0,0,0,3115,3117,1,0,0,0,3116,3118,3,320,
160,0,3117,3116,1,0,0,0,3117,3118,1,0,0,0,3118,315,1,0,0,0,3119,3120,5,27,
0,0,3120,3121,5,282,0,0,3121,3122,5,464,0,0,3122,3124,3,326,163,0,3123,3119,
1,0,0,0,3123,3124,1,0,0,0,3124,3126,1,0,0,0,3125,3127,3,320,160,0,3126,3125,
1,0,0,0,3126,3127,1,0,0,0,3127,3129,1,0,0,0,3128,3130,3,318,159,0,3129,3128,
1,0,0,0,3129,3130,1,0,0,0,3130,317,1,0,0,0,3131,3132,5,476,0,0,3132,3133,
5,398,0,0,3133,3134,5,361,0,0,3134,3146,3,324,162,0,3135,3136,5,476,0,0,
3136,3137,5,398,0,0,3137,3138,5,361,0,0,3138,3146,3,322,161,0,3139,3140,
5,476,0,0,3140,3141,5,398,0,0,3141,3142,5,361,0,0,3142,3143,3,324,162,0,
3143,3144,3,322,161,0,3144,3146,1,0,0,0,3145,3131,1,0,0,0,3145,3135,1,0,
0,0,3145,3139,1,0,0,0,3146,319,1,0,0,0,3147,3148,5,360,0,0,3148,3149,3,1020,
510,0,3149,3150,3,328,164,0,3150,321,1,0,0,0,3151,3152,3,1020,510,0,3152,
3153,3,328,164,0,3153,323,1,0,0,0,3154,3155,3,1020,510,0,3155,3156,5,399,
0,0,3156,325,1,0,0,0,3157,3158,3,1020,510,0,3158,327,1,0,0,0,3159,3160,7,
16,0,0,3160,329,1,0,0,0,3161,3162,5,2,0,0,3162,3167,5,514,0,0,3163,3164,
5,3,0,0,3164,3166,5,514,0,0,3165,3163,1,0,0,0,3166,3169,1,0,0,0,3167,3165,
1,0,0,0,3167,3168,1,0,0,0,3168,3170,1,0,0,0,3169,3167,1,0,0,0,3170,3171,
5,4,0,0,3171,331,1,0,0,0,3172,3173,5,129,0,0,3173,3174,5,487,0,0,3174,3175,
5,201,0,0,3175,3176,5,285,0,0,3176,3177,5,421,0,0,3177,3178,3,330,165,0,
3178,333,1,0,0,0,3179,3181,5,13,0,0,3180,3182,5,424,0,0,3181,3180,1,0,0,
0,3181,3182,1,0,0,0,3182,3186,1,0,0,0,3183,3187,3,914,457,0,3184,3185,5,
299,0,0,3185,3187,3,916,458,0,3186,3183,1,0,0,0,3186,3184,1,0,0,0,3187,3189,
1,0,0,0,3188,3190,3,930,465,0,3189,3188,1,0,0,0,3189,3190,1,0,0,0,3190,3192,
1,0,0,0,3191,3193,3,936,468,0,3192,3191,1,0,0,0,3192,3193,1,0,0,0,3193,3209,
1,0,0,0,3194,3196,5,13,0,0,3195,3197,5,424,0,0,3196,3195,1,0,0,0,3196,3197,
1,0,0,0,3197,3200,1,0,0,0,3198,3201,3,896,448,0,3199,3201,3,898,449,0,3200,
3198,1,0,0,0,3200,3199,1,0,0,0,3201,3203,1,0,0,0,3202,3204,3,930,465,0,3203,
3202,1,0,0,0,3203,3204,1,0,0,0,3204,3206,1,0,0,0,3205,3207,3,936,468,0,3206,
3205,1,0,0,0,3206,3207,1,0,0,0,3207,3209,1,0,0,0,3208,3179,1,0,0,0,3208,
3194,1,0,0,0,3209,335,1,0,0,0,3210,3212,5,129,0,0,3211,3213,5,424,0,0,3212,
3211,1,0,0,0,3212,3213,1,0,0,0,3213,3226,1,0,0,0,3214,3217,5,298,0,0,3215,
3216,5,193,0,0,3216,3218,5,144,0,0,3217,3215,1,0,0,0,3217,3218,1,0,0,0,3218,
3219,1,0,0,0,3219,3227,3,1000,500,0,3220,3223,5,299,0,0,3221,3222,5,193,
0,0,3222,3224,5,144,0,0,3223,3221,1,0,0,0,3223,3224,1,0,0,0,3224,3225,1,
0,0,0,3225,3227,3,1006,503,0,3226,3214,1,0,0,0,3226,3220,1,0,0,0,3227,3229,
1,0,0,0,3228,3230,5,165,0,0,3229,3228,1,0,0,0,3229,3230,1,0,0,0,3230,3259,
1,0,0,0,3231,3233,5,129,0,0,3232,3234,5,424,0,0,3233,3232,1,0,0,0,3233,3234,
1,0,0,0,3234,3235,1,0,0,0,3235,3238,5,299,0,0,3236,3237,5,193,0,0,3237,3239,
5,144,0,0,3238,3236,1,0,0,0,3238,3239,1,0,0,0,3239,3240,1,0,0,0,3240,3242,
3,916,458,0,3241,3243,5,165,0,0,3242,3241,1,0,0,0,3242,3243,1,0,0,0,3243,
3259,1,0,0,0,3244,3246,5,129,0,0,3245,3247,5,424,0,0,3246,3245,1,0,0,0,3246,
3247,1,0,0,0,3247,3248,1,0,0,0,3248,3251,5,299,0,0,3249,3250,5,193,0,0,3250,
3252,5,144,0,0,3251,3249,1,0,0,0,3251,3252,1,0,0,0,3252,3253,1,0,0,0,3253,
3254,5,474,0,0,3254,3256,3,834,417,0,3255,3257,5,165,0,0,3256,3255,1,0,0,
0,3256,3257,1,0,0,0,3257,3259,1,0,0,0,3258,3210,1,0,0,0,3258,3231,1,0,0,
0,3258,3244,1,0,0,0,3259,337,1,0,0,0,3260,3261,5,441,0,0,3261,3262,3,808,
404,0,3262,339,1,0,0,0,3263,3264,5,266,0,0,3264,3270,5,298,0,0,3265,3271,
3,1000,500,0,3266,3271,3,1006,503,0,3267,3268,5,2,0,0,3268,3269,5,498,0,
0,3269,3271,5,4,0,0,3270,3265,1,0,0,0,3270,3266,1,0,0,0,3270,3267,1,0,0,
0,3271,3272,1,0,0,0,3272,3273,5,391,0,0,3273,3278,3,940,470,0,3274,3275,
5,266,0,0,3275,3276,5,298,0,0,3276,3278,3,930,465,0,3277,3263,1,0,0,0,3277,
3274,1,0,0,0,3278,341,1,0,0,0,3279,3280,5,351,0,0,3280,3281,3,808,404,0,
3281,3282,5,476,0,0,3282,3284,3,808,404,0,3283,3285,3,936,468,0,3284,3283,
1,0,0,0,3284,3285,1,0,0,0,3285,343,1,0,0,0,3286,3287,5,348,0,0,3287,3288,
5,298,0,0,3288,3289,3,1000,500,0,3289,3290,3,1000,500,0,3290,345,1,0,0,0,
3291,3293,3,886,443,0,3292,3291,1,0,0,0,3292,3293,1,0,0,0,3293,3294,1,0,
0,0,3294,3295,5,206,0,0,3295,3308,7,17,0,0,3296,3298,3,994,497,0,3297,3299,
3,998,499,0,3298,3297,1,0,0,0,3298,3299,1,0,0,0,3299,3301,1,0,0,0,3300,3302,
3,808,404,0,3301,3300,1,0,0,0,3301,3302,1,0,0,0,3302,3309,1,0,0,0,3303,3304,
5,155,0,0,3304,3309,3,940,470,0,3305,3306,5,46,0,0,3306,3307,5,2,0,0,3307,
3309,5,4,0,0,3308,3296,1,0,0,0,3308,3303,1,0,0,0,3308,3305,1,0,0,0,3309,
3313,1,0,0,0,3310,3312,3,348,174,0,3311,3310,1,0,0,0,3312,3315,1,0,0,0,3313,
3311,1,0,0,0,3313,3314,1,0,0,0,3314,3317,1,0,0,0,3315,3313,1,0,0,0,3316,
3318,3,936,468,0,3317,3316,1,0,0,0,3317,3318,1,0,0,0,3318,3329,1,0,0,0,3319,
3330,3,736,368,0,3320,3321,5,458,0,0,3321,3326,3,824,412,0,3322,3323,5,3,
0,0,3323,3325,3,824,412,0,3324,3322,1,0,0,0,3325,3328,1,0,0,0,3326,3324,
1,0,0,0,3326,3327,1,0,0,0,3327,3330,1,0,0,0,3328,3326,1,0,0,0,3329,3319,
1,0,0,0,3329,3320,1,0,0,0,3330,347,1,0,0,0,3331,3336,3,350,175,0,3332,3333,
5,476,0,0,3333,3334,5,226,0,0,3334,3336,3,1000,500,0,3335,3331,1,0,0,0,3335,
3332,1,0,0,0,3336,349,1,0,0,0,3337,3341,3,806,403,0,3338,3339,5,55,0,0,3339,
3341,5,268,0,0,3340,3337,1,0,0,0,3340,3338,1,0,0,0,3341,351,1,0,0,0,3342,
3344,3,886,443,0,3343,3342,1,0,0,0,3343,3344,1,0,0,0,3344,3346,1,0,0,0,3345,
3347,3,740,370,0,3346,3345,1,0,0,0,3346,3347,1,0,0,0,3347,3348,1,0,0,0,3348,
3349,5,451,0,0,3349,3350,3,994,497,0,3350,3351,5,391,0,0,3351,3352,3,1018,
509,0,3352,3355,3,762,381,0,3353,3354,5,474,0,0,3354,3356,3,834,417,0,3355,
3353,1,0,0,0,3355,3356,1,0,0,0,3356,353,1,0,0,0,3357,3359,3,886,443,0,3358,
3357,1,0,0,0,3358,3359,1,0,0,0,3359,3361,1,0,0,0,3360,3362,3,740,370,0,3361,
3360,1,0,0,0,3361,3362,1,0,0,0,3362,3363,1,0,0,0,3363,3364,5,115,0,0,3364,
3365,5,168,0,0,3365,3367,3,994,497,0,3366,3368,3,808,404,0,3367,3366,1,0,
0,0,3367,3368,1,0,0,0,3368,3371,1,0,0,0,3369,3370,5,456,0,0,3370,3372,3,
774,387,0,3371,3369,1,0,0,0,3371,3372,1,0,0,0,3372,3375,1,0,0,0,3373,3374,
5,474,0,0,3374,3376,3,834,417,0,3375,3373,1,0,0,0,3375,3376,1,0,0,0,3376,
355,1,0,0,0,3377,3378,5,88,0,0,3378,3379,5,372,0,0,3379,3383,5,239,0,0,3380,
3381,3,994,497,0,3381,3382,5,1,0,0,3382,3384,1,0,0,0,3383,3380,1,0,0,0,3383,
3384,1,0,0,0,3384,3385,1,0,0,0,3385,3386,3,1000,500,0,3386,3387,5,285,0,
0,3387,3396,3,994,497,0,3388,3393,3,362,181,0,3389,3390,5,3,0,0,3390,3392,
3,362,181,0,3391,3389,1,0,0,0,3392,3395,1,0,0,0,3393,3391,1,0,0,0,3393,3394,
1,0,0,0,3394,3397,1,0,0,0,3395,3393,1,0,0,0,3396,3388,1,0,0,0,3396,3397,
1,0,0,0,3397,3399,1,0,0,0,3398,3400,3,372,186,0,3399,3398,1,0,0,0,3399,3400,
1,0,0,0,3400,3401,1,0,0,0,3401,3402,5,168,0,0,3402,3404,3,1000,500,0,3403,
3405,3,374,187,0,3404,3403,1,0,0,0,3404,3405,1,0,0,0,3405,357,1,0,0,0,3406,
3407,5,19,0,0,3407,3408,5,372,0,0,3408,3409,5,239,0,0,3409,3413,5,164,0,
0,3410,3411,3,994,497,0,3411,3412,5,1,0,0,3412,3414,1,0,0,0,3413,3410,1,
0,0,0,3413,3414,1,0,0,0,3414,3415,1,0,0,0,3415,3424,3,1000,500,0,3416,3421,
3,362,181,0,3417,3418,5,3,0,0,3418,3420,3,362,181,0,3419,3417,1,0,0,0,3420,
3423,1,0,0,0,3421,3419,1,0,0,0,3421,3422,1,0,0,0,3422,3425,1,0,0,0,3423,
3421,1,0,0,0,3424,3416,1,0,0,0,3424,3425,1,0,0,0,3425,3427,1,0,0,0,3426,
3428,3,372,186,0,3427,3426,1,0,0,0,3427,3428,1,0,0,0,3428,3430,1,0,0,0,3429,
3431,3,360,180,0,3430,3429,1,0,0,0,3430,3431,1,0,0,0,3431,359,1,0,0,0,3432,
3433,5,168,0,0,3433,3434,3,1000,500,0,3434,3435,3,374,187,0,3435,361,1,0,
0,0,3436,3443,3,364,182,0,3437,3443,3,366,183,0,3438,3443,3,368,184,0,3439,
3440,5,474,0,0,3440,3443,3,834,417,0,3441,3443,3,808,404,0,3442,3436,1,0,
0,0,3442,3437,1,0,0,0,3442,3438,1,0,0,0,3442,3439,1,0,0,0,3442,3441,1,0,
0,0,3443,363,1,0,0,0,3444,3445,5,75,0,0,3445,3446,5,425,0,0,3446,3447,5,
55,0,0,3447,3448,3,958,479,0,3448,365,1,0,0,0,3449,3450,5,374,0,0,3450,3451,
5,425,0,0,3451,3452,5,55,0,0,3452,3453,3,958,479,0,3453,367,1,0,0,0,3454,
3455,5,75,0,0,3455,3456,3,370,185,0,3456,369,1,0,0,0,3457,3460,5,2,0,0,3458,
3461,3,994,497,0,3459,3461,3,1016,508,0,3460,3458,1,0,0,0,3460,3459,1,0,
0,0,3461,3469,1,0,0,0,3462,3465,5,3,0,0,3463,3466,3,994,497,0,3464,3466,
3,1016,508,0,3465,3463,1,0,0,0,3465,3464,1,0,0,0,3466,3468,1,0,0,0,3467,
3462,1,0,0,0,3468,3471,1,0,0,0,3469,3467,1,0,0,0,3469,3470,1,0,0,0,3470,
3472,1,0,0,0,3471,3469,1,0,0,0,3472,3473,5,4,0,0,3473,371,1,0,0,0,3474,3475,
3,936,468,0,3475,373,1,0,0,0,3476,3477,3,940,470,0,3477,375,1,0,0,0,3478,
3479,5,405,0,0,3479,3480,5,372,0,0,3480,3481,5,239,0,0,3481,3485,5,164,0,
0,3482,3483,3,994,497,0,3483,3484,5,1,0,0,3484,3486,1,0,0,0,3485,3482,1,
0,0,0,3485,3486,1,0,0,0,3486,3487,1,0,0,0,3487,3488,3,1000,500,0,3488,377,
1,0,0,0,3489,3490,5,359,0,0,3490,3491,5,372,0,0,3491,3492,5,239,0,0,3492,
3496,5,164,0,0,3493,3494,3,994,497,0,3494,3495,5,1,0,0,3495,3497,1,0,0,0,
3496,3493,1,0,0,0,3496,3497,1,0,0,0,3497,3498,1,0,0,0,3498,3499,3,1000,500,
0,3499,379,1,0,0,0,3500,3501,5,302,0,0,3501,3502,5,372,0,0,3502,3503,5,239,
0,0,3503,3507,5,164,0,0,3504,3505,3,994,497,0,3505,3506,5,1,0,0,3506,3508,
1,0,0,0,3507,3504,1,0,0,0,3507,3508,1,0,0,0,3508,3509,1,0,0,0,3509,3510,
3,1000,500,0,3510,381,1,0,0,0,3511,3513,5,396,0,0,3512,3514,5,18,0,0,3513,
3512,1,0,0,0,3513,3514,1,0,0,0,3514,3515,1,0,0,0,3515,3516,5,372,0,0,3516,
3524,5,239,0,0,3517,3521,5,164,0,0,3518,3519,3,994,497,0,3519,3520,5,1,0,
0,3520,3522,1,0,0,0,3521,3518,1,0,0,0,3521,3522,1,0,0,0,3522,3523,1,0,0,
0,3523,3525,3,1000,500,0,3524,3517,1,0,0,0,3524,3525,1,0,0,0,3525,3528,1,
0,0,0,3526,3527,5,168,0,0,3527,3529,3,994,497,0,3528,3526,1,0,0,0,3528,3529,
1,0,0,0,3529,3532,1,0,0,0,3530,3531,5,474,0,0,3531,3533,3,834,417,0,3532,
3530,1,0,0,0,3532,3533,1,0,0,0,3533,3544,1,0,0,0,3534,3535,5,293,0,0,3535,
3536,5,55,0,0,3536,3541,3,754,377,0,3537,3538,5,3,0,0,3538,3540,3,754,377,
0,3539,3537,1,0,0,0,3540,3543,1,0,0,0,3541,3539,1,0,0,0,3541,3542,1,0,0,
0,3542,3545,1,0,0,0,3543,3541,1,0,0,0,3544,3534,1,0,0,0,3544,3545,1,0,0,
0,3545,3547,1,0,0,0,3546,3548,3,758,379,0,3547,3546,1,0,0,0,3547,3548,1,
0,0,0,3548,383,1,0,0,0,3549,3550,5,396,0,0,3550,3551,5,372,0,0,3551,3552,
5,239,0,0,3552,3555,5,423,0,0,3553,3554,5,168,0,0,3554,3556,3,994,497,0,
3555,3553,1,0,0,0,3555,3556,1,0,0,0,3556,3557,1,0,0,0,3557,3558,5,474,0,
0,3558,3559,3,834,417,0,3559,385,1,0,0,0,3560,3561,5,396,0,0,3561,3562,5,
88,0,0,3562,3563,5,372,0,0,3563,3567,5,239,0,0,3564,3565,3,994,497,0,3565,
3566,5,1,0,0,3566,3568,1,0,0,0,3567,3564,1,0,0,0,3567,3568,1,0,0,0,3568,
3569,1,0,0,0,3569,3570,3,1000,500,0,3570,387,1,0,0,0,3571,3573,5,396,0,0,
3572,3574,5,18,0,0,3573,3572,1,0,0,0,3573,3574,1,0,0,0,3574,3575,1,0,0,0,
3575,3576,5,407,0,0,3576,3584,5,239,0,0,3577,3581,5,164,0,0,3578,3579,3,
994,497,0,3579,3580,5,1,0,0,3580,3582,1,0,0,0,3581,3578,1,0,0,0,3581,3582,
1,0,0,0,3582,3583,1,0,0,0,3583,3585,3,1000,500,0,3584,3577,1,0,0,0,3584,
3585,1,0,0,0,3585,3588,1,0,0,0,3586,3587,5,168,0,0,3587,3589,3,994,497,0,
3588,3586,1,0,0,0,3588,3589,1,0,0,0,3589,3592,1,0,0,0,3590,3591,5,474,0,
0,3591,3593,3,834,417,0,3592,3590,1,0,0,0,3592,3593,1,0,0,0,3593,3604,1,
0,0,0,3594,3595,5,293,0,0,3595,3596,5,55,0,0,3596,3601,3,754,377,0,3597,
3598,5,3,0,0,3598,3600,3,754,377,0,3599,3597,1,0,0,0,3600,3603,1,0,0,0,3601,
3599,1,0,0,0,3601,3602,1,0,0,0,3602,3605,1,0,0,0,3603,3601,1,0,0,0,3604,
3594,1,0,0,0,3604,3605,1,0,0,0,3605,3607,1,0,0,0,3606,3608,3,758,379,0,3607,
3606,1,0,0,0,3607,3608,1,0,0,0,3608,389,1,0,0,0,3609,3611,5,20,0,0,3610,
3612,7,18,0,0,3611,3610,1,0,0,0,3611,3612,1,0,0,0,3612,3613,1,0,0,0,3613,
3614,5,418,0,0,3614,3616,3,996,498,0,3615,3617,3,392,196,0,3616,3615,1,0,
0,0,3616,3617,1,0,0,0,3617,3619,1,0,0,0,3618,3620,3,808,404,0,3619,3618,
1,0,0,0,3619,3620,1,0,0,0,3620,3624,1,0,0,0,3621,3622,5,476,0,0,3622,3623,
7,12,0,0,3623,3625,5,265,0,0,3624,3621,1,0,0,0,3624,3625,1,0,0,0,3625,3627,
1,0,0,0,3626,3628,3,936,468,0,3627,3626,1,0,0,0,3627,3628,1,0,0,0,3628,391,
1,0,0,0,3629,3630,5,2,0,0,3630,3635,3,994,497,0,3631,3632,5,3,0,0,3632,3634,
3,994,497,0,3633,3631,1,0,0,0,3634,3637,1,0,0,0,3635,3633,1,0,0,0,3635,3636,
1,0,0,0,3636,3638,1,0,0,0,3637,3635,1,0,0,0,3638,3639,5,4,0,0,3639,3653,
1,0,0,0,3640,3645,3,994,497,0,3641,3642,5,3,0,0,3642,3644,3,994,497,0,3643,
3641,1,0,0,0,3644,3647,1,0,0,0,3645,3643,1,0,0,0,3645,3646,1,0,0,0,3646,
3653,1,0,0,0,3647,3645,1,0,0,0,3648,3649,5,18,0,0,3649,3653,5,75,0,0,3650,
3651,5,316,0,0,3651,3653,5,75,0,0,3652,3629,1,0,0,0,3652,3640,1,0,0,0,3652,
3648,1,0,0,0,3652,3650,1,0,0,0,3653,393,1,0,0,0,3654,3655,5,129,0,0,3655,
3656,5,403,0,0,3656,3657,3,994,497,0,3657,395,1,0,0,0,3658,3659,5,20,0,0,
3659,3660,5,418,0,0,3660,3661,3,996,498,0,3661,3662,5,451,0,0,3662,3663,
5,185,0,0,3663,3664,5,285,0,0,3664,3668,3,392,196,0,3665,3666,5,476,0,0,
3666,3667,5,514,0,0,3667,3669,5,53,0,0,3668,3665,1,0,0,0,3668,3669,1,0,0,
0,3669,3671,1,0,0,0,3670,3672,3,936,468,0,3671,3670,1,0,0,0,3671,3672,1,
0,0,0,3672,397,1,0,0,0,3673,3677,3,396,198,0,3674,3675,5,476,0,0,3675,3676,
7,12,0,0,3676,3678,5,265,0,0,3677,3674,1,0,0,0,3677,3678,1,0,0,0,3678,399,
1,0,0,0,3679,3680,5,20,0,0,3680,3681,5,418,0,0,3681,3682,3,994,497,0,3682,
3683,5,129,0,0,3683,3684,5,185,0,0,3684,3685,5,285,0,0,3685,3690,3,994,497,
0,3686,3687,5,3,0,0,3687,3689,3,994,497,0,3688,3686,1,0,0,0,3689,3692,1,
0,0,0,3690,3688,1,0,0,0,3690,3691,1,0,0,0,3691,401,1,0,0,0,3692,3690,1,0,
0,0,3693,3694,5,88,0,0,3694,3696,5,20,0,0,3695,3697,7,18,0,0,3696,3695,1,
0,0,0,3696,3697,1,0,0,0,3697,3698,1,0,0,0,3698,3700,5,18,0,0,3699,3701,3,
936,468,0,3700,3699,1,0,0,0,3700,3701,1,0,0,0,3701,3738,1,0,0,0,3702,3703,
5,88,0,0,3703,3705,5,20,0,0,3704,3706,7,18,0,0,3705,3704,1,0,0,0,3705,3706,
1,0,0,0,3706,3707,1,0,0,0,3707,3708,5,101,0,0,3708,3710,3,1000,500,0,3709,
3711,3,936,468,0,3710,3709,1,0,0,0,3710,3711,1,0,0,0,3711,3738,1,0,0,0,3712,
3713,5,88,0,0,3713,3715,5,20,0,0,3714,3716,7,18,0,0,3715,3714,1,0,0,0,3715,
3716,1,0,0,0,3716,3717,1,0,0,0,3717,3718,5,418,0,0,3718,3730,3,994,497,0,
3719,3720,5,2,0,0,3720,3725,3,994,497,0,3721,3722,5,3,0,0,3722,3724,3,994,
497,0,3723,3721,1,0,0,0,3724,3727,1,0,0,0,3725,3723,1,0,0,0,3725,3726,1,
0,0,0,3726,3728,1,0,0,0,3727,3725,1,0,0,0,3728,3729,5,4,0,0,3729,3731,1,
0,0,0,3730,3719,1,0,0,0,3730,3731,1,0,0,0,3731,3733,1,0,0,0,3732,3734,3,
936,468,0,3733,3732,1,0,0,0,3733,3734,1,0,0,0,3734,3738,1,0,0,0,3735,3736,
5,88,0,0,3736,3738,3,396,198,0,3737,3693,1,0,0,0,3737,3702,1,0,0,0,3737,
3712,1,0,0,0,3737,3735,1,0,0,0,3738,403,1,0,0,0,3739,3740,5,129,0,0,3740,
3741,5,20,0,0,3741,3742,5,514,0,0,3742,405,1,0,0,0,3743,3744,5,396,0,0,3744,
3746,5,20,0,0,3745,3747,7,19,0,0,3746,3745,1,0,0,0,3746,3747,1,0,0,0,3747,
3750,1,0,0,0,3748,3749,5,474,0,0,3749,3751,3,834,417,0,3750,3748,1,0,0,0,
3750,3751,1,0,0,0,3751,407,1,0,0,0,3752,3753,5,396,0,0,3753,3754,5,403,0,
0,3754,3757,5,263,0,0,3755,3756,5,474,0,0,3756,3758,3,834,417,0,3757,3755,
1,0,0,0,3757,3758,1,0,0,0,3758,409,1,0,0,0,3759,3760,5,396,0,0,3760,3761,
5,185,0,0,3761,3764,5,263,0,0,3762,3763,5,474,0,0,3763,3765,3,834,417,0,
3764,3762,1,0,0,0,3764,3765,1,0,0,0,3765,411,1,0,0,0,3766,3767,5,225,0,0,
3767,3768,5,20,0,0,3768,3769,5,514,0,0,3769,413,1,0,0,0,3770,3771,5,20,0,
0,3771,3772,5,325,0,0,3772,3773,5,168,0,0,3773,3788,3,958,479,0,3774,3775,
5,20,0,0,3775,3776,5,325,0,0,3776,3777,5,168,0,0,3777,3778,3,958,479,0,3778,
3779,5,3,0,0,3779,3784,5,514,0,0,3780,3781,5,3,0,0,3781,3783,5,514,0,0,3782,
3780,1,0,0,0,3783,3786,1,0,0,0,3784,3782,1,0,0,0,3784,3785,1,0,0,0,3785,
3788,1,0,0,0,3786,3784,1,0,0,0,3787,3770,1,0,0,0,3787,3774,1,0,0,0,3788,
415,1,0,0,0,3789,3791,5,88,0,0,3790,3792,5,174,0,0,3791,3790,1,0,0,0,3791,
3792,1,0,0,0,3792,3793,1,0,0,0,3793,3796,5,39,0,0,3794,3795,5,285,0,0,3795,
3797,3,738,369,0,3796,3794,1,0,0,0,3796,3797,1,0,0,0,3797,3798,1,0,0,0,3798,
3799,5,456,0,0,3799,3801,3,738,369,0,3800,3802,3,936,468,0,3801,3800,1,0,
0,0,3801,3802,1,0,0,0,3802,417,1,0,0,0,3803,3804,5,129,0,0,3804,3805,5,39,
0,0,3805,3806,5,514,0,0,3806,419,1,0,0,0,3807,3808,5,396,0,0,3808,3809,5,
39,0,0,3809,421,1,0,0,0,3810,3811,5,88,0,0,3811,3812,5,356,0,0,3812,3816,
5,177,0,0,3813,3814,5,193,0,0,3814,3815,5,276,0,0,3815,3817,5,144,0,0,3816,
3813,1,0,0,0,3816,3817,1,0,0,0,3817,3820,1,0,0,0,3818,3819,5,292,0,0,3819,
3821,5,351,0,0,3820,3818,1,0,0,0,3820,3821,1,0,0,0,3821,3822,1,0,0,0,3822,
3832,3,1000,500,0,3823,3824,5,436,0,0,3824,3829,3,440,220,0,3825,3826,5,
3,0,0,3826,3828,3,440,220,0,3827,3825,1,0,0,0,3828,3831,1,0,0,0,3829,3827,
1,0,0,0,3829,3830,1,0,0,0,3830,3833,1,0,0,0,3831,3829,1,0,0,0,3832,3823,
1,0,0,0,3832,3833,1,0,0,0,3833,3834,1,0,0,0,3834,3835,5,476,0,0,3835,3836,
5,2,0,0,3836,3841,3,944,472,0,3837,3838,5,3,0,0,3838,3840,3,944,472,0,3839,
3837,1,0,0,0,3840,3843,1,0,0,0,3841,3839,1,0,0,0,3841,3842,1,0,0,0,3842,
3844,1,0,0,0,3843,3841,1,0,0,0,3844,3845,5,4,0,0,3845,423,1,0,0,0,3846,3847,
5,129,0,0,3847,3848,5,356,0,0,3848,3849,5,177,0,0,3849,3850,3,1000,500,0,
3850,425,1,0,0,0,3851,3852,5,19,0,0,3852,3853,5,356,0,0,3853,3854,5,177,
0,0,3854,3855,3,1000,500,0,3855,3856,5,13,0,0,3856,3861,3,440,220,0,3857,
3858,5,3,0,0,3858,3860,3,440,220,0,3859,3857,1,0,0,0,3860,3863,1,0,0,0,3861,
3859,1,0,0,0,3861,3862,1,0,0,0,3862,3904,1,0,0,0,3863,3861,1,0,0,0,3864,
3865,5,19,0,0,3865,3866,5,356,0,0,3866,3867,5,177,0,0,3867,3868,3,1000,500,
0,3868,3869,5,129,0,0,3869,3870,5,2,0,0,3870,3875,5,514,0,0,3871,3872,5,
3,0,0,3872,3874,5,514,0,0,3873,3871,1,0,0,0,3874,3877,1,0,0,0,3875,3873,
1,0,0,0,3875,3876,1,0,0,0,3876,3878,1,0,0,0,3877,3875,1,0,0,0,3878,3879,
5,4,0,0,3879,3904,1,0,0,0,3880,3881,5,19,0,0,3881,3882,5,356,0,0,3882,3883,
5,177,0,0,3883,3884,3,1000,500,0,3884,3885,5,129,0,0,3885,3886,5,18,0,0,
3886,3904,1,0,0,0,3887,3888,5,19,0,0,3888,3889,5,356,0,0,3889,3890,5,177,
0,0,3890,3891,3,1000,500,0,3891,3892,5,476,0,0,3892,3893,5,2,0,0,3893,3898,
3,944,472,0,3894,3895,5,3,0,0,3895,3897,3,944,472,0,3896,3894,1,0,0,0,3897,
3900,1,0,0,0,3898,3896,1,0,0,0,3898,3899,1,0,0,0,3899,3901,1,0,0,0,3900,
3898,1,0,0,0,3901,3902,5,4,0,0,3902,3904,1,0,0,0,3903,3851,1,0,0,0,3903,
3864,1,0,0,0,3903,3880,1,0,0,0,3903,3887,1,0,0,0,3904,427,1,0,0,0,3905,3907,
5,396,0,0,3906,3908,5,463,0,0,3907,3906,1,0,0,0,3907,3908,1,0,0,0,3908,3909,
1,0,0,0,3909,3910,5,356,0,0,3910,3911,5,177,0,0,3911,3922,3,1000,500,0,3912,
3914,5,396,0,0,3913,3915,5,463,0,0,3914,3913,1,0,0,0,3914,3915,1,0,0,0,3915,
3916,1,0,0,0,3916,3917,5,356,0,0,3917,3919,5,178,0,0,3918,3920,5,18,0,0,
3919,3918,1,0,0,0,3919,3920,1,0,0,0,3920,3922,1,0,0,0,3921,3905,1,0,0,0,
3921,3912,1,0,0,0,3922,429,1,0,0,0,3923,3924,5,396,0,0,3924,3925,5,452,0,
0,3925,3926,5,356,0,0,3926,3927,5,177,0,0,3927,3933,3,1000,500,0,3928,3929,
5,396,0,0,3929,3930,5,452,0,0,3930,3931,5,356,0,0,3931,3933,5,178,0,0,3932,
3923,1,0,0,0,3932,3928,1,0,0,0,3933,431,1,0,0,0,3934,3936,5,88,0,0,3935,
3937,5,147,0,0,3936,3935,1,0,0,0,3936,3937,1,0,0,0,3937,3938,1,0,0,0,3938,
3939,5,356,0,0,3939,3941,3,1008,504,0,3940,3942,3,936,468,0,3941,3940,1,
0,0,0,3941,3942,1,0,0,0,3942,433,1,0,0,0,3943,3944,5,19,0,0,3944,3945,5,
356,0,0,3945,3946,3,1008,504,0,3946,3947,5,391,0,0,3947,3948,3,936,468,0,
3948,435,1,0,0,0,3949,3950,5,129,0,0,3950,3951,5,356,0,0,3951,3952,3,1008,
504,0,3952,437,1,0,0,0,3953,3954,5,396,0,0,3954,3955,5,357,0,0,3955,439,
1,0,0,0,3956,3957,5,2,0,0,3957,3958,3,836,418,0,3958,3959,5,4,0,0,3959,441,
1,0,0,0,3960,3962,5,396,0,0,3961,3963,5,171,0,0,3962,3961,1,0,0,0,3962,3963,
1,0,0,0,3963,3965,1,0,0,0,3964,3966,7,20,0,0,3965,3964,1,0,0,0,3965,3966,
1,0,0,0,3966,3967,1,0,0,0,3967,3970,5,173,0,0,3968,3969,7,1,0,0,3969,3971,
3,994,497,0,3970,3968,1,0,0,0,3970,3971,1,0,0,0,3971,3976,1,0,0,0,3972,3973,
5,236,0,0,3973,3977,3,958,479,0,3974,3975,5,474,0,0,3975,3977,3,834,417,
0,3976,3972,1,0,0,0,3976,3974,1,0,0,0,3976,3977,1,0,0,0,3977,443,1,0,0,0,
3978,3980,5,129,0,0,3979,3981,5,174,0,0,3980,3979,1,0,0,0,3980,3981,1,0,
0,0,3981,3982,1,0,0,0,3982,3985,5,172,0,0,3983,3984,5,193,0,0,3984,3986,
5,144,0,0,3985,3983,1,0,0,0,3985,3986,1,0,0,0,3986,3987,1,0,0,0,3987,3988,
3,994,497,0,3988,3989,5,2,0,0,3989,3990,3,450,225,0,3990,3991,5,4,0,0,3991,
445,1,0,0,0,3992,3993,5,88,0,0,3993,3995,3,68,34,0,3994,3996,5,174,0,0,3995,
3994,1,0,0,0,3995,3996,1,0,0,0,3996,3998,1,0,0,0,3997,3999,7,21,0,0,3998,
3997,1,0,0,0,3998,3999,1,0,0,0,3999,4000,1,0,0,0,4000,4001,5,172,0,0,4001,
4002,3,70,35,0,4002,4003,3,994,497,0,4003,4004,5,2,0,0,4004,4005,3,450,225,
0,4005,4006,5,4,0,0,4006,4007,5,362,0,0,4007,4010,3,976,488,0,4008,4011,
3,936,468,0,4009,4011,3,946,473,0,4010,4011,1,0,0,0,4010,4008,1,0,0,0,4010,
4009,1,0,0,0,4011,4013,1,0,0,0,4012,4014,3,448,224,0,4013,4012,1,0,0,0,4013,
4014,1,0,0,0,4014,447,1,0,0,0,4015,4016,5,27,0,0,4016,4017,5,531,0,0,4017,
449,1,0,0,0,4018,4020,3,976,488,0,4019,4018,1,0,0,0,4019,4020,1,0,0,0,4020,
4025,1,0,0,0,4021,4022,5,3,0,0,4022,4024,3,976,488,0,4023,4021,1,0,0,0,4024,
4027,1,0,0,0,4025,4023,1,0,0,0,4025,4026,1,0,0,0,4026,4030,1,0,0,0,4027,
4025,1,0,0,0,4028,4029,5,3,0,0,4029,4031,5,529,0,0,4030,4028,1,0,0,0,4030,
4031,1,0,0,0,4031,451,1,0,0,0,4032,4033,5,239,0,0,4033,4034,5,226,0,0,4034,
4036,3,454,227,0,4035,4037,3,456,228,0,4036,4035,1,0,0,0,4036,4037,1,0,0,
0,4037,4039,1,0,0,0,4038,4040,3,462,231,0,4039,4038,1,0,0,0,4039,4040,1,
0,0,0,4040,4043,1,0,0,0,4041,4042,5,55,0,0,4042,4044,3,1008,504,0,4043,4041,
1,0,0,0,4043,4044,1,0,0,0,4044,4047,1,0,0,0,4045,4046,5,327,0,0,4046,4048,
3,940,470,0,4047,4045,1,0,0,0,4047,4048,1,0,0,0,4048,4061,1,0,0,0,4049,4050,
5,239,0,0,4050,4051,5,226,0,0,4051,4053,3,454,227,0,4052,4054,3,456,228,
0,4053,4052,1,0,0,0,4053,4054,1,0,0,0,4054,4055,1,0,0,0,4055,4058,3,464,
232,0,4056,4057,5,327,0,0,4057,4059,3,940,470,0,4058,4056,1,0,0,0,4058,4059,
1,0,0,0,4059,4061,1,0,0,0,4060,4032,1,0,0,0,4060,4049,1,0,0,0,4061,453,1,
0,0,0,4062,4063,3,1000,500,0,4063,4064,5,1,0,0,4064,4066,1,0,0,0,4065,4062,
1,0,0,0,4065,4066,1,0,0,0,4066,4067,1,0,0,0,4067,4068,3,1000,500,0,4068,
455,1,0,0,0,4069,4070,5,2,0,0,4070,4075,3,458,229,0,4071,4072,5,3,0,0,4072,
4074,3,458,229,0,4073,4071,1,0,0,0,4074,4077,1,0,0,0,4075,4073,1,0,0,0,4075,
4076,1,0,0,0,4076,4078,1,0,0,0,4077,4075,1,0,0,0,4078,4079,5,4,0,0,4079,
457,1,0,0,0,4080,4081,5,99,0,0,4081,4082,5,203,0,0,4082,4084,3,908,454,0,
4083,4085,5,270,0,0,4084,4083,1,0,0,0,4084,4085,1,0,0,0,4085,4086,1,0,0,
0,4086,4087,5,214,0,0,4087,4088,5,418,0,0,4088,4090,3,1000,500,0,4089,4091,
3,808,404,0,4090,4089,1,0,0,0,4090,4091,1,0,0,0,4091,4096,1,0,0,0,4092,4093,
5,75,0,0,4093,4094,5,425,0,0,4094,4095,5,55,0,0,4095,4097,3,958,479,0,4096,
4092,1,0,0,0,4096,4097,1,0,0,0,4097,4102,1,0,0,0,4098,4099,5,374,0,0,4099,
4100,5,425,0,0,4100,4101,5,55,0,0,4101,4103,3,958,479,0,4102,4098,1,0,0,
0,4102,4103,1,0,0,0,4103,4105,1,0,0,0,4104,4106,3,956,478,0,4105,4104,1,
0,0,0,4105,4106,1,0,0,0,4106,4108,1,0,0,0,4107,4109,3,460,230,0,4108,4107,
1,0,0,0,4108,4109,1,0,0,0,4109,4111,1,0,0,0,4110,4112,3,806,403,0,4111,4110,
1,0,0,0,4111,4112,1,0,0,0,4112,4118,1,0,0,0,4113,4114,5,75,0,0,4114,4115,
5,168,0,0,4115,4116,5,301,0,0,4116,4117,5,27,0,0,4117,4119,3,1006,503,0,
4118,4113,1,0,0,0,4118,4119,1,0,0,0,4119,4122,1,0,0,0,4120,4121,5,391,0,
0,4121,4123,3,440,220,0,4122,4120,1,0,0,0,4122,4123,1,0,0,0,4123,4126,1,
0,0,0,4124,4125,5,474,0,0,4125,4127,3,834,417,0,4126,4124,1,0,0,0,4126,4127,
1,0,0,0,4127,4150,1,0,0,0,4128,4129,5,99,0,0,4129,4130,5,168,0,0,4130,4131,
5,418,0,0,4131,4133,3,1000,500,0,4132,4134,5,270,0,0,4133,4132,1,0,0,0,4133,
4134,1,0,0,0,4134,4135,1,0,0,0,4135,4136,5,214,0,0,4136,4137,5,418,0,0,4137,
4139,3,1000,500,0,4138,4140,3,808,404,0,4139,4138,1,0,0,0,4139,4140,1,0,
0,0,4140,4143,1,0,0,0,4141,4142,5,391,0,0,4142,4144,3,440,220,0,4143,4141,
1,0,0,0,4143,4144,1,0,0,0,4144,4147,1,0,0,0,4145,4146,5,474,0,0,4146,4148,
3,834,417,0,4147,4145,1,0,0,0,4147,4148,1,0,0,0,4148,4150,1,0,0,0,4149,4080,
1,0,0,0,4149,4128,1,0,0,0,4150,459,1,0,0,0,4151,4155,5,2,0,0,4152,4153,5,
395,0,0,4153,4154,5,488,0,0,4154,4156,5,514,0,0,4155,4152,1,0,0,0,4155,4156,
1,0,0,0,4156,4160,1,0,0,0,4157,4158,5,439,0,0,4158,4159,5,488,0,0,4159,4161,
3,964,482,0,4160,4157,1,0,0,0,4160,4161,1,0,0,0,4161,4165,1,0,0,0,4162,4163,
5,135,0,0,4163,4164,5,488,0,0,4164,4166,3,958,479,0,4165,4162,1,0,0,0,4165,
4166,1,0,0,0,4166,4170,1,0,0,0,4167,4168,5,140,0,0,4168,4169,5,488,0,0,4169,
4171,3,958,479,0,4170,4167,1,0,0,0,4170,4171,1,0,0,0,4171,4172,1,0,0,0,4172,
4173,5,4,0,0,4173,461,1,0,0,0,4174,4175,5,476,0,0,4175,4177,5,52,0,0,4176,
4178,3,940,470,0,4177,4176,1,0,0,0,4177,4178,1,0,0,0,4178,4186,1,0,0,0,4179,
4180,5,476,0,0,4180,4181,5,52,0,0,4181,4183,3,1008,504,0,4182,4184,3,940,
470,0,4183,4182,1,0,0,0,4183,4184,1,0,0,0,4184,4186,1,0,0,0,4185,4174,1,
0,0,0,4185,4179,1,0,0,0,4186,463,1,0,0,0,4187,4188,5,476,0,0,4188,4189,5,
356,0,0,4189,4191,3,1008,504,0,4190,4192,3,940,470,0,4191,4190,1,0,0,0,4191,
4192,1,0,0,0,4192,465,1,0,0,0,4193,4194,5,396,0,0,4194,4196,5,239,0,0,4195,
4197,5,18,0,0,4196,4195,1,0,0,0,4196,4197,1,0,0,0,4197,4200,1,0,0,0,4198,
4199,5,168,0,0,4199,4201,3,1000,500,0,4200,4198,1,0,0,0,4200,4201,1,0,0,
0,4201,4204,1,0,0,0,4202,4203,5,474,0,0,4203,4205,3,834,417,0,4204,4202,
1,0,0,0,4204,4205,1,0,0,0,4205,4216,1,0,0,0,4206,4207,5,293,0,0,4207,4208,
5,55,0,0,4208,4213,3,754,377,0,4209,4210,5,3,0,0,4210,4212,3,754,377,0,4211,
4209,1,0,0,0,4212,4215,1,0,0,0,4213,4211,1,0,0,0,4213,4214,1,0,0,0,4214,
4217,1,0,0,0,4215,4213,1,0,0,0,4216,4206,1,0,0,0,4216,4217,1,0,0,0,4217,
4219,1,0,0,0,4218,4220,3,758,379,0,4219,4218,1,0,0,0,4219,4220,1,0,0,0,4220,
467,1,0,0,0,4221,4222,5,396,0,0,4222,4223,5,239,0,0,4223,4226,5,471,0,0,
4224,4225,5,168,0,0,4225,4227,3,1000,500,0,4226,4224,1,0,0,0,4226,4227,1,
0,0,0,4227,4230,1,0,0,0,4228,4229,5,474,0,0,4229,4231,3,834,417,0,4230,4228,
1,0,0,0,4230,4231,1,0,0,0,4231,4233,1,0,0,0,4232,4234,3,758,379,0,4233,4232,
1,0,0,0,4233,4234,1,0,0,0,4234,4241,1,0,0,0,4235,4236,5,396,0,0,4236,4237,
5,239,0,0,4237,4238,5,471,0,0,4238,4239,5,285,0,0,4239,4241,3,958,479,0,
4240,4221,1,0,0,0,4240,4235,1,0,0,0,4241,469,1,0,0,0,4242,4243,5,57,0,0,
4243,4246,5,239,0,0,4244,4245,5,168,0,0,4245,4247,3,1000,500,0,4246,4244,
1,0,0,0,4246,4247,1,0,0,0,4247,4250,1,0,0,0,4248,4249,5,474,0,0,4249,4251,
3,834,417,0,4250,4248,1,0,0,0,4250,4251,1,0,0,0,4251,471,1,0,0,0,4252,4253,
5,19,0,0,4253,4254,5,239,0,0,4254,4258,5,164,0,0,4255,4256,3,994,497,0,4256,
4257,5,1,0,0,4257,4259,1,0,0,0,4258,4255,1,0,0,0,4258,4259,1,0,0,0,4259,
4260,1,0,0,0,4260,4262,3,1000,500,0,4261,4263,3,372,186,0,4262,4261,1,0,
0,0,4262,4263,1,0,0,0,4263,473,1,0,0,0,4264,4265,5,57,0,0,4265,4266,5,80,
0,0,4266,4267,5,474,0,0,4267,4268,3,834,417,0,4268,475,1,0,0,0,4269,4270,
5,396,0,0,4270,4271,5,30,0,0,4271,477,1,0,0,0,4272,4273,5,396,0,0,4273,4274,
5,36,0,0,4274,479,1,0,0,0,4275,4276,5,396,0,0,4276,4277,5,52,0,0,4277,481,
1,0,0,0,4278,4284,5,396,0,0,4279,4280,5,64,0,0,4280,4285,5,391,0,0,4281,
4285,5,66,0,0,4282,4283,5,65,0,0,4283,4285,5,391,0,0,4284,4279,1,0,0,0,4284,
4281,1,0,0,0,4284,4282,1,0,0,0,4285,4290,1,0,0,0,4286,4287,5,236,0,0,4287,
4291,3,958,479,0,4288,4289,5,474,0,0,4289,4291,3,834,417,0,4290,4286,1,0,
0,0,4290,4288,1,0,0,0,4290,4291,1,0,0,0,4291,483,1,0,0,0,4292,4293,5,396,
0,0,4293,4298,5,73,0,0,4294,4295,5,236,0,0,4295,4299,3,958,479,0,4296,4297,
5,474,0,0,4297,4299,3,834,417,0,4298,4294,1,0,0,0,4298,4296,1,0,0,0,4298,
4299,1,0,0,0,4299,485,1,0,0,0,4300,4301,5,396,0,0,4301,4304,5,115,0,0,4302,
4303,7,1,0,0,4303,4305,3,994,497,0,4304,4302,1,0,0,0,4304,4305,1,0,0,0,4305,
487,1,0,0,0,4306,4307,5,396,0,0,4307,4308,5,132,0,0,4308,4309,5,298,0,0,
4309,4312,5,419,0,0,4310,4311,7,1,0,0,4311,4313,3,994,497,0,4312,4310,1,
0,0,0,4312,4313,1,0,0,0,4313,489,1,0,0,0,4314,4315,5,396,0,0,4315,4318,5,
141,0,0,4316,4317,7,1,0,0,4317,4319,3,994,497,0,4318,4316,1,0,0,0,4318,4319,
1,0,0,0,4319,4324,1,0,0,0,4320,4321,5,236,0,0,4321,4325,3,958,479,0,4322,
4323,5,474,0,0,4323,4325,3,834,417,0,4324,4320,1,0,0,0,4324,4322,1,0,0,0,
4324,4325,1,0,0,0,4325,491,1,0,0,0,4326,4327,5,396,0,0,4327,4328,5,138,0,
0,4328,493,1,0,0,0,4329,4330,5,396,0,0,4330,4331,5,170,0,0,4331,495,1,0,
0,0,4332,4333,5,396,0,0,4333,4334,5,309,0,0,4334,497,1,0,0,0,4335,4336,5,
396,0,0,4336,4337,5,355,0,0,4337,499,1,0,0,0,4338,4339,5,396,0,0,4339,4340,
5,287,0,0,4340,4341,5,419,0,0,4341,501,1,0,0,0,4342,4343,5,396,0,0,4343,
4344,5,320,0,0,4344,503,1,0,0,0,4345,4346,5,396,0,0,4346,4347,7,22,0,0,4347,
4352,5,404,0,0,4348,4349,5,236,0,0,4349,4353,3,958,479,0,4350,4351,5,474,
0,0,4351,4353,3,834,417,0,4352,4348,1,0,0,0,4352,4350,1,0,0,0,4352,4353,
1,0,0,0,4353,505,1,0,0,0,4354,4355,5,396,0,0,4355,4356,5,322,0,0,4356,4357,
3,958,479,0,4357,507,1,0,0,0,4358,4360,5,396,0,0,4359,4361,5,171,0,0,4360,
4359,1,0,0,0,4360,4361,1,0,0,0,4361,4362,1,0,0,0,4362,4365,5,324,0,0,4363,
4364,5,164,0,0,4364,4366,3,958,479,0,4365,4363,1,0,0,0,4365,4366,1,0,0,0,
4366,509,1,0,0,0,4367,4368,5,396,0,0,4368,4371,5,326,0,0,4369,4370,5,237,
0,0,4370,4372,5,514,0,0,4371,4369,1,0,0,0,4371,4372,1,0,0,0,4372,511,1,0,
0,0,4373,4374,5,396,0,0,4374,4375,5,378,0,0,4375,4378,5,334,0,0,4376,4377,
5,237,0,0,4377,4379,5,514,0,0,4378,4376,1,0,0,0,4378,4379,1,0,0,0,4379,513,
1,0,0,0,4380,4382,5,396,0,0,4381,4383,3,950,475,0,4382,4381,1,0,0,0,4382,
4383,1,0,0,0,4383,4384,1,0,0,0,4384,4389,5,404,0,0,4385,4386,5,236,0,0,4386,
4390,3,958,479,0,4387,4388,5,474,0,0,4388,4390,3,834,417,0,4389,4385,1,0,
0,0,4389,4387,1,0,0,0,4389,4390,1,0,0,0,4390,515,1,0,0,0,4391,4392,5,396,
0,0,4392,4393,5,420,0,0,4393,4421,5,514,0,0,4394,4395,5,396,0,0,4395,4396,
7,23,0,0,4396,4397,5,168,0,0,4397,4399,3,994,497,0,4398,4400,3,808,404,0,
4399,4398,1,0,0,0,4399,4400,1,0,0,0,4400,4403,1,0,0,0,4401,4402,5,474,0,
0,4402,4404,3,834,417,0,4403,4401,1,0,0,0,4403,4404,1,0,0,0,4404,4415,1,
0,0,0,4405,4406,5,293,0,0,4406,4407,5,55,0,0,4407,4412,3,754,377,0,4408,
4409,5,3,0,0,4409,4411,3,754,377,0,4410,4408,1,0,0,0,4411,4414,1,0,0,0,4412,
4410,1,0,0,0,4412,4413,1,0,0,0,4413,4416,1,0,0,0,4414,4412,1,0,0,0,4415,
4405,1,0,0,0,4415,4416,1,0,0,0,4416,4418,1,0,0,0,4417,4419,3,758,379,0,4418,
4417,1,0,0,0,4418,4419,1,0,0,0,4419,4421,1,0,0,0,4420,4391,1,0,0,0,4420,
4394,1,0,0,0,4421,517,1,0,0,0,4422,4423,5,396,0,0,4423,4426,5,434,0,0,4424,
4425,7,1,0,0,4425,4427,3,994,497,0,4426,4424,1,0,0,0,4426,4427,1,0,0,0,4427,
4430,1,0,0,0,4428,4429,5,474,0,0,4429,4431,3,834,417,0,4430,4428,1,0,0,0,
4430,4431,1,0,0,0,4431,519,1,0,0,0,4432,4434,5,396,0,0,4433,4435,5,171,0,
0,4434,4433,1,0,0,0,4434,4435,1,0,0,0,4435,4436,1,0,0,0,4436,4439,5,438,
0,0,4437,4438,7,1,0,0,4438,4440,3,994,497,0,4439,4437,1,0,0,0,4439,4440,
1,0,0,0,4440,4445,1,0,0,0,4441,4442,5,236,0,0,4442,4446,3,958,479,0,4443,
4444,5,474,0,0,4444,4446,3,834,417,0,4445,4441,1,0,0,0,4445,4443,1,0,0,0,
4445,4446,1,0,0,0,4446,521,1,0,0,0,4447,4448,5,396,0,0,4448,4451,5,328,0,
0,4449,4450,5,164,0,0,4450,4452,3,958,479,0,4451,4449,1,0,0,0,4451,4452,
1,0,0,0,4452,4455,1,0,0,0,4453,4454,5,236,0,0,4454,4456,3,958,479,0,4455,
4453,1,0,0,0,4455,4456,1,0,0,0,4456,4468,1,0,0,0,4457,4458,5,396,0,0,4458,
4461,5,327,0,0,4459,4460,5,164,0,0,4460,4462,3,958,479,0,4461,4459,1,0,0,
0,4461,4462,1,0,0,0,4462,4465,1,0,0,0,4463,4464,5,236,0,0,4464,4466,3,958,
479,0,4465,4463,1,0,0,0,4465,4466,1,0,0,0,4466,4468,1,0,0,0,4467,4447,1,
0,0,0,4467,4457,1,0,0,0,4468,523,1,0,0,0,4469,4471,5,396,0,0,4470,4472,3,
950,475,0,4471,4470,1,0,0,0,4471,4472,1,0,0,0,4472,4473,1,0,0,0,4473,4478,
5,461,0,0,4474,4475,5,236,0,0,4475,4479,3,958,479,0,4476,4477,5,474,0,0,
4477,4479,3,834,417,0,4478,4474,1,0,0,0,4478,4476,1,0,0,0,4478,4479,1,0,
0,0,4479,525,1,0,0,0,4480,4481,5,396,0,0,4481,4483,7,24,0,0,4482,4484,3,
758,379,0,4483,4482,1,0,0,0,4483,4484,1,0,0,0,4484,527,1,0,0,0,4485,4486,
5,184,0,0,4486,4487,3,1008,504,0,4487,529,1,0,0,0,4488,4489,5,88,0,0,4489,
4493,5,454,0,0,4490,4491,5,193,0,0,4491,4492,5,276,0,0,4492,4494,5,144,0,
0,4493,4490,1,0,0,0,4493,4494,1,0,0,0,4494,4495,1,0,0,0,4495,4497,3,1014,
507,0,4496,4498,3,566,283,0,4497,4496,1,0,0,0,4497,4498,1,0,0,0,4498,4502,
1,0,0,0,4499,4500,5,114,0,0,4500,4501,5,368,0,0,4501,4503,3,688,344,0,4502,
4499,1,0,0,0,4502,4503,1,0,0,0,4503,4505,1,0,0,0,4504,4506,3,936,468,0,4505,
4504,1,0,0,0,4505,4506,1,0,0,0,4506,531,1,0,0,0,4507,4508,5,129,0,0,4508,
4511,5,454,0,0,4509,4510,5,193,0,0,4510,4512,5,144,0,0,4511,4509,1,0,0,0,
4511,4512,1,0,0,0,4512,4513,1,0,0,0,4513,4514,3,1014,507,0,4514,533,1,0,
0,0,4515,4516,5,19,0,0,4516,4519,5,454,0,0,4517,4518,5,193,0,0,4518,4520,
5,144,0,0,4519,4517,1,0,0,0,4519,4520,1,0,0,0,4520,4521,1,0,0,0,4521,4522,
3,1014,507,0,4522,4523,3,566,283,0,4523,4549,1,0,0,0,4524,4525,5,19,0,0,
4525,4528,5,454,0,0,4526,4527,5,193,0,0,4527,4529,5,144,0,0,4528,4526,1,
0,0,0,4528,4529,1,0,0,0,4529,4530,1,0,0,0,4530,4531,3,1014,507,0,4531,4532,
5,114,0,0,4532,4536,5,368,0,0,4533,4537,5,275,0,0,4534,4537,5,18,0,0,4535,
4537,3,688,344,0,4536,4533,1,0,0,0,4536,4534,1,0,0,0,4536,4535,1,0,0,0,4537,
4549,1,0,0,0,4538,4539,5,19,0,0,4539,4542,5,454,0,0,4540,4541,5,193,0,0,
4541,4543,5,144,0,0,4542,4540,1,0,0,0,4542,4543,1,0,0,0,4543,4544,1,0,0,
0,4544,4545,3,1014,507,0,4545,4546,5,391,0,0,4546,4547,3,936,468,0,4547,
4549,1,0,0,0,4548,4515,1,0,0,0,4548,4524,1,0,0,0,4548,4538,1,0,0,0,4549,
535,1,0,0,0,4550,4551,5,396,0,0,4551,4552,7,25,0,0,4552,537,1,0,0,0,4553,
4554,5,396,0,0,4554,4555,5,18,0,0,4555,4563,5,31,0,0,4556,4557,5,396,0,0,
4557,4560,5,31,0,0,4558,4559,5,164,0,0,4559,4561,3,1014,507,0,4560,4558,
1,0,0,0,4560,4561,1,0,0,0,4561,4563,1,0,0,0,4562,4553,1,0,0,0,4562,4556,
1,0,0,0,4563,539,1,0,0,0,4564,4565,5,143,0,0,4565,4566,5,27,0,0,4566,4570,
3,1014,507,0,4567,4568,5,476,0,0,4568,4569,5,272,0,0,4569,4571,5,365,0,0,
4570,4567,1,0,0,0,4570,4571,1,0,0,0,4571,541,1,0,0,0,4572,4573,5,88,0,0,
4573,4577,5,368,0,0,4574,4575,5,193,0,0,4575,4576,5,276,0,0,4576,4578,5,
144,0,0,4577,4574,1,0,0,0,4577,4578,1,0,0,0,4578,4579,1,0,0,0,4579,4581,
3,688,344,0,4580,4582,3,952,476,0,4581,4580,1,0,0,0,4581,4582,1,0,0,0,4582,
543,1,0,0,0,4583,4584,5,19,0,0,4584,4587,5,368,0,0,4585,4586,5,193,0,0,4586,
4588,5,144,0,0,4587,4585,1,0,0,0,4587,4588,1,0,0,0,4588,4589,1,0,0,0,4589,
4590,3,688,344,0,4590,4591,5,391,0,0,4591,4592,5,76,0,0,4592,4593,5,488,
0,0,4593,4594,3,958,479,0,4594,545,1,0,0,0,4595,4596,5,129,0,0,4596,4599,
5,368,0,0,4597,4598,5,193,0,0,4598,4600,5,144,0,0,4599,4597,1,0,0,0,4599,
4600,1,0,0,0,4600,4601,1,0,0,0,4601,4602,3,688,344,0,4602,547,1,0,0,0,4603,
4604,5,396,0,0,4604,4605,5,369,0,0,4605,549,1,0,0,0,4606,4607,5,175,0,0,
4607,4608,3,1010,505,0,4608,4610,5,436,0,0,4609,4611,5,454,0,0,4610,4609,
1,0,0,0,4610,4611,1,0,0,0,4611,4612,1,0,0,0,4612,4613,3,1014,507,0,4613,
4621,1,0,0,0,4614,4615,5,175,0,0,4615,4616,3,1010,505,0,4616,4617,5,436,
0,0,4617,4618,5,368,0,0,4618,4619,3,1008,504,0,4619,4621,1,0,0,0,4620,4606,
1,0,0,0,4620,4614,1,0,0,0,4621,551,1,0,0,0,4622,4623,5,364,0,0,4623,4624,
3,1010,505,0,4624,4626,5,168,0,0,4625,4627,5,454,0,0,4626,4625,1,0,0,0,4626,
4627,1,0,0,0,4627,4628,1,0,0,0,4628,4629,3,1014,507,0,4629,4637,1,0,0,0,
4630,4631,5,364,0,0,4631,4632,3,1010,505,0,4632,4633,5,168,0,0,4633,4634,
5,368,0,0,4634,4635,3,1008,504,0,4635,4637,1,0,0,0,4636,4622,1,0,0,0,4636,
4630,1,0,0,0,4637,553,1,0,0,0,4638,4639,5,391,0,0,4639,4640,5,368,0,0,4640,
4655,5,114,0,0,4641,4642,5,391,0,0,4642,4643,5,368,0,0,4643,4655,5,275,0,
0,4644,4645,5,391,0,0,4645,4646,5,368,0,0,4646,4649,5,18,0,0,4647,4648,5,
142,0,0,4648,4650,3,688,344,0,4649,4647,1,0,0,0,4649,4650,1,0,0,0,4650,4655,
1,0,0,0,4651,4652,5,391,0,0,4652,4653,5,368,0,0,4653,4655,3,688,344,0,4654,
4638,1,0,0,0,4654,4641,1,0,0,0,4654,4644,1,0,0,0,4654,4651,1,0,0,0,4655,
555,1,0,0,0,4656,4657,5,391,0,0,4657,4658,5,114,0,0,4658,4662,5,368,0,0,
4659,4663,5,275,0,0,4660,4663,5,18,0,0,4661,4663,3,688,344,0,4662,4659,1,
0,0,0,4662,4660,1,0,0,0,4662,4661,1,0,0,0,4663,4664,1,0,0,0,4664,4665,5,
436,0,0,4665,4666,3,1014,507,0,4666,557,1,0,0,0,4667,4669,5,454,0,0,4668,
4667,1,0,0,0,4668,4669,1,0,0,0,4669,4670,1,0,0,0,4670,4674,3,1014,507,0,
4671,4672,5,368,0,0,4672,4674,3,1008,504,0,4673,4668,1,0,0,0,4673,4671,1,
0,0,0,4674,559,1,0,0,0,4675,4676,5,175,0,0,4676,4677,5,194,0,0,4677,4678,
5,285,0,0,4678,4679,5,454,0,0,4679,4684,3,1014,507,0,4680,4681,5,3,0,0,4681,
4683,3,1014,507,0,4682,4680,1,0,0,0,4683,4686,1,0,0,0,4684,4682,1,0,0,0,
4684,4685,1,0,0,0,4685,4687,1,0,0,0,4686,4684,1,0,0,0,4687,4688,5,436,0,
0,4688,4692,3,558,279,0,4689,4690,5,476,0,0,4690,4691,5,175,0,0,4691,4693,
5,291,0,0,4692,4689,1,0,0,0,4692,4693,1,0,0,0,4693,4764,1,0,0,0,4694,4695,
5,175,0,0,4695,4696,3,574,287,0,4696,4697,5,285,0,0,4697,4698,3,570,285,
0,4698,4699,5,436,0,0,4699,4703,3,558,279,0,4700,4701,5,476,0,0,4701,4702,
5,175,0,0,4702,4704,5,291,0,0,4703,4700,1,0,0,0,4703,4704,1,0,0,0,4704,4764,
1,0,0,0,4705,4706,5,175,0,0,4706,4707,3,574,287,0,4707,4709,5,285,0,0,4708,
4710,5,174,0,0,4709,4708,1,0,0,0,4709,4710,1,0,0,0,4710,4711,1,0,0,0,4711,
4712,5,172,0,0,4712,4713,3,572,286,0,4713,4714,5,436,0,0,4714,4718,3,558,
279,0,4715,4716,5,476,0,0,4716,4717,5,175,0,0,4717,4719,5,291,0,0,4718,4715,
1,0,0,0,4718,4719,1,0,0,0,4719,4764,1,0,0,0,4720,4721,5,175,0,0,4721,4722,
3,574,287,0,4722,4723,5,285,0,0,4723,4724,5,414,0,0,4724,4725,5,436,0,0,
4725,4729,3,558,279,0,4726,4727,5,476,0,0,4727,4728,5,175,0,0,4728,4730,
5,291,0,0,4729,4726,1,0,0,0,4729,4730,1,0,0,0,4730,4764,1,0,0,0,4731,4732,
5,175,0,0,4732,4733,3,574,287,0,4733,4734,5,285,0,0,4734,4735,3,578,289,
0,4735,4736,3,570,285,0,4736,4737,5,436,0,0,4737,4741,3,558,279,0,4738,4739,
5,476,0,0,4739,4740,5,175,0,0,4740,4742,5,291,0,0,4741,4738,1,0,0,0,4741,
4742,1,0,0,0,4742,4764,1,0,0,0,4743,4744,5,175,0,0,4744,4745,3,574,287,0,
4745,4746,5,285,0,0,4746,4747,5,18,0,0,4747,4754,3,580,290,0,4748,4749,5,
198,0,0,4749,4750,5,18,0,0,4750,4755,5,102,0,0,4751,4752,5,198,0,0,4752,
4753,5,101,0,0,4753,4755,3,1008,504,0,4754,4748,1,0,0,0,4754,4751,1,0,0,
0,4754,4755,1,0,0,0,4755,4756,1,0,0,0,4756,4757,5,436,0,0,4757,4761,3,558,
279,0,4758,4759,5,476,0,0,4759,4760,5,175,0,0,4760,4762,5,291,0,0,4761,4758,
1,0,0,0,4761,4762,1,0,0,0,4762,4764,1,0,0,0,4763,4675,1,0,0,0,4763,4694,
1,0,0,0,4763,4705,1,0,0,0,4763,4720,1,0,0,0,4763,4731,1,0,0,0,4763,4743,
1,0,0,0,4764,561,1,0,0,0,4765,4766,5,364,0,0,4766,4767,5,194,0,0,4767,4768,
5,285,0,0,4768,4769,5,454,0,0,4769,4774,3,1014,507,0,4770,4771,5,3,0,0,4771,
4773,3,1014,507,0,4772,4770,1,0,0,0,4773,4776,1,0,0,0,4774,4772,1,0,0,0,
4774,4775,1,0,0,0,4775,4777,1,0,0,0,4776,4774,1,0,0,0,4777,4778,5,168,0,
0,4778,4779,3,558,279,0,4779,4830,1,0,0,0,4780,4781,5,364,0,0,4781,4782,
3,574,287,0,4782,4783,5,285,0,0,4783,4784,3,570,285,0,4784,4785,5,168,0,
0,4785,4786,3,558,279,0,4786,4830,1,0,0,0,4787,4788,5,364,0,0,4788,4789,
3,574,287,0,4789,4791,5,285,0,0,4790,4792,5,174,0,0,4791,4790,1,0,0,0,4791,
4792,1,0,0,0,4792,4793,1,0,0,0,4793,4794,5,172,0,0,4794,4795,3,572,286,0,
4795,4796,5,168,0,0,4796,4797,3,558,279,0,4797,4830,1,0,0,0,4798,4799,5,
364,0,0,4799,4800,3,574,287,0,4800,4801,5,285,0,0,4801,4802,5,414,0,0,4802,
4803,5,168,0,0,4803,4804,3,558,279,0,4804,4830,1,0,0,0,4805,4806,5,364,0,
0,4806,4807,3,574,287,0,4807,4808,5,285,0,0,4808,4809,3,578,289,0,4809,4810,
3,570,285,0,4810,4811,5,168,0,0,4811,4812,3,558,279,0,4812,4830,1,0,0,0,
4813,4814,5,364,0,0,4814,4815,3,574,287,0,4815,4816,5,285,0,0,4816,4817,
5,18,0,0,4817,4824,3,580,290,0,4818,4819,5,198,0,0,4819,4820,5,18,0,0,4820,
4825,5,102,0,0,4821,4822,5,198,0,0,4822,4823,5,101,0,0,4823,4825,3,1008,
504,0,4824,4818,1,0,0,0,4824,4821,1,0,0,0,4824,4825,1,0,0,0,4825,4826,1,
0,0,0,4826,4827,5,168,0,0,4827,4828,3,558,279,0,4828,4830,1,0,0,0,4829,4765,
1,0,0,0,4829,4780,1,0,0,0,4829,4787,1,0,0,0,4829,4798,1,0,0,0,4829,4805,
1,0,0,0,4829,4813,1,0,0,0,4830,563,1,0,0,0,4831,4832,5,396,0,0,4832,4846,
5,176,0,0,4833,4834,5,396,0,0,4834,4835,5,176,0,0,4835,4837,5,164,0,0,4836,
4838,5,454,0,0,4837,4836,1,0,0,0,4837,4838,1,0,0,0,4838,4839,1,0,0,0,4839,
4846,3,1014,507,0,4840,4841,5,396,0,0,4841,4842,5,176,0,0,4842,4843,5,164,
0,0,4843,4844,5,368,0,0,4844,4846,3,1008,504,0,4845,4831,1,0,0,0,4845,4833,
1,0,0,0,4845,4840,1,0,0,0,4846,565,1,0,0,0,4847,4848,5,192,0,0,4848,4850,
5,55,0,0,4849,4851,5,300,0,0,4850,4849,1,0,0,0,4850,4851,1,0,0,0,4851,4852,
1,0,0,0,4852,4861,3,958,479,0,4853,4854,5,192,0,0,4854,4855,5,476,0,0,4855,
4858,3,1008,504,0,4856,4857,7,26,0,0,4857,4859,3,958,479,0,4858,4856,1,0,
0,0,4858,4859,1,0,0,0,4859,4861,1,0,0,0,4860,4847,1,0,0,0,4860,4853,1,0,
0,0,4861,567,1,0,0,0,4862,4865,3,1012,506,0,4863,4864,5,1,0,0,4864,4866,
3,1012,506,0,4865,4863,1,0,0,0,4865,4866,1,0,0,0,4866,569,1,0,0,0,4867,4872,
3,568,284,0,4868,4869,5,3,0,0,4869,4871,3,568,284,0,4870,4868,1,0,0,0,4871,
4874,1,0,0,0,4872,4870,1,0,0,0,4872,4873,1,0,0,0,4873,571,1,0,0,0,4874,4872,
1,0,0,0,4875,4876,3,994,497,0,4876,4877,5,2,0,0,4877,4878,3,450,225,0,4878,
4887,5,4,0,0,4879,4880,5,3,0,0,4880,4881,3,994,497,0,4881,4882,5,2,0,0,4882,
4883,3,450,225,0,4883,4884,5,4,0,0,4884,4886,1,0,0,0,4885,4879,1,0,0,0,4886,
4889,1,0,0,0,4887,4885,1,0,0,0,4887,4888,1,0,0,0,4888,573,1,0,0,0,4889,4887,
1,0,0,0,4890,4895,3,576,288,0,4891,4892,5,3,0,0,4892,4894,3,576,288,0,4893,
4891,1,0,0,0,4894,4897,1,0,0,0,4895,4893,1,0,0,0,4895,4896,1,0,0,0,4896,
575,1,0,0,0,4897,4895,1,0,0,0,4898,4900,5,18,0,0,4899,4901,5,320,0,0,4900,
4899,1,0,0,0,4900,4901,1,0,0,0,4901,4941,1,0,0,0,4902,4941,5,19,0,0,4903,
4941,5,23,0,0,4904,4941,5,47,0,0,4905,4923,5,88,0,0,4906,4924,5,101,0,0,
4907,4924,5,418,0,0,4908,4924,5,465,0,0,4909,4924,5,172,0,0,4910,4911,5,
174,0,0,4911,4924,5,172,0,0,4912,4913,5,253,0,0,4913,4924,5,465,0,0,4914,
4924,5,356,0,0,4915,4916,5,356,0,0,4916,4924,5,177,0,0,4917,4918,5,147,0,
0,4918,4924,5,60,0,0,4919,4920,5,406,0,0,4920,4924,5,467,0,0,4921,4924,5,
469,0,0,4922,4924,5,310,0,0,4923,4906,1,0,0,0,4923,4907,1,0,0,0,4923,4908,
1,0,0,0,4923,4909,1,0,0,0,4923,4910,1,0,0,0,4923,4912,1,0,0,0,4923,4914,
1,0,0,0,4923,4915,1,0,0,0,4923,4917,1,0,0,0,4923,4919,1,0,0,0,4923,4921,
1,0,0,0,4923,4922,1,0,0,0,4924,4941,1,0,0,0,4925,4941,5,115,0,0,4926,4941,
5,129,0,0,4927,4941,5,146,0,0,4928,4941,5,154,0,0,4929,4941,5,194,0,0,4930,
4941,5,206,0,0,4931,4941,5,175,0,0,4932,4941,5,273,0,0,4933,4941,5,288,0,
0,4934,4941,5,308,0,0,4935,4941,5,354,0,0,4936,4941,5,343,0,0,4937,4941,
5,386,0,0,4938,4941,5,451,0,0,4939,4941,5,452,0,0,4940,4898,1,0,0,0,4940,
4902,1,0,0,0,4940,4903,1,0,0,0,4940,4904,1,0,0,0,4940,4905,1,0,0,0,4940,
4925,1,0,0,0,4940,4926,1,0,0,0,4940,4927,1,0,0,0,4940,4928,1,0,0,0,4940,
4929,1,0,0,0,4940,4930,1,0,0,0,4940,4931,1,0,0,0,4940,4932,1,0,0,0,4940,
4933,1,0,0,0,4940,4934,1,0,0,0,4940,4935,1,0,0,0,4940,4936,1,0,0,0,4940,
4937,1,0,0,0,4940,4938,1,0,0,0,4940,4939,1,0,0,0,4941,577,1,0,0,0,4942,4957,
5,60,0,0,4943,4957,5,101,0,0,4944,4945,5,253,0,0,4945,4957,5,465,0,0,4946,
4957,5,356,0,0,4947,4948,5,356,0,0,4948,4957,5,177,0,0,4949,4950,5,406,0,
0,4950,4957,5,467,0,0,4951,4957,5,414,0,0,4952,4957,5,418,0,0,4953,4957,
5,465,0,0,4954,4957,5,469,0,0,4955,4957,5,310,0,0,4956,4942,1,0,0,0,4956,
4943,1,0,0,0,4956,4944,1,0,0,0,4956,4946,1,0,0,0,4956,4947,1,0,0,0,4956,
4949,1,0,0,0,4956,4951,1,0,0,0,4956,4952,1,0,0,0,4956,4953,1,0,0,0,4956,
4954,1,0,0,0,4956,4955,1,0,0,0,4957,579,1,0,0,0,4958,4977,5,61,0,0,4959,
4977,5,102,0,0,4960,4977,5,173,0,0,4961,4962,5,174,0,0,4962,4977,5,173,0,
0,4963,4964,5,253,0,0,4964,4977,5,466,0,0,4965,4977,5,314,0,0,4966,4977,
5,357,0,0,4967,4968,5,356,0,0,4968,4977,5,178,0,0,4969,4970,5,406,0,0,4970,
4977,5,468,0,0,4971,4977,5,419,0,0,4972,4977,5,455,0,0,4973,4977,5,466,0,
0,4974,4977,5,470,0,0,4975,4977,5,311,0,0,4976,4958,1,0,0,0,4976,4959,1,
0,0,0,4976,4960,1,0,0,0,4976,4961,1,0,0,0,4976,4963,1,0,0,0,4976,4965,1,
0,0,0,4976,4966,1,0,0,0,4976,4967,1,0,0,0,4976,4969,1,0,0,0,4976,4971,1,
0,0,0,4976,4972,1,0,0,0,4976,4973,1,0,0,0,4976,4974,1,0,0,0,4976,4975,1,
0,0,0,4977,581,1,0,0,0,4978,4979,5,88,0,0,4979,4980,5,385,0,0,4980,4981,
5,209,0,0,4981,4982,3,1000,500,0,4982,4983,3,936,468,0,4983,583,1,0,0,0,
4984,4985,5,19,0,0,4985,4986,5,385,0,0,4986,4987,5,209,0,0,4987,4988,3,1000,
500,0,4988,4989,5,391,0,0,4989,4990,3,940,470,0,4990,585,1,0,0,0,4991,4992,
5,129,0,0,4992,4993,5,385,0,0,4993,4994,5,209,0,0,4994,4995,3,1000,500,0,
4995,587,1,0,0,0,4996,4997,5,396,0,0,4997,4998,5,385,0,0,4998,4999,5,210,
0,0,4999,589,1,0,0,0,5000,5001,5,396,0,0,5001,5002,5,88,0,0,5002,5003,5,
385,0,0,5003,5004,5,209,0,0,5004,5005,3,1000,500,0,5005,591,1,0,0,0,5006,
5007,5,88,0,0,5007,5008,5,177,0,0,5008,5009,5,329,0,0,5009,5010,3,1000,500,
0,5010,5011,3,936,468,0,5011,593,1,0,0,0,5012,5013,5,129,0,0,5013,5014,5,
177,0,0,5014,5015,5,329,0,0,5015,5016,3,1000,500,0,5016,595,1,0,0,0,5017,
5018,5,396,0,0,5018,5019,5,177,0,0,5019,5020,5,330,0,0,5020,597,1,0,0,0,
5021,5022,5,396,0,0,5022,5023,5,88,0,0,5023,5024,5,177,0,0,5024,5025,5,329,
0,0,5025,5026,3,1000,500,0,5026,599,1,0,0,0,5027,5034,5,37,0,0,5028,5029,
5,18,0,0,5029,5030,5,147,0,0,5030,5035,5,61,0,0,5031,5032,5,147,0,0,5032,
5033,7,27,0,0,5033,5035,3,1006,503,0,5034,5028,1,0,0,0,5034,5031,1,0,0,0,
5034,5035,1,0,0,0,5035,5038,1,0,0,0,5036,5037,5,101,0,0,5037,5039,3,1000,
500,0,5038,5036,1,0,0,0,5038,5039,1,0,0,0,5039,5040,1,0,0,0,5040,5041,5,
398,0,0,5041,5042,3,994,497,0,5042,5043,5,436,0,0,5043,5056,3,1000,500,0,
5044,5045,5,285,0,0,5045,5046,5,2,0,0,5046,5051,3,880,440,0,5047,5048,5,
3,0,0,5048,5050,3,880,440,0,5049,5047,1,0,0,0,5050,5053,1,0,0,0,5051,5049,
1,0,0,0,5051,5052,1,0,0,0,5052,5054,1,0,0,0,5053,5051,1,0,0,0,5054,5055,
5,4,0,0,5055,5057,1,0,0,0,5056,5044,1,0,0,0,5056,5057,1,0,0,0,5057,5060,
1,0,0,0,5058,5059,5,327,0,0,5059,5061,3,940,470,0,5060,5058,1,0,0,0,5060,
5061,1,0,0,0,5061,601,1,0,0,0,5062,5063,5,57,0,0,5063,5069,5,37,0,0,5064,
5065,7,1,0,0,5065,5070,3,1000,500,0,5066,5067,5,164,0,0,5067,5068,5,147,
0,0,5068,5070,5,60,0,0,5069,5064,1,0,0,0,5069,5066,1,0,0,0,5069,5070,1,0,
0,0,5070,603,1,0,0,0,5071,5072,5,396,0,0,5072,5075,5,37,0,0,5073,5074,7,
1,0,0,5074,5076,3,1000,500,0,5075,5073,1,0,0,0,5075,5076,1,0,0,0,5076,605,
1,0,0,0,5077,5078,5,358,0,0,5078,5079,5,398,0,0,5079,5080,3,994,497,0,5080,
5081,5,168,0,0,5081,5088,3,1000,500,0,5082,5083,5,18,0,0,5083,5084,5,147,
0,0,5084,5089,5,61,0,0,5085,5086,5,147,0,0,5086,5087,7,27,0,0,5087,5089,
3,1004,502,0,5088,5082,1,0,0,0,5088,5085,1,0,0,0,5088,5089,1,0,0,0,5089,
5096,1,0,0,0,5090,5091,5,101,0,0,5091,5094,3,1000,500,0,5092,5093,5,27,0,
0,5093,5095,3,1000,500,0,5094,5092,1,0,0,0,5094,5095,1,0,0,0,5095,5097,1,
0,0,0,5096,5090,1,0,0,0,5096,5097,1,0,0,0,5097,5110,1,0,0,0,5098,5099,5,
285,0,0,5099,5100,5,2,0,0,5100,5105,3,880,440,0,5101,5102,5,3,0,0,5102,5104,
3,880,440,0,5103,5101,1,0,0,0,5104,5107,1,0,0,0,5105,5103,1,0,0,0,5105,5106,
1,0,0,0,5106,5108,1,0,0,0,5107,5105,1,0,0,0,5108,5109,5,4,0,0,5109,5111,
1,0,0,0,5110,5098,1,0,0,0,5110,5111,1,0,0,0,5111,5114,1,0,0,0,5112,5113,
5,327,0,0,5113,5115,3,940,470,0,5114,5112,1,0,0,0,5114,5115,1,0,0,0,5115,
607,1,0,0,0,5116,5117,5,57,0,0,5117,5123,5,358,0,0,5118,5119,7,1,0,0,5119,
5124,3,1000,500,0,5120,5121,5,164,0,0,5121,5122,5,147,0,0,5122,5124,5,60,
0,0,5123,5118,1,0,0,0,5123,5120,1,0,0,0,5123,5124,1,0,0,0,5124,609,1,0,0,
0,5125,5126,5,396,0,0,5126,5129,5,358,0,0,5127,5128,7,1,0,0,5128,5130,3,
1000,500,0,5129,5127,1,0,0,0,5129,5130,1,0,0,0,5130,5133,1,0,0,0,5131,5132,
5,474,0,0,5132,5134,3,834,417,0,5133,5131,1,0,0,0,5133,5134,1,0,0,0,5134,
611,1,0,0,0,5135,5136,5,396,0,0,5136,5137,5,398,0,0,5137,5138,5,285,0,0,
5138,5141,3,1000,500,0,5139,5140,5,474,0,0,5140,5142,3,834,417,0,5141,5139,
1,0,0,0,5141,5142,1,0,0,0,5142,613,1,0,0,0,5143,5146,5,88,0,0,5144,5145,
5,340,0,0,5145,5147,5,286,0,0,5146,5144,1,0,0,0,5146,5147,1,0,0,0,5147,5148,
1,0,0,0,5148,5149,5,354,0,0,5149,5150,3,1000,500,0,5150,5151,5,476,0,0,5151,
5153,5,52,0,0,5152,5154,3,1008,504,0,5153,5152,1,0,0,0,5153,5154,1,0,0,0,
5154,5155,1,0,0,0,5155,5156,5,285,0,0,5156,5157,5,243,0,0,5157,5160,3,958,
479,0,5158,5159,5,327,0,0,5159,5161,3,940,470,0,5160,5158,1,0,0,0,5160,5161,
1,0,0,0,5161,615,1,0,0,0,5162,5163,5,129,0,0,5163,5164,5,354,0,0,5164,5165,
3,1000,500,0,5165,617,1,0,0,0,5166,5167,5,13,0,0,5167,5168,5,400,0,0,5168,
5169,3,958,479,0,5169,619,1,0,0,0,5170,5171,5,115,0,0,5171,5172,5,400,0,
0,5172,5177,5,514,0,0,5173,5174,5,3,0,0,5174,5176,5,514,0,0,5175,5173,1,
0,0,0,5176,5179,1,0,0,0,5177,5175,1,0,0,0,5177,5178,1,0,0,0,5178,621,1,0,
0,0,5179,5177,1,0,0,0,5180,5181,5,396,0,0,5181,5182,5,400,0,0,5182,623,1,
0,0,0,5183,5184,5,396,0,0,5184,5185,5,475,0,0,5185,625,1,0,0,0,5186,5187,
5,13,0,0,5187,5188,5,35,0,0,5188,5189,5,47,0,0,5189,5194,5,514,0,0,5190,
5191,5,3,0,0,5191,5193,5,514,0,0,5192,5190,1,0,0,0,5193,5196,1,0,0,0,5194,
5192,1,0,0,0,5194,5195,1,0,0,0,5195,627,1,0,0,0,5196,5194,1,0,0,0,5197,5198,
5,115,0,0,5198,5199,5,35,0,0,5199,5200,5,47,0,0,5200,5205,5,514,0,0,5201,
5202,5,3,0,0,5202,5204,5,514,0,0,5203,5201,1,0,0,0,5204,5207,1,0,0,0,5205,
5203,1,0,0,0,5205,5206,1,0,0,0,5206,629,1,0,0,0,5207,5205,1,0,0,0,5208,5209,
5,396,0,0,5209,5210,5,35,0,0,5210,5211,5,47,0,0,5211,631,1,0,0,0,5212,5213,
3,1012,506,0,5213,5214,5,1,0,0,5214,5215,3,1012,506,0,5215,5216,5,1,0,0,
5216,5217,3,1012,506,0,5217,633,1,0,0,0,5218,5219,5,88,0,0,5219,5220,5,100,
0,0,5220,5221,5,376,0,0,5221,5224,3,632,316,0,5222,5223,5,474,0,0,5223,5225,
3,834,417,0,5224,5222,1,0,0,0,5224,5225,1,0,0,0,5225,5226,1,0,0,0,5226,5227,
5,319,0,0,5227,5229,5,488,0,0,5228,5230,5,497,0,0,5229,5228,1,0,0,0,5229,
5230,1,0,0,0,5230,5231,1,0,0,0,5231,5233,5,514,0,0,5232,5234,3,936,468,0,
5233,5232,1,0,0,0,5233,5234,1,0,0,0,5234,635,1,0,0,0,5235,5236,5,396,0,0,
5236,5237,5,100,0,0,5237,5238,5,377,0,0,5238,637,1,0,0,0,5239,5240,5,129,
0,0,5240,5241,5,100,0,0,5241,5242,5,376,0,0,5242,5243,5,514,0,0,5243,639,
1,0,0,0,5244,5245,5,69,0,0,5245,5246,5,100,0,0,5246,5247,5,377,0,0,5247,
641,1,0,0,0,5248,5249,5,56,0,0,5249,5250,5,386,0,0,5250,5255,3,772,386,0,
5251,5252,5,3,0,0,5252,5254,3,772,386,0,5253,5251,1,0,0,0,5254,5257,1,0,
0,0,5255,5253,1,0,0,0,5255,5256,1,0,0,0,5256,5258,1,0,0,0,5257,5255,1,0,
0,0,5258,5259,5,168,0,0,5259,5262,3,994,497,0,5260,5261,5,474,0,0,5261,5263,
3,834,417,0,5262,5260,1,0,0,0,5262,5263,1,0,0,0,5263,5265,1,0,0,0,5264,5266,
3,936,468,0,5265,5264,1,0,0,0,5265,5266,1,0,0,0,5266,643,1,0,0,0,5267,5268,
5,146,0,0,5268,5269,5,418,0,0,5269,5271,3,882,441,0,5270,5272,3,806,403,
0,5271,5270,1,0,0,0,5271,5272,1,0,0,0,5272,5273,1,0,0,0,5273,5274,5,436,
0,0,5274,5278,3,958,479,0,5275,5276,5,476,0,0,5276,5277,7,12,0,0,5277,5279,
5,265,0,0,5278,5275,1,0,0,0,5278,5279,1,0,0,0,5279,5281,1,0,0,0,5280,5282,
3,936,468,0,5281,5280,1,0,0,0,5281,5282,1,0,0,0,5282,5284,1,0,0,0,5283,5285,
3,462,231,0,5284,5283,1,0,0,0,5284,5285,1,0,0,0,5285,645,1,0,0,0,5286,5287,
5,57,0,0,5287,5290,5,146,0,0,5288,5289,7,1,0,0,5289,5291,3,994,497,0,5290,
5288,1,0,0,0,5290,5291,1,0,0,0,5291,5296,1,0,0,0,5292,5293,5,236,0,0,5293,
5297,3,958,479,0,5294,5295,5,474,0,0,5295,5297,3,834,417,0,5296,5292,1,0,
0,0,5296,5294,1,0,0,0,5296,5297,1,0,0,0,5297,647,1,0,0,0,5298,5299,5,396,
0,0,5299,5302,5,146,0,0,5300,5301,7,1,0,0,5301,5303,3,994,497,0,5302,5300,
1,0,0,0,5302,5303,1,0,0,0,5303,5308,1,0,0,0,5304,5305,5,236,0,0,5305,5309,
3,958,479,0,5306,5307,5,474,0,0,5307,5309,3,834,417,0,5308,5304,1,0,0,0,
5308,5306,1,0,0,0,5308,5309,1,0,0,0,5309,5320,1,0,0,0,5310,5311,5,293,0,
0,5311,5312,5,55,0,0,5312,5317,3,754,377,0,5313,5314,5,3,0,0,5314,5316,3,
754,377,0,5315,5313,1,0,0,0,5316,5319,1,0,0,0,5317,5315,1,0,0,0,5317,5318,
1,0,0,0,5318,5321,1,0,0,0,5319,5317,1,0,0,0,5320,5310,1,0,0,0,5320,5321,
1,0,0,0,5321,5323,1,0,0,0,5322,5324,3,758,379,0,5323,5322,1,0,0,0,5323,5324,
1,0,0,0,5324,649,1,0,0,0,5325,5326,5,205,0,0,5326,5327,5,308,0,0,5327,5328,
5,168,0,0,5328,5330,3,1008,504,0,5329,5331,3,936,468,0,5330,5329,1,0,0,0,
5330,5331,1,0,0,0,5331,651,1,0,0,0,5332,5333,5,448,0,0,5333,5334,5,308,0,
0,5334,5335,3,1008,504,0,5335,653,1,0,0,0,5336,5337,5,88,0,0,5337,5338,5,
154,0,0,5338,5341,3,958,479,0,5339,5340,7,1,0,0,5340,5342,3,994,497,0,5341,
5339,1,0,0,0,5341,5342,1,0,0,0,5342,5343,1,0,0,0,5343,5344,3,936,468,0,5344,
655,1,0,0,0,5345,5346,5,129,0,0,5346,5347,5,154,0,0,5347,5350,3,958,479,
0,5348,5349,7,1,0,0,5349,5351,3,994,497,0,5350,5348,1,0,0,0,5350,5351,1,
0,0,0,5351,5352,1,0,0,0,5352,5353,3,936,468,0,5353,657,1,0,0,0,5354,5355,
5,396,0,0,5355,5358,5,154,0,0,5356,5357,7,1,0,0,5357,5359,3,994,497,0,5358,
5356,1,0,0,0,5358,5359,1,0,0,0,5359,659,1,0,0,0,5360,5361,5,88,0,0,5361,
5362,3,68,34,0,5362,5363,5,310,0,0,5363,5364,3,70,35,0,5364,5366,3,994,497,
0,5365,5367,3,936,468,0,5366,5365,1,0,0,0,5366,5367,1,0,0,0,5367,5368,1,
0,0,0,5368,5369,5,27,0,0,5369,5370,3,346,173,0,5370,661,1,0,0,0,5371,5372,
5,129,0,0,5372,5375,5,310,0,0,5373,5374,5,193,0,0,5374,5376,5,144,0,0,5375,
5373,1,0,0,0,5375,5376,1,0,0,0,5376,5377,1,0,0,0,5377,5378,3,994,497,0,5378,
663,1,0,0,0,5379,5389,5,412,0,0,5380,5389,5,359,0,0,5381,5382,5,363,0,0,
5382,5389,5,18,0,0,5383,5384,5,363,0,0,5384,5385,5,154,0,0,5385,5389,3,958,
479,0,5386,5387,5,391,0,0,5387,5389,3,940,470,0,5388,5379,1,0,0,0,5388,5380,
1,0,0,0,5388,5381,1,0,0,0,5388,5383,1,0,0,0,5388,5386,1,0,0,0,5389,665,1,
0,0,0,5390,5391,5,19,0,0,5391,5392,5,310,0,0,5392,5393,3,994,497,0,5393,
5394,3,664,332,0,5394,667,1,0,0,0,5395,5396,7,8,0,0,5396,5397,5,310,0,0,
5397,5398,3,994,497,0,5398,669,1,0,0,0,5399,5400,5,396,0,0,5400,5407,5,311,
0,0,5401,5402,5,236,0,0,5402,5408,3,958,479,0,5403,5404,5,474,0,0,5404,5408,
3,834,417,0,5405,5406,5,168,0,0,5406,5408,3,994,497,0,5407,5401,1,0,0,0,
5407,5403,1,0,0,0,5407,5405,1,0,0,0,5407,5408,1,0,0,0,5408,5419,1,0,0,0,
5409,5410,5,293,0,0,5410,5411,5,55,0,0,5411,5416,3,754,377,0,5412,5413,5,
3,0,0,5413,5415,3,754,377,0,5414,5412,1,0,0,0,5415,5418,1,0,0,0,5416,5414,
1,0,0,0,5416,5417,1,0,0,0,5417,5420,1,0,0,0,5418,5416,1,0,0,0,5419,5409,
1,0,0,0,5419,5420,1,0,0,0,5420,5422,1,0,0,0,5421,5423,3,758,379,0,5422,5421,
1,0,0,0,5422,5423,1,0,0,0,5423,671,1,0,0,0,5424,5425,5,391,0,0,5425,5430,
3,674,337,0,5426,5427,5,3,0,0,5427,5429,3,674,337,0,5428,5426,1,0,0,0,5429,
5432,1,0,0,0,5430,5428,1,0,0,0,5430,5431,1,0,0,0,5431,673,1,0,0,0,5432,5430,
1,0,0,0,5433,5434,5,64,0,0,5434,5439,5,391,0,0,5435,5439,5,66,0,0,5436,5437,
5,65,0,0,5437,5439,5,391,0,0,5438,5433,1,0,0,0,5438,5435,1,0,0,0,5438,5436,
1,0,0,0,5439,5442,1,0,0,0,5440,5443,3,1008,504,0,5441,5443,5,114,0,0,5442,
5440,1,0,0,0,5442,5441,1,0,0,0,5443,5499,1,0,0,0,5444,5447,5,269,0,0,5445,
5448,3,1008,504,0,5446,5448,5,114,0,0,5447,5445,1,0,0,0,5447,5446,1,0,0,
0,5448,5454,1,0,0,0,5449,5452,5,72,0,0,5450,5453,3,1008,504,0,5451,5453,
5,114,0,0,5452,5450,1,0,0,0,5452,5451,1,0,0,0,5453,5455,1,0,0,0,5454,5449,
1,0,0,0,5454,5455,1,0,0,0,5455,5499,1,0,0,0,5456,5457,5,300,0,0,5457,5464,
5,488,0,0,5458,5465,3,958,479,0,5459,5460,5,300,0,0,5460,5461,5,2,0,0,5461,
5462,3,958,479,0,5462,5463,5,4,0,0,5463,5465,1,0,0,0,5464,5458,1,0,0,0,5464,
5459,1,0,0,0,5465,5499,1,0,0,0,5466,5467,5,300,0,0,5467,5468,5,164,0,0,5468,
5469,3,1014,507,0,5469,5476,5,488,0,0,5470,5477,3,958,479,0,5471,5472,5,
300,0,0,5472,5473,5,2,0,0,5473,5474,3,958,479,0,5474,5475,5,4,0,0,5475,5477,
1,0,0,0,5476,5470,1,0,0,0,5476,5471,1,0,0,0,5477,5499,1,0,0,0,5478,5479,
3,856,428,0,5479,5480,5,488,0,0,5480,5481,3,834,417,0,5481,5499,1,0,0,0,
5482,5484,3,950,475,0,5483,5482,1,0,0,0,5483,5484,1,0,0,0,5484,5485,1,0,
0,0,5485,5486,3,1000,500,0,5486,5487,5,488,0,0,5487,5488,3,684,342,0,5488,
5499,1,0,0,0,5489,5490,3,858,429,0,5490,5491,5,488,0,0,5491,5492,3,684,342,
0,5492,5499,1,0,0,0,5493,5495,3,950,475,0,5494,5493,1,0,0,0,5494,5495,1,
0,0,0,5495,5496,1,0,0,0,5496,5497,5,434,0,0,5497,5499,3,676,338,0,5498,5438,
1,0,0,0,5498,5444,1,0,0,0,5498,5456,1,0,0,0,5498,5466,1,0,0,0,5498,5478,
1,0,0,0,5498,5483,1,0,0,0,5498,5489,1,0,0,0,5498,5494,1,0,0,0,5499,675,1,
0,0,0,5500,5511,3,678,339,0,5501,5511,3,680,340,0,5502,5503,3,678,339,0,
5503,5504,5,3,0,0,5504,5505,3,680,340,0,5505,5511,1,0,0,0,5506,5507,3,680,
340,0,5507,5508,5,3,0,0,5508,5509,3,678,339,0,5509,5511,1,0,0,0,5510,5500,
1,0,0,0,5510,5501,1,0,0,0,5510,5502,1,0,0,0,5510,5506,1,0,0,0,5511,677,1,
0,0,0,5512,5513,5,340,0,0,5513,5517,5,286,0,0,5514,5515,5,340,0,0,5515,5517,
5,478,0,0,5516,5512,1,0,0,0,5516,5514,1,0,0,0,5517,679,1,0,0,0,5518,5519,
5,219,0,0,5519,5520,5,235,0,0,5520,5521,3,682,341,0,5521,681,1,0,0,0,5522,
5523,5,340,0,0,5523,5530,5,445,0,0,5524,5525,5,340,0,0,5525,5530,5,78,0,
0,5526,5527,5,350,0,0,5527,5530,5,340,0,0,5528,5530,5,389,0,0,5529,5522,
1,0,0,0,5529,5524,1,0,0,0,5529,5526,1,0,0,0,5529,5528,1,0,0,0,5530,683,1,
0,0,0,5531,5536,5,114,0,0,5532,5536,5,285,0,0,5533,5536,5,18,0,0,5534,5536,
3,834,417,0,5535,5531,1,0,0,0,5535,5532,1,0,0,0,5535,5533,1,0,0,0,5535,5534,
1,0,0,0,5536,685,1,0,0,0,5537,5538,5,391,0,0,5538,5541,5,328,0,0,5539,5540,
5,164,0,0,5540,5542,3,958,479,0,5541,5539,1,0,0,0,5541,5542,1,0,0,0,5542,
5543,1,0,0,0,5543,5544,3,942,471,0,5544,687,1,0,0,0,5545,5550,3,1008,504,
0,5546,5547,5,3,0,0,5547,5549,3,1008,504,0,5548,5546,1,0,0,0,5549,5552,1,
0,0,0,5550,5548,1,0,0,0,5550,5551,1,0,0,0,5551,689,1,0,0,0,5552,5550,1,0,
0,0,5553,5554,5,14,0,0,5554,5555,5,143,0,0,5555,5556,5,285,0,0,5556,5557,
7,28,0,0,5557,5558,3,958,479,0,5558,691,1,0,0,0,5559,5560,5,480,0,0,5560,
5561,5,419,0,0,5561,5566,3,694,347,0,5562,5563,5,3,0,0,5563,5565,3,694,347,
0,5564,5562,1,0,0,0,5565,5568,1,0,0,0,5566,5564,1,0,0,0,5566,5567,1,0,0,
0,5567,5572,1,0,0,0,5568,5566,1,0,0,0,5569,5570,5,481,0,0,5570,5572,5,419,
0,0,5571,5559,1,0,0,0,5571,5569,1,0,0,0,5572,693,1,0,0,0,5573,5578,3,1000,
500,0,5574,5576,5,27,0,0,5575,5574,1,0,0,0,5575,5576,1,0,0,0,5576,5577,1,
0,0,0,5577,5579,3,1000,500,0,5578,5575,1,0,0,0,5578,5579,1,0,0,0,5579,5580,
1,0,0,0,5580,5581,3,696,348,0,5581,695,1,0,0,0,5582,5584,5,340,0,0,5583,
5585,5,240,0,0,5584,5583,1,0,0,0,5584,5585,1,0,0,0,5585,5591,1,0,0,0,5586,
5588,5,482,0,0,5587,5586,1,0,0,0,5587,5588,1,0,0,0,5588,5589,1,0,0,0,5589,
5591,5,478,0,0,5590,5582,1,0,0,0,5590,5587,1,0,0,0,5591,697,1,0,0,0,5592,
5593,5,19,0,0,5593,5594,5,307,0,0,5594,5595,5,15,0,0,5595,5596,5,13,0,0,
5596,5597,3,736,368,0,5597,699,1,0,0,0,5598,5599,5,441,0,0,5599,5600,5,307,
0,0,5600,5601,5,15,0,0,5601,701,1,0,0,0,5602,5603,5,19,0,0,5603,5604,5,307,
0,0,5604,5605,5,15,0,0,5605,5606,5,129,0,0,5606,5607,3,958,479,0,5607,703,
1,0,0,0,5608,5609,5,396,0,0,5609,5610,5,307,0,0,5610,5611,5,15,0,0,5611,
705,1,0,0,0,5612,5613,5,88,0,0,5613,5617,5,469,0,0,5614,5615,5,193,0,0,5615,
5616,5,276,0,0,5616,5618,5,144,0,0,5617,5614,1,0,0,0,5617,5618,1,0,0,0,5618,
5619,1,0,0,0,5619,5621,3,1008,504,0,5620,5622,3,952,476,0,5621,5620,1,0,
0,0,5621,5622,1,0,0,0,5622,5624,1,0,0,0,5623,5625,3,936,468,0,5624,5623,
1,0,0,0,5624,5625,1,0,0,0,5625,707,1,0,0,0,5626,5627,5,129,0,0,5627,5630,
5,469,0,0,5628,5629,5,193,0,0,5629,5631,5,144,0,0,5630,5628,1,0,0,0,5630,
5631,1,0,0,0,5631,5632,1,0,0,0,5632,5633,3,1008,504,0,5633,709,1,0,0,0,5634,
5635,5,412,0,0,5635,5638,5,469,0,0,5636,5637,5,193,0,0,5637,5639,5,144,0,
0,5638,5636,1,0,0,0,5638,5639,1,0,0,0,5639,5640,1,0,0,0,5640,5641,3,1000,
500,0,5641,711,1,0,0,0,5642,5643,5,359,0,0,5643,5646,5,469,0,0,5644,5645,
5,193,0,0,5645,5647,5,144,0,0,5646,5644,1,0,0,0,5646,5647,1,0,0,0,5647,5648,
1,0,0,0,5648,5649,3,1000,500,0,5649,713,1,0,0,0,5650,5652,5,391,0,0,5651,
5653,5,390,0,0,5652,5651,1,0,0,0,5652,5653,1,0,0,0,5653,5654,1,0,0,0,5654,
5656,5,469,0,0,5655,5657,5,488,0,0,5656,5655,1,0,0,0,5656,5657,1,0,0,0,5657,
5658,1,0,0,0,5658,5659,3,1008,504,0,5659,715,1,0,0,0,5660,5661,5,396,0,0,
5661,5664,5,470,0,0,5662,5663,5,236,0,0,5663,5665,3,958,479,0,5664,5662,
1,0,0,0,5664,5665,1,0,0,0,5665,717,1,0,0,0,5666,5667,5,396,0,0,5667,5668,
5,71,0,0,5668,5669,5,168,0,0,5669,5670,5,469,0,0,5670,5671,3,1000,500,0,
5671,719,1,0,0,0,5672,5673,5,396,0,0,5673,5674,5,274,0,0,5674,5675,5,168,
0,0,5675,5678,5,470,0,0,5676,5677,5,236,0,0,5677,5679,3,958,479,0,5678,5676,
1,0,0,0,5678,5679,1,0,0,0,5679,5686,1,0,0,0,5680,5681,5,396,0,0,5681,5682,
5,274,0,0,5682,5683,5,168,0,0,5683,5684,5,469,0,0,5684,5686,3,1000,500,0,
5685,5672,1,0,0,0,5685,5680,1,0,0,0,5686,721,1,0,0,0,5687,5688,5,19,0,0,
5688,5689,5,469,0,0,5689,5690,3,1008,504,0,5690,5691,3,274,137,0,5691,723,
1,0,0,0,5692,5693,5,402,0,0,5693,5697,5,434,0,0,5694,5695,5,476,0,0,5695,
5696,5,84,0,0,5696,5698,5,398,0,0,5697,5694,1,0,0,0,5697,5698,1,0,0,0,5698,
5704,1,0,0,0,5699,5701,5,40,0,0,5700,5702,5,477,0,0,5701,5700,1,0,0,0,5701,
5702,1,0,0,0,5702,5704,1,0,0,0,5703,5692,1,0,0,0,5703,5699,1,0,0,0,5704,
725,1,0,0,0,5705,5707,5,77,0,0,5706,5708,5,477,0,0,5707,5706,1,0,0,0,5707,
5708,1,0,0,0,5708,5714,1,0,0,0,5709,5711,5,21,0,0,5710,5712,5,272,0,0,5711,
5710,1,0,0,0,5711,5712,1,0,0,0,5712,5713,1,0,0,0,5713,5715,5,63,0,0,5714,
5709,1,0,0,0,5714,5715,1,0,0,0,5715,5720,1,0,0,0,5716,5718,5,272,0,0,5717,
5716,1,0,0,0,5717,5718,1,0,0,0,5718,5719,1,0,0,0,5719,5721,5,346,0,0,5720,
5717,1,0,0,0,5720,5721,1,0,0,0,5721,727,1,0,0,0,5722,5724,5,370,0,0,5723,
5725,5,477,0,0,5724,5723,1,0,0,0,5724,5725,1,0,0,0,5725,5731,1,0,0,0,5726,
5728,5,21,0,0,5727,5729,5,272,0,0,5728,5727,1,0,0,0,5728,5729,1,0,0,0,5729,
5730,1,0,0,0,5730,5732,5,63,0,0,5731,5726,1,0,0,0,5731,5732,1,0,0,0,5732,
5737,1,0,0,0,5733,5735,5,272,0,0,5734,5733,1,0,0,0,5734,5735,1,0,0,0,5735,
5736,1,0,0,0,5736,5738,5,346,0,0,5737,5734,1,0,0,0,5737,5738,1,0,0,0,5738,
729,1,0,0,0,5739,5740,5,435,0,0,5740,5741,3,732,366,0,5741,5742,3,734,367,
0,5742,731,1,0,0,0,5743,5744,3,1000,500,0,5744,733,1,0,0,0,5745,5747,9,0,
0,0,5746,5745,1,0,0,0,5747,5748,1,0,0,0,5748,5746,1,0,0,0,5748,5749,1,0,
0,0,5749,735,1,0,0,0,5750,5753,3,886,443,0,5751,5753,3,888,444,0,5752,5750,
1,0,0,0,5752,5751,1,0,0,0,5752,5753,1,0,0,0,5753,5754,1,0,0,0,5754,5756,
3,738,369,0,5755,5757,3,954,477,0,5756,5755,1,0,0,0,5756,5757,1,0,0,0,5757,
737,1,0,0,0,5758,5760,3,740,370,0,5759,5758,1,0,0,0,5759,5760,1,0,0,0,5760,
5761,1,0,0,0,5761,5762,3,742,371,0,5762,739,1,0,0,0,5763,5764,5,476,0,0,
5764,5769,3,768,384,0,5765,5766,5,3,0,0,5766,5768,3,768,384,0,5767,5765,
1,0,0,0,5768,5771,1,0,0,0,5769,5767,1,0,0,0,5769,5770,1,0,0,0,5770,741,1,
0,0,0,5771,5769,1,0,0,0,5772,5783,3,748,374,0,5773,5774,5,293,0,0,5774,5775,
5,55,0,0,5775,5780,3,754,377,0,5776,5777,5,3,0,0,5777,5779,3,754,377,0,5778,
5776,1,0,0,0,5779,5782,1,0,0,0,5780,5778,1,0,0,0,5780,5781,1,0,0,0,5781,
5784,1,0,0,0,5782,5780,1,0,0,0,5783,5773,1,0,0,0,5783,5784,1,0,0,0,5784,
5786,1,0,0,0,5785,5787,3,758,379,0,5786,5785,1,0,0,0,5786,5787,1,0,0,0,5787,
743,1,0,0,0,5788,5790,5,164,0,0,5789,5788,1,0,0,0,5789,5790,1,0,0,0,5790,
5791,1,0,0,0,5791,5792,3,746,373,0,5792,5793,5,41,0,0,5793,5794,3,834,417,
0,5794,5795,5,21,0,0,5795,5796,3,834,417,0,5796,5821,1,0,0,0,5797,5799,5,
164,0,0,5798,5797,1,0,0,0,5798,5799,1,0,0,0,5799,5800,1,0,0,0,5800,5801,
3,746,373,0,5801,5802,5,168,0,0,5802,5803,3,834,417,0,5803,5804,5,436,0,
0,5804,5805,3,834,417,0,5805,5821,1,0,0,0,5806,5808,5,164,0,0,5807,5806,
1,0,0,0,5807,5808,1,0,0,0,5808,5809,1,0,0,0,5809,5810,3,746,373,0,5810,5811,
5,18,0,0,5811,5821,1,0,0,0,5812,5814,5,164,0,0,5813,5812,1,0,0,0,5813,5814,
1,0,0,0,5814,5815,1,0,0,0,5815,5816,3,746,373,0,5816,5817,5,27,0,0,5817,
5818,5,282,0,0,5818,5819,3,834,417,0,5819,5821,1,0,0,0,5820,5789,1,0,0,0,
5820,5798,1,0,0,0,5820,5807,1,0,0,0,5820,5813,1,0,0,0,5821,745,1,0,0,0,5822,
5823,7,29,0,0,5823,747,1,0,0,0,5824,5825,6,374,-1,0,5825,5828,3,760,380,
0,5826,5828,3,750,375,0,5827,5824,1,0,0,0,5827,5826,1,0,0,0,5828,5843,1,
0,0,0,5829,5830,10,2,0,0,5830,5832,5,212,0,0,5831,5833,3,770,385,0,5832,
5831,1,0,0,0,5832,5833,1,0,0,0,5833,5834,1,0,0,0,5834,5842,3,748,374,3,5835,
5836,10,1,0,0,5836,5838,7,30,0,0,5837,5839,3,770,385,0,5838,5837,1,0,0,0,
5838,5839,1,0,0,0,5839,5840,1,0,0,0,5840,5842,3,748,374,2,5841,5829,1,0,
0,0,5841,5835,1,0,0,0,5842,5845,1,0,0,0,5843,5841,1,0,0,0,5843,5844,1,0,
0,0,5844,749,1,0,0,0,5845,5843,1,0,0,0,5846,5847,5,2,0,0,5847,5848,3,738,
369,0,5848,5849,5,4,0,0,5849,751,1,0,0,0,5850,5851,5,2,0,0,5851,5852,3,836,
418,0,5852,5853,5,4,0,0,5853,753,1,0,0,0,5854,5856,3,834,417,0,5855,5857,
7,31,0,0,5856,5855,1,0,0,0,5856,5857,1,0,0,0,5857,5860,1,0,0,0,5858,5859,
5,278,0,0,5859,5861,7,32,0,0,5860,5858,1,0,0,0,5860,5861,1,0,0,0,5861,755,
1,0,0,0,5862,5866,5,514,0,0,5863,5866,5,297,0,0,5864,5866,3,856,428,0,5865,
5862,1,0,0,0,5865,5863,1,0,0,0,5865,5864,1,0,0,0,5866,757,1,0,0,0,5867,5868,
5,237,0,0,5868,5871,3,756,378,0,5869,5870,5,284,0,0,5870,5872,3,756,378,
0,5871,5869,1,0,0,0,5871,5872,1,0,0,0,5872,5879,1,0,0,0,5873,5874,5,237,
0,0,5874,5875,3,756,378,0,5875,5876,5,3,0,0,5876,5877,3,756,378,0,5877,5879,
1,0,0,0,5878,5867,1,0,0,0,5878,5873,1,0,0,0,5879,759,1,0,0,0,5880,5882,5,
386,0,0,5881,5883,3,770,385,0,5882,5881,1,0,0,0,5882,5883,1,0,0,0,5883,5884,
1,0,0,0,5884,5889,3,772,386,0,5885,5886,5,3,0,0,5886,5888,3,772,386,0,5887,
5885,1,0,0,0,5888,5891,1,0,0,0,5889,5887,1,0,0,0,5889,5890,1,0,0,0,5890,
5892,1,0,0,0,5891,5889,1,0,0,0,5892,5895,3,762,381,0,5893,5894,5,474,0,0,
5894,5896,3,834,417,0,5895,5893,1,0,0,0,5895,5896,1,0,0,0,5896,5900,1,0,
0,0,5897,5898,5,177,0,0,5898,5899,5,55,0,0,5899,5901,3,764,382,0,5900,5897,
1,0,0,0,5900,5901,1,0,0,0,5901,5904,1,0,0,0,5902,5903,5,183,0,0,5903,5905,
3,834,417,0,5904,5902,1,0,0,0,5904,5905,1,0,0,0,5905,5911,1,0,0,0,5906,5907,
5,331,0,0,5907,5908,3,772,386,0,5908,5909,3,962,481,0,5909,5910,5,514,0,
0,5910,5912,1,0,0,0,5911,5906,1,0,0,0,5911,5912,1,0,0,0,5912,761,1,0,0,0,
5913,5914,5,168,0,0,5914,5916,3,774,387,0,5915,5917,3,780,390,0,5916,5915,
1,0,0,0,5916,5917,1,0,0,0,5917,5919,1,0,0,0,5918,5913,1,0,0,0,5918,5919,
1,0,0,0,5919,5923,1,0,0,0,5920,5921,5,168,0,0,5921,5923,5,130,0,0,5922,5918,
1,0,0,0,5922,5920,1,0,0,0,5923,763,1,0,0,0,5924,5925,5,371,0,0,5925,5927,
5,2,0,0,5926,5928,3,836,418,0,5927,5926,1,0,0,0,5927,5928,1,0,0,0,5928,5929,
1,0,0,0,5929,5951,5,4,0,0,5930,5931,5,90,0,0,5931,5933,5,2,0,0,5932,5934,
3,836,418,0,5933,5932,1,0,0,0,5933,5934,1,0,0,0,5934,5935,1,0,0,0,5935,5951,
5,4,0,0,5936,5937,5,179,0,0,5937,5938,5,392,0,0,5938,5939,5,2,0,0,5939,5944,
3,766,383,0,5940,5941,5,3,0,0,5941,5943,3,766,383,0,5942,5940,1,0,0,0,5943,
5946,1,0,0,0,5944,5942,1,0,0,0,5944,5945,1,0,0,0,5945,5947,1,0,0,0,5946,
5944,1,0,0,0,5947,5948,5,4,0,0,5948,5951,1,0,0,0,5949,5951,3,836,418,0,5950,
5924,1,0,0,0,5950,5930,1,0,0,0,5950,5936,1,0,0,0,5950,5949,1,0,0,0,5951,
765,1,0,0,0,5952,5954,5,2,0,0,5953,5955,3,834,417,0,5954,5953,1,0,0,0,5954,
5955,1,0,0,0,5955,5960,1,0,0,0,5956,5957,5,3,0,0,5957,5959,3,834,417,0,5958,
5956,1,0,0,0,5959,5962,1,0,0,0,5960,5958,1,0,0,0,5960,5961,1,0,0,0,5961,
5963,1,0,0,0,5962,5960,1,0,0,0,5963,5964,5,4,0,0,5964,767,1,0,0,0,5965,5967,
3,1000,500,0,5966,5968,3,806,403,0,5967,5966,1,0,0,0,5967,5968,1,0,0,0,5968,
5969,1,0,0,0,5969,5970,5,27,0,0,5970,5971,5,2,0,0,5971,5972,3,738,369,0,
5972,5973,5,4,0,0,5973,769,1,0,0,0,5974,5975,7,33,0,0,5975,771,1,0,0,0,5976,
5984,3,834,417,0,5977,5979,5,27,0,0,5978,5977,1,0,0,0,5978,5979,1,0,0,0,
5979,5982,1,0,0,0,5980,5983,3,1000,500,0,5981,5983,3,958,479,0,5982,5980,
1,0,0,0,5982,5981,1,0,0,0,5983,5985,1,0,0,0,5984,5978,1,0,0,0,5984,5985,
1,0,0,0,5985,5992,1,0,0,0,5986,5987,3,994,497,0,5987,5988,5,1,0,0,5988,5989,
5,498,0,0,5989,5992,1,0,0,0,5990,5992,5,498,0,0,5991,5976,1,0,0,0,5991,5986,
1,0,0,0,5991,5990,1,0,0,0,5992,773,1,0,0,0,5993,6001,3,776,388,0,5994,5996,
5,3,0,0,5995,5997,5,231,0,0,5996,5995,1,0,0,0,5996,5997,1,0,0,0,5997,5998,
1,0,0,0,5998,6000,3,776,388,0,5999,5994,1,0,0,0,6000,6003,1,0,0,0,6001,5999,
1,0,0,0,6001,6002,1,0,0,0,6002,775,1,0,0,0,6003,6001,1,0,0,0,6004,6008,3,
778,389,0,6005,6007,3,794,397,0,6006,6005,1,0,0,0,6007,6010,1,0,0,0,6008,
6006,1,0,0,0,6008,6009,1,0,0,0,6009,6022,1,0,0,0,6010,6008,1,0,0,0,6011,
6012,5,2,0,0,6012,6016,3,778,389,0,6013,6015,3,794,397,0,6014,6013,1,0,0,
0,6015,6018,1,0,0,0,6016,6014,1,0,0,0,6016,6017,1,0,0,0,6017,6019,1,0,0,
0,6018,6016,1,0,0,0,6019,6020,5,4,0,0,6020,6022,1,0,0,0,6021,6004,1,0,0,
0,6021,6011,1,0,0,0,6022,777,1,0,0,0,6023,6025,3,994,497,0,6024,6026,3,744,
372,0,6025,6024,1,0,0,0,6025,6026,1,0,0,0,6026,6028,1,0,0,0,6027,6029,3,
808,404,0,6028,6027,1,0,0,0,6028,6029,1,0,0,0,6029,6031,1,0,0,0,6030,6032,
3,812,406,0,6031,6030,1,0,0,0,6031,6032,1,0,0,0,6032,6034,1,0,0,0,6033,6035,
3,822,411,0,6034,6033,1,0,0,0,6034,6035,1,0,0,0,6035,6037,1,0,0,0,6036,6038,
3,786,393,0,6037,6036,1,0,0,0,6037,6038,1,0,0,0,6038,6043,1,0,0,0,6039,6041,
5,27,0,0,6040,6039,1,0,0,0,6040,6041,1,0,0,0,6041,6042,1,0,0,0,6042,6044,
3,1000,500,0,6043,6040,1,0,0,0,6043,6044,1,0,0,0,6044,6046,1,0,0,0,6045,
6047,3,800,400,0,6046,6045,1,0,0,0,6046,6047,1,0,0,0,6047,6050,1,0,0,0,6048,
6049,5,484,0,0,6049,6051,3,958,479,0,6050,6048,1,0,0,0,6050,6051,1,0,0,0,
6051,6127,1,0,0,0,6052,6053,5,2,0,0,6053,6054,5,458,0,0,6054,6059,3,752,
376,0,6055,6056,5,3,0,0,6056,6058,3,752,376,0,6057,6055,1,0,0,0,6058,6061,
1,0,0,0,6059,6057,1,0,0,0,6059,6060,1,0,0,0,6060,6062,1,0,0,0,6061,6059,
1,0,0,0,6062,6070,5,4,0,0,6063,6065,5,27,0,0,6064,6063,1,0,0,0,6064,6065,
1,0,0,0,6065,6066,1,0,0,0,6066,6068,3,1000,500,0,6067,6069,3,806,403,0,6068,
6067,1,0,0,0,6068,6069,1,0,0,0,6069,6071,1,0,0,0,6070,6064,1,0,0,0,6070,
6071,1,0,0,0,6071,6127,1,0,0,0,6072,6080,3,750,375,0,6073,6075,5,27,0,0,
6074,6073,1,0,0,0,6074,6075,1,0,0,0,6075,6076,1,0,0,0,6076,6078,3,1000,500,
0,6077,6079,3,806,403,0,6078,6077,1,0,0,0,6078,6079,1,0,0,0,6079,6081,1,
0,0,0,6080,6074,1,0,0,0,6080,6081,1,0,0,0,6081,6127,1,0,0,0,6082,6083,3,
994,497,0,6083,6084,5,2,0,0,6084,6085,3,836,418,0,6085,6093,5,4,0,0,6086,
6088,5,27,0,0,6087,6086,1,0,0,0,6087,6088,1,0,0,0,6088,6089,1,0,0,0,6089,
6091,3,1000,500,0,6090,6092,3,806,403,0,6091,6090,1,0,0,0,6091,6092,1,0,
0,0,6092,6094,1,0,0,0,6093,6087,1,0,0,0,6093,6094,1,0,0,0,6094,6127,1,0,
0,0,6095,6096,5,418,0,0,6096,6097,5,2,0,0,6097,6098,3,994,497,0,6098,6099,
5,2,0,0,6099,6100,3,788,394,0,6100,6101,5,4,0,0,6101,6109,5,4,0,0,6102,6104,
5,27,0,0,6103,6102,1,0,0,0,6103,6104,1,0,0,0,6104,6105,1,0,0,0,6105,6107,
3,1000,500,0,6106,6108,3,806,403,0,6107,6106,1,0,0,0,6107,6108,1,0,0,0,6108,
6110,1,0,0,0,6109,6103,1,0,0,0,6109,6110,1,0,0,0,6110,6127,1,0,0,0,6111,
6112,5,155,0,0,6112,6120,3,940,470,0,6113,6115,5,27,0,0,6114,6113,1,0,0,
0,6114,6115,1,0,0,0,6115,6116,1,0,0,0,6116,6118,3,1000,500,0,6117,6119,3,
806,403,0,6118,6117,1,0,0,0,6118,6119,1,0,0,0,6119,6121,1,0,0,0,6120,6114,
1,0,0,0,6120,6121,1,0,0,0,6121,6127,1,0,0,0,6122,6123,5,2,0,0,6123,6124,
3,774,387,0,6124,6125,5,4,0,0,6125,6127,1,0,0,0,6126,6023,1,0,0,0,6126,6052,
1,0,0,0,6126,6072,1,0,0,0,6126,6082,1,0,0,0,6126,6095,1,0,0,0,6126,6111,
1,0,0,0,6126,6122,1,0,0,0,6127,779,1,0,0,0,6128,6129,5,312,0,0,6129,6130,
5,2,0,0,6130,6135,3,782,391,0,6131,6132,5,3,0,0,6132,6134,3,782,391,0,6133,
6131,1,0,0,0,6134,6137,1,0,0,0,6135,6133,1,0,0,0,6135,6136,1,0,0,0,6136,
6138,1,0,0,0,6137,6135,1,0,0,0,6138,6141,5,164,0,0,6139,6142,3,1000,500,
0,6140,6142,3,1006,503,0,6141,6139,1,0,0,0,6141,6140,1,0,0,0,6142,6143,1,
0,0,0,6143,6144,5,198,0,0,6144,6145,5,2,0,0,6145,6150,3,784,392,0,6146,6147,
5,3,0,0,6147,6149,3,784,392,0,6148,6146,1,0,0,0,6149,6152,1,0,0,0,6150,6148,
1,0,0,0,6150,6151,1,0,0,0,6151,6153,1,0,0,0,6152,6150,1,0,0,0,6153,6154,
5,4,0,0,6154,6155,5,4,0,0,6155,781,1,0,0,0,6156,6164,3,852,426,0,6157,6159,
5,27,0,0,6158,6157,1,0,0,0,6158,6159,1,0,0,0,6159,6162,1,0,0,0,6160,6163,
3,1000,500,0,6161,6163,3,958,479,0,6162,6160,1,0,0,0,6162,6161,1,0,0,0,6163,
6165,1,0,0,0,6164,6158,1,0,0,0,6164,6165,1,0,0,0,6165,783,1,0,0,0,6166,6169,
3,850,425,0,6167,6169,3,910,455,0,6168,6166,1,0,0,0,6168,6167,1,0,0,0,6169,
6177,1,0,0,0,6170,6172,5,27,0,0,6171,6170,1,0,0,0,6171,6172,1,0,0,0,6172,
6175,1,0,0,0,6173,6176,3,1000,500,0,6174,6176,3,958,479,0,6175,6173,1,0,
0,0,6175,6174,1,0,0,0,6176,6178,1,0,0,0,6177,6171,1,0,0,0,6177,6178,1,0,
0,0,6178,785,1,0,0,0,6179,6181,5,379,0,0,6180,6182,3,940,470,0,6181,6180,
1,0,0,0,6181,6182,1,0,0,0,6182,787,1,0,0,0,6183,6186,3,836,418,0,6184,6186,
3,790,395,0,6185,6183,1,0,0,0,6185,6184,1,0,0,0,6186,789,1,0,0,0,6187,6192,
3,792,396,0,6188,6189,5,3,0,0,6189,6191,3,792,396,0,6190,6188,1,0,0,0,6191,
6194,1,0,0,0,6192,6190,1,0,0,0,6192,6193,1,0,0,0,6193,791,1,0,0,0,6194,6192,
1,0,0,0,6195,6196,3,1000,500,0,6196,6197,5,5,0,0,6197,6198,3,834,417,0,6198,
793,1,0,0,0,6199,6201,3,796,398,0,6200,6202,3,800,400,0,6201,6200,1,0,0,
0,6201,6202,1,0,0,0,6202,6204,1,0,0,0,6203,6205,5,231,0,0,6204,6203,1,0,
0,0,6204,6205,1,0,0,0,6205,6206,1,0,0,0,6206,6208,3,778,389,0,6207,6209,
3,804,402,0,6208,6207,1,0,0,0,6208,6209,1,0,0,0,6209,6221,1,0,0,0,6210,6212,
3,798,399,0,6211,6213,3,800,400,0,6212,6211,1,0,0,0,6212,6213,1,0,0,0,6213,
6215,1,0,0,0,6214,6216,5,231,0,0,6215,6214,1,0,0,0,6215,6216,1,0,0,0,6216,
6217,1,0,0,0,6217,6218,3,778,389,0,6218,6219,3,804,402,0,6219,6221,1,0,0,
0,6220,6199,1,0,0,0,6220,6210,1,0,0,0,6221,795,1,0,0,0,6222,6229,5,221,0,
0,6223,6224,5,204,0,0,6224,6229,5,221,0,0,6225,6229,5,89,0,0,6226,6227,5,
89,0,0,6227,6229,5,221,0,0,6228,6222,1,0,0,0,6228,6223,1,0,0,0,6228,6225,
1,0,0,0,6228,6226,1,0,0,0,6229,797,1,0,0,0,6230,6231,5,233,0,0,6231,6258,
5,221,0,0,6232,6233,5,366,0,0,6233,6258,5,221,0,0,6234,6235,5,171,0,0,6235,
6258,5,221,0,0,6236,6237,5,233,0,0,6237,6238,5,294,0,0,6238,6258,5,221,0,
0,6239,6240,5,366,0,0,6240,6241,5,294,0,0,6241,6258,5,221,0,0,6242,6243,
5,171,0,0,6243,6244,5,294,0,0,6244,6258,5,221,0,0,6245,6246,5,233,0,0,6246,
6247,5,387,0,0,6247,6258,5,221,0,0,6248,6249,5,366,0,0,6249,6250,5,387,0,
0,6250,6258,5,221,0,0,6251,6252,5,233,0,0,6252,6253,5,22,0,0,6253,6258,5,
221,0,0,6254,6255,5,366,0,0,6255,6256,5,22,0,0,6256,6258,5,221,0,0,6257,
6230,1,0,0,0,6257,6232,1,0,0,0,6257,6234,1,0,0,0,6257,6236,1,0,0,0,6257,
6239,1,0,0,0,6257,6242,1,0,0,0,6257,6245,1,0,0,0,6257,6248,1,0,0,0,6257,
6251,1,0,0,0,6257,6254,1,0,0,0,6258,799,1,0,0,0,6259,6260,5,6,0,0,6260,6265,
3,1000,500,0,6261,6262,5,3,0,0,6262,6264,3,1000,500,0,6263,6261,1,0,0,0,
6264,6267,1,0,0,0,6265,6263,1,0,0,0,6265,6266,1,0,0,0,6266,6268,1,0,0,0,
6267,6265,1,0,0,0,6268,6269,5,7,0,0,6269,6278,1,0,0,0,6270,6271,5,6,0,0,
6271,6272,3,1000,500,0,6272,6273,5,506,0,0,6273,6274,3,848,424,0,6274,6275,
3,910,455,0,6275,6276,5,7,0,0,6276,6278,1,0,0,0,6277,6259,1,0,0,0,6277,6270,
1,0,0,0,6278,801,1,0,0,0,6279,6280,3,1008,504,0,6280,6281,5,488,0,0,6281,
6282,3,850,425,0,6282,803,1,0,0,0,6283,6284,5,285,0,0,6284,6298,3,834,417,
0,6285,6286,5,456,0,0,6286,6287,5,2,0,0,6287,6292,3,1000,500,0,6288,6289,
5,3,0,0,6289,6291,3,1000,500,0,6290,6288,1,0,0,0,6291,6294,1,0,0,0,6292,
6290,1,0,0,0,6292,6293,1,0,0,0,6293,6295,1,0,0,0,6294,6292,1,0,0,0,6295,
6296,5,4,0,0,6296,6298,1,0,0,0,6297,6283,1,0,0,0,6297,6285,1,0,0,0,6298,
805,1,0,0,0,6299,6300,5,2,0,0,6300,6305,3,1000,500,0,6301,6302,5,3,0,0,6302,
6304,3,1000,500,0,6303,6301,1,0,0,0,6304,6307,1,0,0,0,6305,6303,1,0,0,0,
6305,6306,1,0,0,0,6306,6308,1,0,0,0,6307,6305,1,0,0,0,6308,6309,5,4,0,0,
6309,807,1,0,0,0,6310,6312,5,424,0,0,6311,6310,1,0,0,0,6311,6312,1,0,0,0,
6312,6313,1,0,0,0,6313,6314,7,34,0,0,6314,6315,5,2,0,0,6315,6320,3,1008,
504,0,6316,6317,5,3,0,0,6317,6319,3,1008,504,0,6318,6316,1,0,0,0,6319,6322,
1,0,0,0,6320,6318,1,0,0,0,6320,6321,1,0,0,0,6321,6323,1,0,0,0,6322,6320,
1,0,0,0,6323,6324,5,4,0,0,6324,6332,1,0,0,0,6325,6327,5,424,0,0,6326,6325,
1,0,0,0,6326,6327,1,0,0,0,6327,6328,1,0,0,0,6328,6329,7,34,0,0,6329,6332,
3,1008,504,0,6330,6332,3,810,405,0,6331,6311,1,0,0,0,6331,6326,1,0,0,0,6331,
6330,1,0,0,0,6332,809,1,0,0,0,6333,6334,5,298,0,0,6334,6335,5,2,0,0,6335,
6340,3,924,462,0,6336,6337,5,3,0,0,6337,6339,3,924,462,0,6338,6336,1,0,0,
0,6339,6342,1,0,0,0,6340,6338,1,0,0,0,6340,6341,1,0,0,0,6341,6343,1,0,0,
0,6342,6340,1,0,0,0,6343,6344,5,4,0,0,6344,811,1,0,0,0,6345,6346,5,420,0,
0,6346,6347,5,2,0,0,6347,6352,5,514,0,0,6348,6349,5,3,0,0,6349,6351,5,514,
0,0,6350,6348,1,0,0,0,6351,6354,1,0,0,0,6352,6350,1,0,0,0,6352,6353,1,0,
0,0,6353,6355,1,0,0,0,6354,6352,1,0,0,0,6355,6356,5,4,0,0,6356,813,1,0,0,
0,6357,6358,5,317,0,0,6358,6359,3,1000,500,0,6359,6360,5,168,0,0,6360,6361,
3,816,408,0,6361,815,1,0,0,0,6362,6365,3,6,3,0,6363,6365,5,517,0,0,6364,
6362,1,0,0,0,6364,6363,1,0,0,0,6365,817,1,0,0,0,6366,6367,5,143,0,0,6367,
6379,3,1000,500,0,6368,6369,5,456,0,0,6369,6370,5,513,0,0,6370,6376,3,1008,
504,0,6371,6372,5,3,0,0,6372,6373,5,513,0,0,6373,6375,3,1008,504,0,6374,
6371,1,0,0,0,6375,6378,1,0,0,0,6376,6374,1,0,0,0,6376,6377,1,0,0,0,6377,
6380,1,0,0,0,6378,6376,1,0,0,0,6379,6368,1,0,0,0,6379,6380,1,0,0,0,6380,
819,1,0,0,0,6381,6382,7,35,0,0,6382,6383,5,317,0,0,6383,6384,3,1000,500,
0,6384,821,1,0,0,0,6385,6386,5,353,0,0,6386,6387,5,2,0,0,6387,6392,5,514,
0,0,6388,6389,5,3,0,0,6389,6391,5,514,0,0,6390,6388,1,0,0,0,6391,6394,1,
0,0,0,6392,6390,1,0,0,0,6392,6393,1,0,0,0,6393,6395,1,0,0,0,6394,6392,1,
0,0,0,6395,6396,5,4,0,0,6396,823,1,0,0,0,6397,6398,5,2,0,0,6398,6403,3,826,
413,0,6399,6400,5,3,0,0,6400,6402,3,826,413,0,6401,6399,1,0,0,0,6402,6405,
1,0,0,0,6403,6401,1,0,0,0,6403,6404,1,0,0,0,6404,6406,1,0,0,0,6405,6403,
1,0,0,0,6406,6407,5,4,0,0,6407,825,1,0,0,0,6408,6411,3,834,417,0,6409,6411,
5,114,0,0,6410,6408,1,0,0,0,6410,6409,1,0,0,0,6411,827,1,0,0,0,6412,6417,
3,830,415,0,6413,6414,5,3,0,0,6414,6416,3,830,415,0,6415,6413,1,0,0,0,6416,
6419,1,0,0,0,6417,6415,1,0,0,0,6417,6418,1,0,0,0,6418,829,1,0,0,0,6419,6417,
1,0,0,0,6420,6421,3,834,417,0,6421,6422,5,8,0,0,6422,6423,3,834,417,0,6423,
831,1,0,0,0,6424,6425,3,834,417,0,6425,6426,5,0,0,1,6426,833,1,0,0,0,6427,
6429,6,417,-1,0,6428,6430,5,43,0,0,6429,6428,1,0,0,0,6429,6430,1,0,0,0,6430,
6431,1,0,0,0,6431,6435,3,838,419,0,6432,6433,5,276,0,0,6433,6435,3,834,417,
3,6434,6427,1,0,0,0,6434,6432,1,0,0,0,6435,6444,1,0,0,0,6436,6437,10,2,0,
0,6437,6438,7,36,0,0,6438,6443,3,834,417,3,6439,6440,10,1,0,0,6440,6441,
7,37,0,0,6441,6443,3,834,417,2,6442,6436,1,0,0,0,6442,6439,1,0,0,0,6443,
6446,1,0,0,0,6444,6442,1,0,0,0,6444,6445,1,0,0,0,6445,835,1,0,0,0,6446,6444,
1,0,0,0,6447,6452,3,834,417,0,6448,6449,5,3,0,0,6449,6451,3,834,417,0,6450,
6448,1,0,0,0,6451,6454,1,0,0,0,6452,6450,1,0,0,0,6452,6453,1,0,0,0,6453,
837,1,0,0,0,6454,6452,1,0,0,0,6455,6456,6,419,-1,0,6456,6457,3,840,420,0,
6457,6476,1,0,0,0,6458,6459,10,3,0,0,6459,6461,5,218,0,0,6460,6462,5,276,
0,0,6461,6460,1,0,0,0,6461,6462,1,0,0,0,6462,6463,1,0,0,0,6463,6475,5,277,
0,0,6464,6465,10,2,0,0,6465,6466,3,962,481,0,6466,6467,3,840,420,0,6467,
6475,1,0,0,0,6468,6469,10,1,0,0,6469,6470,3,962,481,0,6470,6471,5,2,0,0,
6471,6472,3,738,369,0,6472,6473,5,4,0,0,6473,6475,1,0,0,0,6474,6458,1,0,
0,0,6474,6464,1,0,0,0,6474,6468,1,0,0,0,6475,6478,1,0,0,0,6476,6474,1,0,
0,0,6476,6477,1,0,0,0,6477,839,1,0,0,0,6478,6476,1,0,0,0,6479,6481,3,846,
423,0,6480,6482,3,844,422,0,6481,6480,1,0,0,0,6481,6482,1,0,0,0,6482,6485,
1,0,0,0,6483,6485,3,842,421,0,6484,6479,1,0,0,0,6484,6483,1,0,0,0,6485,841,
1,0,0,0,6486,6487,5,2,0,0,6487,6490,3,834,417,0,6488,6489,5,3,0,0,6489,6491,
3,834,417,0,6490,6488,1,0,0,0,6491,6492,1,0,0,0,6492,6490,1,0,0,0,6492,6493,
1,0,0,0,6493,6494,1,0,0,0,6494,6496,5,4,0,0,6495,6497,5,276,0,0,6496,6495,
1,0,0,0,6496,6497,1,0,0,0,6497,6498,1,0,0,0,6498,6499,5,198,0,0,6499,6500,
5,2,0,0,6500,6501,3,738,369,0,6501,6502,5,4,0,0,6502,843,1,0,0,0,6503,6505,
5,276,0,0,6504,6503,1,0,0,0,6504,6505,1,0,0,0,6505,6506,1,0,0,0,6506,6507,
5,198,0,0,6507,6508,5,2,0,0,6508,6509,3,738,369,0,6509,6510,5,4,0,0,6510,
6533,1,0,0,0,6511,6513,5,276,0,0,6512,6511,1,0,0,0,6512,6513,1,0,0,0,6513,
6514,1,0,0,0,6514,6515,5,198,0,0,6515,6516,5,2,0,0,6516,6517,3,836,418,0,
6517,6518,5,4,0,0,6518,6533,1,0,0,0,6519,6521,5,276,0,0,6520,6519,1,0,0,
0,6520,6521,1,0,0,0,6521,6522,1,0,0,0,6522,6523,5,41,0,0,6523,6524,3,846,
423,0,6524,6525,5,21,0,0,6525,6526,3,840,420,0,6526,6533,1,0,0,0,6527,6529,
5,276,0,0,6528,6527,1,0,0,0,6528,6529,1,0,0,0,6529,6530,1,0,0,0,6530,6531,
7,38,0,0,6531,6533,3,846,423,0,6532,6504,1,0,0,0,6532,6512,1,0,0,0,6532,
6520,1,0,0,0,6532,6528,1,0,0,0,6533,845,1,0,0,0,6534,6535,6,423,-1,0,6535,
6536,3,848,424,0,6536,6563,1,0,0,0,6537,6538,10,8,0,0,6538,6539,5,507,0,
0,6539,6562,3,846,423,9,6540,6541,10,7,0,0,6541,6542,7,39,0,0,6542,6562,
3,846,423,8,6543,6544,10,6,0,0,6544,6545,7,40,0,0,6545,6562,3,846,423,7,
6546,6547,10,5,0,0,6547,6548,5,505,0,0,6548,6562,3,846,423,6,6549,6550,10,
4,0,0,6550,6551,5,506,0,0,6551,6562,3,846,423,5,6552,6553,10,3,0,0,6553,
6554,5,509,0,0,6554,6562,3,846,423,4,6555,6556,10,2,0,0,6556,6557,5,510,
0,0,6557,6562,3,846,423,3,6558,6559,10,1,0,0,6559,6560,5,511,0,0,6560,6562,
3,846,423,2,6561,6537,1,0,0,0,6561,6540,1,0,0,0,6561,6543,1,0,0,0,6561,6546,
1,0,0,0,6561,6549,1,0,0,0,6561,6552,1,0,0,0,6561,6555,1,0,0,0,6561,6558,
1,0,0,0,6562,6565,1,0,0,0,6563,6561,1,0,0,0,6563,6564,1,0,0,0,6564,847,1,
0,0,0,6565,6563,1,0,0,0,6566,6567,6,424,-1,0,6567,6672,3,856,428,0,6568,
6672,3,858,429,0,6569,6570,5,120,0,0,6570,6571,5,2,0,0,6571,6572,3,836,418,
0,6572,6573,5,4,0,0,6573,6672,1,0,0,0,6574,6672,3,852,426,0,6575,6576,5,
9,0,0,6576,6577,5,161,0,0,6577,6578,3,852,426,0,6578,6579,5,10,0,0,6579,
6672,1,0,0,0,6580,6672,3,850,425,0,6581,6672,3,860,430,0,6582,6583,7,41,
0,0,6583,6672,3,848,424,18,6584,6585,5,503,0,0,6585,6672,3,848,424,17,6586,
6587,5,2,0,0,6587,6588,3,834,417,0,6588,6589,5,4,0,0,6589,6672,1,0,0,0,6590,
6591,5,144,0,0,6591,6592,5,2,0,0,6592,6593,3,738,369,0,6593,6594,5,4,0,0,
6594,6672,1,0,0,0,6595,6672,3,750,375,0,6596,6597,5,59,0,0,6597,6598,5,2,
0,0,6598,6599,3,834,417,0,6599,6600,5,27,0,0,6600,6601,3,976,488,0,6601,
6602,5,4,0,0,6602,6672,1,0,0,0,6603,6604,5,85,0,0,6604,6605,5,2,0,0,6605,
6606,3,834,417,0,6606,6607,5,3,0,0,6607,6608,3,976,488,0,6608,6609,5,4,0,
0,6609,6672,1,0,0,0,6610,6611,5,58,0,0,6611,6613,3,834,417,0,6612,6614,3,
870,435,0,6613,6612,1,0,0,0,6614,6615,1,0,0,0,6615,6613,1,0,0,0,6615,6616,
1,0,0,0,6616,6619,1,0,0,0,6617,6618,5,133,0,0,6618,6620,3,834,417,0,6619,
6617,1,0,0,0,6619,6620,1,0,0,0,6620,6621,1,0,0,0,6621,6622,5,136,0,0,6622,
6672,1,0,0,0,6623,6625,5,58,0,0,6624,6626,3,870,435,0,6625,6624,1,0,0,0,
6626,6627,1,0,0,0,6627,6625,1,0,0,0,6627,6628,1,0,0,0,6628,6631,1,0,0,0,
6629,6630,5,133,0,0,6630,6632,3,834,417,0,6631,6629,1,0,0,0,6631,6632,1,
0,0,0,6632,6633,1,0,0,0,6633,6634,5,136,0,0,6634,6672,1,0,0,0,6635,6637,
3,978,489,0,6636,6635,1,0,0,0,6636,6637,1,0,0,0,6637,6638,1,0,0,0,6638,6640,
5,6,0,0,6639,6641,3,836,418,0,6640,6639,1,0,0,0,6640,6641,1,0,0,0,6641,6642,
1,0,0,0,6642,6672,5,7,0,0,6643,6644,3,980,490,0,6644,6646,5,9,0,0,6645,6647,
3,828,414,0,6646,6645,1,0,0,0,6646,6647,1,0,0,0,6647,6648,1,0,0,0,6648,6649,
5,10,0,0,6649,6672,1,0,0,0,6650,6651,5,248,0,0,6651,6653,5,9,0,0,6652,6654,
3,828,414,0,6653,6652,1,0,0,0,6653,6654,1,0,0,0,6654,6655,1,0,0,0,6655,6672,
5,10,0,0,6656,6659,3,1000,500,0,6657,6659,3,1006,503,0,6658,6656,1,0,0,0,
6658,6657,1,0,0,0,6659,6660,1,0,0,0,6660,6661,5,512,0,0,6661,6662,3,834,
417,0,6662,6672,1,0,0,0,6663,6664,3,1006,503,0,6664,6665,5,512,0,0,6665,
6667,5,2,0,0,6666,6668,3,836,418,0,6667,6666,1,0,0,0,6667,6668,1,0,0,0,6668,
6669,1,0,0,0,6669,6670,5,4,0,0,6670,6672,1,0,0,0,6671,6566,1,0,0,0,6671,
6568,1,0,0,0,6671,6569,1,0,0,0,6671,6574,1,0,0,0,6671,6575,1,0,0,0,6671,
6580,1,0,0,0,6671,6581,1,0,0,0,6671,6582,1,0,0,0,6671,6584,1,0,0,0,6671,
6586,1,0,0,0,6671,6590,1,0,0,0,6671,6595,1,0,0,0,6671,6596,1,0,0,0,6671,
6603,1,0,0,0,6671,6610,1,0,0,0,6671,6623,1,0,0,0,6671,6636,1,0,0,0,6671,
6643,1,0,0,0,6671,6650,1,0,0,0,6671,6658,1,0,0,0,6671,6663,1,0,0,0,6672,
6714,1,0,0,0,6673,6674,10,19,0,0,6674,6675,5,532,0,0,6675,6713,3,848,424,
20,6676,6678,10,1,0,0,6677,6679,5,276,0,0,6678,6677,1,0,0,0,6678,6679,1,
0,0,0,6679,6680,1,0,0,0,6680,6681,5,252,0,0,6681,6713,3,848,424,2,6682,6683,
10,23,0,0,6683,6686,5,72,0,0,6684,6687,3,1000,500,0,6685,6687,3,958,479,
0,6686,6684,1,0,0,0,6686,6685,1,0,0,0,6687,6713,1,0,0,0,6688,6692,10,20,
0,0,6689,6693,5,524,0,0,6690,6691,5,1,0,0,6691,6693,3,1000,500,0,6692,6689,
1,0,0,0,6692,6690,1,0,0,0,6693,6713,1,0,0,0,6694,6695,10,6,0,0,6695,6696,
5,6,0,0,6696,6697,3,846,423,0,6697,6698,5,7,0,0,6698,6713,1,0,0,0,6699,6700,
10,5,0,0,6700,6702,5,6,0,0,6701,6703,5,514,0,0,6702,6701,1,0,0,0,6702,6703,
1,0,0,0,6703,6704,1,0,0,0,6704,6706,5,8,0,0,6705,6707,5,514,0,0,6706,6705,
1,0,0,0,6706,6707,1,0,0,0,6707,6708,1,0,0,0,6708,6713,5,7,0,0,6709,6710,
10,4,0,0,6710,6711,5,512,0,0,6711,6713,3,958,479,0,6712,6673,1,0,0,0,6712,
6676,1,0,0,0,6712,6682,1,0,0,0,6712,6688,1,0,0,0,6712,6694,1,0,0,0,6712,
6699,1,0,0,0,6712,6709,1,0,0,0,6713,6716,1,0,0,0,6714,6712,1,0,0,0,6714,
6715,1,0,0,0,6715,849,1,0,0,0,6716,6714,1,0,0,0,6717,6728,5,277,0,0,6718,
6728,3,964,482,0,6719,6728,3,1020,510,0,6720,6721,7,42,0,0,6721,6728,3,958,
479,0,6722,6728,3,958,479,0,6723,6728,3,966,483,0,6724,6728,3,974,487,0,
6725,6728,3,960,480,0,6726,6728,5,297,0,0,6727,6717,1,0,0,0,6727,6718,1,
0,0,0,6727,6719,1,0,0,0,6727,6720,1,0,0,0,6727,6722,1,0,0,0,6727,6723,1,
0,0,0,6727,6724,1,0,0,0,6727,6725,1,0,0,0,6727,6726,1,0,0,0,6728,851,1,0,
0,0,6729,6730,5,148,0,0,6730,6731,5,2,0,0,6731,6732,3,1000,500,0,6732,6733,
5,168,0,0,6733,6734,3,846,423,0,6734,6735,5,4,0,0,6735,6802,1,0,0,0,6736,
6737,5,179,0,0,6737,6746,5,2,0,0,6738,6743,3,834,417,0,6739,6740,5,3,0,0,
6740,6742,3,834,417,0,6741,6739,1,0,0,0,6742,6745,1,0,0,0,6743,6741,1,0,
0,0,6743,6744,1,0,0,0,6744,6747,1,0,0,0,6745,6743,1,0,0,0,6746,6738,1,0,
0,0,6746,6747,1,0,0,0,6747,6748,1,0,0,0,6748,6802,5,4,0,0,6749,6750,5,180,
0,0,6750,6759,5,2,0,0,6751,6756,3,834,417,0,6752,6753,5,3,0,0,6753,6755,
3,834,417,0,6754,6752,1,0,0,0,6755,6758,1,0,0,0,6756,6754,1,0,0,0,6756,6757,
1,0,0,0,6757,6760,1,0,0,0,6758,6756,1,0,0,0,6759,6751,1,0,0,0,6759,6760,
1,0,0,0,6760,6761,1,0,0,0,6761,6802,5,4,0,0,6762,6802,3,862,431,0,6763,6802,
3,864,432,0,6764,6802,3,866,433,0,6765,6767,3,854,427,0,6766,6768,3,872,
436,0,6767,6766,1,0,0,0,6767,6768,1,0,0,0,6768,6802,1,0,0,0,6769,6770,3,
868,434,0,6770,6771,3,872,436,0,6771,6802,1,0,0,0,6772,6773,5,435,0,0,6773,
6782,5,2,0,0,6774,6779,3,834,417,0,6775,6776,5,3,0,0,6776,6778,3,834,417,
0,6777,6775,1,0,0,0,6778,6781,1,0,0,0,6779,6777,1,0,0,0,6779,6780,1,0,0,
0,6780,6783,1,0,0,0,6781,6779,1,0,0,0,6782,6774,1,0,0,0,6782,6783,1,0,0,
0,6783,6784,1,0,0,0,6784,6802,5,4,0,0,6785,6786,3,994,497,0,6786,6795,5,
2,0,0,6787,6792,3,834,417,0,6788,6789,5,3,0,0,6789,6791,3,834,417,0,6790,
6788,1,0,0,0,6791,6794,1,0,0,0,6792,6790,1,0,0,0,6792,6793,1,0,0,0,6793,
6796,1,0,0,0,6794,6792,1,0,0,0,6795,6787,1,0,0,0,6795,6796,1,0,0,0,6796,
6797,1,0,0,0,6797,6799,5,4,0,0,6798,6800,3,872,436,0,6799,6798,1,0,0,0,6799,
6800,1,0,0,0,6800,6802,1,0,0,0,6801,6729,1,0,0,0,6801,6736,1,0,0,0,6801,
6749,1,0,0,0,6801,6762,1,0,0,0,6801,6763,1,0,0,0,6801,6764,1,0,0,0,6801,
6765,1,0,0,0,6801,6769,1,0,0,0,6801,6772,1,0,0,0,6801,6785,1,0,0,0,6802,
853,1,0,0,0,6803,6804,5,34,0,0,6804,6806,5,2,0,0,6805,6807,3,770,385,0,6806,
6805,1,0,0,0,6806,6807,1,0,0,0,6807,6808,1,0,0,0,6808,6809,3,834,417,0,6809,
6810,5,4,0,0,6810,6929,1,0,0,0,6811,6812,5,87,0,0,6812,6814,5,2,0,0,6813,
6815,5,498,0,0,6814,6813,1,0,0,0,6814,6815,1,0,0,0,6815,6816,1,0,0,0,6816,
6929,5,4,0,0,6817,6818,5,87,0,0,6818,6823,5,2,0,0,6819,6821,3,770,385,0,
6820,6822,3,800,400,0,6821,6820,1,0,0,0,6821,6822,1,0,0,0,6822,6824,1,0,
0,0,6823,6819,1,0,0,0,6823,6824,1,0,0,0,6824,6833,1,0,0,0,6825,6830,3,834,
417,0,6826,6827,5,3,0,0,6827,6829,3,834,417,0,6828,6826,1,0,0,0,6829,6832,
1,0,0,0,6830,6828,1,0,0,0,6830,6831,1,0,0,0,6831,6834,1,0,0,0,6832,6830,
1,0,0,0,6833,6825,1,0,0,0,6833,6834,1,0,0,0,6834,6835,1,0,0,0,6835,6929,
5,4,0,0,6836,6837,5,254,0,0,6837,6839,5,2,0,0,6838,6840,3,770,385,0,6839,
6838,1,0,0,0,6839,6840,1,0,0,0,6840,6841,1,0,0,0,6841,6842,3,834,417,0,6842,
6843,5,4,0,0,6843,6929,1,0,0,0,6844,6845,5,259,0,0,6845,6847,5,2,0,0,6846,
6848,3,770,385,0,6847,6846,1,0,0,0,6847,6848,1,0,0,0,6848,6849,1,0,0,0,6849,
6850,3,834,417,0,6850,6851,5,4,0,0,6851,6929,1,0,0,0,6852,6853,5,411,0,0,
6853,6855,5,2,0,0,6854,6856,3,770,385,0,6855,6854,1,0,0,0,6855,6856,1,0,
0,0,6856,6857,1,0,0,0,6857,6858,3,834,417,0,6858,6859,5,4,0,0,6859,6929,
1,0,0,0,6860,6861,5,25,0,0,6861,6863,5,2,0,0,6862,6864,3,770,385,0,6863,
6862,1,0,0,0,6863,6864,1,0,0,0,6864,6865,1,0,0,0,6865,6876,3,834,417,0,6866,
6867,5,293,0,0,6867,6868,5,55,0,0,6868,6873,3,754,377,0,6869,6870,5,3,0,
0,6870,6872,3,754,377,0,6871,6869,1,0,0,0,6872,6875,1,0,0,0,6873,6871,1,
0,0,0,6873,6874,1,0,0,0,6874,6877,1,0,0,0,6875,6873,1,0,0,0,6876,6866,1,
0,0,0,6876,6877,1,0,0,0,6877,6878,1,0,0,0,6878,6879,5,4,0,0,6879,6929,1,
0,0,0,6880,6881,5,26,0,0,6881,6882,5,2,0,0,6882,6893,3,834,417,0,6883,6884,
5,293,0,0,6884,6885,5,55,0,0,6885,6890,3,754,377,0,6886,6887,5,3,0,0,6887,
6889,3,754,377,0,6888,6886,1,0,0,0,6889,6892,1,0,0,0,6890,6888,1,0,0,0,6890,
6891,1,0,0,0,6891,6894,1,0,0,0,6892,6890,1,0,0,0,6893,6883,1,0,0,0,6893,
6894,1,0,0,0,6894,6895,1,0,0,0,6895,6896,5,4,0,0,6896,6929,1,0,0,0,6897,
6898,5,181,0,0,6898,6900,5,2,0,0,6899,6901,3,770,385,0,6900,6899,1,0,0,0,
6900,6901,1,0,0,0,6901,6902,1,0,0,0,6902,6907,3,834,417,0,6903,6904,5,3,
0,0,6904,6906,3,834,417,0,6905,6903,1,0,0,0,6906,6909,1,0,0,0,6907,6905,
1,0,0,0,6907,6908,1,0,0,0,6908,6920,1,0,0,0,6909,6907,1,0,0,0,6910,6911,
5,293,0,0,6911,6912,5,55,0,0,6912,6917,3,754,377,0,6913,6914,5,3,0,0,6914,
6916,3,754,377,0,6915,6913,1,0,0,0,6916,6919,1,0,0,0,6917,6915,1,0,0,0,6917,
6918,1,0,0,0,6918,6921,1,0,0,0,6919,6917,1,0,0,0,6920,6910,1,0,0,0,6920,
6921,1,0,0,0,6921,6924,1,0,0,0,6922,6923,5,388,0,0,6923,6925,3,834,417,0,
6924,6922,1,0,0,0,6924,6925,1,0,0,0,6925,6926,1,0,0,0,6926,6927,5,4,0,0,
6927,6929,1,0,0,0,6928,6803,1,0,0,0,6928,6811,1,0,0,0,6928,6817,1,0,0,0,
6928,6836,1,0,0,0,6928,6844,1,0,0,0,6928,6852,1,0,0,0,6928,6860,1,0,0,0,
6928,6880,1,0,0,0,6928,6897,1,0,0,0,6929,855,1,0,0,0,6930,6931,5,513,0,0,
6931,6932,3,1008,504,0,6932,857,1,0,0,0,6933,6934,5,513,0,0,6934,6938,5,
513,0,0,6935,6936,3,950,475,0,6936,6937,5,1,0,0,6937,6939,1,0,0,0,6938,6935,
1,0,0,0,6938,6939,1,0,0,0,6939,6940,1,0,0,0,6940,6941,3,1000,500,0,6941,
859,1,0,0,0,6942,6943,3,1000,500,0,6943,861,1,0,0,0,6944,6945,5,60,0,0,6945,
6946,5,2,0,0,6946,6967,5,4,0,0,6947,6948,5,101,0,0,6948,6949,5,2,0,0,6949,
6967,5,4,0,0,6950,6951,5,382,0,0,6951,6952,5,2,0,0,6952,6967,5,4,0,0,6953,
6954,5,454,0,0,6954,6955,5,2,0,0,6955,6967,5,4,0,0,6956,6959,5,98,0,0,6957,
6958,5,2,0,0,6958,6960,5,4,0,0,6959,6957,1,0,0,0,6959,6960,1,0,0,0,6960,
6967,1,0,0,0,6961,6964,5,95,0,0,6962,6963,5,2,0,0,6963,6965,5,4,0,0,6964,
6962,1,0,0,0,6964,6965,1,0,0,0,6965,6967,1,0,0,0,6966,6944,1,0,0,0,6966,
6947,1,0,0,0,6966,6950,1,0,0,0,6966,6953,1,0,0,0,6966,6956,1,0,0,0,6966,
6961,1,0,0,0,6967,863,1,0,0,0,6968,6971,5,94,0,0,6969,6970,5,2,0,0,6970,
6972,5,4,0,0,6971,6969,1,0,0,0,6971,6972,1,0,0,0,6972,6994,1,0,0,0,6973,
6976,5,96,0,0,6974,6975,5,2,0,0,6975,6977,5,4,0,0,6976,6974,1,0,0,0,6976,
6977,1,0,0,0,6977,6994,1,0,0,0,6978,6981,5,97,0,0,6979,6980,5,2,0,0,6980,
6982,5,4,0,0,6981,6979,1,0,0,0,6981,6982,1,0,0,0,6982,6994,1,0,0,0,6983,
6986,5,241,0,0,6984,6985,5,2,0,0,6985,6987,5,4,0,0,6986,6984,1,0,0,0,6986,
6987,1,0,0,0,6987,6994,1,0,0,0,6988,6991,5,242,0,0,6989,6990,5,2,0,0,6990,
6992,5,4,0,0,6991,6989,1,0,0,0,6991,6992,1,0,0,0,6992,6994,1,0,0,0,6993,
6968,1,0,0,0,6993,6973,1,0,0,0,6993,6978,1,0,0,0,6993,6983,1,0,0,0,6993,
6988,1,0,0,0,6994,865,1,0,0,0,6995,6996,5,64,0,0,6996,6997,5,2,0,0,6997,
6998,3,834,417,0,6998,6999,5,4,0,0,6999,7137,1,0,0,0,7000,7001,5,105,0,0,
7001,7002,5,2,0,0,7002,7003,3,834,417,0,7003,7004,5,4,0,0,7004,7137,1,0,
0,0,7005,7006,5,189,0,0,7006,7007,5,2,0,0,7007,7008,3,834,417,0,7008,7009,
5,4,0,0,7009,7137,1,0,0,0,7010,7011,5,193,0,0,7011,7020,5,2,0,0,7012,7017,
3,834,417,0,7013,7014,5,3,0,0,7014,7016,3,834,417,0,7015,7013,1,0,0,0,7016,
7019,1,0,0,0,7017,7015,1,0,0,0,7017,7018,1,0,0,0,7018,7021,1,0,0,0,7019,
7017,1,0,0,0,7020,7012,1,0,0,0,7020,7021,1,0,0,0,7021,7022,1,0,0,0,7022,
7137,5,4,0,0,7023,7024,5,233,0,0,7024,7025,5,2,0,0,7025,7026,3,834,417,0,
7026,7027,5,3,0,0,7027,7028,3,834,417,0,7028,7029,5,4,0,0,7029,7137,1,0,
0,0,7030,7031,5,236,0,0,7031,7032,5,2,0,0,7032,7033,3,834,417,0,7033,7034,
5,3,0,0,7034,7035,3,834,417,0,7035,7036,5,4,0,0,7036,7137,1,0,0,0,7037,7038,
5,260,0,0,7038,7039,5,2,0,0,7039,7040,3,834,417,0,7040,7041,5,4,0,0,7041,
7137,1,0,0,0,7042,7043,5,264,0,0,7043,7044,5,2,0,0,7044,7045,3,834,417,0,
7045,7046,5,3,0,0,7046,7047,3,834,417,0,7047,7048,5,4,0,0,7048,7137,1,0,
0,0,7049,7050,5,267,0,0,7050,7051,5,2,0,0,7051,7052,3,834,417,0,7052,7053,
5,4,0,0,7053,7137,1,0,0,0,7054,7055,5,332,0,0,7055,7056,5,2,0,0,7056,7057,
3,834,417,0,7057,7058,5,4,0,0,7058,7137,1,0,0,0,7059,7060,5,345,0,0,7060,
7061,5,2,0,0,7061,7062,3,834,417,0,7062,7063,5,3,0,0,7063,7064,3,834,417,
0,7064,7065,5,4,0,0,7065,7137,1,0,0,0,7066,7067,5,351,0,0,7067,7076,5,2,
0,0,7068,7073,3,834,417,0,7069,7070,5,3,0,0,7070,7072,3,834,417,0,7071,7069,
1,0,0,0,7072,7075,1,0,0,0,7073,7071,1,0,0,0,7073,7074,1,0,0,0,7074,7077,
1,0,0,0,7075,7073,1,0,0,0,7076,7068,1,0,0,0,7076,7077,1,0,0,0,7077,7078,
1,0,0,0,7078,7137,5,4,0,0,7079,7080,5,366,0,0,7080,7081,5,2,0,0,7081,7082,
3,834,417,0,7082,7083,5,3,0,0,7083,7084,3,834,417,0,7084,7085,5,4,0,0,7085,
7137,1,0,0,0,7086,7087,5,367,0,0,7087,7088,5,2,0,0,7088,7089,3,834,417,0,
7089,7090,5,3,0,0,7090,7091,3,834,417,0,7091,7092,5,4,0,0,7092,7137,1,0,
0,0,7093,7094,5,384,0,0,7094,7095,5,2,0,0,7095,7096,3,834,417,0,7096,7097,
5,4,0,0,7097,7137,1,0,0,0,7098,7099,5,431,0,0,7099,7100,5,2,0,0,7100,7101,
3,972,486,0,7101,7102,5,3,0,0,7102,7103,3,834,417,0,7103,7104,5,3,0,0,7104,
7105,3,834,417,0,7105,7106,5,4,0,0,7106,7137,1,0,0,0,7107,7108,5,432,0,0,
7108,7109,5,2,0,0,7109,7110,3,972,486,0,7110,7111,5,3,0,0,7111,7112,3,834,
417,0,7112,7113,5,3,0,0,7113,7114,3,834,417,0,7114,7115,5,4,0,0,7115,7137,
1,0,0,0,7116,7117,5,479,0,0,7117,7118,5,2,0,0,7118,7119,3,834,417,0,7119,
7120,5,4,0,0,7120,7137,1,0,0,0,7121,7122,5,300,0,0,7122,7123,5,2,0,0,7123,
7124,3,958,479,0,7124,7125,5,4,0,0,7125,7137,1,0,0,0,7126,7127,5,160,0,0,
7127,7128,5,2,0,0,7128,7129,3,834,417,0,7129,7130,5,4,0,0,7130,7137,1,0,
0,0,7131,7132,5,62,0,0,7132,7133,5,2,0,0,7133,7134,3,834,417,0,7134,7135,
5,4,0,0,7135,7137,1,0,0,0,7136,6995,1,0,0,0,7136,7000,1,0,0,0,7136,7005,
1,0,0,0,7136,7010,1,0,0,0,7136,7023,1,0,0,0,7136,7030,1,0,0,0,7136,7037,
1,0,0,0,7136,7042,1,0,0,0,7136,7049,1,0,0,0,7136,7054,1,0,0,0,7136,7059,
1,0,0,0,7136,7066,1,0,0,0,7136,7079,1,0,0,0,7136,7086,1,0,0,0,7136,7093,
1,0,0,0,7136,7098,1,0,0,0,7136,7107,1,0,0,0,7136,7116,1,0,0,0,7136,7121,
1,0,0,0,7136,7126,1,0,0,0,7136,7131,1,0,0,0,7137,867,1,0,0,0,7138,7139,5,
375,0,0,7139,7140,5,2,0,0,7140,7236,5,4,0,0,7141,7142,5,339,0,0,7142,7143,
5,2,0,0,7143,7236,5,4,0,0,7144,7145,5,116,0,0,7145,7146,5,2,0,0,7146,7236,
5,4,0,0,7147,7148,5,91,0,0,7148,7149,5,2,0,0,7149,7236,5,4,0,0,7150,7151,
5,304,0,0,7151,7152,5,2,0,0,7152,7236,5,4,0,0,7153,7154,5,121,0,0,7154,7156,
5,2,0,0,7155,7157,3,834,417,0,7156,7155,1,0,0,0,7156,7157,1,0,0,0,7157,7158,
1,0,0,0,7158,7236,5,4,0,0,7159,7160,5,232,0,0,7160,7172,5,2,0,0,7161,7163,
3,834,417,0,7162,7164,3,874,437,0,7163,7162,1,0,0,0,7163,7164,1,0,0,0,7164,
7169,1,0,0,0,7165,7166,5,3,0,0,7166,7168,3,834,417,0,7167,7165,1,0,0,0,7168,
7171,1,0,0,0,7169,7167,1,0,0,0,7169,7170,1,0,0,0,7170,7173,1,0,0,0,7171,
7169,1,0,0,0,7172,7161,1,0,0,0,7172,7173,1,0,0,0,7173,7174,1,0,0,0,7174,
7176,5,4,0,0,7175,7177,3,874,437,0,7176,7175,1,0,0,0,7176,7177,1,0,0,0,7177,
7236,1,0,0,0,7178,7179,5,227,0,0,7179,7191,5,2,0,0,7180,7182,3,834,417,0,
7181,7183,3,874,437,0,7182,7181,1,0,0,0,7182,7183,1,0,0,0,7183,7188,1,0,
0,0,7184,7185,5,3,0,0,7185,7187,3,834,417,0,7186,7184,1,0,0,0,7187,7190,
1,0,0,0,7188,7186,1,0,0,0,7188,7189,1,0,0,0,7189,7192,1,0,0,0,7190,7188,
1,0,0,0,7191,7180,1,0,0,0,7191,7192,1,0,0,0,7192,7193,1,0,0,0,7193,7195,
5,4,0,0,7194,7196,3,874,437,0,7195,7194,1,0,0,0,7195,7196,1,0,0,0,7196,7236,
1,0,0,0,7197,7198,5,158,0,0,7198,7210,5,2,0,0,7199,7201,3,834,417,0,7200,
7202,3,874,437,0,7201,7200,1,0,0,0,7201,7202,1,0,0,0,7202,7207,1,0,0,0,7203,
7204,5,3,0,0,7204,7206,3,834,417,0,7205,7203,1,0,0,0,7206,7209,1,0,0,0,7207,
7205,1,0,0,0,7207,7208,1,0,0,0,7208,7211,1,0,0,0,7209,7207,1,0,0,0,7210,
7199,1,0,0,0,7210,7211,1,0,0,0,7211,7212,1,0,0,0,7212,7214,5,4,0,0,7213,
7215,3,874,437,0,7214,7213,1,0,0,0,7214,7215,1,0,0,0,7215,7236,1,0,0,0,7216,
7217,5,230,0,0,7217,7229,5,2,0,0,7218,7220,3,834,417,0,7219,7221,3,874,437,
0,7220,7219,1,0,0,0,7220,7221,1,0,0,0,7221,7226,1,0,0,0,7222,7223,5,3,0,
0,7223,7225,3,834,417,0,7224,7222,1,0,0,0,7225,7228,1,0,0,0,7226,7224,1,
0,0,0,7226,7227,1,0,0,0,7227,7230,1,0,0,0,7228,7226,1,0,0,0,7229,7218,1,
0,0,0,7229,7230,1,0,0,0,7230,7231,1,0,0,0,7231,7233,5,4,0,0,7232,7234,3,
874,437,0,7233,7232,1,0,0,0,7233,7234,1,0,0,0,7234,7236,1,0,0,0,7235,7138,
1,0,0,0,7235,7141,1,0,0,0,7235,7144,1,0,0,0,7235,7147,1,0,0,0,7235,7150,
1,0,0,0,7235,7153,1,0,0,0,7235,7159,1,0,0,0,7235,7178,1,0,0,0,7235,7197,
1,0,0,0,7235,7216,1,0,0,0,7236,869,1,0,0,0,7237,7238,5,473,0,0,7238,7239,
3,834,417,0,7239,7240,5,427,0,0,7240,7241,3,834,417,0,7241,871,1,0,0,0,7242,
7243,5,296,0,0,7243,7257,5,2,0,0,7244,7246,3,800,400,0,7245,7244,1,0,0,0,
7245,7246,1,0,0,0,7246,7247,1,0,0,0,7247,7248,5,298,0,0,7248,7249,5,55,0,
0,7249,7254,3,834,417,0,7250,7251,5,3,0,0,7251,7253,3,834,417,0,7252,7250,
1,0,0,0,7253,7256,1,0,0,0,7254,7252,1,0,0,0,7254,7255,1,0,0,0,7255,7258,
1,0,0,0,7256,7254,1,0,0,0,7257,7245,1,0,0,0,7257,7258,1,0,0,0,7258,7269,
1,0,0,0,7259,7260,5,293,0,0,7260,7261,5,55,0,0,7261,7266,3,754,377,0,7262,
7263,5,3,0,0,7263,7265,3,754,377,0,7264,7262,1,0,0,0,7265,7268,1,0,0,0,7266,
7264,1,0,0,0,7266,7267,1,0,0,0,7267,7270,1,0,0,0,7268,7266,1,0,0,0,7269,
7259,1,0,0,0,7269,7270,1,0,0,0,7270,7272,1,0,0,0,7271,7273,3,876,438,0,7272,
7271,1,0,0,0,7272,7273,1,0,0,0,7273,7274,1,0,0,0,7274,7275,5,4,0,0,7275,
873,1,0,0,0,7276,7277,5,196,0,0,7277,7278,5,278,0,0,7278,875,1,0,0,0,7279,
7280,5,338,0,0,7280,7296,3,878,439,0,7281,7282,5,374,0,0,7282,7296,3,878,
439,0,7283,7284,5,338,0,0,7284,7285,5,41,0,0,7285,7286,3,878,439,0,7286,
7287,5,21,0,0,7287,7288,3,878,439,0,7288,7296,1,0,0,0,7289,7290,5,374,0,
0,7290,7291,5,41,0,0,7291,7292,3,878,439,0,7292,7293,5,21,0,0,7293,7294,
3,878,439,0,7294,7296,1,0,0,0,7295,7279,1,0,0,0,7295,7281,1,0,0,0,7295,7283,
1,0,0,0,7295,7289,1,0,0,0,7296,877,1,0,0,0,7297,7298,5,444,0,0,7298,7307,
5,315,0,0,7299,7300,5,444,0,0,7300,7307,5,162,0,0,7301,7302,5,93,0,0,7302,
7307,5,373,0,0,7303,7304,3,834,417,0,7304,7305,7,43,0,0,7305,7307,1,0,0,
0,7306,7297,1,0,0,0,7306,7299,1,0,0,0,7306,7301,1,0,0,0,7306,7303,1,0,0,
0,7307,879,1,0,0,0,7308,7348,3,884,442,0,7309,7310,5,18,0,0,7310,7318,7,
44,0,0,7311,7312,7,44,0,0,7312,7315,3,994,497,0,7313,7314,5,27,0,0,7314,
7316,3,1000,500,0,7315,7313,1,0,0,0,7315,7316,1,0,0,0,7316,7318,1,0,0,0,
7317,7309,1,0,0,0,7317,7311,1,0,0,0,7318,7348,1,0,0,0,7319,7320,5,18,0,0,
7320,7324,7,45,0,0,7321,7322,7,45,0,0,7322,7324,3,884,442,0,7323,7319,1,
0,0,0,7323,7321,1,0,0,0,7324,7348,1,0,0,0,7325,7326,5,18,0,0,7326,7327,5,
253,0,0,7327,7336,7,46,0,0,7328,7329,5,253,0,0,7329,7330,7,46,0,0,7330,7333,
3,994,497,0,7331,7332,5,27,0,0,7332,7334,3,1000,500,0,7333,7331,1,0,0,0,
7333,7334,1,0,0,0,7334,7336,1,0,0,0,7335,7325,1,0,0,0,7335,7328,1,0,0,0,
7336,7348,1,0,0,0,7337,7338,5,18,0,0,7338,7346,7,46,0,0,7339,7340,7,46,0,
0,7340,7343,3,994,497,0,7341,7342,5,27,0,0,7342,7344,3,1000,500,0,7343,7341,
1,0,0,0,7343,7344,1,0,0,0,7344,7346,1,0,0,0,7345,7337,1,0,0,0,7345,7339,
1,0,0,0,7346,7348,1,0,0,0,7347,7308,1,0,0,0,7347,7317,1,0,0,0,7347,7323,
1,0,0,0,7347,7335,1,0,0,0,7347,7345,1,0,0,0,7348,881,1,0,0,0,7349,7351,3,
994,497,0,7350,7352,3,808,404,0,7351,7350,1,0,0,0,7351,7352,1,0,0,0,7352,
883,1,0,0,0,7353,7355,3,994,497,0,7354,7356,3,808,404,0,7355,7354,1,0,0,
0,7355,7356,1,0,0,0,7356,7359,1,0,0,0,7357,7358,5,27,0,0,7358,7360,3,1000,
500,0,7359,7357,1,0,0,0,7359,7360,1,0,0,0,7360,885,1,0,0,0,7361,7363,7,47,
0,0,7362,7364,7,48,0,0,7363,7362,1,0,0,0,7363,7364,1,0,0,0,7364,887,1,0,
0,0,7365,7366,5,437,0,0,7366,7368,7,49,0,0,7367,7369,3,1000,500,0,7368,7367,
1,0,0,0,7368,7369,1,0,0,0,7369,889,1,0,0,0,7370,7373,3,1000,500,0,7371,7373,
3,852,426,0,7372,7370,1,0,0,0,7372,7371,1,0,0,0,7373,891,1,0,0,0,7374,7375,
5,298,0,0,7375,7376,5,55,0,0,7376,7377,5,338,0,0,7377,7378,3,1006,503,0,
7378,7387,5,2,0,0,7379,7384,3,912,456,0,7380,7381,5,3,0,0,7381,7383,3,912,
456,0,7382,7380,1,0,0,0,7383,7386,1,0,0,0,7384,7382,1,0,0,0,7384,7385,1,
0,0,0,7385,7388,1,0,0,0,7386,7384,1,0,0,0,7387,7379,1,0,0,0,7387,7388,1,
0,0,0,7388,7389,1,0,0,0,7389,7390,5,4,0,0,7390,7463,1,0,0,0,7391,7392,5,
298,0,0,7392,7393,5,55,0,0,7393,7394,5,338,0,0,7394,7395,3,848,424,0,7395,
7404,5,2,0,0,7396,7401,3,912,456,0,7397,7398,5,3,0,0,7398,7400,3,912,456,
0,7399,7397,1,0,0,0,7400,7403,1,0,0,0,7401,7399,1,0,0,0,7401,7402,1,0,0,
0,7402,7405,1,0,0,0,7403,7401,1,0,0,0,7404,7396,1,0,0,0,7404,7405,1,0,0,
0,7405,7406,1,0,0,0,7406,7407,5,4,0,0,7407,7463,1,0,0,0,7408,7409,5,298,
0,0,7409,7411,5,55,0,0,7410,7412,5,238,0,0,7411,7410,1,0,0,0,7411,7412,1,
0,0,0,7412,7413,1,0,0,0,7413,7414,3,1006,503,0,7414,7423,5,2,0,0,7415,7420,
3,894,447,0,7416,7417,5,3,0,0,7417,7419,3,894,447,0,7418,7416,1,0,0,0,7419,
7422,1,0,0,0,7420,7418,1,0,0,0,7420,7421,1,0,0,0,7421,7424,1,0,0,0,7422,
7420,1,0,0,0,7423,7415,1,0,0,0,7423,7424,1,0,0,0,7424,7425,1,0,0,0,7425,
7426,5,4,0,0,7426,7463,1,0,0,0,7427,7428,5,298,0,0,7428,7430,5,55,0,0,7429,
7431,5,238,0,0,7430,7429,1,0,0,0,7430,7431,1,0,0,0,7431,7432,1,0,0,0,7432,
7463,3,1006,503,0,7433,7434,5,298,0,0,7434,7435,5,55,0,0,7435,7436,3,852,
426,0,7436,7445,5,2,0,0,7437,7442,3,912,456,0,7438,7439,5,3,0,0,7439,7441,
3,912,456,0,7440,7438,1,0,0,0,7441,7444,1,0,0,0,7442,7440,1,0,0,0,7442,7443,
1,0,0,0,7443,7446,1,0,0,0,7444,7442,1,0,0,0,7445,7437,1,0,0,0,7445,7446,
1,0,0,0,7446,7447,1,0,0,0,7447,7448,5,4,0,0,7448,7463,1,0,0,0,7449,7450,
5,298,0,0,7450,7451,5,55,0,0,7451,7463,3,852,426,0,7452,7453,5,298,0,0,7453,
7454,5,55,0,0,7454,7459,3,890,445,0,7455,7456,5,3,0,0,7456,7458,3,890,445,
0,7457,7455,1,0,0,0,7458,7461,1,0,0,0,7459,7457,1,0,0,0,7459,7460,1,0,0,
0,7460,7463,1,0,0,0,7461,7459,1,0,0,0,7462,7374,1,0,0,0,7462,7391,1,0,0,
0,7462,7408,1,0,0,0,7462,7427,1,0,0,0,7462,7433,1,0,0,0,7462,7449,1,0,0,
0,7462,7452,1,0,0,0,7463,893,1,0,0,0,7464,7467,3,896,448,0,7465,7467,3,898,
449,0,7466,7464,1,0,0,0,7466,7465,1,0,0,0,7467,895,1,0,0,0,7468,7472,5,298,
0,0,7469,7470,5,193,0,0,7470,7471,5,276,0,0,7471,7473,5,144,0,0,7472,7469,
1,0,0,0,7472,7473,1,0,0,0,7473,7474,1,0,0,0,7474,7475,3,1000,500,0,7475,
7476,5,458,0,0,7476,7477,5,198,0,0,7477,7479,3,902,451,0,7478,7480,3,940,
470,0,7479,7478,1,0,0,0,7479,7480,1,0,0,0,7480,897,1,0,0,0,7481,7485,5,298,
0,0,7482,7483,5,193,0,0,7483,7484,5,276,0,0,7484,7486,5,144,0,0,7485,7482,
1,0,0,0,7485,7486,1,0,0,0,7486,7487,1,0,0,0,7487,7488,3,1000,500,0,7488,
7489,5,458,0,0,7489,7490,5,198,0,0,7490,7492,3,900,450,0,7491,7493,3,940,
470,0,7492,7491,1,0,0,0,7492,7493,1,0,0,0,7493,899,1,0,0,0,7494,7495,5,2,
0,0,7495,7500,3,902,451,0,7496,7497,5,3,0,0,7497,7499,3,902,451,0,7498,7496,
1,0,0,0,7499,7502,1,0,0,0,7500,7498,1,0,0,0,7500,7501,1,0,0,0,7501,7503,
1,0,0,0,7502,7500,1,0,0,0,7503,7504,5,4,0,0,7504,901,1,0,0,0,7505,7506,5,
2,0,0,7506,7511,3,906,453,0,7507,7508,5,3,0,0,7508,7510,3,906,453,0,7509,
7507,1,0,0,0,7510,7513,1,0,0,0,7511,7509,1,0,0,0,7511,7512,1,0,0,0,7512,
7514,1,0,0,0,7513,7511,1,0,0,0,7514,7515,5,4,0,0,7515,903,1,0,0,0,7516,7519,
3,902,451,0,7517,7519,3,900,450,0,7518,7516,1,0,0,0,7518,7517,1,0,0,0,7519,
905,1,0,0,0,7520,7523,5,277,0,0,7521,7523,3,958,479,0,7522,7520,1,0,0,0,
7522,7521,1,0,0,0,7523,907,1,0,0,0,7524,7525,5,2,0,0,7525,7530,3,958,479,
0,7526,7527,5,3,0,0,7527,7529,3,958,479,0,7528,7526,1,0,0,0,7529,7532,1,
0,0,0,7530,7528,1,0,0,0,7530,7531,1,0,0,0,7531,7533,1,0,0,0,7532,7530,1,
0,0,0,7533,7534,5,4,0,0,7534,909,1,0,0,0,7535,7536,5,2,0,0,7536,7541,3,850,
425,0,7537,7538,5,3,0,0,7538,7540,3,850,425,0,7539,7537,1,0,0,0,7540,7543,
1,0,0,0,7541,7539,1,0,0,0,7541,7542,1,0,0,0,7542,7544,1,0,0,0,7543,7541,
1,0,0,0,7544,7545,5,4,0,0,7545,911,1,0,0,0,7546,7549,3,914,457,0,7547,7549,
3,916,458,0,7548,7546,1,0,0,0,7548,7547,1,0,0,0,7549,913,1,0,0,0,7550,7554,
5,298,0,0,7551,7552,5,193,0,0,7552,7553,5,276,0,0,7553,7555,5,144,0,0,7554,
7551,1,0,0,0,7554,7555,1,0,0,0,7555,7556,1,0,0,0,7556,7557,3,1000,500,0,
7557,7558,5,458,0,0,7558,7560,3,920,460,0,7559,7561,3,940,470,0,7560,7559,
1,0,0,0,7560,7561,1,0,0,0,7561,915,1,0,0,0,7562,7563,5,402,0,0,7563,7564,
5,2,0,0,7564,7565,3,958,479,0,7565,7566,5,4,0,0,7566,7567,5,136,0,0,7567,
7568,5,2,0,0,7568,7569,3,958,479,0,7569,7570,5,4,0,0,7570,7571,5,149,0,0,
7571,7572,5,2,0,0,7572,7573,3,966,483,0,7573,7574,5,4,0,0,7574,7589,1,0,
0,0,7575,7576,5,402,0,0,7576,7577,5,2,0,0,7577,7578,3,958,479,0,7578,7579,
5,4,0,0,7579,7580,5,136,0,0,7580,7581,5,2,0,0,7581,7582,3,958,479,0,7582,
7583,5,4,0,0,7583,7584,5,149,0,0,7584,7585,5,2,0,0,7585,7586,5,514,0,0,7586,
7587,5,4,0,0,7587,7589,1,0,0,0,7588,7562,1,0,0,0,7588,7575,1,0,0,0,7589,
917,1,0,0,0,7590,7591,5,402,0,0,7591,7592,5,2,0,0,7592,7593,3,958,479,0,
7593,7594,5,4,0,0,7594,7595,5,136,0,0,7595,7596,5,2,0,0,7596,7597,3,958,
479,0,7597,7598,5,4,0,0,7598,919,1,0,0,0,7599,7600,5,234,0,0,7600,7603,5,
426,0,0,7601,7604,5,255,0,0,7602,7604,3,922,461,0,7603,7601,1,0,0,0,7603,
7602,1,0,0,0,7604,7612,1,0,0,0,7605,7606,5,6,0,0,7606,7607,3,922,461,0,7607,
7608,5,3,0,0,7608,7609,3,922,461,0,7609,7610,5,4,0,0,7610,7612,1,0,0,0,7611,
7599,1,0,0,0,7611,7605,1,0,0,0,7612,921,1,0,0,0,7613,7614,5,2,0,0,7614,7619,
3,926,463,0,7615,7616,5,3,0,0,7616,7618,3,926,463,0,7617,7615,1,0,0,0,7618,
7621,1,0,0,0,7619,7617,1,0,0,0,7619,7620,1,0,0,0,7620,7622,1,0,0,0,7621,
7619,1,0,0,0,7622,7623,5,4,0,0,7623,923,1,0,0,0,7624,7625,3,1000,500,0,7625,
7626,5,488,0,0,7626,7627,3,850,425,0,7627,925,1,0,0,0,7628,7631,5,255,0,
0,7629,7631,3,958,479,0,7630,7628,1,0,0,0,7630,7629,1,0,0,0,7631,927,1,0,
0,0,7632,7633,5,126,0,0,7633,7634,5,55,0,0,7634,7635,5,182,0,0,7635,7638,
3,1006,503,0,7636,7637,5,53,0,0,7637,7639,5,514,0,0,7638,7636,1,0,0,0,7638,
7639,1,0,0,0,7639,7645,1,0,0,0,7640,7641,5,126,0,0,7641,7642,5,55,0,0,7642,
7643,5,182,0,0,7643,7645,3,1006,503,0,7644,7632,1,0,0,0,7644,7640,1,0,0,
0,7645,929,1,0,0,0,7646,7647,5,126,0,0,7647,7648,5,55,0,0,7648,7649,5,182,
0,0,7649,7652,3,1006,503,0,7650,7651,5,53,0,0,7651,7653,5,514,0,0,7652,7650,
1,0,0,0,7652,7653,1,0,0,0,7653,7666,1,0,0,0,7654,7655,5,126,0,0,7655,7656,
5,55,0,0,7656,7657,5,182,0,0,7657,7666,3,1006,503,0,7658,7659,5,126,0,0,
7659,7660,5,55,0,0,7660,7663,5,337,0,0,7661,7662,5,53,0,0,7662,7664,5,514,
0,0,7663,7661,1,0,0,0,7663,7664,1,0,0,0,7664,7666,1,0,0,0,7665,7646,1,0,
0,0,7665,7654,1,0,0,0,7665,7658,1,0,0,0,7666,931,1,0,0,0,7667,7669,5,343,
0,0,7668,7670,7,50,0,0,7669,7668,1,0,0,0,7669,7670,1,0,0,0,7670,7687,1,0,
0,0,7671,7688,5,29,0,0,7672,7678,5,29,0,0,7673,7674,5,402,0,0,7674,7675,
5,2,0,0,7675,7676,3,958,479,0,7676,7677,5,4,0,0,7677,7679,1,0,0,0,7678,7673,
1,0,0,0,7678,7679,1,0,0,0,7679,7680,1,0,0,0,7680,7681,5,149,0,0,7681,7682,
5,2,0,0,7682,7683,3,966,483,0,7683,7684,5,4,0,0,7684,7688,1,0,0,0,7685,7688,
5,200,0,0,7686,7688,5,247,0,0,7687,7671,1,0,0,0,7687,7672,1,0,0,0,7687,7685,
1,0,0,0,7687,7686,1,0,0,0,7688,933,1,0,0,0,7689,7690,7,51,0,0,7690,935,1,
0,0,0,7691,7692,5,327,0,0,7692,7693,5,2,0,0,7693,7698,3,944,472,0,7694,7695,
5,3,0,0,7695,7697,3,944,472,0,7696,7694,1,0,0,0,7697,7700,1,0,0,0,7698,7696,
1,0,0,0,7698,7699,1,0,0,0,7699,7701,1,0,0,0,7700,7698,1,0,0,0,7701,7702,
5,4,0,0,7702,937,1,0,0,0,7703,7704,5,52,0,0,7704,7705,3,936,468,0,7705,939,
1,0,0,0,7706,7707,5,2,0,0,7707,7712,3,944,472,0,7708,7709,5,3,0,0,7709,7711,
3,944,472,0,7710,7708,1,0,0,0,7711,7714,1,0,0,0,7712,7710,1,0,0,0,7712,7713,
1,0,0,0,7713,7715,1,0,0,0,7714,7712,1,0,0,0,7715,7716,5,4,0,0,7716,941,1,
0,0,0,7717,7722,3,944,472,0,7718,7719,5,3,0,0,7719,7721,3,944,472,0,7720,
7718,1,0,0,0,7721,7724,1,0,0,0,7722,7720,1,0,0,0,7722,7723,1,0,0,0,7723,
943,1,0,0,0,7724,7722,1,0,0,0,7725,7726,3,958,479,0,7726,7727,5,488,0,0,
7727,7728,3,958,479,0,7728,945,1,0,0,0,7729,7733,3,948,474,0,7730,7732,3,
948,474,0,7731,7730,1,0,0,0,7732,7735,1,0,0,0,7733,7731,1,0,0,0,7733,7734,
1,0,0,0,7734,947,1,0,0,0,7735,7733,1,0,0,0,7736,7737,3,1000,500,0,7737,7738,
5,488,0,0,7738,7739,3,958,479,0,7739,949,1,0,0,0,7740,7741,7,52,0,0,7741,
951,1,0,0,0,7742,7743,5,76,0,0,7743,7744,3,958,479,0,7744,953,1,0,0,0,7745,
7746,5,214,0,0,7746,7747,5,295,0,0,7747,7749,3,958,479,0,7748,7750,3,956,
478,0,7749,7748,1,0,0,0,7749,7750,1,0,0,0,7750,7752,1,0,0,0,7751,7753,3,
936,468,0,7752,7751,1,0,0,0,7752,7753,1,0,0,0,7753,955,1,0,0,0,7754,7755,
5,166,0,0,7755,7758,5,27,0,0,7756,7759,3,1000,500,0,7757,7759,3,958,479,
0,7758,7756,1,0,0,0,7758,7757,1,0,0,0,7759,957,1,0,0,0,7760,7761,7,53,0,
0,7761,959,1,0,0,0,7762,7763,7,54,0,0,7763,961,1,0,0,0,7764,7765,7,55,0,
0,7765,963,1,0,0,0,7766,7767,7,56,0,0,7767,965,1,0,0,0,7768,7769,5,213,0,
0,7769,7770,3,834,417,0,7770,7771,3,972,486,0,7771,967,1,0,0,0,7772,7773,
5,213,0,0,7773,7774,3,834,417,0,7774,7775,3,970,485,0,7775,969,1,0,0,0,7776,
7777,7,57,0,0,7777,971,1,0,0,0,7778,7779,7,58,0,0,7779,973,1,0,0,0,7780,
7781,7,59,0,0,7781,975,1,0,0,0,7782,7788,3,990,495,0,7783,7788,3,992,496,
0,7784,7788,3,978,489,0,7785,7788,3,986,493,0,7786,7788,3,980,490,0,7787,
7782,1,0,0,0,7787,7783,1,0,0,0,7787,7784,1,0,0,0,7787,7785,1,0,0,0,7787,
7786,1,0,0,0,7788,977,1,0,0,0,7789,7790,5,24,0,0,7790,7791,5,490,0,0,7791,
7792,3,976,488,0,7792,7793,5,492,0,0,7793,979,1,0,0,0,7794,7795,5,248,0,
0,7795,7796,5,490,0,0,7796,7797,3,976,488,0,7797,7798,5,3,0,0,7798,7799,
3,976,488,0,7799,7800,5,492,0,0,7800,981,1,0,0,0,7801,7804,3,1000,500,0,
7802,7804,3,298,149,0,7803,7801,1,0,0,0,7803,7802,1,0,0,0,7804,7805,1,0,
0,0,7805,7806,3,976,488,0,7806,983,1,0,0,0,7807,7812,3,982,491,0,7808,7809,
5,3,0,0,7809,7811,3,982,491,0,7810,7808,1,0,0,0,7811,7814,1,0,0,0,7812,7810,
1,0,0,0,7812,7813,1,0,0,0,7813,985,1,0,0,0,7814,7812,1,0,0,0,7815,7816,5,
417,0,0,7816,7817,5,490,0,0,7817,7818,3,984,492,0,7818,7819,5,492,0,0,7819,
987,1,0,0,0,7820,7821,5,2,0,0,7821,7822,5,514,0,0,7822,7823,5,4,0,0,7823,
989,1,0,0,0,7824,7893,5,49,0,0,7825,7827,5,433,0,0,7826,7828,3,988,494,0,
7827,7826,1,0,0,0,7827,7828,1,0,0,0,7828,7893,1,0,0,0,7829,7831,5,397,0,
0,7830,7832,3,988,494,0,7831,7830,1,0,0,0,7831,7832,1,0,0,0,7832,7893,1,
0,0,0,7833,7835,5,394,0,0,7834,7836,5,207,0,0,7835,7834,1,0,0,0,7835,7836,
1,0,0,0,7836,7893,1,0,0,0,7837,7839,5,394,0,0,7838,7840,5,208,0,0,7839,7838,
1,0,0,0,7839,7840,1,0,0,0,7840,7893,1,0,0,0,7841,7843,5,450,0,0,7842,7844,
5,207,0,0,7843,7842,1,0,0,0,7843,7844,1,0,0,0,7844,7893,1,0,0,0,7845,7847,
5,450,0,0,7846,7848,5,208,0,0,7847,7846,1,0,0,0,7847,7848,1,0,0,0,7848,7893,
1,0,0,0,7849,7851,5,207,0,0,7850,7852,3,988,494,0,7851,7850,1,0,0,0,7851,
7852,1,0,0,0,7852,7893,1,0,0,0,7853,7855,5,208,0,0,7854,7856,3,988,494,0,
7855,7854,1,0,0,0,7855,7856,1,0,0,0,7856,7893,1,0,0,0,7857,7859,5,42,0,0,
7858,7860,3,988,494,0,7859,7858,1,0,0,0,7859,7860,1,0,0,0,7860,7893,1,0,
0,0,7861,7863,5,228,0,0,7862,7864,3,988,494,0,7863,7862,1,0,0,0,7863,7864,
1,0,0,0,7864,7893,1,0,0,0,7865,7893,5,159,0,0,7866,7893,5,128,0,0,7867,7893,
5,103,0,0,7868,7893,5,104,0,0,7869,7893,5,428,0,0,7870,7872,5,64,0,0,7871,
7873,3,988,494,0,7872,7871,1,0,0,0,7872,7873,1,0,0,0,7873,7893,1,0,0,0,7874,
7876,5,460,0,0,7875,7877,3,988,494,0,7876,7875,1,0,0,0,7876,7877,1,0,0,0,
7877,7893,1,0,0,0,7878,7893,5,408,0,0,7879,7893,5,409,0,0,7880,7893,5,44,
0,0,7881,7893,5,186,0,0,7882,7893,5,305,0,0,7883,7893,5,222,0,0,7884,7886,
5,459,0,0,7885,7887,3,988,494,0,7886,7885,1,0,0,0,7886,7887,1,0,0,0,7887,
7893,1,0,0,0,7888,7890,5,43,0,0,7889,7891,3,988,494,0,7890,7889,1,0,0,0,
7890,7891,1,0,0,0,7891,7893,1,0,0,0,7892,7824,1,0,0,0,7892,7825,1,0,0,0,
7892,7829,1,0,0,0,7892,7833,1,0,0,0,7892,7837,1,0,0,0,7892,7841,1,0,0,0,
7892,7845,1,0,0,0,7892,7849,1,0,0,0,7892,7853,1,0,0,0,7892,7857,1,0,0,0,
7892,7861,1,0,0,0,7892,7865,1,0,0,0,7892,7866,1,0,0,0,7892,7867,1,0,0,0,
7892,7868,1,0,0,0,7892,7869,1,0,0,0,7892,7870,1,0,0,0,7892,7874,1,0,0,0,
7892,7878,1,0,0,0,7892,7879,1,0,0,0,7892,7880,1,0,0,0,7892,7881,1,0,0,0,
7892,7882,1,0,0,0,7892,7883,1,0,0,0,7892,7884,1,0,0,0,7892,7888,1,0,0,0,
7893,991,1,0,0,0,7894,7902,7,60,0,0,7895,7896,5,2,0,0,7896,7899,5,514,0,
0,7897,7898,5,3,0,0,7898,7900,5,514,0,0,7899,7897,1,0,0,0,7899,7900,1,0,
0,0,7900,7901,1,0,0,0,7901,7903,5,4,0,0,7902,7895,1,0,0,0,7902,7903,1,0,
0,0,7903,993,1,0,0,0,7904,7910,3,1000,500,0,7905,7909,5,524,0,0,7906,7907,
5,1,0,0,7907,7909,3,1000,500,0,7908,7905,1,0,0,0,7908,7906,1,0,0,0,7909,
7912,1,0,0,0,7910,7908,1,0,0,0,7910,7911,1,0,0,0,7911,995,1,0,0,0,7912,7910,
1,0,0,0,7913,7914,3,994,497,0,7914,997,1,0,0,0,7915,7917,5,164,0,0,7916,
7915,1,0,0,0,7916,7917,1,0,0,0,7917,7918,1,0,0,0,7918,7919,5,464,0,0,7919,
7920,5,27,0,0,7920,7921,5,282,0,0,7921,7922,3,1000,500,0,7922,999,1,0,0,
0,7923,7928,5,521,0,0,7924,7928,3,1022,511,0,7925,7928,5,522,0,0,7926,7928,
5,523,0,0,7927,7923,1,0,0,0,7927,7924,1,0,0,0,7927,7925,1,0,0,0,7927,7926,
1,0,0,0,7928,1001,1,0,0,0,7929,7932,3,1000,500,0,7930,7931,5,27,0,0,7931,
7933,3,1000,500,0,7932,7930,1,0,0,0,7932,7933,1,0,0,0,7933,1003,1,0,0,0,
7934,7935,5,2,0,0,7935,7940,3,1002,501,0,7936,7937,5,3,0,0,7937,7939,3,1002,
501,0,7938,7936,1,0,0,0,7939,7942,1,0,0,0,7940,7938,1,0,0,0,7940,7941,1,
0,0,0,7941,7943,1,0,0,0,7942,7940,1,0,0,0,7943,7944,5,4,0,0,7944,1005,1,
0,0,0,7945,7946,5,2,0,0,7946,7951,3,1000,500,0,7947,7948,5,3,0,0,7948,7950,
3,1000,500,0,7949,7947,1,0,0,0,7950,7953,1,0,0,0,7951,7949,1,0,0,0,7951,
7952,1,0,0,0,7952,7954,1,0,0,0,7953,7951,1,0,0,0,7954,7955,5,4,0,0,7955,
1007,1,0,0,0,7956,7959,3,1000,500,0,7957,7959,3,958,479,0,7958,7956,1,0,
0,0,7958,7957,1,0,0,0,7959,1009,1,0,0,0,7960,7965,3,1008,504,0,7961,7962,
5,3,0,0,7962,7964,3,1008,504,0,7963,7961,1,0,0,0,7964,7967,1,0,0,0,7965,
7963,1,0,0,0,7965,7966,1,0,0,0,7966,1011,1,0,0,0,7967,7965,1,0,0,0,7968,
7972,5,498,0,0,7969,7972,3,1000,500,0,7970,7972,3,958,479,0,7971,7968,1,
0,0,0,7971,7969,1,0,0,0,7971,7970,1,0,0,0,7972,1013,1,0,0,0,7973,7985,3,
1008,504,0,7974,7975,3,1008,504,0,7975,7976,5,513,0,0,7976,7977,3,1008,504,
0,7977,7985,1,0,0,0,7978,7979,3,1008,504,0,7979,7980,5,513,0,0,7980,7981,
5,6,0,0,7981,7982,3,1008,504,0,7982,7983,5,7,0,0,7983,7985,1,0,0,0,7984,
7973,1,0,0,0,7984,7974,1,0,0,0,7984,7978,1,0,0,0,7985,1015,1,0,0,0,7986,
7987,3,1000,500,0,7987,7988,5,488,0,0,7988,7989,3,826,413,0,7989,1017,1,
0,0,0,7990,7995,3,1016,508,0,7991,7992,5,3,0,0,7992,7994,3,1016,508,0,7993,
7991,1,0,0,0,7994,7997,1,0,0,0,7995,7993,1,0,0,0,7995,7996,1,0,0,0,7996,
1019,1,0,0,0,7997,7995,1,0,0,0,7998,8002,5,515,0,0,7999,8002,5,516,0,0,8000,
8002,5,514,0,0,8001,7998,1,0,0,0,8001,7999,1,0,0,0,8001,8000,1,0,0,0,8002,
1021,1,0,0,0,8003,8004,7,61,0,0,8004,1023,1,0,0,0,946,1027,1035,1273,1289,
1295,1303,1305,1323,1330,1335,1339,1342,1345,1351,1356,1360,1383,1387,1393,
1402,1409,1414,1417,1420,1423,1426,1429,1432,1435,1438,1441,1445,1448,1451,
1454,1457,1462,1465,1475,1487,1497,1499,1502,1509,1516,1519,1524,1528,1543,
1547,1556,1570,1579,1587,1590,1593,1604,1609,1613,1619,1628,1635,1643,1646,
1650,1653,1656,1659,1662,1665,1668,1675,1680,1684,1701,1714,1727,1730,1740,
1742,1745,1758,1763,1769,1776,1782,1790,1796,1804,1810,1817,1823,1836,1841,
1849,1853,1862,1865,1868,1876,1880,1889,1892,1895,1897,1902,1906,1910,1916,
1920,1923,1926,1938,1948,1954,1964,1968,1976,1980,1987,1996,1999,2002,2013,
2019,2028,2033,2036,2040,2054,2059,2083,2087,2093,2099,2104,2109,2116,2120,
2126,2134,2147,2156,2163,2168,2171,2176,2189,2194,2203,2210,2216,2223,2235,
2243,2252,2254,2257,2262,2267,2275,2286,2300,2309,2318,2322,2329,2337,2355,
2364,2367,2371,2384,2405,2418,2422,2435,2443,2456,2462,2465,2480,2487,2500,
2505,2533,2542,2547,2556,2561,2563,2569,2574,2587,2592,2598,2607,2620,2671,
2695,2701,2710,2716,2719,2728,2744,2754,2760,2770,2776,2786,2797,2804,2811,
2828,2843,2857,2872,2885,2887,2890,2911,2914,2917,2920,2923,2931,2935,2938,
2948,2954,2957,2964,2967,2975,2979,2982,2995,2998,3006,3011,3015,3021,3023,
3035,3038,3047,3051,3063,3068,3072,3084,3089,3095,3103,3114,3117,3123,3126,
3129,3145,3167,3181,3186,3189,3192,3196,3200,3203,3206,3208,3212,3217,3223,
3226,3229,3233,3238,3242,3246,3251,3256,3258,3270,3277,3284,3292,3298,3301,
3308,3313,3317,3326,3329,3335,3340,3343,3346,3355,3358,3361,3367,3371,3375,
3383,3393,3396,3399,3404,3413,3421,3424,3427,3430,3442,3460,3465,3469,3485,
3496,3507,3513,3521,3524,3528,3532,3541,3544,3547,3555,3567,3573,3581,3584,
3588,3592,3601,3604,3607,3611,3616,3619,3624,3627,3635,3645,3652,3668,3671,
3677,3690,3696,3700,3705,3710,3715,3725,3730,3733,3737,3746,3750,3757,3764,
3784,3787,3791,3796,3801,3816,3820,3829,3832,3841,3861,3875,3898,3903,3907,
3914,3919,3921,3932,3936,3941,3962,3965,3970,3976,3980,3985,3995,3998,4010,
4013,4019,4025,4030,4036,4039,4043,4047,4053,4058,4060,4065,4075,4084,4090,
4096,4102,4105,4108,4111,4118,4122,4126,4133,4139,4143,4147,4149,4155,4160,
4165,4170,4177,4183,4185,4191,4196,4200,4204,4213,4216,4219,4226,4230,4233,
4240,4246,4250,4258,4262,4284,4290,4298,4304,4312,4318,4324,4352,4360,4365,
4371,4378,4382,4389,4399,4403,4412,4415,4418,4420,4426,4430,4434,4439,4445,
4451,4455,4461,4465,4467,4471,4478,4483,4493,4497,4502,4505,4511,4519,4528,
4536,4542,4548,4560,4562,4570,4577,4581,4587,4599,4610,4620,4626,4636,4649,
4654,4662,4668,4673,4684,4692,4703,4709,4718,4729,4741,4754,4761,4763,4774,
4791,4824,4829,4837,4845,4850,4858,4860,4865,4872,4887,4895,4900,4923,4940,
4956,4976,5034,5038,5051,5056,5060,5069,5075,5088,5094,5096,5105,5110,5114,
5123,5129,5133,5141,5146,5153,5160,5177,5194,5205,5224,5229,5233,5255,5262,
5265,5271,5278,5281,5284,5290,5296,5302,5308,5317,5320,5323,5330,5341,5350,
5358,5366,5375,5388,5407,5416,5419,5422,5430,5438,5442,5447,5452,5454,5464,
5476,5483,5494,5498,5510,5516,5529,5535,5541,5550,5566,5571,5575,5578,5584,
5587,5590,5617,5621,5624,5630,5638,5646,5652,5656,5664,5678,5685,5697,5701,
5703,5707,5711,5714,5717,5720,5724,5728,5731,5734,5737,5748,5752,5756,5759,
5769,5780,5783,5786,5789,5798,5807,5813,5820,5827,5832,5838,5841,5843,5856,
5860,5865,5871,5878,5882,5889,5895,5900,5904,5911,5916,5918,5922,5927,5933,
5944,5950,5954,5960,5967,5978,5982,5984,5991,5996,6001,6008,6016,6021,6025,
6028,6031,6034,6037,6040,6043,6046,6050,6059,6064,6068,6070,6074,6078,6080,
6087,6091,6093,6103,6107,6109,6114,6118,6120,6126,6135,6141,6150,6158,6162,
6164,6168,6171,6175,6177,6181,6185,6192,6201,6204,6208,6212,6215,6220,6228,
6257,6265,6277,6292,6297,6305,6311,6320,6326,6331,6340,6352,6364,6376,6379,
6392,6403,6410,6417,6429,6434,6442,6444,6452,6461,6474,6476,6481,6484,6492,
6496,6504,6512,6520,6528,6532,6561,6563,6615,6619,6627,6631,6636,6640,6646,
6653,6658,6667,6671,6678,6686,6692,6702,6706,6712,6714,6727,6743,6746,6756,
6759,6767,6779,6782,6792,6795,6799,6801,6806,6814,6821,6823,6830,6833,6839,
6847,6855,6863,6873,6876,6890,6893,6900,6907,6917,6920,6924,6928,6938,6959,
6964,6966,6971,6976,6981,6986,6991,6993,7017,7020,7073,7076,7136,7156,7163,
7169,7172,7176,7182,7188,7191,7195,7201,7207,7210,7214,7220,7226,7229,7233,
7235,7245,7254,7257,7266,7269,7272,7295,7306,7315,7317,7323,7333,7335,7343,
7345,7347,7351,7355,7359,7363,7368,7372,7384,7387,7401,7404,7411,7420,7423,
7430,7442,7445,7459,7462,7466,7472,7479,7485,7492,7500,7511,7518,7522,7530,
7541,7548,7554,7560,7588,7603,7611,7619,7630,7638,7644,7652,7663,7665,7669,
7678,7687,7698,7712,7722,7733,7749,7752,7758,7787,7803,7812,7827,7831,7835,
7839,7843,7847,7851,7855,7859,7863,7872,7876,7886,7890,7892,7899,7902,7908,
7910,7916,7927,7932,7940,7951,7958,7965,7971,7984,7995,8001];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class StarRocksParser extends antlr4.Parser {

    static grammarFileName = "StarRocks.g4";
    static literalNames = [ null, "'.'", "'('", "','", "')'", "'=>'", "'['", 
                            "']'", "':'", "'{'", "'}'", "'ACCESS'", "'ACTIVE'", 
                            "'ADD'", "'ADMIN'", "'ADVISOR'", "'AFTER'", 
                            "'AGGREGATE'", "'ALL'", "'ALTER'", "'ANALYZE'", 
                            "'AND'", "'ANTI'", "'APPLY'", "'ARRAY'", "'ARRAY_AGG'", 
                            "'ARRAY_AGG_DISTINCT'", "'AS'", "'ASC'", "'ASYNC'", 
                            "'AUTHORS'", "'AUTHENTICATION'", "'AUTOMATED'", 
                            "'AUTO_INCREMENT'", "'AVG'", "'BACKEND'", "'BACKENDS'", 
                            "'BACKUP'", "'BASE'", "'BASELINE'", "'BEGIN'", 
                            "'BETWEEN'", "'BIGINT'", "'BINARY'", "'BITMAP'", 
                            "'BITMAP_UNION'", "'BLACKHOLE'", "'BLACKLIST'", 
                            "'BODY'", "'BOOLEAN'", "'BOTH'", "'BRANCH'", 
                            "'BROKER'", "'BUCKETS'", "'BUILTIN'", "'BY'", 
                            "'CACHE'", "'CANCEL'", "'CASE'", "'CAST'", "'CATALOG'", 
                            "'CATALOGS'", "'CEIL'", "'CHAIN'", "'CHAR'", 
                            "'CHARACTER'", "'CHARSET'", "'CHECK'", "'CLEAN'", 
                            "'CLEAR'", "'CLUSTER'", "'CLUSTERS'", "'COLLATE'", 
                            "'COLLATION'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", 
                            "'COMMIT'", "'COMMITTED'", "'COMPACT'", "'COMPACTION'", 
                            "'COMPUTE'", "'CONFIG'", "'CONNECTION'", "'CONSISTENT'", 
                            "'CONVERT'", "'COSTS'", "'COUNT'", "'CREATE'", 
                            "'CROSS'", "'CUBE'", "'CUME_DIST'", "'CUMULATIVE'", 
                            "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_ROLE'", 
                            "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                            "'DATA'", "'DATACACHE'", "'DATABASE'", "'DATABASES'", 
                            "'DATE'", "'DATETIME'", "'DAY'", "'DAYS'", "'DEALLOCATE'", 
                            "'DECIMAL'", "'DECIMALV2'", "'DECIMAL32'", "'DECIMAL64'", 
                            "'DECIMAL128'", "'DECOMMISSION'", "'DEFAULT'", 
                            "'DELETE'", "'DENSE_RANK'", "'DEFERRED'", "'DIALECT'", 
                            "'DICTIONARY'", "'DICTIONARY_GET'", "'NTILE'", 
                            "'DESC'", "'DESCRIBE'", "'DISABLE'", "'DISTINCT'", 
                            "'DISTRIBUTED'", "'DISTRIBUTION'", "'DOUBLE'", 
                            "'DROP'", "'DUAL'", "'DUPLICATE'", "'DYNAMIC'", 
                            "'ELSE'", "'ENABLE'", "'ENCLOSE'", "'END'", 
                            "'ENGINE'", "'ENGINES'", "'ERRORS'", "'ESCAPE'", 
                            "'EVENTS'", "'EXCEPT'", "'EXECUTE'", "'EXISTS'", 
                            "'EXPLAIN'", "'EXPORT'", "'EXTERNAL'", "'EXTRACT'", 
                            "'EVERY'", "'FAILPOINT'", "'FAILPOINTS'", "'FALSE'", 
                            "'FIELDS'", "'FILE'", "'FILES'", "'FILTER'", 
                            "'FIRST'", "'FIRST_VALUE'", "'FLOAT'", "'FLOOR'", 
                            "'FN'", "'FOLLOWING'", "'FOLLOWER'", "'FOR'", 
                            "'FORCE'", "'FORMAT'", "'FREE'", "'FROM'", "'FRONTEND'", 
                            "'FRONTENDS'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", 
                            "'GLOBAL'", "'GRANT'", "'GRANTS'", "'GROUP'", 
                            "'GROUPS'", "'GROUPING'", "'GROUPING_ID'", "'GROUP_CONCAT'", 
                            "'HASH'", "'HAVING'", "'HELP'", "'HISTOGRAM'", 
                            "'HLL'", "'HLL_UNION'", "'HOST'", "'HOUR'", 
                            "'HOURS'", "'HUB'", "'IDENTIFIED'", "'IF'", 
                            "'IMPERSONATE'", "'IMMEDIATE'", "'IGNORE'", 
                            "'IMAGE'", "'IN'", "'INACTIVE'", "'INCREMENTAL'", 
                            "'INDEX'", "'INDEXES'", "'INFILE'", "'INNER'", 
                            "'INSTALL'", "'INSERT'", "'INT'", "'INTEGER'", 
                            "'INTEGRATION'", "'INTEGRATIONS'", "'INTERMEDIATE'", 
                            "'INTERSECT'", "'INTERVAL'", "'INTO'", "'INVOKER'", 
                            "'GIN'", "'OVERWRITE'", "'IS'", "'ISOLATION'", 
                            "'JOB'", "'JOIN'", "'JSON'", "'KEY'", "'KEYS'", 
                            "'KILL'", "'LABEL'", "'LAG'", "'LARGEINT'", 
                            "'LAST'", "'LAST_VALUE'", "'LATERAL'", "'LEAD'", 
                            "'LEFT'", "'LESS'", "'LEVEL'", "'LIKE'", "'LIMIT'", 
                            "'LIST'", "'LOAD'", "'LOCAL'", "'LOCALTIME'", 
                            "'LOCALTIMESTAMP'", "'LOCATION'", "'LOCATIONS'", 
                            "'LOGS'", "'LOGICAL'", "'MANUAL'", "'MAP'", 
                            "'MAPPING'", "'MAPPINGS'", "'MASKING'", "'MATCH'", 
                            "'MATERIALIZED'", "'MAX'", "'MAXVALUE'", "'MERGE'", 
                            "'MICROSECOND'", "'MILLISECOND'", "'MIN'", "'MINUTE'", 
                            "'MINUTES'", "'MINUS'", "'META'", "'MOD'", "'MODE'", 
                            "'MODIFY'", "'MONTH'", "'NAME'", "'NAMES'", 
                            "'NEGATIVE'", "'NGRAMBF'", "'NO'", "'NODE'", 
                            "'NODES'", "'NONE'", "'NOT'", "'NULL'", "'NULLS'", 
                            "'NUMBER'", "'NUMERIC'", "'OBSERVER'", "'OF'", 
                            "'OFF'", "'OFFSET'", "'ON'", "'ONLY'", "'OPEN'", 
                            "'OPERATE'", "'OPTIMIZE'", "'OPTIMIZER'", "'OPTION'", 
                            "'OR'", "'ORDER'", "'OUTER'", "'OUTFILE'", "'OVER'", 
                            "'?'", "'PARTITION'", "'PARTITIONS'", "'PASSWORD'", 
                            "'PATH'", "'PAUSE'", "'PENDING'", "'PERCENT_RANK'", 
                            "'PERCENTILE'", "'PERCENTILE_UNION'", "'PLAN'", 
                            "'PLUGIN'", "'PLUGINS'", "'PIPE'", "'PIPES'", 
                            "'PIVOT'", "'POLICY'", "'POLICIES'", "'PRECEDING'", 
                            "'PREDICATE'", "'PREPARE'", "'PRIMARY'", "'PRIORITY'", 
                            "'PRIVILEGES'", "'PROBABILITY'", "'PROC'", "'PROCEDURE'", 
                            "'PROCESSLIST'", "'PROFILE'", "'PROFILELIST'", 
                            "'PROPERTIES'", "'PROPERTY'", "'PROVIDER'", 
                            "'PROVIDERS'", "'QUALIFY'", "'QUARTER'", "'QUERY'", 
                            "'QUERIES'", "'QUEUE'", "'QUOTA'", "'RANDOM'", 
                            "'RANGE'", "'RANK'", "'READ'", "'REASON'", "'RECOVER'", 
                            "'REFRESH'", "'REWRITE'", "'REGEXP'", "'RELEASE'", 
                            "'REMOVE'", "'RENAME'", "'REPAIR'", "'REPEATABLE'", 
                            "'REPLACE'", "'REPLACE_IF_NOT_NULL'", "'REPLICA'", 
                            "'REPOSITORY'", "'REPOSITORIES'", "'RESOURCE'", 
                            "'RESOURCES'", "'RESTORE'", "'RESUME'", "'RETAIN'", 
                            "'RETENTION'", "'RETURNS'", "'RETRY'", "'REVOKE'", 
                            "'REVERT'", "'RIGHT'", "'RLIKE'", "'ROLE'", 
                            "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROUTINE'", 
                            "'ROW'", "'ROWS'", "'ROW_NUMBER'", "'RULE'", 
                            "'RULES'", "'RUNNING'", "'SAMPLE'", "'SCHEDULE'", 
                            "'SCHEDULER'", "'SCHEMA'", "'SCHEMAS'", "'SECOND'", 
                            "'SECURITY'", "'SELECT'", "'SEMI'", "'SEPARATOR'", 
                            "'SERIALIZABLE'", "'SESSION'", "'SET'", "'SETS'", 
                            "'SET_VAR'", "'SIGNED'", "'SKIP_HEADER'", "'SHOW'", 
                            "'SMALLINT'", "'SNAPSHOT'", "'SNAPSHOTS'", "'SQLBLACKLIST'", 
                            "'STARROCKS'", "'START'", "'STATS'", "'STATUS'", 
                            "'STOP'", "'STORAGE'", "'STREAM'", "'STRING'", 
                            "'TEXT'", "'SUBMIT'", "'SUM'", "'SUSPEND'", 
                            "'SYNC'", "'SYSTEM'", "'SYSTEM_TIME'", "'SWAP'", 
                            "'STRUCT'", "'TABLE'", "'TABLES'", "'TABLET'", 
                            "'TABLETS'", "'TAG'", "'TASK'", "'TEMPORARY'", 
                            "'TERMINATED'", "'THAN'", "'THEN'", "'TIME'", 
                            "'TIMES'", "'TIMESTAMP'", "'TIMESTAMPADD'", 
                            "'TIMESTAMPDIFF'", "'TINYINT'", "'TRANSACTION'", 
                            "'TRANSLATE'", "'TO'", "'TRACE'", "'TRIGGERS'", 
                            "'TRIM_SPACE'", "'TRUE'", "'TRUNCATE'", "'TYPE'", 
                            "'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNION'", 
                            "'UNIQUE'", "'UNINSTALL'", "'UNSET'", "'UNSIGNED'", 
                            "'UPDATE'", "'USAGE'", "'USE'", "'USER'", "'USERS'", 
                            "'USING'", "'VALUE'", "'VALUES'", "'VARBINARY'", 
                            "'VARCHAR'", "'VARIABLES'", "'VECTOR'", "'VERBOSE'", 
                            "'VERSION'", "'VIEW'", "'VIEWS'", "'VOLUME'", 
                            "'VOLUMES'", "'WAREHOUSE'", "'WAREHOUSES'", 
                            "'WARNINGS'", "'WEEK'", "'WHEN'", "'WHERE'", 
                            "'WHITELIST'", "'WITH'", "'WORK'", "'WRITE'", 
                            "'YEAR'", "'LOCK'", "'UNLOCK'", "'LOW_PRIORITY'", 
                            "'DISK'", "'BEFORE'", "'$$'", "'FIELD'", "'PERSISTENT'", 
                            "'='", null, "'<'", "'<='", "'>'", "'>='", "'<=>'", 
                            "'[*]'", "'+'", "'-'", "'*'", "'/'", "'%'", 
                            "'||'", "'&&'", "'!'", "'DIV'", "'&'", "'|'", 
                            "'^'", "'~'", "'BITSHIFTLEFT'", "'BITSHIFTRIGHT'", 
                            "'BITSHIFTRIGHTLOGICAL'", "'->'", "'@'", null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, "';'", "'...'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, "ACCESS", "ACTIVE", "ADD", 
                             "ADMIN", "ADVISOR", "AFTER", "AGGREGATE", "ALL", 
                             "ALTER", "ANALYZE", "AND", "ANTI", "APPLY", 
                             "ARRAY", "ARRAY_AGG", "ARRAY_AGG_DISTINCT", 
                             "AS", "ASC", "ASYNC", "AUTHORS", "AUTHENTICATION", 
                             "AUTOMATED", "AUTO_INCREMENT", "AVG", "BACKEND", 
                             "BACKENDS", "BACKUP", "BASE", "BASELINE", "BEGIN", 
                             "BETWEEN", "BIGINT", "BINARY", "BITMAP", "BITMAP_UNION", 
                             "BLACKHOLE", "BLACKLIST", "BODY", "BOOLEAN", 
                             "BOTH", "BRANCH", "BROKER", "BUCKETS", "BUILTIN", 
                             "BY", "CACHE", "CANCEL", "CASE", "CAST", "CATALOG", 
                             "CATALOGS", "CEIL", "CHAIN", "CHAR", "CHARACTER", 
                             "CHARSET", "CHECK", "CLEAN", "CLEAR", "CLUSTER", 
                             "CLUSTERS", "COLLATE", "COLLATION", "COLUMN", 
                             "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", 
                             "COMPACT", "COMPACTION", "COMPUTE", "CONFIG", 
                             "CONNECTION", "CONSISTENT", "CONVERT", "COSTS", 
                             "COUNT", "CREATE", "CROSS", "CUBE", "CUME_DIST", 
                             "CUMULATIVE", "CURRENT", "CURRENT_DATE", "CURRENT_ROLE", 
                             "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                             "DATA", "DATACACHE", "DATABASE", "DATABASES", 
                             "DATE", "DATETIME", "DAY", "DAYS", "DEALLOCATE", 
                             "DECIMAL", "DECIMALV2", "DECIMAL32", "DECIMAL64", 
                             "DECIMAL128", "DECOMMISSION", "DEFAULT", "DELETE", 
                             "DENSE_RANK", "DEFERRED", "DIALECT", "DICTIONARY", 
                             "DICTIONARY_GET", "NTILE", "DESC", "DESCRIBE", 
                             "DISABLE", "DISTINCT", "DISTRIBUTED", "DISTRIBUTION", 
                             "DOUBLE", "DROP", "DUAL", "DUPLICATE", "DYNAMIC", 
                             "ELSE", "ENABLE", "ENCLOSE", "END", "ENGINE", 
                             "ENGINES", "ERRORS", "ESCAPE", "EVENTS", "EXCEPT", 
                             "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT", "EXTERNAL", 
                             "EXTRACT", "EVERY", "FAILPOINT", "FAILPOINTS", 
                             "FALSE", "FIELDS", "FILE", "FILES", "FILTER", 
                             "FIRST", "FIRST_VALUE", "FLOAT", "FLOOR", "FN", 
                             "FOLLOWING", "FOLLOWER", "FOR", "FORCE", "FORMAT", 
                             "FREE", "FROM", "FRONTEND", "FRONTENDS", "FULL", 
                             "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANT", 
                             "GRANTS", "GROUP", "GROUPS", "GROUPING", "GROUPING_ID", 
                             "GROUP_CONCAT", "HASH", "HAVING", "HELP", "HISTOGRAM", 
                             "HLL", "HLL_UNION", "HOST", "HOUR", "HOURS", 
                             "HUB", "IDENTIFIED", "IF", "IMPERSONATE", "IMMEDIATE", 
                             "IGNORE", "IMAGE", "IN", "INACTIVE", "INCREMENTAL", 
                             "INDEX", "INDEXES", "INFILE", "INNER", "INSTALL", 
                             "INSERT", "INT", "INTEGER", "INTEGRATION", 
                             "INTEGRATIONS", "INTERMEDIATE", "INTERSECT", 
                             "INTERVAL", "INTO", "INVOKER", "GIN", "OVERWRITE", 
                             "IS", "ISOLATION", "JOB", "JOIN", "JSON", "KEY", 
                             "KEYS", "KILL", "LABEL", "LAG", "LARGEINT", 
                             "LAST", "LAST_VALUE", "LATERAL", "LEAD", "LEFT", 
                             "LESS", "LEVEL", "LIKE", "LIMIT", "LIST", "LOAD", 
                             "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", 
                             "LOCATIONS", "LOGS", "LOGICAL", "MANUAL", "MAP", 
                             "MAPPING", "MAPPINGS", "MASKING", "MATCH", 
                             "MATERIALIZED", "MAX", "MAXVALUE", "MERGE", 
                             "MICROSECOND", "MILLISECOND", "MIN", "MINUTE", 
                             "MINUTES", "MINUS", "META", "MOD", "MODE", 
                             "MODIFY", "MONTH", "NAME", "NAMES", "NEGATIVE", 
                             "NGRAMBF", "NO", "NODE", "NODES", "NONE", "NOT", 
                             "NULL", "NULLS", "NUMBER", "NUMERIC", "OBSERVER", 
                             "OF", "OFF", "OFFSET", "ON", "ONLY", "OPEN", 
                             "OPERATE", "OPTIMIZE", "OPTIMIZER", "OPTION", 
                             "OR", "ORDER", "OUTER", "OUTFILE", "OVER", 
                             "PARAMETER", "PARTITION", "PARTITIONS", "PASSWORD", 
                             "PATH", "PAUSE", "PENDING", "PERCENT_RANK", 
                             "PERCENTILE", "PERCENTILE_UNION", "PLAN", "PLUGIN", 
                             "PLUGINS", "PIPE", "PIPES", "PIVOT", "POLICY", 
                             "POLICIES", "PRECEDING", "PREDICATE", "PREPARE", 
                             "PRIMARY", "PRIORITY", "PRIVILEGES", "PROBABILITY", 
                             "PROC", "PROCEDURE", "PROCESSLIST", "PROFILE", 
                             "PROFILELIST", "PROPERTIES", "PROPERTY", "PROVIDER", 
                             "PROVIDERS", "QUALIFY", "QUARTER", "QUERY", 
                             "QUERIES", "QUEUE", "QUOTA", "RANDOM", "RANGE", 
                             "RANK", "READ", "REASON", "RECOVER", "REFRESH", 
                             "REWRITE", "REGEXP", "RELEASE", "REMOVE", "RENAME", 
                             "REPAIR", "REPEATABLE", "REPLACE", "REPLACE_IF_NOT_NULL", 
                             "REPLICA", "REPOSITORY", "REPOSITORIES", "RESOURCE", 
                             "RESOURCES", "RESTORE", "RESUME", "RETAIN", 
                             "RETENTION", "RETURNS", "RETRY", "REVOKE", 
                             "REVERT", "RIGHT", "RLIKE", "ROLE", "ROLES", 
                             "ROLLBACK", "ROLLUP", "ROUTINE", "ROW", "ROWS", 
                             "ROW_NUMBER", "RULE", "RULES", "RUNNING", "SAMPLE", 
                             "SCHEDULE", "SCHEDULER", "SCHEMA", "SCHEMAS", 
                             "SECOND", "SECURITY", "SELECT", "SEMI", "SEPARATOR", 
                             "SERIALIZABLE", "SESSION", "SET", "SETS", "SET_VAR", 
                             "SIGNED", "SKIP_HEADER", "SHOW", "SMALLINT", 
                             "SNAPSHOT", "SNAPSHOTS", "SQLBLACKLIST", "STARROCKS", 
                             "START", "STATS", "STATUS", "STOP", "STORAGE", 
                             "STREAM", "STRING", "TEXT", "SUBMIT", "SUM", 
                             "SUSPEND", "SYNC", "SYSTEM", "SYSTEM_TIME", 
                             "SWAP", "STRUCT", "TABLE", "TABLES", "TABLET", 
                             "TABLETS", "TAG", "TASK", "TEMPORARY", "TERMINATED", 
                             "THAN", "THEN", "TIME", "TIMES", "TIMESTAMP", 
                             "TIMESTAMPADD", "TIMESTAMPDIFF", "TINYINT", 
                             "TRANSACTION", "TRANSLATE", "TO", "TRACE", 
                             "TRIGGERS", "TRIM_SPACE", "TRUE", "TRUNCATE", 
                             "TYPE", "TYPES", "UNBOUNDED", "UNCOMMITTED", 
                             "UNION", "UNIQUE", "UNINSTALL", "UNSET", "UNSIGNED", 
                             "UPDATE", "USAGE", "USE", "USER", "USERS", 
                             "USING", "VALUE", "VALUES", "VARBINARY", "VARCHAR", 
                             "VARIABLES", "VECTOR", "VERBOSE", "VERSION", 
                             "VIEW", "VIEWS", "VOLUME", "VOLUMES", "WAREHOUSE", 
                             "WAREHOUSES", "WARNINGS", "WEEK", "WHEN", "WHERE", 
                             "WHITELIST", "WITH", "WORK", "WRITE", "YEAR", 
                             "LOCK", "UNLOCK", "LOW_PRIORITY", "DISK", "BEFORE", 
                             "DOUBLE_DOLLAR", "FIELD", "PERSISTENT", "EQ", 
                             "NEQ", "LT", "LTE", "GT", "GTE", "EQ_FOR_NULL", 
                             "ARRAY_ELEMENT", "PLUS_SYMBOL", "MINUS_SYMBOL", 
                             "ASTERISK_SYMBOL", "SLASH_SYMBOL", "PERCENT_SYMBOL", 
                             "LOGICAL_OR", "LOGICAL_AND", "LOGICAL_NOT", 
                             "INT_DIV", "BITAND", "BITOR", "BITXOR", "BITNOT", 
                             "BIT_SHIFT_LEFT", "BIT_SHIFT_RIGHT", "BIT_SHIFT_RIGHT_LOGICAL", 
                             "ARROW", "AT", "INTEGER_VALUE", "DECIMAL_VALUE", 
                             "DOUBLE_VALUE", "SINGLE_QUOTED_TEXT", "DOUBLE_QUOTED_TEXT", 
                             "BINARY_SINGLE_QUOTED_TEXT", "BINARY_DOUBLE_QUOTED_TEXT", 
                             "LETTER_IDENTIFIER", "DIGIT_IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
                             "DOT_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", 
                             "OPTIMIZER_HINT", "SEMICOLON", "DOTDOTDOT", 
                             "WS", "ATTACHMENT", "CONCAT" ];
    static ruleNames = [ "sqlStatements", "singleStatement", "emptyStatement", 
                         "statement", "useDatabaseStatement", "useCatalogStatement", 
                         "setCatalogStatement", "showDatabasesStatement", 
                         "alterDbQuotaStatement", "createDbStatement", "dropDbStatement", 
                         "showCreateDbStatement", "alterDatabaseRenameStatement", 
                         "recoverDbStmt", "showDataStmt", "createTableStatement", 
                         "columnDesc", "charsetName", "defaultDesc", "generatedColumnDesc", 
                         "indexDesc", "engineDesc", "charsetDesc", "collateDesc", 
                         "keyDesc", "orderByDesc", "columnNullable", "typeWithNullable", 
                         "aggStateDesc", "aggDesc", "rollupDesc", "rollupItem", 
                         "dupKeys", "fromRollup", "orReplace", "ifNotExists", 
                         "createTableAsSelectStatement", "dropTableStatement", 
                         "cleanTemporaryTableStatement", "alterTableStatement", 
                         "createIndexStatement", "dropIndexStatement", "indexType", 
                         "showTableStatement", "showTemporaryTablesStatement", 
                         "showCreateTableStatement", "showColumnStatement", 
                         "showTableStatusStatement", "refreshTableStatement", 
                         "showAlterStatement", "descTableStatement", "createTableLikeStatement", 
                         "showIndexStatement", "recoverTableStatement", 
                         "truncateTableStatement", "cancelAlterTableStatement", 
                         "showPartitionsStatement", "recoverPartitionStatement", 
                         "createViewStatement", "alterViewStatement", "dropViewStatement", 
                         "columnNameWithComment", "submitTaskStatement", 
                         "taskClause", "dropTaskStatement", "taskScheduleDesc", 
                         "createMaterializedViewStatement", "mvPartitionExprs", 
                         "materializedViewDesc", "showMaterializedViewsStatement", 
                         "dropMaterializedViewStatement", "alterMaterializedViewStatement", 
                         "refreshMaterializedViewStatement", "cancelRefreshMaterializedViewStatement", 
                         "adminSetConfigStatement", "adminSetReplicaStatusStatement", 
                         "adminShowConfigStatement", "adminShowReplicaDistributionStatement", 
                         "adminShowReplicaStatusStatement", "adminRepairTableStatement", 
                         "adminCancelRepairTableStatement", "adminCheckTabletsStatement", 
                         "adminSetPartitionVersion", "killStatement", "syncStatement", 
                         "adminSetAutomatedSnapshotOnStatement", "adminSetAutomatedSnapshotOffStatement", 
                         "alterSystemStatement", "cancelAlterSystemStatement", 
                         "showComputeNodesStatement", "createExternalCatalogStatement", 
                         "showCreateExternalCatalogStatement", "dropExternalCatalogStatement", 
                         "showCatalogsStatement", "alterCatalogStatement", 
                         "createStorageVolumeStatement", "typeDesc", "locationsDesc", 
                         "showStorageVolumesStatement", "dropStorageVolumeStatement", 
                         "alterStorageVolumeStatement", "alterStorageVolumeClause", 
                         "modifyStorageVolumePropertiesClause", "modifyStorageVolumeCommentClause", 
                         "descStorageVolumeStatement", "setDefaultStorageVolumeStatement", 
                         "updateFailPointStatusStatement", "showFailPointStatement", 
                         "createDictionaryStatement", "dropDictionaryStatement", 
                         "refreshDictionaryStatement", "showDictionaryStatement", 
                         "cancelRefreshDictionaryStatement", "dictionaryColumnDesc", 
                         "dictionaryName", "alterClause", "addFrontendClause", 
                         "dropFrontendClause", "modifyFrontendHostClause", 
                         "addBackendClause", "dropBackendClause", "decommissionBackendClause", 
                         "modifyBackendClause", "addComputeNodeClause", 
                         "dropComputeNodeClause", "modifyBrokerClause", 
                         "alterLoadErrorUrlClause", "createImageClause", 
                         "cleanTabletSchedQClause", "decommissionDiskClause", 
                         "cancelDecommissionDiskClause", "disableDiskClause", 
                         "cancelDisableDiskClause", "createIndexClause", 
                         "dropIndexClause", "tableRenameClause", "swapTableClause", 
                         "modifyPropertiesClause", "modifyCommentClause", 
                         "optimizeClause", "addColumnClause", "addColumnsClause", 
                         "dropColumnClause", "modifyColumnClause", "columnRenameClause", 
                         "reorderColumnsClause", "rollupRenameClause", "compactionClause", 
                         "subfieldName", "nestedFieldName", "addFieldClause", 
                         "dropFieldClause", "createOrReplaceTagClause", 
                         "createOrReplaceBranchClause", "dropBranchClause", 
                         "dropTagClause", "tableOperationClause", "tagOptions", 
                         "branchOptions", "snapshotRetention", "refRetain", 
                         "maxSnapshotAge", "minSnapshotsToKeep", "snapshotId", 
                         "timeUnit", "integer_list", "dropPersistentIndexClause", 
                         "addPartitionClause", "dropPartitionClause", "truncatePartitionClause", 
                         "modifyPartitionClause", "replacePartitionClause", 
                         "partitionRenameClause", "insertStatement", "insertLabelOrColumnAliases", 
                         "columnAliasesOrByName", "updateStatement", "deleteStatement", 
                         "createRoutineLoadStatement", "alterRoutineLoadStatement", 
                         "dataSource", "loadProperties", "colSeparatorProperty", 
                         "rowDelimiterProperty", "importColumns", "columnProperties", 
                         "jobProperties", "dataSourceProperties", "stopRoutineLoadStatement", 
                         "resumeRoutineLoadStatement", "pauseRoutineLoadStatement", 
                         "showRoutineLoadStatement", "showRoutineLoadTaskStatement", 
                         "showCreateRoutineLoadStatement", "showStreamLoadStatement", 
                         "analyzeStatement", "analyzeColumnClause", "dropStatsStatement", 
                         "histogramStatement", "analyzeHistogramStatement", 
                         "dropHistogramStatement", "createAnalyzeStatement", 
                         "dropAnalyzeJobStatement", "showAnalyzeStatement", 
                         "showStatsMetaStatement", "showHistogramMetaStatement", 
                         "killAnalyzeStatement", "analyzeProfileStatement", 
                         "createBaselinePlanStatement", "dropBaselinePlanStatement", 
                         "showBaselinePlanStatement", "createResourceGroupStatement", 
                         "dropResourceGroupStatement", "alterResourceGroupStatement", 
                         "showResourceGroupStatement", "showResourceGroupUsageStatement", 
                         "createResourceStatement", "alterResourceStatement", 
                         "dropResourceStatement", "showResourceStatement", 
                         "classifier", "showFunctionsStatement", "dropFunctionStatement", 
                         "createFunctionStatement", "inlineFunction", "typeList", 
                         "loadStatement", "labelName", "dataDescList", "dataDesc", 
                         "formatProps", "brokerDesc", "resourceDesc", "showLoadStatement", 
                         "showLoadWarningsStatement", "cancelLoadStatement", 
                         "alterLoadStatement", "cancelCompactionStatement", 
                         "showAuthorStatement", "showBackendsStatement", 
                         "showBrokerStatement", "showCharsetStatement", 
                         "showCollationStatement", "showDeleteStatement", 
                         "showDynamicPartitionStatement", "showEventsStatement", 
                         "showEnginesStatement", "showFrontendsStatement", 
                         "showPluginsStatement", "showRepositoriesStatement", 
                         "showOpenTableStatement", "showPrivilegesStatement", 
                         "showProcedureStatement", "showProcStatement", 
                         "showProcesslistStatement", "showProfilelistStatement", 
                         "showRunningQueriesStatement", "showStatusStatement", 
                         "showTabletStatement", "showTransactionStatement", 
                         "showTriggersStatement", "showUserPropertyStatement", 
                         "showVariablesStatement", "showWarningStatement", 
                         "helpStatement", "createUserStatement", "dropUserStatement", 
                         "alterUserStatement", "showUserStatement", "showAuthenticationStatement", 
                         "executeAsStatement", "createRoleStatement", "alterRoleStatement", 
                         "dropRoleStatement", "showRolesStatement", "grantRoleStatement", 
                         "revokeRoleStatement", "setRoleStatement", "setDefaultRoleStatement", 
                         "grantRevokeClause", "grantPrivilegeStatement", 
                         "revokePrivilegeStatement", "showGrantsStatement", 
                         "authOption", "privObjectName", "privObjectNameList", 
                         "privFunctionObjectNameList", "privilegeTypeList", 
                         "privilegeType", "privObjectType", "privObjectTypePlural", 
                         "createSecurityIntegrationStatement", "alterSecurityIntegrationStatement", 
                         "dropSecurityIntegrationStatement", "showSecurityIntegrationStatement", 
                         "showCreateSecurityIntegrationStatement", "createGroupProviderStatement", 
                         "dropGroupProviderStatement", "showGroupProvidersStatement", 
                         "showCreateGroupProviderStatement", "backupStatement", 
                         "cancelBackupStatement", "showBackupStatement", 
                         "restoreStatement", "cancelRestoreStatement", "showRestoreStatement", 
                         "showSnapshotStatement", "createRepositoryStatement", 
                         "dropRepositoryStatement", "addSqlBlackListStatement", 
                         "delSqlBlackListStatement", "showSqlBlackListStatement", 
                         "showWhiteListStatement", "addBackendBlackListStatement", 
                         "delBackendBlackListStatement", "showBackendBlackListStatement", 
                         "dataCacheTarget", "createDataCacheRuleStatement", 
                         "showDataCacheRulesStatement", "dropDataCacheRuleStatement", 
                         "clearDataCacheRulesStatement", "dataCacheSelectStatement", 
                         "exportStatement", "cancelExportStatement", "showExportStatement", 
                         "installPluginStatement", "uninstallPluginStatement", 
                         "createFileStatement", "dropFileStatement", "showSmallFilesStatement", 
                         "createPipeStatement", "dropPipeStatement", "alterPipeClause", 
                         "alterPipeStatement", "descPipeStatement", "showPipeStatement", 
                         "setStatement", "setVar", "transaction_characteristics", 
                         "transaction_access_mode", "isolation_level", "isolation_types", 
                         "setExprOrDefault", "setUserPropertyStatement", 
                         "roleList", "executeScriptStatement", "unsupportedStatement", 
                         "lock_item", "lock_type", "alterPlanAdvisorAddStatement", 
                         "truncatePlanAdvisorStatement", "alterPlanAdvisorDropStatement", 
                         "showPlanAdvisorStatement", "createWarehouseStatement", 
                         "dropWarehouseStatement", "suspendWarehouseStatement", 
                         "resumeWarehouseStatement", "setWarehouseStatement", 
                         "showWarehousesStatement", "showClustersStatement", 
                         "showNodesStatement", "alterWarehouseStatement", 
                         "beginStatement", "commitStatement", "rollbackStatement", 
                         "translateStatement", "dialect", "translateSQL", 
                         "queryStatement", "queryRelation", "withClause", 
                         "queryNoWith", "queryPeriod", "periodType", "queryPrimary", 
                         "subquery", "rowConstructor", "sortItem", "limitConstExpr", 
                         "limitElement", "querySpecification", "fromClause", 
                         "groupingElement", "groupingSet", "commonTableExpression", 
                         "setQuantifier", "selectItem", "relations", "relation", 
                         "relationPrimary", "pivotClause", "pivotAggregationExpression", 
                         "pivotValue", "sampleClause", "argumentList", "namedArgumentList", 
                         "namedArgument", "joinRelation", "crossOrInnerJoinType", 
                         "outerAndSemiJoinType", "bracketHint", "hintMap", 
                         "joinCriteria", "columnAliases", "partitionNames", 
                         "keyPartitions", "tabletList", "prepareStatement", 
                         "prepareSql", "executeStatement", "deallocateStatement", 
                         "replicaList", "expressionsWithDefault", "expressionOrDefault", 
                         "mapExpressionList", "mapExpression", "expressionSingleton", 
                         "expression", "expressionList", "booleanExpression", 
                         "predicate", "tupleInSubquery", "predicateOperations", 
                         "valueExpression", "primaryExpression", "literalExpression", 
                         "functionCall", "aggregationFunction", "userVariable", 
                         "systemVariable", "columnReference", "informationFunctionExpression", 
                         "specialDateTimeExpression", "specialFunctionExpression", 
                         "windowFunction", "whenClause", "over", "ignoreNulls", 
                         "windowFrame", "frameBound", "backupRestoreObjectDesc", 
                         "tableDesc", "backupRestoreTableDesc", "explainDesc", 
                         "optimizerTrace", "partitionExpr", "partitionDesc", 
                         "listPartitionDesc", "singleItemListPartitionDesc", 
                         "multiItemListPartitionDesc", "multiListPartitionValues", 
                         "singleListPartitionValues", "listPartitionValues", 
                         "listPartitionValue", "stringList", "literalExpressionList", 
                         "rangePartitionDesc", "singleRangePartition", "multiRangePartition", 
                         "partitionRangeDesc", "partitionKeyDesc", "partitionValueList", 
                         "keyPartition", "partitionValue", "distributionClause", 
                         "distributionDesc", "refreshSchemeDesc", "statusDesc", 
                         "properties", "extProperties", "propertyList", 
                         "userPropertyList", "property", "inlineProperties", 
                         "inlineProperty", "varType", "comment", "outfile", 
                         "fileFormat", "string", "binary", "comparisonOperator", 
                         "booleanValue", "interval", "taskInterval", "taskUnitIdentifier", 
                         "unitIdentifier", "unitBoundary", "type", "arrayType", 
                         "mapType", "subfieldDesc", "subfieldDescs", "structType", 
                         "typeParameter", "baseType", "decimalType", "qualifiedName", 
                         "tableName", "writeBranch", "identifier", "identifierWithAlias", 
                         "identifierWithAliasList", "identifierList", "identifierOrString", 
                         "identifierOrStringList", "identifierOrStringOrStar", 
                         "user", "assignment", "assignmentList", "number", 
                         "nonReserved" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = StarRocksParser.ruleNames;
        this.literalNames = StarRocksParser.literalNames;
        this.symbolicNames = StarRocksParser.symbolicNames;

        private long sqlMode = com.starrocks.qe.SqlModeHelper.MODE_DEFAULT;
        public void setSqlMode(long newSqlMode) {
            sqlMode = newSqlMode;
        }

    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 374:
    	    		return this.queryPrimary_sempred(localctx, predIndex);
    	case 417:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 419:
    	    		return this.booleanExpression_sempred(localctx, predIndex);
    	case 423:
    	    		return this.valueExpression_sempred(localctx, predIndex);
    	case 424:
    	    		return this.primaryExpression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    queryPrimary_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 2);
    		case 3:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    booleanExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 3);
    		case 5:
    			return this.precpred(this._ctx, 2);
    		case 6:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    valueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 8);
    		case 8:
    			return this.precpred(this._ctx, 7);
    		case 9:
    			return this.precpred(this._ctx, 6);
    		case 10:
    			return this.precpred(this._ctx, 5);
    		case 11:
    			return this.precpred(this._ctx, 4);
    		case 12:
    			return this.precpred(this._ctx, 3);
    		case 13:
    			return this.precpred(this._ctx, 2);
    		case 14:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    primaryExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 15:
    			return this.precpred(this._ctx, 19);
    		case 16:
    			return this.precpred(this._ctx, 1);
    		case 17:
    			return this.precpred(this._ctx, 23);
    		case 18:
    			return this.precpred(this._ctx, 20);
    		case 19:
    			return this.precpred(this._ctx, 6);
    		case 20:
    			return this.precpred(this._ctx, 5);
    		case 21:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	sqlStatements() {
	    let localctx = new SqlStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, StarRocksParser.RULE_sqlStatements);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1025; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1024;
	            this.singleStatement();
	            this.state = 1027; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 1597444) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 2149056521) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 524545) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 4292865) !== 0) || ((((_la - 143)) & ~0x1f) === 0 && ((1 << (_la - 143)) & 13) !== 0) || ((((_la - 175)) & ~0x1f) === 0 && ((1 << (_la - 175)) & 3221225985) !== 0) || _la===225 || _la===239 || _la===302 || _la===317 || ((((_la - 342)) & ~0x1f) === 0 && ((1 << (_la - 342)) & 272826371) !== 0) || ((((_la - 386)) & ~0x1f) === 0 && ((1 << (_la - 386)) & 218694689) !== 0) || ((((_la - 435)) & ~0x1f) === 0 && ((1 << (_la - 435)) & 335941) !== 0) || ((((_la - 476)) & ~0x1f) === 0 && ((1 << (_la - 476)) & 49) !== 0) || _la===528);
	        this.state = 1029;
	        this.match(StarRocksParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleStatement() {
	    let localctx = new SingleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, StarRocksParser.RULE_singleStatement);
	    var _la = 0;
	    try {
	        this.state = 1035;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 13:
	        case 14:
	        case 19:
	        case 20:
	        case 37:
	        case 40:
	        case 56:
	        case 57:
	        case 68:
	        case 69:
	        case 77:
	        case 88:
	        case 107:
	        case 115:
	        case 122:
	        case 123:
	        case 129:
	        case 143:
	        case 145:
	        case 146:
	        case 175:
	        case 184:
	        case 205:
	        case 206:
	        case 225:
	        case 239:
	        case 302:
	        case 317:
	        case 342:
	        case 343:
	        case 358:
	        case 359:
	        case 364:
	        case 370:
	        case 386:
	        case 391:
	        case 396:
	        case 402:
	        case 405:
	        case 410:
	        case 412:
	        case 413:
	        case 435:
	        case 437:
	        case 441:
	        case 448:
	        case 451:
	        case 453:
	        case 476:
	        case 480:
	        case 481:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1031;
	            this.statement();
	            this.state = 1032;
	            _la = this._input.LA(1);
	            if(!(_la===-1 || _la===528)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 528:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1034;
	            this.emptyStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement() {
	    let localctx = new EmptyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, StarRocksParser.RULE_emptyStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1037;
	        this.match(StarRocksParser.SEMICOLON);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, StarRocksParser.RULE_statement);
	    try {
	        this.state = 1273;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1039;
	            this.queryStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1040;
	            this.useDatabaseStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1041;
	            this.useCatalogStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1042;
	            this.setCatalogStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1043;
	            this.showDatabasesStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1044;
	            this.alterDbQuotaStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1045;
	            this.createDbStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1046;
	            this.dropDbStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1047;
	            this.showCreateDbStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1048;
	            this.alterDatabaseRenameStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1049;
	            this.recoverDbStmt();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1050;
	            this.showDataStmt();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1051;
	            this.createTableStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1052;
	            this.createTableAsSelectStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1053;
	            this.createTableLikeStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1054;
	            this.showCreateTableStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1055;
	            this.dropTableStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1056;
	            this.cleanTemporaryTableStatement();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1057;
	            this.recoverTableStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1058;
	            this.truncateTableStatement();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1059;
	            this.showTableStatement();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1060;
	            this.descTableStatement();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1061;
	            this.showTableStatusStatement();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1062;
	            this.showColumnStatement();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1063;
	            this.refreshTableStatement();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1064;
	            this.alterTableStatement();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1065;
	            this.cancelAlterTableStatement();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1066;
	            this.showAlterStatement();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1067;
	            this.showTemporaryTablesStatement();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1068;
	            this.createViewStatement();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1069;
	            this.alterViewStatement();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1070;
	            this.dropViewStatement();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1071;
	            this.showPartitionsStatement();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1072;
	            this.recoverPartitionStatement();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1073;
	            this.createIndexStatement();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1074;
	            this.dropIndexStatement();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1075;
	            this.showIndexStatement();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1076;
	            this.submitTaskStatement();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1077;
	            this.dropTaskStatement();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1078;
	            this.createMaterializedViewStatement();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1079;
	            this.showMaterializedViewsStatement();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1080;
	            this.dropMaterializedViewStatement();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1081;
	            this.alterMaterializedViewStatement();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1082;
	            this.refreshMaterializedViewStatement();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 1083;
	            this.cancelRefreshMaterializedViewStatement();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 1084;
	            this.createExternalCatalogStatement();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 1085;
	            this.dropExternalCatalogStatement();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 1086;
	            this.showCatalogsStatement();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 1087;
	            this.showCreateExternalCatalogStatement();
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 1088;
	            this.alterCatalogStatement();
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 1089;
	            this.insertStatement();
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 1090;
	            this.updateStatement();
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 1091;
	            this.deleteStatement();
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 1092;
	            this.createRoutineLoadStatement();
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 1093;
	            this.alterRoutineLoadStatement();
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 1094;
	            this.stopRoutineLoadStatement();
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 1095;
	            this.resumeRoutineLoadStatement();
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 1096;
	            this.pauseRoutineLoadStatement();
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 1097;
	            this.showRoutineLoadStatement();
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 1098;
	            this.showRoutineLoadTaskStatement();
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 1099;
	            this.showCreateRoutineLoadStatement();
	            break;

	        case 62:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 1100;
	            this.showStreamLoadStatement();
	            break;

	        case 63:
	            this.enterOuterAlt(localctx, 63);
	            this.state = 1101;
	            this.adminSetConfigStatement();
	            break;

	        case 64:
	            this.enterOuterAlt(localctx, 64);
	            this.state = 1102;
	            this.adminSetReplicaStatusStatement();
	            break;

	        case 65:
	            this.enterOuterAlt(localctx, 65);
	            this.state = 1103;
	            this.adminShowConfigStatement();
	            break;

	        case 66:
	            this.enterOuterAlt(localctx, 66);
	            this.state = 1104;
	            this.adminShowReplicaDistributionStatement();
	            break;

	        case 67:
	            this.enterOuterAlt(localctx, 67);
	            this.state = 1105;
	            this.adminShowReplicaStatusStatement();
	            break;

	        case 68:
	            this.enterOuterAlt(localctx, 68);
	            this.state = 1106;
	            this.adminRepairTableStatement();
	            break;

	        case 69:
	            this.enterOuterAlt(localctx, 69);
	            this.state = 1107;
	            this.adminCancelRepairTableStatement();
	            break;

	        case 70:
	            this.enterOuterAlt(localctx, 70);
	            this.state = 1108;
	            this.adminCheckTabletsStatement();
	            break;

	        case 71:
	            this.enterOuterAlt(localctx, 71);
	            this.state = 1109;
	            this.adminSetPartitionVersion();
	            break;

	        case 72:
	            this.enterOuterAlt(localctx, 72);
	            this.state = 1110;
	            this.killStatement();
	            break;

	        case 73:
	            this.enterOuterAlt(localctx, 73);
	            this.state = 1111;
	            this.syncStatement();
	            break;

	        case 74:
	            this.enterOuterAlt(localctx, 74);
	            this.state = 1112;
	            this.executeScriptStatement();
	            break;

	        case 75:
	            this.enterOuterAlt(localctx, 75);
	            this.state = 1113;
	            this.adminSetAutomatedSnapshotOnStatement();
	            break;

	        case 76:
	            this.enterOuterAlt(localctx, 76);
	            this.state = 1114;
	            this.adminSetAutomatedSnapshotOffStatement();
	            break;

	        case 77:
	            this.enterOuterAlt(localctx, 77);
	            this.state = 1115;
	            this.alterSystemStatement();
	            break;

	        case 78:
	            this.enterOuterAlt(localctx, 78);
	            this.state = 1116;
	            this.cancelAlterSystemStatement();
	            break;

	        case 79:
	            this.enterOuterAlt(localctx, 79);
	            this.state = 1117;
	            this.showComputeNodesStatement();
	            break;

	        case 80:
	            this.enterOuterAlt(localctx, 80);
	            this.state = 1118;
	            this.analyzeStatement();
	            break;

	        case 81:
	            this.enterOuterAlt(localctx, 81);
	            this.state = 1119;
	            this.dropStatsStatement();
	            break;

	        case 82:
	            this.enterOuterAlt(localctx, 82);
	            this.state = 1120;
	            this.createAnalyzeStatement();
	            break;

	        case 83:
	            this.enterOuterAlt(localctx, 83);
	            this.state = 1121;
	            this.dropAnalyzeJobStatement();
	            break;

	        case 84:
	            this.enterOuterAlt(localctx, 84);
	            this.state = 1122;
	            this.analyzeHistogramStatement();
	            break;

	        case 85:
	            this.enterOuterAlt(localctx, 85);
	            this.state = 1123;
	            this.dropHistogramStatement();
	            break;

	        case 86:
	            this.enterOuterAlt(localctx, 86);
	            this.state = 1124;
	            this.showAnalyzeStatement();
	            break;

	        case 87:
	            this.enterOuterAlt(localctx, 87);
	            this.state = 1125;
	            this.showStatsMetaStatement();
	            break;

	        case 88:
	            this.enterOuterAlt(localctx, 88);
	            this.state = 1126;
	            this.showHistogramMetaStatement();
	            break;

	        case 89:
	            this.enterOuterAlt(localctx, 89);
	            this.state = 1127;
	            this.killAnalyzeStatement();
	            break;

	        case 90:
	            this.enterOuterAlt(localctx, 90);
	            this.state = 1128;
	            this.analyzeProfileStatement();
	            break;

	        case 91:
	            this.enterOuterAlt(localctx, 91);
	            this.state = 1129;
	            this.createResourceGroupStatement();
	            break;

	        case 92:
	            this.enterOuterAlt(localctx, 92);
	            this.state = 1130;
	            this.dropResourceGroupStatement();
	            break;

	        case 93:
	            this.enterOuterAlt(localctx, 93);
	            this.state = 1131;
	            this.alterResourceGroupStatement();
	            break;

	        case 94:
	            this.enterOuterAlt(localctx, 94);
	            this.state = 1132;
	            this.showResourceGroupStatement();
	            break;

	        case 95:
	            this.enterOuterAlt(localctx, 95);
	            this.state = 1133;
	            this.showResourceGroupUsageStatement();
	            break;

	        case 96:
	            this.enterOuterAlt(localctx, 96);
	            this.state = 1134;
	            this.createResourceStatement();
	            break;

	        case 97:
	            this.enterOuterAlt(localctx, 97);
	            this.state = 1135;
	            this.alterResourceStatement();
	            break;

	        case 98:
	            this.enterOuterAlt(localctx, 98);
	            this.state = 1136;
	            this.dropResourceStatement();
	            break;

	        case 99:
	            this.enterOuterAlt(localctx, 99);
	            this.state = 1137;
	            this.showResourceStatement();
	            break;

	        case 100:
	            this.enterOuterAlt(localctx, 100);
	            this.state = 1138;
	            this.showFunctionsStatement();
	            break;

	        case 101:
	            this.enterOuterAlt(localctx, 101);
	            this.state = 1139;
	            this.dropFunctionStatement();
	            break;

	        case 102:
	            this.enterOuterAlt(localctx, 102);
	            this.state = 1140;
	            this.createFunctionStatement();
	            break;

	        case 103:
	            this.enterOuterAlt(localctx, 103);
	            this.state = 1141;
	            this.loadStatement();
	            break;

	        case 104:
	            this.enterOuterAlt(localctx, 104);
	            this.state = 1142;
	            this.showLoadStatement();
	            break;

	        case 105:
	            this.enterOuterAlt(localctx, 105);
	            this.state = 1143;
	            this.showLoadWarningsStatement();
	            break;

	        case 106:
	            this.enterOuterAlt(localctx, 106);
	            this.state = 1144;
	            this.cancelLoadStatement();
	            break;

	        case 107:
	            this.enterOuterAlt(localctx, 107);
	            this.state = 1145;
	            this.alterLoadStatement();
	            break;

	        case 108:
	            this.enterOuterAlt(localctx, 108);
	            this.state = 1146;
	            this.showAuthorStatement();
	            break;

	        case 109:
	            this.enterOuterAlt(localctx, 109);
	            this.state = 1147;
	            this.showBackendsStatement();
	            break;

	        case 110:
	            this.enterOuterAlt(localctx, 110);
	            this.state = 1148;
	            this.showBrokerStatement();
	            break;

	        case 111:
	            this.enterOuterAlt(localctx, 111);
	            this.state = 1149;
	            this.showCharsetStatement();
	            break;

	        case 112:
	            this.enterOuterAlt(localctx, 112);
	            this.state = 1150;
	            this.showCollationStatement();
	            break;

	        case 113:
	            this.enterOuterAlt(localctx, 113);
	            this.state = 1151;
	            this.showDeleteStatement();
	            break;

	        case 114:
	            this.enterOuterAlt(localctx, 114);
	            this.state = 1152;
	            this.showDynamicPartitionStatement();
	            break;

	        case 115:
	            this.enterOuterAlt(localctx, 115);
	            this.state = 1153;
	            this.showEventsStatement();
	            break;

	        case 116:
	            this.enterOuterAlt(localctx, 116);
	            this.state = 1154;
	            this.showEnginesStatement();
	            break;

	        case 117:
	            this.enterOuterAlt(localctx, 117);
	            this.state = 1155;
	            this.showFrontendsStatement();
	            break;

	        case 118:
	            this.enterOuterAlt(localctx, 118);
	            this.state = 1156;
	            this.showPluginsStatement();
	            break;

	        case 119:
	            this.enterOuterAlt(localctx, 119);
	            this.state = 1157;
	            this.showRepositoriesStatement();
	            break;

	        case 120:
	            this.enterOuterAlt(localctx, 120);
	            this.state = 1158;
	            this.showOpenTableStatement();
	            break;

	        case 121:
	            this.enterOuterAlt(localctx, 121);
	            this.state = 1159;
	            this.showPrivilegesStatement();
	            break;

	        case 122:
	            this.enterOuterAlt(localctx, 122);
	            this.state = 1160;
	            this.showProcedureStatement();
	            break;

	        case 123:
	            this.enterOuterAlt(localctx, 123);
	            this.state = 1161;
	            this.showProcStatement();
	            break;

	        case 124:
	            this.enterOuterAlt(localctx, 124);
	            this.state = 1162;
	            this.showProcesslistStatement();
	            break;

	        case 125:
	            this.enterOuterAlt(localctx, 125);
	            this.state = 1163;
	            this.showProfilelistStatement();
	            break;

	        case 126:
	            this.enterOuterAlt(localctx, 126);
	            this.state = 1164;
	            this.showRunningQueriesStatement();
	            break;

	        case 127:
	            this.enterOuterAlt(localctx, 127);
	            this.state = 1165;
	            this.showStatusStatement();
	            break;

	        case 128:
	            this.enterOuterAlt(localctx, 128);
	            this.state = 1166;
	            this.showTabletStatement();
	            break;

	        case 129:
	            this.enterOuterAlt(localctx, 129);
	            this.state = 1167;
	            this.showTransactionStatement();
	            break;

	        case 130:
	            this.enterOuterAlt(localctx, 130);
	            this.state = 1168;
	            this.showTriggersStatement();
	            break;

	        case 131:
	            this.enterOuterAlt(localctx, 131);
	            this.state = 1169;
	            this.showUserPropertyStatement();
	            break;

	        case 132:
	            this.enterOuterAlt(localctx, 132);
	            this.state = 1170;
	            this.showVariablesStatement();
	            break;

	        case 133:
	            this.enterOuterAlt(localctx, 133);
	            this.state = 1171;
	            this.showWarningStatement();
	            break;

	        case 134:
	            this.enterOuterAlt(localctx, 134);
	            this.state = 1172;
	            this.helpStatement();
	            break;

	        case 135:
	            this.enterOuterAlt(localctx, 135);
	            this.state = 1173;
	            this.createUserStatement();
	            break;

	        case 136:
	            this.enterOuterAlt(localctx, 136);
	            this.state = 1174;
	            this.dropUserStatement();
	            break;

	        case 137:
	            this.enterOuterAlt(localctx, 137);
	            this.state = 1175;
	            this.alterUserStatement();
	            break;

	        case 138:
	            this.enterOuterAlt(localctx, 138);
	            this.state = 1176;
	            this.showUserStatement();
	            break;

	        case 139:
	            this.enterOuterAlt(localctx, 139);
	            this.state = 1177;
	            this.showAuthenticationStatement();
	            break;

	        case 140:
	            this.enterOuterAlt(localctx, 140);
	            this.state = 1178;
	            this.executeAsStatement();
	            break;

	        case 141:
	            this.enterOuterAlt(localctx, 141);
	            this.state = 1179;
	            this.createRoleStatement();
	            break;

	        case 142:
	            this.enterOuterAlt(localctx, 142);
	            this.state = 1180;
	            this.alterRoleStatement();
	            break;

	        case 143:
	            this.enterOuterAlt(localctx, 143);
	            this.state = 1181;
	            this.dropRoleStatement();
	            break;

	        case 144:
	            this.enterOuterAlt(localctx, 144);
	            this.state = 1182;
	            this.showRolesStatement();
	            break;

	        case 145:
	            this.enterOuterAlt(localctx, 145);
	            this.state = 1183;
	            this.grantRoleStatement();
	            break;

	        case 146:
	            this.enterOuterAlt(localctx, 146);
	            this.state = 1184;
	            this.revokeRoleStatement();
	            break;

	        case 147:
	            this.enterOuterAlt(localctx, 147);
	            this.state = 1185;
	            this.setRoleStatement();
	            break;

	        case 148:
	            this.enterOuterAlt(localctx, 148);
	            this.state = 1186;
	            this.setDefaultRoleStatement();
	            break;

	        case 149:
	            this.enterOuterAlt(localctx, 149);
	            this.state = 1187;
	            this.grantPrivilegeStatement();
	            break;

	        case 150:
	            this.enterOuterAlt(localctx, 150);
	            this.state = 1188;
	            this.revokePrivilegeStatement();
	            break;

	        case 151:
	            this.enterOuterAlt(localctx, 151);
	            this.state = 1189;
	            this.showGrantsStatement();
	            break;

	        case 152:
	            this.enterOuterAlt(localctx, 152);
	            this.state = 1190;
	            this.createSecurityIntegrationStatement();
	            break;

	        case 153:
	            this.enterOuterAlt(localctx, 153);
	            this.state = 1191;
	            this.alterSecurityIntegrationStatement();
	            break;

	        case 154:
	            this.enterOuterAlt(localctx, 154);
	            this.state = 1192;
	            this.dropSecurityIntegrationStatement();
	            break;

	        case 155:
	            this.enterOuterAlt(localctx, 155);
	            this.state = 1193;
	            this.showSecurityIntegrationStatement();
	            break;

	        case 156:
	            this.enterOuterAlt(localctx, 156);
	            this.state = 1194;
	            this.showCreateSecurityIntegrationStatement();
	            break;

	        case 157:
	            this.enterOuterAlt(localctx, 157);
	            this.state = 1195;
	            this.createGroupProviderStatement();
	            break;

	        case 158:
	            this.enterOuterAlt(localctx, 158);
	            this.state = 1196;
	            this.dropGroupProviderStatement();
	            break;

	        case 159:
	            this.enterOuterAlt(localctx, 159);
	            this.state = 1197;
	            this.showGroupProvidersStatement();
	            break;

	        case 160:
	            this.enterOuterAlt(localctx, 160);
	            this.state = 1198;
	            this.showCreateGroupProviderStatement();
	            break;

	        case 161:
	            this.enterOuterAlt(localctx, 161);
	            this.state = 1199;
	            this.backupStatement();
	            break;

	        case 162:
	            this.enterOuterAlt(localctx, 162);
	            this.state = 1200;
	            this.cancelBackupStatement();
	            break;

	        case 163:
	            this.enterOuterAlt(localctx, 163);
	            this.state = 1201;
	            this.showBackupStatement();
	            break;

	        case 164:
	            this.enterOuterAlt(localctx, 164);
	            this.state = 1202;
	            this.restoreStatement();
	            break;

	        case 165:
	            this.enterOuterAlt(localctx, 165);
	            this.state = 1203;
	            this.cancelRestoreStatement();
	            break;

	        case 166:
	            this.enterOuterAlt(localctx, 166);
	            this.state = 1204;
	            this.showRestoreStatement();
	            break;

	        case 167:
	            this.enterOuterAlt(localctx, 167);
	            this.state = 1205;
	            this.showSnapshotStatement();
	            break;

	        case 168:
	            this.enterOuterAlt(localctx, 168);
	            this.state = 1206;
	            this.createRepositoryStatement();
	            break;

	        case 169:
	            this.enterOuterAlt(localctx, 169);
	            this.state = 1207;
	            this.dropRepositoryStatement();
	            break;

	        case 170:
	            this.enterOuterAlt(localctx, 170);
	            this.state = 1208;
	            this.addSqlBlackListStatement();
	            break;

	        case 171:
	            this.enterOuterAlt(localctx, 171);
	            this.state = 1209;
	            this.delSqlBlackListStatement();
	            break;

	        case 172:
	            this.enterOuterAlt(localctx, 172);
	            this.state = 1210;
	            this.showSqlBlackListStatement();
	            break;

	        case 173:
	            this.enterOuterAlt(localctx, 173);
	            this.state = 1211;
	            this.showWhiteListStatement();
	            break;

	        case 174:
	            this.enterOuterAlt(localctx, 174);
	            this.state = 1212;
	            this.addBackendBlackListStatement();
	            break;

	        case 175:
	            this.enterOuterAlt(localctx, 175);
	            this.state = 1213;
	            this.delBackendBlackListStatement();
	            break;

	        case 176:
	            this.enterOuterAlt(localctx, 176);
	            this.state = 1214;
	            this.showBackendBlackListStatement();
	            break;

	        case 177:
	            this.enterOuterAlt(localctx, 177);
	            this.state = 1215;
	            this.createDataCacheRuleStatement();
	            break;

	        case 178:
	            this.enterOuterAlt(localctx, 178);
	            this.state = 1216;
	            this.showDataCacheRulesStatement();
	            break;

	        case 179:
	            this.enterOuterAlt(localctx, 179);
	            this.state = 1217;
	            this.dropDataCacheRuleStatement();
	            break;

	        case 180:
	            this.enterOuterAlt(localctx, 180);
	            this.state = 1218;
	            this.clearDataCacheRulesStatement();
	            break;

	        case 181:
	            this.enterOuterAlt(localctx, 181);
	            this.state = 1219;
	            this.dataCacheSelectStatement();
	            break;

	        case 182:
	            this.enterOuterAlt(localctx, 182);
	            this.state = 1220;
	            this.exportStatement();
	            break;

	        case 183:
	            this.enterOuterAlt(localctx, 183);
	            this.state = 1221;
	            this.cancelExportStatement();
	            break;

	        case 184:
	            this.enterOuterAlt(localctx, 184);
	            this.state = 1222;
	            this.showExportStatement();
	            break;

	        case 185:
	            this.enterOuterAlt(localctx, 185);
	            this.state = 1223;
	            this.installPluginStatement();
	            break;

	        case 186:
	            this.enterOuterAlt(localctx, 186);
	            this.state = 1224;
	            this.uninstallPluginStatement();
	            break;

	        case 187:
	            this.enterOuterAlt(localctx, 187);
	            this.state = 1225;
	            this.createFileStatement();
	            break;

	        case 188:
	            this.enterOuterAlt(localctx, 188);
	            this.state = 1226;
	            this.dropFileStatement();
	            break;

	        case 189:
	            this.enterOuterAlt(localctx, 189);
	            this.state = 1227;
	            this.showSmallFilesStatement();
	            break;

	        case 190:
	            this.enterOuterAlt(localctx, 190);
	            this.state = 1228;
	            this.setStatement();
	            break;

	        case 191:
	            this.enterOuterAlt(localctx, 191);
	            this.state = 1229;
	            this.setUserPropertyStatement();
	            break;

	        case 192:
	            this.enterOuterAlt(localctx, 192);
	            this.state = 1230;
	            this.createStorageVolumeStatement();
	            break;

	        case 193:
	            this.enterOuterAlt(localctx, 193);
	            this.state = 1231;
	            this.alterStorageVolumeStatement();
	            break;

	        case 194:
	            this.enterOuterAlt(localctx, 194);
	            this.state = 1232;
	            this.dropStorageVolumeStatement();
	            break;

	        case 195:
	            this.enterOuterAlt(localctx, 195);
	            this.state = 1233;
	            this.showStorageVolumesStatement();
	            break;

	        case 196:
	            this.enterOuterAlt(localctx, 196);
	            this.state = 1234;
	            this.descStorageVolumeStatement();
	            break;

	        case 197:
	            this.enterOuterAlt(localctx, 197);
	            this.state = 1235;
	            this.setDefaultStorageVolumeStatement();
	            break;

	        case 198:
	            this.enterOuterAlt(localctx, 198);
	            this.state = 1236;
	            this.createPipeStatement();
	            break;

	        case 199:
	            this.enterOuterAlt(localctx, 199);
	            this.state = 1237;
	            this.dropPipeStatement();
	            break;

	        case 200:
	            this.enterOuterAlt(localctx, 200);
	            this.state = 1238;
	            this.alterPipeStatement();
	            break;

	        case 201:
	            this.enterOuterAlt(localctx, 201);
	            this.state = 1239;
	            this.showPipeStatement();
	            break;

	        case 202:
	            this.enterOuterAlt(localctx, 202);
	            this.state = 1240;
	            this.descPipeStatement();
	            break;

	        case 203:
	            this.enterOuterAlt(localctx, 203);
	            this.state = 1241;
	            this.cancelCompactionStatement();
	            break;

	        case 204:
	            this.enterOuterAlt(localctx, 204);
	            this.state = 1242;
	            this.updateFailPointStatusStatement();
	            break;

	        case 205:
	            this.enterOuterAlt(localctx, 205);
	            this.state = 1243;
	            this.showFailPointStatement();
	            break;

	        case 206:
	            this.enterOuterAlt(localctx, 206);
	            this.state = 1244;
	            this.prepareStatement();
	            break;

	        case 207:
	            this.enterOuterAlt(localctx, 207);
	            this.state = 1245;
	            this.executeStatement();
	            break;

	        case 208:
	            this.enterOuterAlt(localctx, 208);
	            this.state = 1246;
	            this.deallocateStatement();
	            break;

	        case 209:
	            this.enterOuterAlt(localctx, 209);
	            this.state = 1247;
	            this.createDictionaryStatement();
	            break;

	        case 210:
	            this.enterOuterAlt(localctx, 210);
	            this.state = 1248;
	            this.dropDictionaryStatement();
	            break;

	        case 211:
	            this.enterOuterAlt(localctx, 211);
	            this.state = 1249;
	            this.refreshDictionaryStatement();
	            break;

	        case 212:
	            this.enterOuterAlt(localctx, 212);
	            this.state = 1250;
	            this.showDictionaryStatement();
	            break;

	        case 213:
	            this.enterOuterAlt(localctx, 213);
	            this.state = 1251;
	            this.cancelRefreshDictionaryStatement();
	            break;

	        case 214:
	            this.enterOuterAlt(localctx, 214);
	            this.state = 1252;
	            this.alterPlanAdvisorAddStatement();
	            break;

	        case 215:
	            this.enterOuterAlt(localctx, 215);
	            this.state = 1253;
	            this.truncatePlanAdvisorStatement();
	            break;

	        case 216:
	            this.enterOuterAlt(localctx, 216);
	            this.state = 1254;
	            this.alterPlanAdvisorDropStatement();
	            break;

	        case 217:
	            this.enterOuterAlt(localctx, 217);
	            this.state = 1255;
	            this.showPlanAdvisorStatement();
	            break;

	        case 218:
	            this.enterOuterAlt(localctx, 218);
	            this.state = 1256;
	            this.createWarehouseStatement();
	            break;

	        case 219:
	            this.enterOuterAlt(localctx, 219);
	            this.state = 1257;
	            this.dropWarehouseStatement();
	            break;

	        case 220:
	            this.enterOuterAlt(localctx, 220);
	            this.state = 1258;
	            this.suspendWarehouseStatement();
	            break;

	        case 221:
	            this.enterOuterAlt(localctx, 221);
	            this.state = 1259;
	            this.resumeWarehouseStatement();
	            break;

	        case 222:
	            this.enterOuterAlt(localctx, 222);
	            this.state = 1260;
	            this.setWarehouseStatement();
	            break;

	        case 223:
	            this.enterOuterAlt(localctx, 223);
	            this.state = 1261;
	            this.showWarehousesStatement();
	            break;

	        case 224:
	            this.enterOuterAlt(localctx, 224);
	            this.state = 1262;
	            this.showClustersStatement();
	            break;

	        case 225:
	            this.enterOuterAlt(localctx, 225);
	            this.state = 1263;
	            this.showNodesStatement();
	            break;

	        case 226:
	            this.enterOuterAlt(localctx, 226);
	            this.state = 1264;
	            this.alterWarehouseStatement();
	            break;

	        case 227:
	            this.enterOuterAlt(localctx, 227);
	            this.state = 1265;
	            this.beginStatement();
	            break;

	        case 228:
	            this.enterOuterAlt(localctx, 228);
	            this.state = 1266;
	            this.commitStatement();
	            break;

	        case 229:
	            this.enterOuterAlt(localctx, 229);
	            this.state = 1267;
	            this.rollbackStatement();
	            break;

	        case 230:
	            this.enterOuterAlt(localctx, 230);
	            this.state = 1268;
	            this.translateStatement();
	            break;

	        case 231:
	            this.enterOuterAlt(localctx, 231);
	            this.state = 1269;
	            this.createBaselinePlanStatement();
	            break;

	        case 232:
	            this.enterOuterAlt(localctx, 232);
	            this.state = 1270;
	            this.dropBaselinePlanStatement();
	            break;

	        case 233:
	            this.enterOuterAlt(localctx, 233);
	            this.state = 1271;
	            this.showBaselinePlanStatement();
	            break;

	        case 234:
	            this.enterOuterAlt(localctx, 234);
	            this.state = 1272;
	            this.unsupportedStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useDatabaseStatement() {
	    let localctx = new UseDatabaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, StarRocksParser.RULE_useDatabaseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1275;
	        this.match(StarRocksParser.USE);
	        this.state = 1276;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useCatalogStatement() {
	    let localctx = new UseCatalogStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, StarRocksParser.RULE_useCatalogStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1278;
	        this.match(StarRocksParser.USE);
	        this.state = 1279;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setCatalogStatement() {
	    let localctx = new SetCatalogStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, StarRocksParser.RULE_setCatalogStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1281;
	        this.match(StarRocksParser.SET);
	        this.state = 1282;
	        this.match(StarRocksParser.CATALOG);
	        this.state = 1283;
	        this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showDatabasesStatement() {
	    let localctx = new ShowDatabasesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, StarRocksParser.RULE_showDatabasesStatement);
	    var _la = 0;
	    try {
	        this.state = 1305;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1285;
	            this.match(StarRocksParser.SHOW);
	            this.state = 1286;
	            this.match(StarRocksParser.DATABASES);
	            this.state = 1289;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===168 || _la===198) {
	                this.state = 1287;
	                _la = this._input.LA(1);
	                if(!(_la===168 || _la===198)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1288;
	                localctx.catalog = this.qualifiedName();
	            }

	            this.state = 1295;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 236:
	            	this.state = 1291;
	            	this.match(StarRocksParser.LIKE);
	            	this.state = 1292;
	            	localctx.pattern = this.string();
	            	break;
	            case 474:
	            	this.state = 1293;
	            	this.match(StarRocksParser.WHERE);
	            	this.state = 1294;
	            	this.expression(0);
	            	break;
	            case -1:
	            case 528:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1297;
	            this.match(StarRocksParser.SHOW);
	            this.state = 1298;
	            this.match(StarRocksParser.SCHEMAS);
	            this.state = 1303;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 236:
	            	this.state = 1299;
	            	this.match(StarRocksParser.LIKE);
	            	this.state = 1300;
	            	localctx.pattern = this.string();
	            	break;
	            case 474:
	            	this.state = 1301;
	            	this.match(StarRocksParser.WHERE);
	            	this.state = 1302;
	            	this.expression(0);
	            	break;
	            case -1:
	            case 528:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDbQuotaStatement() {
	    let localctx = new AlterDbQuotaStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, StarRocksParser.RULE_alterDbQuotaStatement);
	    try {
	        this.state = 1323;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1307;
	            this.match(StarRocksParser.ALTER);
	            this.state = 1308;
	            this.match(StarRocksParser.DATABASE);
	            this.state = 1309;
	            this.identifier();
	            this.state = 1310;
	            this.match(StarRocksParser.SET);
	            this.state = 1311;
	            this.match(StarRocksParser.DATA);
	            this.state = 1312;
	            this.match(StarRocksParser.QUOTA);
	            this.state = 1313;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1315;
	            this.match(StarRocksParser.ALTER);
	            this.state = 1316;
	            this.match(StarRocksParser.DATABASE);
	            this.state = 1317;
	            this.identifier();
	            this.state = 1318;
	            this.match(StarRocksParser.SET);
	            this.state = 1319;
	            this.match(StarRocksParser.REPLICA);
	            this.state = 1320;
	            this.match(StarRocksParser.QUOTA);
	            this.state = 1321;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDbStatement() {
	    let localctx = new CreateDbStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, StarRocksParser.RULE_createDbStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1325;
	        this.match(StarRocksParser.CREATE);
	        this.state = 1326;
	        _la = this._input.LA(1);
	        if(!(_la===101 || _la===382)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1330;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 1327;
	            this.match(StarRocksParser.IF);
	            this.state = 1328;
	            this.match(StarRocksParser.NOT);
	            this.state = 1329;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 1335;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        if(la_===1) {
	            this.state = 1332;
	            localctx.catalog = this.identifier();
	            this.state = 1333;
	            this.match(StarRocksParser.T__0);

	        }
	        this.state = 1337;
	        localctx.database = this.identifier();
	        this.state = 1339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        if(la_===1) {
	            this.state = 1338;
	            this.charsetDesc();

	        }
	        this.state = 1342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===72 || _la===114) {
	            this.state = 1341;
	            this.collateDesc();
	        }

	        this.state = 1345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 1344;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropDbStatement() {
	    let localctx = new DropDbStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, StarRocksParser.RULE_dropDbStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1347;
	        this.match(StarRocksParser.DROP);
	        this.state = 1348;
	        _la = this._input.LA(1);
	        if(!(_la===101 || _la===382)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1351;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 1349;
	            this.match(StarRocksParser.IF);
	            this.state = 1350;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 1356;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        if(la_===1) {
	            this.state = 1353;
	            localctx.catalog = this.identifier();
	            this.state = 1354;
	            this.match(StarRocksParser.T__0);

	        }
	        this.state = 1358;
	        localctx.database = this.identifier();
	        this.state = 1360;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===165) {
	            this.state = 1359;
	            this.match(StarRocksParser.FORCE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCreateDbStatement() {
	    let localctx = new ShowCreateDbStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, StarRocksParser.RULE_showCreateDbStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1362;
	        this.match(StarRocksParser.SHOW);
	        this.state = 1363;
	        this.match(StarRocksParser.CREATE);
	        this.state = 1364;
	        _la = this._input.LA(1);
	        if(!(_la===101 || _la===382)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1365;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabaseRenameStatement() {
	    let localctx = new AlterDatabaseRenameStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, StarRocksParser.RULE_alterDatabaseRenameStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1367;
	        this.match(StarRocksParser.ALTER);
	        this.state = 1368;
	        this.match(StarRocksParser.DATABASE);
	        this.state = 1369;
	        this.identifier();
	        this.state = 1370;
	        this.match(StarRocksParser.RENAME);
	        this.state = 1371;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recoverDbStmt() {
	    let localctx = new RecoverDbStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, StarRocksParser.RULE_recoverDbStmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1373;
	        this.match(StarRocksParser.RECOVER);
	        this.state = 1374;
	        _la = this._input.LA(1);
	        if(!(_la===101 || _la===382)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1375;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showDataStmt() {
	    let localctx = new ShowDataStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, StarRocksParser.RULE_showDataStmt);
	    try {
	        this.state = 1383;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1377;
	            this.match(StarRocksParser.SHOW);
	            this.state = 1378;
	            this.match(StarRocksParser.DATA);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1379;
	            this.match(StarRocksParser.SHOW);
	            this.state = 1380;
	            this.match(StarRocksParser.DATA);
	            this.state = 1381;
	            this.match(StarRocksParser.FROM);
	            this.state = 1382;
	            this.qualifiedName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableStatement() {
	    let localctx = new CreateTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, StarRocksParser.RULE_createTableStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1385;
	        this.match(StarRocksParser.CREATE);
	        this.state = 1387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147 || _la===424) {
	            this.state = 1386;
	            _la = this._input.LA(1);
	            if(!(_la===147 || _la===424)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1389;
	        this.match(StarRocksParser.TABLE);
	        this.state = 1393;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 1390;
	            this.match(StarRocksParser.IF);
	            this.state = 1391;
	            this.match(StarRocksParser.NOT);
	            this.state = 1392;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 1395;
	        this.qualifiedName();
	        this.state = 1396;
	        this.match(StarRocksParser.T__1);
	        this.state = 1397;
	        this.columnDesc();
	        this.state = 1402;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1398;
	                this.match(StarRocksParser.T__2);
	                this.state = 1399;
	                this.columnDesc(); 
	            }
	            this.state = 1404;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
	        }

	        this.state = 1409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 1405;
	            this.match(StarRocksParser.T__2);
	            this.state = 1406;
	            this.indexDesc();
	            this.state = 1411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1412;
	        this.match(StarRocksParser.T__3);
	        this.state = 1414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===137) {
	            this.state = 1413;
	            this.engineDesc();
	        }

	        this.state = 1417;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 7) !== 0) || _la===114) {
	            this.state = 1416;
	            this.charsetDesc();
	        }

	        this.state = 1420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===131 || _la===318 || _la===447) {
	            this.state = 1419;
	            this.keyDesc();
	        }

	        this.state = 1423;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 1422;
	            this.comment();
	        }

	        this.state = 1426;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298) {
	            this.state = 1425;
	            this.partitionDesc();
	        }

	        this.state = 1429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===126) {
	            this.state = 1428;
	            this.distributionDesc();
	        }

	        this.state = 1432;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293) {
	            this.state = 1431;
	            this.orderByDesc();
	        }

	        this.state = 1435;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===371) {
	            this.state = 1434;
	            this.rollupDesc();
	        }

	        this.state = 1438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 1437;
	            this.properties();
	        }

	        this.state = 1441;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===52) {
	            this.state = 1440;
	            this.extProperties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnDesc() {
	    let localctx = new ColumnDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, StarRocksParser.RULE_columnDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1443;
	        this.identifier();
	        this.state = 1445;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        if(la_===1) {
	            this.state = 1444;
	            this.type();

	        }
	        this.state = 1448;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        if(la_===1) {
	            this.state = 1447;
	            this.charsetName();

	        }
	        this.state = 1451;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===223) {
	            this.state = 1450;
	            this.match(StarRocksParser.KEY);
	        }

	        this.state = 1454;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        if(la_===1) {
	            this.state = 1453;
	            this.aggDesc();

	        }
	        this.state = 1457;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===276 || _la===277) {
	            this.state = 1456;
	            this.columnNullable();
	        }

	        this.state = 1462;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 114:
	        	this.state = 1459;
	        	this.defaultDesc();
	        	break;
	        case 33:
	        	this.state = 1460;
	        	this.match(StarRocksParser.AUTO_INCREMENT);
	        	break;
	        case 27:
	        	this.state = 1461;
	        	this.generatedColumnDesc();
	        	break;
	        case -1:
	        case 3:
	        case 4:
	        case 16:
	        case 76:
	        case 157:
	        case 168:
	        case 198:
	        case 327:
	        case 436:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 1464;
	            this.comment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetName() {
	    let localctx = new CharsetNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, StarRocksParser.RULE_charsetName);
	    try {
	        this.state = 1475;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1467;
	            this.match(StarRocksParser.CHAR);
	            this.state = 1468;
	            this.match(StarRocksParser.SET);
	            this.state = 1469;
	            this.identifier();
	            break;
	        case 66:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1470;
	            this.match(StarRocksParser.CHARSET);
	            this.state = 1471;
	            this.identifier();
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1472;
	            this.match(StarRocksParser.CHARACTER);
	            this.state = 1473;
	            this.match(StarRocksParser.SET);
	            this.state = 1474;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultDesc() {
	    let localctx = new DefaultDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, StarRocksParser.RULE_defaultDesc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1477;
	        this.match(StarRocksParser.DEFAULT);
	        this.state = 1487;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 517:
	        case 518:
	            this.state = 1478;
	            this.string();
	            break;
	        case 277:
	            this.state = 1479;
	            this.match(StarRocksParser.NULL);
	            break;
	        case 97:
	            this.state = 1480;
	            this.match(StarRocksParser.CURRENT_TIMESTAMP);
	            break;
	        case 2:
	            this.state = 1481;
	            this.match(StarRocksParser.T__1);
	            this.state = 1482;
	            this.qualifiedName();
	            this.state = 1483;
	            this.match(StarRocksParser.T__1);
	            this.state = 1484;
	            this.match(StarRocksParser.T__3);
	            this.state = 1485;
	            this.match(StarRocksParser.T__3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generatedColumnDesc() {
	    let localctx = new GeneratedColumnDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, StarRocksParser.RULE_generatedColumnDesc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1489;
	        this.match(StarRocksParser.AS);
	        this.state = 1490;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexDesc() {
	    let localctx = new IndexDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, StarRocksParser.RULE_indexDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1492;
	        this.match(StarRocksParser.INDEX);
	        this.state = 1493;
	        localctx.indexName = this.identifier();
	        this.state = 1494;
	        this.identifierList();
	        this.state = 1499;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===456) {
	            this.state = 1495;
	            this.indexType();
	            this.state = 1497;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 1496;
	                this.propertyList();
	            }

	        }

	        this.state = 1502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 1501;
	            this.comment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	engineDesc() {
	    let localctx = new EngineDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, StarRocksParser.RULE_engineDesc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1504;
	        this.match(StarRocksParser.ENGINE);
	        this.state = 1505;
	        this.match(StarRocksParser.EQ);
	        this.state = 1506;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetDesc() {
	    let localctx = new CharsetDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, StarRocksParser.RULE_charsetDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===114) {
	            this.state = 1508;
	            this.match(StarRocksParser.DEFAULT);
	        }

	        this.state = 1516;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 64:
	            this.state = 1511;
	            this.match(StarRocksParser.CHAR);
	            this.state = 1512;
	            this.match(StarRocksParser.SET);
	            break;
	        case 66:
	            this.state = 1513;
	            this.match(StarRocksParser.CHARSET);
	            break;
	        case 65:
	            this.state = 1514;
	            this.match(StarRocksParser.CHARACTER);
	            this.state = 1515;
	            this.match(StarRocksParser.SET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1519;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===488) {
	            this.state = 1518;
	            this.match(StarRocksParser.EQ);
	        }

	        this.state = 1521;
	        this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collateDesc() {
	    let localctx = new CollateDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, StarRocksParser.RULE_collateDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===114) {
	            this.state = 1523;
	            this.match(StarRocksParser.DEFAULT);
	        }

	        this.state = 1526;
	        this.match(StarRocksParser.COLLATE);
	        this.state = 1528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===488) {
	            this.state = 1527;
	            this.match(StarRocksParser.EQ);
	        }

	        this.state = 1530;
	        this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyDesc() {
	    let localctx = new KeyDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, StarRocksParser.RULE_keyDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1532;
	        _la = this._input.LA(1);
	        if(!(_la===17 || _la===131 || _la===318 || _la===447)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1533;
	        this.match(StarRocksParser.KEY);
	        this.state = 1534;
	        this.identifierList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByDesc() {
	    let localctx = new OrderByDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, StarRocksParser.RULE_orderByDesc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1536;
	        this.match(StarRocksParser.ORDER);
	        this.state = 1537;
	        this.match(StarRocksParser.BY);
	        this.state = 1538;
	        this.identifierList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNullable() {
	    let localctx = new ColumnNullableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, StarRocksParser.RULE_columnNullable);
	    try {
	        this.state = 1543;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1540;
	            this.match(StarRocksParser.NULL);
	            break;
	        case 276:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1541;
	            this.match(StarRocksParser.NOT);
	            this.state = 1542;
	            this.match(StarRocksParser.NULL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeWithNullable() {
	    let localctx = new TypeWithNullableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, StarRocksParser.RULE_typeWithNullable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1545;
	        this.type();
	        this.state = 1547;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===276 || _la===277) {
	            this.state = 1546;
	            this.columnNullable();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggStateDesc() {
	    let localctx = new AggStateDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, StarRocksParser.RULE_aggStateDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1549;
	        this.identifier();
	        this.state = 1550;
	        this.match(StarRocksParser.T__1);
	        this.state = 1551;
	        this.typeWithNullable();
	        this.state = 1556;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 1552;
	            this.match(StarRocksParser.T__2);
	            this.state = 1553;
	            this.typeWithNullable();
	            this.state = 1558;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1559;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggDesc() {
	    let localctx = new AggDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, StarRocksParser.RULE_aggDesc);
	    try {
	        this.state = 1570;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1561;
	            this.match(StarRocksParser.SUM);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1562;
	            this.match(StarRocksParser.MAX);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1563;
	            this.match(StarRocksParser.MIN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1564;
	            this.match(StarRocksParser.REPLACE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1565;
	            this.match(StarRocksParser.HLL_UNION);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1566;
	            this.match(StarRocksParser.BITMAP_UNION);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1567;
	            this.match(StarRocksParser.PERCENTILE_UNION);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1568;
	            this.match(StarRocksParser.REPLACE_IF_NOT_NULL);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1569;
	            this.aggStateDesc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollupDesc() {
	    let localctx = new RollupDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, StarRocksParser.RULE_rollupDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1572;
	        this.match(StarRocksParser.ROLLUP);
	        this.state = 1573;
	        this.match(StarRocksParser.T__1);
	        this.state = 1574;
	        this.rollupItem();
	        this.state = 1579;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 1575;
	            this.match(StarRocksParser.T__2);
	            this.state = 1576;
	            this.rollupItem();
	            this.state = 1581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1582;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollupItem() {
	    let localctx = new RollupItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, StarRocksParser.RULE_rollupItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1584;
	        localctx.rollupName = this.identifier();
	        this.state = 1585;
	        this.identifierList();
	        this.state = 1587;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1586;
	            this.dupKeys();
	        }

	        this.state = 1590;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168) {
	            this.state = 1589;
	            this.fromRollup();
	        }

	        this.state = 1593;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 1592;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dupKeys() {
	    let localctx = new DupKeysContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, StarRocksParser.RULE_dupKeys);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1595;
	        this.match(StarRocksParser.DUPLICATE);
	        this.state = 1596;
	        this.match(StarRocksParser.KEY);
	        this.state = 1597;
	        this.identifierList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromRollup() {
	    let localctx = new FromRollupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, StarRocksParser.RULE_fromRollup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1599;
	        this.match(StarRocksParser.FROM);
	        this.state = 1600;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orReplace() {
	    let localctx = new OrReplaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, StarRocksParser.RULE_orReplace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1604;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===292) {
	            this.state = 1602;
	            this.match(StarRocksParser.OR);
	            this.state = 1603;
	            this.match(StarRocksParser.REPLACE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifNotExists() {
	    let localctx = new IfNotExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, StarRocksParser.RULE_ifNotExists);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 1606;
	            this.match(StarRocksParser.IF);
	            this.state = 1607;
	            this.match(StarRocksParser.NOT);
	            this.state = 1608;
	            this.match(StarRocksParser.EXISTS);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableAsSelectStatement() {
	    let localctx = new CreateTableAsSelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, StarRocksParser.RULE_createTableAsSelectStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1611;
	        this.match(StarRocksParser.CREATE);
	        this.state = 1613;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===424) {
	            this.state = 1612;
	            this.match(StarRocksParser.TEMPORARY);
	        }

	        this.state = 1615;
	        this.match(StarRocksParser.TABLE);
	        this.state = 1619;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 1616;
	            this.match(StarRocksParser.IF);
	            this.state = 1617;
	            this.match(StarRocksParser.NOT);
	            this.state = 1618;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 1621;
	        this.qualifiedName();
	        this.state = 1650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1622;
	            this.match(StarRocksParser.T__1);
	            this.state = 1646;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 12:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 22:
	            case 23:
	            case 25:
	            case 26:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 43:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 66:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 73:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 86:
	            case 87:
	            case 91:
	            case 92:
	            case 93:
	            case 99:
	            case 100:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 113:
	            case 118:
	            case 119:
	            case 120:
	            case 124:
	            case 126:
	            case 127:
	            case 131:
	            case 132:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 143:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 153:
	            case 154:
	            case 156:
	            case 157:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 166:
	            case 167:
	            case 169:
	            case 170:
	            case 173:
	            case 174:
	            case 176:
	            case 181:
	            case 182:
	            case 184:
	            case 185:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 194:
	            case 197:
	            case 199:
	            case 200:
	            case 202:
	            case 205:
	            case 209:
	            case 210:
	            case 211:
	            case 213:
	            case 217:
	            case 219:
	            case 220:
	            case 226:
	            case 229:
	            case 234:
	            case 235:
	            case 238:
	            case 240:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 250:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 256:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 286:
	            case 287:
	            case 288:
	            case 290:
	            case 291:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 339:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 347:
	            case 349:
	            case 350:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 365:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 392:
	            case 394:
	            case 395:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 415:
	            case 416:
	            case 417:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 426:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 437:
	            case 438:
	            case 439:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 448:
	            case 449:
	            case 452:
	            case 454:
	            case 455:
	            case 457:
	            case 459:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 475:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 486:
	            case 487:
	            case 495:
	            case 521:
	            case 522:
	            case 523:
	            case 529:
	                this.state = 1623;
	                this.identifier();
	                this.state = 1628;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1624;
	                        this.match(StarRocksParser.T__2);
	                        this.state = 1625;
	                        this.identifier(); 
	                    }
	                    this.state = 1630;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
	                }

	                this.state = 1635;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 1631;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 1632;
	                    this.indexDesc();
	                    this.state = 1637;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;
	            case 201:
	                this.state = 1638;
	                this.indexDesc();
	                this.state = 1643;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 1639;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 1640;
	                    this.indexDesc();
	                    this.state = 1645;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1648;
	            this.match(StarRocksParser.T__3);
	        }

	        this.state = 1653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===131 || _la===318 || _la===447) {
	            this.state = 1652;
	            this.keyDesc();
	        }

	        this.state = 1656;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 1655;
	            this.comment();
	        }

	        this.state = 1659;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298) {
	            this.state = 1658;
	            this.partitionDesc();
	        }

	        this.state = 1662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===126) {
	            this.state = 1661;
	            this.distributionDesc();
	        }

	        this.state = 1665;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293) {
	            this.state = 1664;
	            this.orderByDesc();
	        }

	        this.state = 1668;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 1667;
	            this.properties();
	        }

	        this.state = 1670;
	        this.match(StarRocksParser.AS);
	        this.state = 1671;
	        this.queryStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTableStatement() {
	    let localctx = new DropTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, StarRocksParser.RULE_dropTableStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1673;
	        this.match(StarRocksParser.DROP);
	        this.state = 1675;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===424) {
	            this.state = 1674;
	            this.match(StarRocksParser.TEMPORARY);
	        }

	        this.state = 1677;
	        this.match(StarRocksParser.TABLE);
	        this.state = 1680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 1678;
	            this.match(StarRocksParser.IF);
	            this.state = 1679;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 1682;
	        this.qualifiedName();
	        this.state = 1684;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===165) {
	            this.state = 1683;
	            this.match(StarRocksParser.FORCE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cleanTemporaryTableStatement() {
	    let localctx = new CleanTemporaryTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, StarRocksParser.RULE_cleanTemporaryTableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1686;
	        this.match(StarRocksParser.CLEAN);
	        this.state = 1687;
	        this.match(StarRocksParser.TEMPORARY);
	        this.state = 1688;
	        this.match(StarRocksParser.TABLE);
	        this.state = 1689;
	        this.match(StarRocksParser.ON);
	        this.state = 1690;
	        this.match(StarRocksParser.SESSION);
	        this.state = 1691;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableStatement() {
	    let localctx = new AlterTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, StarRocksParser.RULE_alterTableStatement);
	    var _la = 0;
	    try {
	        this.state = 1730;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1693;
	            this.match(StarRocksParser.ALTER);
	            this.state = 1694;
	            this.match(StarRocksParser.TABLE);
	            this.state = 1695;
	            this.qualifiedName();
	            this.state = 1696;
	            this.alterClause();
	            this.state = 1701;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 1697;
	                this.match(StarRocksParser.T__2);
	                this.state = 1698;
	                this.alterClause();
	                this.state = 1703;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1704;
	            this.match(StarRocksParser.ALTER);
	            this.state = 1705;
	            this.match(StarRocksParser.TABLE);
	            this.state = 1706;
	            this.qualifiedName();
	            this.state = 1707;
	            this.match(StarRocksParser.ADD);
	            this.state = 1708;
	            this.match(StarRocksParser.ROLLUP);
	            this.state = 1709;
	            this.rollupItem();
	            this.state = 1714;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 1710;
	                this.match(StarRocksParser.T__2);
	                this.state = 1711;
	                this.rollupItem();
	                this.state = 1716;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1717;
	            this.match(StarRocksParser.ALTER);
	            this.state = 1718;
	            this.match(StarRocksParser.TABLE);
	            this.state = 1719;
	            this.qualifiedName();
	            this.state = 1720;
	            this.match(StarRocksParser.DROP);
	            this.state = 1721;
	            this.match(StarRocksParser.ROLLUP);
	            this.state = 1722;
	            this.identifier();
	            this.state = 1727;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 1723;
	                this.match(StarRocksParser.T__2);
	                this.state = 1724;
	                this.identifier();
	                this.state = 1729;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndexStatement() {
	    let localctx = new CreateIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, StarRocksParser.RULE_createIndexStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1732;
	        this.match(StarRocksParser.CREATE);
	        this.state = 1733;
	        this.match(StarRocksParser.INDEX);
	        this.state = 1734;
	        localctx.indexName = this.identifier();
	        this.state = 1735;
	        this.match(StarRocksParser.ON);
	        this.state = 1736;
	        this.qualifiedName();
	        this.state = 1737;
	        this.identifierList();
	        this.state = 1742;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===456) {
	            this.state = 1738;
	            this.indexType();
	            this.state = 1740;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 1739;
	                this.propertyList();
	            }

	        }

	        this.state = 1745;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 1744;
	            this.comment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropIndexStatement() {
	    let localctx = new DropIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, StarRocksParser.RULE_dropIndexStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1747;
	        this.match(StarRocksParser.DROP);
	        this.state = 1748;
	        this.match(StarRocksParser.INDEX);
	        this.state = 1749;
	        localctx.indexName = this.identifier();
	        this.state = 1750;
	        this.match(StarRocksParser.ON);
	        this.state = 1751;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexType() {
	    let localctx = new IndexTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, StarRocksParser.RULE_indexType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1753;
	        this.match(StarRocksParser.USING);
	        this.state = 1754;
	        _la = this._input.LA(1);
	        if(!(_la===44 || _la===216 || _la===271 || _la===462)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showTableStatement() {
	    let localctx = new ShowTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, StarRocksParser.RULE_showTableStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1756;
	        this.match(StarRocksParser.SHOW);
	        this.state = 1758;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===171) {
	            this.state = 1757;
	            this.match(StarRocksParser.FULL);
	        }

	        this.state = 1760;
	        this.match(StarRocksParser.TABLES);
	        this.state = 1763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 1761;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1762;
	            localctx.db = this.qualifiedName();
	        }

	        this.state = 1769;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 1765;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 1766;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 1767;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 1768;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showTemporaryTablesStatement() {
	    let localctx = new ShowTemporaryTablesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, StarRocksParser.RULE_showTemporaryTablesStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1771;
	        this.match(StarRocksParser.SHOW);
	        this.state = 1772;
	        this.match(StarRocksParser.TEMPORARY);
	        this.state = 1773;
	        this.match(StarRocksParser.TABLES);
	        this.state = 1776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 1774;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1775;
	            localctx.db = this.qualifiedName();
	        }

	        this.state = 1782;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 1778;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 1779;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 1780;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 1781;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCreateTableStatement() {
	    let localctx = new ShowCreateTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, StarRocksParser.RULE_showCreateTableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1784;
	        this.match(StarRocksParser.SHOW);
	        this.state = 1785;
	        this.match(StarRocksParser.CREATE);
	        this.state = 1790;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 418:
	            this.state = 1786;
	            this.match(StarRocksParser.TABLE);
	            break;
	        case 465:
	            this.state = 1787;
	            this.match(StarRocksParser.VIEW);
	            break;
	        case 253:
	            this.state = 1788;
	            this.match(StarRocksParser.MATERIALIZED);
	            this.state = 1789;
	            this.match(StarRocksParser.VIEW);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1792;
	        localctx.table = this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showColumnStatement() {
	    let localctx = new ShowColumnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, StarRocksParser.RULE_showColumnStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1794;
	        this.match(StarRocksParser.SHOW);
	        this.state = 1796;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===171) {
	            this.state = 1795;
	            this.match(StarRocksParser.FULL);
	        }

	        this.state = 1798;
	        _la = this._input.LA(1);
	        if(!(_la===75 || _la===153)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }

	        this.state = 1799;
	        _la = this._input.LA(1);
	        if(!(_la===168 || _la===198)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1800;
	        localctx.table = this.qualifiedName();
	        this.state = 1804;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 1802;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1803;
	            localctx.db = this.qualifiedName();
	        }

	        this.state = 1810;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 1806;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 1807;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 1808;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 1809;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showTableStatusStatement() {
	    let localctx = new ShowTableStatusStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, StarRocksParser.RULE_showTableStatusStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1812;
	        this.match(StarRocksParser.SHOW);
	        this.state = 1813;
	        this.match(StarRocksParser.TABLE);
	        this.state = 1814;
	        this.match(StarRocksParser.STATUS);
	        this.state = 1817;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 1815;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1816;
	            localctx.db = this.qualifiedName();
	        }

	        this.state = 1823;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 1819;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 1820;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 1821;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 1822;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refreshTableStatement() {
	    let localctx = new RefreshTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, StarRocksParser.RULE_refreshTableStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1825;
	        this.match(StarRocksParser.REFRESH);
	        this.state = 1826;
	        this.match(StarRocksParser.EXTERNAL);
	        this.state = 1827;
	        this.match(StarRocksParser.TABLE);
	        this.state = 1828;
	        this.qualifiedName();
	        this.state = 1841;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298) {
	            this.state = 1829;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 1830;
	            this.match(StarRocksParser.T__1);
	            this.state = 1831;
	            this.string();
	            this.state = 1836;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 1832;
	                this.match(StarRocksParser.T__2);
	                this.state = 1833;
	                this.string();
	                this.state = 1838;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1839;
	            this.match(StarRocksParser.T__3);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showAlterStatement() {
	    let localctx = new ShowAlterStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, StarRocksParser.RULE_showAlterStatement);
	    var _la = 0;
	    try {
	        this.state = 1897;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1843;
	            this.match(StarRocksParser.SHOW);
	            this.state = 1844;
	            this.match(StarRocksParser.ALTER);
	            this.state = 1845;
	            this.match(StarRocksParser.TABLE);
	            this.state = 1846;
	            _la = this._input.LA(1);
	            if(!(_la===74 || _la===289 || _la===371)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1849;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===168 || _la===198) {
	                this.state = 1847;
	                _la = this._input.LA(1);
	                if(!(_la===168 || _la===198)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1848;
	                localctx.db = this.qualifiedName();
	            }

	            this.state = 1853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===474) {
	                this.state = 1851;
	                this.match(StarRocksParser.WHERE);
	                this.state = 1852;
	                this.expression(0);
	            }

	            this.state = 1865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===293) {
	                this.state = 1855;
	                this.match(StarRocksParser.ORDER);
	                this.state = 1856;
	                this.match(StarRocksParser.BY);
	                this.state = 1857;
	                this.sortItem();
	                this.state = 1862;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 1858;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 1859;
	                    this.sortItem();
	                    this.state = 1864;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1868;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===237) {
	                this.state = 1867;
	                this.limitElement();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1870;
	            this.match(StarRocksParser.SHOW);
	            this.state = 1871;
	            this.match(StarRocksParser.ALTER);
	            this.state = 1872;
	            this.match(StarRocksParser.MATERIALIZED);
	            this.state = 1873;
	            this.match(StarRocksParser.VIEW);
	            this.state = 1876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===168 || _la===198) {
	                this.state = 1874;
	                _la = this._input.LA(1);
	                if(!(_la===168 || _la===198)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1875;
	                localctx.db = this.qualifiedName();
	            }

	            this.state = 1880;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===474) {
	                this.state = 1878;
	                this.match(StarRocksParser.WHERE);
	                this.state = 1879;
	                this.expression(0);
	            }

	            this.state = 1892;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===293) {
	                this.state = 1882;
	                this.match(StarRocksParser.ORDER);
	                this.state = 1883;
	                this.match(StarRocksParser.BY);
	                this.state = 1884;
	                this.sortItem();
	                this.state = 1889;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 1885;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 1886;
	                    this.sortItem();
	                    this.state = 1891;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1895;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===237) {
	                this.state = 1894;
	                this.limitElement();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descTableStatement() {
	    let localctx = new DescTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, StarRocksParser.RULE_descTableStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1899;
	        _la = this._input.LA(1);
	        if(!(_la===122 || _la===123)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1906;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 22:
	        case 23:
	        case 25:
	        case 26:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 99:
	        case 100:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 113:
	        case 118:
	        case 119:
	        case 120:
	        case 124:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 143:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 153:
	        case 154:
	        case 156:
	        case 157:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 173:
	        case 174:
	        case 176:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 194:
	        case 197:
	        case 199:
	        case 200:
	        case 202:
	        case 205:
	        case 209:
	        case 210:
	        case 211:
	        case 213:
	        case 217:
	        case 219:
	        case 220:
	        case 226:
	        case 229:
	        case 234:
	        case 235:
	        case 238:
	        case 240:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 256:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 286:
	        case 287:
	        case 288:
	        case 290:
	        case 291:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 339:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 347:
	        case 349:
	        case 350:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 365:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 392:
	        case 394:
	        case 395:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 415:
	        case 416:
	        case 417:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 426:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 437:
	        case 438:
	        case 439:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 448:
	        case 449:
	        case 452:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 486:
	        case 487:
	        case 495:
	        case 521:
	        case 522:
	        case 523:
	        case 529:
	            this.state = 1900;
	            localctx.table = this.qualifiedName();
	            this.state = 1902;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18) {
	                this.state = 1901;
	                this.match(StarRocksParser.ALL);
	            }

	            break;
	        case 155:
	            this.state = 1904;
	            this.match(StarRocksParser.FILES);
	            this.state = 1905;
	            this.propertyList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableLikeStatement() {
	    let localctx = new CreateTableLikeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, StarRocksParser.RULE_createTableLikeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1908;
	        this.match(StarRocksParser.CREATE);
	        this.state = 1910;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147 || _la===424) {
	            this.state = 1909;
	            _la = this._input.LA(1);
	            if(!(_la===147 || _la===424)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1912;
	        this.match(StarRocksParser.TABLE);
	        this.state = 1916;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 1913;
	            this.match(StarRocksParser.IF);
	            this.state = 1914;
	            this.match(StarRocksParser.NOT);
	            this.state = 1915;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 1918;
	        this.qualifiedName();
	        this.state = 1920;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298) {
	            this.state = 1919;
	            this.partitionDesc();
	        }

	        this.state = 1923;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===126) {
	            this.state = 1922;
	            this.distributionDesc();
	        }

	        this.state = 1926;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 1925;
	            this.properties();
	        }

	        this.state = 1928;
	        this.match(StarRocksParser.LIKE);
	        this.state = 1929;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showIndexStatement() {
	    let localctx = new ShowIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, StarRocksParser.RULE_showIndexStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1931;
	        this.match(StarRocksParser.SHOW);
	        this.state = 1932;
	        _la = this._input.LA(1);
	        if(!(((((_la - 201)) & ~0x1f) === 0 && ((1 << (_la - 201)) & 12582915) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }

	        this.state = 1933;
	        _la = this._input.LA(1);
	        if(!(_la===168 || _la===198)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1934;
	        localctx.table = this.qualifiedName();
	        this.state = 1938;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 1936;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1937;
	            localctx.db = this.qualifiedName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recoverTableStatement() {
	    let localctx = new RecoverTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, StarRocksParser.RULE_recoverTableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1940;
	        this.match(StarRocksParser.RECOVER);
	        this.state = 1941;
	        this.match(StarRocksParser.TABLE);
	        this.state = 1942;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncateTableStatement() {
	    let localctx = new TruncateTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, StarRocksParser.RULE_truncateTableStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1944;
	        this.match(StarRocksParser.TRUNCATE);
	        this.state = 1945;
	        this.match(StarRocksParser.TABLE);
	        this.state = 1946;
	        this.qualifiedName();
	        this.state = 1948;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298 || _la===299 || _la===424) {
	            this.state = 1947;
	            this.partitionNames();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelAlterTableStatement() {
	    let localctx = new CancelAlterTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, StarRocksParser.RULE_cancelAlterTableStatement);
	    var _la = 0;
	    try {
	        this.state = 1976;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1950;
	            this.match(StarRocksParser.CANCEL);
	            this.state = 1951;
	            this.match(StarRocksParser.ALTER);
	            this.state = 1952;
	            this.match(StarRocksParser.TABLE);
	            this.state = 1954;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===74 || _la===289 || _la===371) {
	                this.state = 1953;
	                _la = this._input.LA(1);
	                if(!(_la===74 || _la===289 || _la===371)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1956;
	            this.match(StarRocksParser.FROM);
	            this.state = 1957;
	            this.qualifiedName();
	            this.state = 1968;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 1958;
	                this.match(StarRocksParser.T__1);
	                this.state = 1959;
	                this.match(StarRocksParser.INTEGER_VALUE);
	                this.state = 1964;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 1960;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 1961;
	                    this.match(StarRocksParser.INTEGER_VALUE);
	                    this.state = 1966;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1967;
	                this.match(StarRocksParser.T__3);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1970;
	            this.match(StarRocksParser.CANCEL);
	            this.state = 1971;
	            this.match(StarRocksParser.ALTER);
	            this.state = 1972;
	            this.match(StarRocksParser.MATERIALIZED);
	            this.state = 1973;
	            this.match(StarRocksParser.VIEW);
	            this.state = 1974;
	            this.match(StarRocksParser.FROM);
	            this.state = 1975;
	            this.qualifiedName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showPartitionsStatement() {
	    let localctx = new ShowPartitionsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, StarRocksParser.RULE_showPartitionsStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1978;
	        this.match(StarRocksParser.SHOW);
	        this.state = 1980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===424) {
	            this.state = 1979;
	            this.match(StarRocksParser.TEMPORARY);
	        }

	        this.state = 1982;
	        this.match(StarRocksParser.PARTITIONS);
	        this.state = 1983;
	        this.match(StarRocksParser.FROM);
	        this.state = 1984;
	        localctx.table = this.qualifiedName();
	        this.state = 1987;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 1985;
	            this.match(StarRocksParser.WHERE);
	            this.state = 1986;
	            this.expression(0);
	        }

	        this.state = 1999;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293) {
	            this.state = 1989;
	            this.match(StarRocksParser.ORDER);
	            this.state = 1990;
	            this.match(StarRocksParser.BY);
	            this.state = 1991;
	            this.sortItem();
	            this.state = 1996;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 1992;
	                this.match(StarRocksParser.T__2);
	                this.state = 1993;
	                this.sortItem();
	                this.state = 1998;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===237) {
	            this.state = 2001;
	            this.limitElement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recoverPartitionStatement() {
	    let localctx = new RecoverPartitionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, StarRocksParser.RULE_recoverPartitionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2004;
	        this.match(StarRocksParser.RECOVER);
	        this.state = 2005;
	        this.match(StarRocksParser.PARTITION);
	        this.state = 2006;
	        this.identifier();
	        this.state = 2007;
	        this.match(StarRocksParser.FROM);
	        this.state = 2008;
	        localctx.table = this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createViewStatement() {
	    let localctx = new CreateViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, StarRocksParser.RULE_createViewStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2010;
	        this.match(StarRocksParser.CREATE);
	        this.state = 2013;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===292) {
	            this.state = 2011;
	            this.match(StarRocksParser.OR);
	            this.state = 2012;
	            this.match(StarRocksParser.REPLACE);
	        }

	        this.state = 2015;
	        this.match(StarRocksParser.VIEW);
	        this.state = 2019;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 2016;
	            this.match(StarRocksParser.IF);
	            this.state = 2017;
	            this.match(StarRocksParser.NOT);
	            this.state = 2018;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 2021;
	        this.qualifiedName();
	        this.state = 2033;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 2022;
	            this.match(StarRocksParser.T__1);
	            this.state = 2023;
	            this.columnNameWithComment();
	            this.state = 2028;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 2024;
	                this.match(StarRocksParser.T__2);
	                this.state = 2025;
	                this.columnNameWithComment();
	                this.state = 2030;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2031;
	            this.match(StarRocksParser.T__3);
	        }

	        this.state = 2036;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 2035;
	            this.comment();
	        }

	        this.state = 2040;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===385) {
	            this.state = 2038;
	            this.match(StarRocksParser.SECURITY);
	            this.state = 2039;
	            _la = this._input.LA(1);
	            if(!(_la===215 || _la===275)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2042;
	        this.match(StarRocksParser.AS);
	        this.state = 2043;
	        this.queryStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterViewStatement() {
	    let localctx = new AlterViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, StarRocksParser.RULE_alterViewStatement);
	    var _la = 0;
	    try {
	        this.state = 2087;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2045;
	            this.match(StarRocksParser.ALTER);
	            this.state = 2046;
	            this.match(StarRocksParser.VIEW);
	            this.state = 2047;
	            this.qualifiedName();
	            this.state = 2059;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 2048;
	                this.match(StarRocksParser.T__1);
	                this.state = 2049;
	                this.columnNameWithComment();
	                this.state = 2054;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 2050;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 2051;
	                    this.columnNameWithComment();
	                    this.state = 2056;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2057;
	                this.match(StarRocksParser.T__3);
	            }

	            this.state = 2061;
	            this.match(StarRocksParser.AS);
	            this.state = 2062;
	            this.queryStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2064;
	            this.match(StarRocksParser.ALTER);
	            this.state = 2065;
	            this.match(StarRocksParser.VIEW);
	            this.state = 2066;
	            this.qualifiedName();
	            this.state = 2067;
	            this.match(StarRocksParser.SET);
	            this.state = 2068;
	            this.match(StarRocksParser.SECURITY);
	            this.state = 2069;
	            _la = this._input.LA(1);
	            if(!(_la===215 || _la===275)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2071;
	            this.match(StarRocksParser.ALTER);
	            this.state = 2072;
	            this.match(StarRocksParser.VIEW);
	            this.state = 2073;
	            this.qualifiedName();
	            this.state = 2074;
	            this.match(StarRocksParser.SET);
	            this.state = 2075;
	            this.properties();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2077;
	            this.match(StarRocksParser.ALTER);
	            this.state = 2078;
	            this.match(StarRocksParser.VIEW);
	            this.state = 2079;
	            this.qualifiedName();
	            this.state = 2080;
	            _la = this._input.LA(1);
	            if(!(_la===13 || _la===266)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2081;
	            this.match(StarRocksParser.DIALECT);
	            this.state = 2083;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===401) {
	                this.state = 2082;
	                this.match(StarRocksParser.STARROCKS);
	            }

	            this.state = 2085;
	            this.queryStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropViewStatement() {
	    let localctx = new DropViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, StarRocksParser.RULE_dropViewStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2089;
	        this.match(StarRocksParser.DROP);
	        this.state = 2090;
	        this.match(StarRocksParser.VIEW);
	        this.state = 2093;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 2091;
	            this.match(StarRocksParser.IF);
	            this.state = 2092;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 2095;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnNameWithComment() {
	    let localctx = new ColumnNameWithCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, StarRocksParser.RULE_columnNameWithComment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2097;
	        localctx.columnName = this.identifier();
	        this.state = 2099;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 2098;
	            this.comment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	submitTaskStatement() {
	    let localctx = new SubmitTaskStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, StarRocksParser.RULE_submitTaskStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2101;
	        this.match(StarRocksParser.SUBMIT);
	        this.state = 2102;
	        this.match(StarRocksParser.TASK);
	        this.state = 2104;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
	        if(la_===1) {
	            this.state = 2103;
	            this.qualifiedName();

	        }
	        this.state = 2109;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===327 || _la===380) {
	            this.state = 2106;
	            this.taskClause();
	            this.state = 2111;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2112;
	        this.match(StarRocksParser.AS);
	        this.state = 2116;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 88:
	            this.state = 2113;
	            this.createTableAsSelectStatement();
	            break;
	        case 122:
	        case 123:
	        case 145:
	        case 206:
	            this.state = 2114;
	            this.insertStatement();
	            break;
	        case 56:
	            this.state = 2115;
	            this.dataCacheSelectStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	taskClause() {
	    let localctx = new TaskClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, StarRocksParser.RULE_taskClause);
	    try {
	        this.state = 2120;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 327:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2118;
	            this.properties();
	            break;
	        case 380:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2119;
	            this.taskScheduleDesc();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTaskStatement() {
	    let localctx = new DropTaskStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, StarRocksParser.RULE_dropTaskStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2122;
	        this.match(StarRocksParser.DROP);
	        this.state = 2123;
	        this.match(StarRocksParser.TASK);
	        this.state = 2124;
	        this.qualifiedName();
	        this.state = 2126;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===165) {
	            this.state = 2125;
	            this.match(StarRocksParser.FORCE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	taskScheduleDesc() {
	    let localctx = new TaskScheduleDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, StarRocksParser.RULE_taskScheduleDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2128;
	        this.match(StarRocksParser.SCHEDULE);
	        this.state = 2134;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===402) {
	            this.state = 2129;
	            this.match(StarRocksParser.START);
	            this.state = 2130;
	            this.match(StarRocksParser.T__1);
	            this.state = 2131;
	            this.string();
	            this.state = 2132;
	            this.match(StarRocksParser.T__3);
	        }

	        this.state = 2136;
	        this.match(StarRocksParser.EVERY);
	        this.state = 2137;
	        this.match(StarRocksParser.T__1);
	        this.state = 2138;
	        this.taskInterval();
	        this.state = 2139;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createMaterializedViewStatement() {
	    let localctx = new CreateMaterializedViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, StarRocksParser.RULE_createMaterializedViewStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2141;
	        this.match(StarRocksParser.CREATE);
	        this.state = 2142;
	        this.match(StarRocksParser.MATERIALIZED);
	        this.state = 2143;
	        this.match(StarRocksParser.VIEW);
	        this.state = 2147;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 2144;
	            this.match(StarRocksParser.IF);
	            this.state = 2145;
	            this.match(StarRocksParser.NOT);
	            this.state = 2146;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 2149;
	        localctx.mvName = this.qualifiedName();
	        this.state = 2168;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 2150;
	            this.match(StarRocksParser.T__1);
	            this.state = 2151;
	            this.columnNameWithComment();
	            this.state = 2156;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,142,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2152;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 2153;
	                    this.columnNameWithComment(); 
	                }
	                this.state = 2158;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,142,this._ctx);
	            }

	            this.state = 2163;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 2159;
	                this.match(StarRocksParser.T__2);
	                this.state = 2160;
	                this.indexDesc();
	                this.state = 2165;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2166;
	            this.match(StarRocksParser.T__3);
	        }

	        this.state = 2171;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 2170;
	            this.comment();
	        }

	        this.state = 2176;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===126 || _la===293 || _la===298 || _la===327 || _la===343) {
	            this.state = 2173;
	            this.materializedViewDesc();
	            this.state = 2178;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2179;
	        this.match(StarRocksParser.AS);
	        this.state = 2180;
	        this.queryStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mvPartitionExprs() {
	    let localctx = new MvPartitionExprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, StarRocksParser.RULE_mvPartitionExprs);
	    var _la = 0;
	    try {
	        this.state = 2194;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2182;
	            this.primaryExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2183;
	            this.match(StarRocksParser.T__1);
	            this.state = 2184;
	            this.primaryExpression(0);
	            this.state = 2189;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 2185;
	                this.match(StarRocksParser.T__2);
	                this.state = 2186;
	                this.primaryExpression(0);
	                this.state = 2191;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2192;
	            this.match(StarRocksParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	materializedViewDesc() {
	    let localctx = new MaterializedViewDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, StarRocksParser.RULE_materializedViewDesc);
	    try {
	        this.state = 2203;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 298:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2196;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 2197;
	            this.match(StarRocksParser.BY);
	            this.state = 2198;
	            this.mvPartitionExprs();
	            break;
	        case 126:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2199;
	            this.distributionDesc();
	            break;
	        case 293:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2200;
	            this.orderByDesc();
	            break;
	        case 343:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2201;
	            this.refreshSchemeDesc();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2202;
	            this.properties();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showMaterializedViewsStatement() {
	    let localctx = new ShowMaterializedViewsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, StarRocksParser.RULE_showMaterializedViewsStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2205;
	        this.match(StarRocksParser.SHOW);
	        this.state = 2206;
	        this.match(StarRocksParser.MATERIALIZED);
	        this.state = 2207;
	        this.match(StarRocksParser.VIEWS);
	        this.state = 2210;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 2208;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2209;
	            localctx.db = this.qualifiedName();
	        }

	        this.state = 2216;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 2212;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 2213;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 2214;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 2215;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropMaterializedViewStatement() {
	    let localctx = new DropMaterializedViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, StarRocksParser.RULE_dropMaterializedViewStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2218;
	        this.match(StarRocksParser.DROP);
	        this.state = 2219;
	        this.match(StarRocksParser.MATERIALIZED);
	        this.state = 2220;
	        this.match(StarRocksParser.VIEW);
	        this.state = 2223;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 2221;
	            this.match(StarRocksParser.IF);
	            this.state = 2222;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 2225;
	        localctx.mvName = this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterMaterializedViewStatement() {
	    let localctx = new AlterMaterializedViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, StarRocksParser.RULE_alterMaterializedViewStatement);
	    try {
	        this.state = 2243;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2227;
	            this.match(StarRocksParser.ALTER);
	            this.state = 2228;
	            this.match(StarRocksParser.MATERIALIZED);
	            this.state = 2229;
	            this.match(StarRocksParser.VIEW);
	            this.state = 2230;
	            localctx.mvName = this.qualifiedName();
	            this.state = 2235;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 343:
	                this.state = 2231;
	                this.refreshSchemeDesc();
	                break;
	            case 348:
	                this.state = 2232;
	                this.tableRenameClause();
	                break;
	            case 391:
	                this.state = 2233;
	                this.modifyPropertiesClause();
	                break;
	            case 416:
	                this.state = 2234;
	                this.swapTableClause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2237;
	            this.match(StarRocksParser.ALTER);
	            this.state = 2238;
	            this.match(StarRocksParser.MATERIALIZED);
	            this.state = 2239;
	            this.match(StarRocksParser.VIEW);
	            this.state = 2240;
	            localctx.mvName = this.qualifiedName();
	            this.state = 2241;
	            this.statusDesc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refreshMaterializedViewStatement() {
	    let localctx = new RefreshMaterializedViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, StarRocksParser.RULE_refreshMaterializedViewStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2245;
	        this.match(StarRocksParser.REFRESH);
	        this.state = 2246;
	        this.match(StarRocksParser.MATERIALIZED);
	        this.state = 2247;
	        this.match(StarRocksParser.VIEW);
	        this.state = 2248;
	        localctx.mvName = this.qualifiedName();
	        this.state = 2254;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298) {
	            this.state = 2249;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 2252;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 402:
	                this.state = 2250;
	                this.partitionRangeDesc();
	                break;
	            case 2:
	                this.state = 2251;
	                this.listPartitionValues();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	        this.state = 2257;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===165) {
	            this.state = 2256;
	            this.match(StarRocksParser.FORCE);
	        }

	        this.state = 2262;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        if(la_===1) {
	            this.state = 2259;
	            this.match(StarRocksParser.WITH);
	            this.state = 2260;
	            _la = this._input.LA(1);
	            if(!(_la===29 || _la===413)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2261;
	            this.match(StarRocksParser.MODE);

	        }
	        this.state = 2267;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===476) {
	            this.state = 2264;
	            this.match(StarRocksParser.WITH);
	            this.state = 2265;
	            this.match(StarRocksParser.PRIORITY);
	            this.state = 2266;
	            localctx.priority = this.match(StarRocksParser.INTEGER_VALUE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelRefreshMaterializedViewStatement() {
	    let localctx = new CancelRefreshMaterializedViewStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, StarRocksParser.RULE_cancelRefreshMaterializedViewStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2269;
	        this.match(StarRocksParser.CANCEL);
	        this.state = 2270;
	        this.match(StarRocksParser.REFRESH);
	        this.state = 2271;
	        this.match(StarRocksParser.MATERIALIZED);
	        this.state = 2272;
	        this.match(StarRocksParser.VIEW);
	        this.state = 2273;
	        localctx.mvName = this.qualifiedName();
	        this.state = 2275;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===165) {
	            this.state = 2274;
	            this.match(StarRocksParser.FORCE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminSetConfigStatement() {
	    let localctx = new AdminSetConfigStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, StarRocksParser.RULE_adminSetConfigStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2277;
	        this.match(StarRocksParser.ADMIN);
	        this.state = 2278;
	        this.match(StarRocksParser.SET);
	        this.state = 2279;
	        this.match(StarRocksParser.FRONTEND);
	        this.state = 2280;
	        this.match(StarRocksParser.CONFIG);
	        this.state = 2281;
	        this.match(StarRocksParser.T__1);
	        this.state = 2282;
	        this.property();
	        this.state = 2283;
	        this.match(StarRocksParser.T__3);
	        this.state = 2286;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===476) {
	            this.state = 2284;
	            this.match(StarRocksParser.WITH);
	            this.state = 2285;
	            this.match(StarRocksParser.PERSISTENT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminSetReplicaStatusStatement() {
	    let localctx = new AdminSetReplicaStatusStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, StarRocksParser.RULE_adminSetReplicaStatusStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2288;
	        this.match(StarRocksParser.ADMIN);
	        this.state = 2289;
	        this.match(StarRocksParser.SET);
	        this.state = 2290;
	        this.match(StarRocksParser.REPLICA);
	        this.state = 2291;
	        this.match(StarRocksParser.STATUS);
	        this.state = 2292;
	        this.properties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminShowConfigStatement() {
	    let localctx = new AdminShowConfigStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, StarRocksParser.RULE_adminShowConfigStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2294;
	        this.match(StarRocksParser.ADMIN);
	        this.state = 2295;
	        this.match(StarRocksParser.SHOW);
	        this.state = 2296;
	        this.match(StarRocksParser.FRONTEND);
	        this.state = 2297;
	        this.match(StarRocksParser.CONFIG);
	        this.state = 2300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===236) {
	            this.state = 2298;
	            this.match(StarRocksParser.LIKE);
	            this.state = 2299;
	            localctx.pattern = this.string();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminShowReplicaDistributionStatement() {
	    let localctx = new AdminShowReplicaDistributionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, StarRocksParser.RULE_adminShowReplicaDistributionStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2302;
	        this.match(StarRocksParser.ADMIN);
	        this.state = 2303;
	        this.match(StarRocksParser.SHOW);
	        this.state = 2304;
	        this.match(StarRocksParser.REPLICA);
	        this.state = 2305;
	        this.match(StarRocksParser.DISTRIBUTION);
	        this.state = 2306;
	        this.match(StarRocksParser.FROM);
	        this.state = 2307;
	        this.qualifiedName();
	        this.state = 2309;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298 || _la===299 || _la===424) {
	            this.state = 2308;
	            this.partitionNames();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminShowReplicaStatusStatement() {
	    let localctx = new AdminShowReplicaStatusStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, StarRocksParser.RULE_adminShowReplicaStatusStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2311;
	        this.match(StarRocksParser.ADMIN);
	        this.state = 2312;
	        this.match(StarRocksParser.SHOW);
	        this.state = 2313;
	        this.match(StarRocksParser.REPLICA);
	        this.state = 2314;
	        this.match(StarRocksParser.STATUS);
	        this.state = 2315;
	        this.match(StarRocksParser.FROM);
	        this.state = 2316;
	        this.qualifiedName();
	        this.state = 2318;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298 || _la===299 || _la===424) {
	            this.state = 2317;
	            this.partitionNames();
	        }

	        this.state = 2322;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 2320;
	            this.match(StarRocksParser.WHERE);
	            this.state = 2321;
	            localctx.where = this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminRepairTableStatement() {
	    let localctx = new AdminRepairTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, StarRocksParser.RULE_adminRepairTableStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2324;
	        this.match(StarRocksParser.ADMIN);
	        this.state = 2325;
	        this.match(StarRocksParser.REPAIR);
	        this.state = 2326;
	        this.match(StarRocksParser.TABLE);
	        this.state = 2327;
	        this.qualifiedName();
	        this.state = 2329;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298 || _la===299 || _la===424) {
	            this.state = 2328;
	            this.partitionNames();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminCancelRepairTableStatement() {
	    let localctx = new AdminCancelRepairTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, StarRocksParser.RULE_adminCancelRepairTableStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2331;
	        this.match(StarRocksParser.ADMIN);
	        this.state = 2332;
	        this.match(StarRocksParser.CANCEL);
	        this.state = 2333;
	        this.match(StarRocksParser.REPAIR);
	        this.state = 2334;
	        this.match(StarRocksParser.TABLE);
	        this.state = 2335;
	        this.qualifiedName();
	        this.state = 2337;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298 || _la===299 || _la===424) {
	            this.state = 2336;
	            this.partitionNames();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminCheckTabletsStatement() {
	    let localctx = new AdminCheckTabletsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, StarRocksParser.RULE_adminCheckTabletsStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2339;
	        this.match(StarRocksParser.ADMIN);
	        this.state = 2340;
	        this.match(StarRocksParser.CHECK);
	        this.state = 2341;
	        this.tabletList();
	        this.state = 2342;
	        this.match(StarRocksParser.PROPERTIES);
	        this.state = 2343;
	        this.match(StarRocksParser.T__1);
	        this.state = 2344;
	        this.property();
	        this.state = 2345;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminSetPartitionVersion() {
	    let localctx = new AdminSetPartitionVersionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, StarRocksParser.RULE_adminSetPartitionVersion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2347;
	        this.match(StarRocksParser.ADMIN);
	        this.state = 2348;
	        this.match(StarRocksParser.SET);
	        this.state = 2349;
	        this.match(StarRocksParser.TABLE);
	        this.state = 2350;
	        this.qualifiedName();
	        this.state = 2351;
	        this.match(StarRocksParser.PARTITION);
	        this.state = 2352;
	        this.match(StarRocksParser.T__1);
	        this.state = 2355;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 22:
	        case 23:
	        case 25:
	        case 26:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 99:
	        case 100:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 113:
	        case 118:
	        case 119:
	        case 120:
	        case 124:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 143:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 153:
	        case 154:
	        case 156:
	        case 157:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 173:
	        case 174:
	        case 176:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 194:
	        case 197:
	        case 199:
	        case 200:
	        case 202:
	        case 205:
	        case 209:
	        case 210:
	        case 211:
	        case 213:
	        case 217:
	        case 219:
	        case 220:
	        case 226:
	        case 229:
	        case 234:
	        case 235:
	        case 238:
	        case 240:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 256:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 286:
	        case 287:
	        case 288:
	        case 290:
	        case 291:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 339:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 347:
	        case 349:
	        case 350:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 365:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 392:
	        case 394:
	        case 395:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 415:
	        case 416:
	        case 417:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 426:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 437:
	        case 438:
	        case 439:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 448:
	        case 449:
	        case 452:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 486:
	        case 487:
	        case 495:
	        case 517:
	        case 518:
	        case 521:
	        case 522:
	        case 523:
	        case 529:
	            this.state = 2353;
	            localctx.partitionName = this.identifierOrString();
	            break;
	        case 514:
	            this.state = 2354;
	            localctx.partitionId = this.match(StarRocksParser.INTEGER_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2357;
	        this.match(StarRocksParser.T__3);
	        this.state = 2358;
	        this.match(StarRocksParser.VERSION);
	        this.state = 2359;
	        this.match(StarRocksParser.TO);
	        this.state = 2360;
	        localctx.version = this.match(StarRocksParser.INTEGER_VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	killStatement() {
	    let localctx = new KillStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, StarRocksParser.RULE_killStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2362;
	        this.match(StarRocksParser.KILL);
	        this.state = 2367;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 83:
	        case 514:
	        case 517:
	        case 518:
	            this.state = 2364;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===83) {
	                this.state = 2363;
	                this.match(StarRocksParser.CONNECTION);
	            }

	            break;
	        case 333:
	            this.state = 2366;
	            this.match(StarRocksParser.QUERY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2371;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 514:
	            this.state = 2369;
	            localctx.connId = this.match(StarRocksParser.INTEGER_VALUE);
	            break;
	        case 517:
	        case 518:
	            this.state = 2370;
	            localctx.queryId = this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	syncStatement() {
	    let localctx = new SyncStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, StarRocksParser.RULE_syncStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2373;
	        this.match(StarRocksParser.SYNC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminSetAutomatedSnapshotOnStatement() {
	    let localctx = new AdminSetAutomatedSnapshotOnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, StarRocksParser.RULE_adminSetAutomatedSnapshotOnStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2375;
	        this.match(StarRocksParser.ADMIN);
	        this.state = 2376;
	        this.match(StarRocksParser.SET);
	        this.state = 2377;
	        this.match(StarRocksParser.AUTOMATED);
	        this.state = 2378;
	        this.match(StarRocksParser.CLUSTER);
	        this.state = 2379;
	        this.match(StarRocksParser.SNAPSHOT);
	        this.state = 2380;
	        this.match(StarRocksParser.ON);
	        this.state = 2384;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===406) {
	            this.state = 2381;
	            this.match(StarRocksParser.STORAGE);
	            this.state = 2382;
	            this.match(StarRocksParser.VOLUME);
	            this.state = 2383;
	            localctx.svName = this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminSetAutomatedSnapshotOffStatement() {
	    let localctx = new AdminSetAutomatedSnapshotOffStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, StarRocksParser.RULE_adminSetAutomatedSnapshotOffStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2386;
	        this.match(StarRocksParser.ADMIN);
	        this.state = 2387;
	        this.match(StarRocksParser.SET);
	        this.state = 2388;
	        this.match(StarRocksParser.AUTOMATED);
	        this.state = 2389;
	        this.match(StarRocksParser.CLUSTER);
	        this.state = 2390;
	        this.match(StarRocksParser.SNAPSHOT);
	        this.state = 2391;
	        this.match(StarRocksParser.OFF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSystemStatement() {
	    let localctx = new AlterSystemStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, StarRocksParser.RULE_alterSystemStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2393;
	        this.match(StarRocksParser.ALTER);
	        this.state = 2394;
	        this.match(StarRocksParser.SYSTEM);
	        this.state = 2395;
	        this.alterClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelAlterSystemStatement() {
	    let localctx = new CancelAlterSystemStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, StarRocksParser.RULE_cancelAlterSystemStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2397;
	        this.match(StarRocksParser.CANCEL);
	        this.state = 2398;
	        this.match(StarRocksParser.DECOMMISSION);
	        this.state = 2399;
	        this.match(StarRocksParser.BACKEND);
	        this.state = 2400;
	        this.string();
	        this.state = 2405;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 2401;
	            this.match(StarRocksParser.T__2);
	            this.state = 2402;
	            this.string();
	            this.state = 2407;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showComputeNodesStatement() {
	    let localctx = new ShowComputeNodesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, StarRocksParser.RULE_showComputeNodesStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2408;
	        this.match(StarRocksParser.SHOW);
	        this.state = 2409;
	        this.match(StarRocksParser.COMPUTE);
	        this.state = 2410;
	        this.match(StarRocksParser.NODES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createExternalCatalogStatement() {
	    let localctx = new CreateExternalCatalogStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, StarRocksParser.RULE_createExternalCatalogStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2412;
	        this.match(StarRocksParser.CREATE);
	        this.state = 2413;
	        this.match(StarRocksParser.EXTERNAL);
	        this.state = 2414;
	        this.match(StarRocksParser.CATALOG);
	        this.state = 2418;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 2415;
	            this.match(StarRocksParser.IF);
	            this.state = 2416;
	            this.match(StarRocksParser.NOT);
	            this.state = 2417;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 2420;
	        localctx.catalogName = this.identifierOrString();
	        this.state = 2422;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 2421;
	            this.comment();
	        }

	        this.state = 2424;
	        this.properties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCreateExternalCatalogStatement() {
	    let localctx = new ShowCreateExternalCatalogStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, StarRocksParser.RULE_showCreateExternalCatalogStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2426;
	        this.match(StarRocksParser.SHOW);
	        this.state = 2427;
	        this.match(StarRocksParser.CREATE);
	        this.state = 2428;
	        this.match(StarRocksParser.CATALOG);
	        this.state = 2429;
	        localctx.catalogName = this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropExternalCatalogStatement() {
	    let localctx = new DropExternalCatalogStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, StarRocksParser.RULE_dropExternalCatalogStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2431;
	        this.match(StarRocksParser.DROP);
	        this.state = 2432;
	        this.match(StarRocksParser.CATALOG);
	        this.state = 2435;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 2433;
	            this.match(StarRocksParser.IF);
	            this.state = 2434;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 2437;
	        localctx.catalogName = this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCatalogsStatement() {
	    let localctx = new ShowCatalogsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, StarRocksParser.RULE_showCatalogsStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2439;
	        this.match(StarRocksParser.SHOW);
	        this.state = 2440;
	        this.match(StarRocksParser.CATALOGS);
	        this.state = 2443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===236) {
	            this.state = 2441;
	            this.match(StarRocksParser.LIKE);
	            this.state = 2442;
	            localctx.pattern = this.string();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterCatalogStatement() {
	    let localctx = new AlterCatalogStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, StarRocksParser.RULE_alterCatalogStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2445;
	        this.match(StarRocksParser.ALTER);
	        this.state = 2446;
	        this.match(StarRocksParser.CATALOG);
	        this.state = 2447;
	        localctx.catalogName = this.identifierOrString();
	        this.state = 2448;
	        this.modifyPropertiesClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createStorageVolumeStatement() {
	    let localctx = new CreateStorageVolumeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, StarRocksParser.RULE_createStorageVolumeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2450;
	        this.match(StarRocksParser.CREATE);
	        this.state = 2451;
	        this.match(StarRocksParser.STORAGE);
	        this.state = 2452;
	        this.match(StarRocksParser.VOLUME);
	        this.state = 2456;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 2453;
	            this.match(StarRocksParser.IF);
	            this.state = 2454;
	            this.match(StarRocksParser.NOT);
	            this.state = 2455;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 2458;
	        localctx.storageVolumeName = this.identifierOrString();
	        this.state = 2459;
	        this.typeDesc();
	        this.state = 2460;
	        this.locationsDesc();
	        this.state = 2462;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 2461;
	            this.comment();
	        }

	        this.state = 2465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 2464;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDesc() {
	    let localctx = new TypeDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, StarRocksParser.RULE_typeDesc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2467;
	        this.match(StarRocksParser.TYPE);
	        this.state = 2468;
	        this.match(StarRocksParser.EQ);
	        this.state = 2469;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	locationsDesc() {
	    let localctx = new LocationsDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, StarRocksParser.RULE_locationsDesc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2471;
	        this.match(StarRocksParser.LOCATIONS);
	        this.state = 2472;
	        this.match(StarRocksParser.EQ);
	        this.state = 2473;
	        this.stringList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStorageVolumesStatement() {
	    let localctx = new ShowStorageVolumesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, StarRocksParser.RULE_showStorageVolumesStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2475;
	        this.match(StarRocksParser.SHOW);
	        this.state = 2476;
	        this.match(StarRocksParser.STORAGE);
	        this.state = 2477;
	        this.match(StarRocksParser.VOLUMES);
	        this.state = 2480;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===236) {
	            this.state = 2478;
	            this.match(StarRocksParser.LIKE);
	            this.state = 2479;
	            localctx.pattern = this.string();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropStorageVolumeStatement() {
	    let localctx = new DropStorageVolumeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, StarRocksParser.RULE_dropStorageVolumeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2482;
	        this.match(StarRocksParser.DROP);
	        this.state = 2483;
	        this.match(StarRocksParser.STORAGE);
	        this.state = 2484;
	        this.match(StarRocksParser.VOLUME);
	        this.state = 2487;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 2485;
	            this.match(StarRocksParser.IF);
	            this.state = 2486;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 2489;
	        localctx.storageVolumeName = this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStorageVolumeStatement() {
	    let localctx = new AlterStorageVolumeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, StarRocksParser.RULE_alterStorageVolumeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2491;
	        this.match(StarRocksParser.ALTER);
	        this.state = 2492;
	        this.match(StarRocksParser.STORAGE);
	        this.state = 2493;
	        this.match(StarRocksParser.VOLUME);
	        this.state = 2494;
	        this.identifierOrString();
	        this.state = 2495;
	        this.alterStorageVolumeClause();
	        this.state = 2500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 2496;
	            this.match(StarRocksParser.T__2);
	            this.state = 2497;
	            this.alterStorageVolumeClause();
	            this.state = 2502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStorageVolumeClause() {
	    let localctx = new AlterStorageVolumeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, StarRocksParser.RULE_alterStorageVolumeClause);
	    try {
	        this.state = 2505;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 76:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2503;
	            this.modifyStorageVolumeCommentClause();
	            break;
	        case 391:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2504;
	            this.modifyStorageVolumePropertiesClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifyStorageVolumePropertiesClause() {
	    let localctx = new ModifyStorageVolumePropertiesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, StarRocksParser.RULE_modifyStorageVolumePropertiesClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2507;
	        this.match(StarRocksParser.SET);
	        this.state = 2508;
	        this.propertyList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifyStorageVolumeCommentClause() {
	    let localctx = new ModifyStorageVolumeCommentClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, StarRocksParser.RULE_modifyStorageVolumeCommentClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2510;
	        this.match(StarRocksParser.COMMENT);
	        this.state = 2511;
	        this.match(StarRocksParser.EQ);
	        this.state = 2512;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descStorageVolumeStatement() {
	    let localctx = new DescStorageVolumeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, StarRocksParser.RULE_descStorageVolumeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2514;
	        _la = this._input.LA(1);
	        if(!(_la===122 || _la===123)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2515;
	        this.match(StarRocksParser.STORAGE);
	        this.state = 2516;
	        this.match(StarRocksParser.VOLUME);
	        this.state = 2517;
	        this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setDefaultStorageVolumeStatement() {
	    let localctx = new SetDefaultStorageVolumeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, StarRocksParser.RULE_setDefaultStorageVolumeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2519;
	        this.match(StarRocksParser.SET);
	        this.state = 2520;
	        this.identifierOrString();
	        this.state = 2521;
	        this.match(StarRocksParser.AS);
	        this.state = 2522;
	        this.match(StarRocksParser.DEFAULT);
	        this.state = 2523;
	        this.match(StarRocksParser.STORAGE);
	        this.state = 2524;
	        this.match(StarRocksParser.VOLUME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateFailPointStatusStatement() {
	    let localctx = new UpdateFailPointStatusStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, StarRocksParser.RULE_updateFailPointStatusStatement);
	    var _la = 0;
	    try {
	        this.state = 2563;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2526;
	            this.match(StarRocksParser.ADMIN);
	            this.state = 2527;
	            this.match(StarRocksParser.DISABLE);
	            this.state = 2528;
	            this.match(StarRocksParser.FAILPOINT);
	            this.state = 2529;
	            this.string();
	            this.state = 2533;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===285) {
	                this.state = 2530;
	                this.match(StarRocksParser.ON);
	                this.state = 2531;
	                this.match(StarRocksParser.BACKEND);
	                this.state = 2532;
	                this.string();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2535;
	            this.match(StarRocksParser.ADMIN);
	            this.state = 2536;
	            this.match(StarRocksParser.ENABLE);
	            this.state = 2537;
	            this.match(StarRocksParser.FAILPOINT);
	            this.state = 2538;
	            this.string();
	            this.state = 2542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===476) {
	                this.state = 2539;
	                this.match(StarRocksParser.WITH);
	                this.state = 2540;
	                this.match(StarRocksParser.INTEGER_VALUE);
	                this.state = 2541;
	                this.match(StarRocksParser.TIMES);
	            }

	            this.state = 2547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===285) {
	                this.state = 2544;
	                this.match(StarRocksParser.ON);
	                this.state = 2545;
	                this.match(StarRocksParser.BACKEND);
	                this.state = 2546;
	                this.string();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2549;
	            this.match(StarRocksParser.ADMIN);
	            this.state = 2550;
	            this.match(StarRocksParser.ENABLE);
	            this.state = 2551;
	            this.match(StarRocksParser.FAILPOINT);
	            this.state = 2552;
	            this.string();
	            this.state = 2556;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===476) {
	                this.state = 2553;
	                this.match(StarRocksParser.WITH);
	                this.state = 2554;
	                this.match(StarRocksParser.DECIMAL_VALUE);
	                this.state = 2555;
	                this.match(StarRocksParser.PROBABILITY);
	            }

	            this.state = 2561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===285) {
	                this.state = 2558;
	                this.match(StarRocksParser.ON);
	                this.state = 2559;
	                this.match(StarRocksParser.BACKEND);
	                this.state = 2560;
	                this.string();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showFailPointStatement() {
	    let localctx = new ShowFailPointStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, StarRocksParser.RULE_showFailPointStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2565;
	        this.match(StarRocksParser.SHOW);
	        this.state = 2566;
	        this.match(StarRocksParser.FAILPOINTS);
	        this.state = 2569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===236) {
	            this.state = 2567;
	            this.match(StarRocksParser.LIKE);
	            this.state = 2568;
	            localctx.pattern = this.string();
	        }

	        this.state = 2574;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===285) {
	            this.state = 2571;
	            this.match(StarRocksParser.ON);
	            this.state = 2572;
	            this.match(StarRocksParser.BACKEND);
	            this.state = 2573;
	            this.string();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDictionaryStatement() {
	    let localctx = new CreateDictionaryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, StarRocksParser.RULE_createDictionaryStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2576;
	        this.match(StarRocksParser.CREATE);
	        this.state = 2577;
	        this.match(StarRocksParser.DICTIONARY);
	        this.state = 2578;
	        this.dictionaryName();
	        this.state = 2579;
	        this.match(StarRocksParser.USING);
	        this.state = 2580;
	        this.qualifiedName();
	        this.state = 2581;
	        this.match(StarRocksParser.T__1);
	        this.state = 2582;
	        this.dictionaryColumnDesc();
	        this.state = 2587;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 2583;
	            this.match(StarRocksParser.T__2);
	            this.state = 2584;
	            this.dictionaryColumnDesc();
	            this.state = 2589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2590;
	        this.match(StarRocksParser.T__3);
	        this.state = 2592;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 2591;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropDictionaryStatement() {
	    let localctx = new DropDictionaryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, StarRocksParser.RULE_dropDictionaryStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2594;
	        this.match(StarRocksParser.DROP);
	        this.state = 2595;
	        this.match(StarRocksParser.DICTIONARY);
	        this.state = 2596;
	        this.qualifiedName();
	        this.state = 2598;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===56) {
	            this.state = 2597;
	            this.match(StarRocksParser.CACHE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refreshDictionaryStatement() {
	    let localctx = new RefreshDictionaryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, StarRocksParser.RULE_refreshDictionaryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2600;
	        this.match(StarRocksParser.REFRESH);
	        this.state = 2601;
	        this.match(StarRocksParser.DICTIONARY);
	        this.state = 2602;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showDictionaryStatement() {
	    let localctx = new ShowDictionaryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, StarRocksParser.RULE_showDictionaryStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2604;
	        this.match(StarRocksParser.SHOW);
	        this.state = 2605;
	        this.match(StarRocksParser.DICTIONARY);
	        this.state = 2607;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 11)) & ~0x1f) === 0 && ((1 << (_la - 11)) & 1073535099) !== 0) || ((((_la - 43)) & ~0x1f) === 0 && ((1 << (_la - 43)) & 1587507069) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 4077329375) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 4212799553) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 3655786391) !== 0) || ((((_la - 173)) & ~0x1f) === 0 && ((1 << (_la - 173)) & 758110987) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 1629540721) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4226154469) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 3761733439) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4292771831) !== 0) || ((((_la - 334)) & ~0x1f) === 0 && ((1 << (_la - 334)) & 3221071791) !== 0) || ((((_la - 368)) & ~0x1f) === 0 && ((1 << (_la - 368)) & 3447406399) !== 0) || ((((_la - 400)) & ~0x1f) === 0 && ((1 << (_la - 400)) & 4126916095) !== 0) || ((((_la - 432)) & ~0x1f) === 0 && ((1 << (_la - 432)) & 3939712749) !== 0) || ((((_la - 464)) & ~0x1f) === 0 && ((1 << (_la - 464)) & 2162158079) !== 0) || ((((_la - 521)) & ~0x1f) === 0 && ((1 << (_la - 521)) & 263) !== 0)) {
	            this.state = 2606;
	            this.qualifiedName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelRefreshDictionaryStatement() {
	    let localctx = new CancelRefreshDictionaryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, StarRocksParser.RULE_cancelRefreshDictionaryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2609;
	        this.match(StarRocksParser.CANCEL);
	        this.state = 2610;
	        this.match(StarRocksParser.REFRESH);
	        this.state = 2611;
	        this.match(StarRocksParser.DICTIONARY);
	        this.state = 2612;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionaryColumnDesc() {
	    let localctx = new DictionaryColumnDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, StarRocksParser.RULE_dictionaryColumnDesc);
	    try {
	        this.state = 2620;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2614;
	            this.qualifiedName();
	            this.state = 2615;
	            this.match(StarRocksParser.KEY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2617;
	            this.qualifiedName();
	            this.state = 2618;
	            this.match(StarRocksParser.VALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionaryName() {
	    let localctx = new DictionaryNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, StarRocksParser.RULE_dictionaryName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2622;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterClause() {
	    let localctx = new AlterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, StarRocksParser.RULE_alterClause);
	    try {
	        this.state = 2671;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2624;
	            this.addFrontendClause();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2625;
	            this.dropFrontendClause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2626;
	            this.modifyFrontendHostClause();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2627;
	            this.addBackendClause();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2628;
	            this.dropBackendClause();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2629;
	            this.decommissionBackendClause();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2630;
	            this.modifyBackendClause();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2631;
	            this.addComputeNodeClause();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2632;
	            this.dropComputeNodeClause();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2633;
	            this.modifyBrokerClause();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2634;
	            this.alterLoadErrorUrlClause();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2635;
	            this.createImageClause();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2636;
	            this.cleanTabletSchedQClause();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2637;
	            this.decommissionDiskClause();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2638;
	            this.cancelDecommissionDiskClause();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2639;
	            this.disableDiskClause();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2640;
	            this.cancelDisableDiskClause();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2641;
	            this.createIndexClause();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2642;
	            this.dropIndexClause();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2643;
	            this.tableRenameClause();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2644;
	            this.swapTableClause();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2645;
	            this.modifyPropertiesClause();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2646;
	            this.addColumnClause();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2647;
	            this.addColumnsClause();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 2648;
	            this.dropColumnClause();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 2649;
	            this.modifyColumnClause();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 2650;
	            this.columnRenameClause();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 2651;
	            this.reorderColumnsClause();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 2652;
	            this.rollupRenameClause();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 2653;
	            this.compactionClause();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 2654;
	            this.modifyCommentClause();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 2655;
	            this.optimizeClause();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 2656;
	            this.addFieldClause();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 2657;
	            this.dropFieldClause();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 2658;
	            this.createOrReplaceBranchClause();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 2659;
	            this.createOrReplaceTagClause();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 2660;
	            this.dropBranchClause();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 2661;
	            this.dropTagClause();
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 2662;
	            this.tableOperationClause();
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 2663;
	            this.dropPersistentIndexClause();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 2664;
	            this.addPartitionClause();
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 2665;
	            this.dropPartitionClause();
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 2666;
	            this.distributionClause();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 2667;
	            this.truncatePartitionClause();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 2668;
	            this.modifyPartitionClause();
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 2669;
	            this.replacePartitionClause();
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 2670;
	            this.partitionRenameClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addFrontendClause() {
	    let localctx = new AddFrontendClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, StarRocksParser.RULE_addFrontendClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2673;
	        this.match(StarRocksParser.ADD);
	        this.state = 2674;
	        _la = this._input.LA(1);
	        if(!(_la===163 || _la===281)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2675;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropFrontendClause() {
	    let localctx = new DropFrontendClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, StarRocksParser.RULE_dropFrontendClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2677;
	        this.match(StarRocksParser.DROP);
	        this.state = 2678;
	        _la = this._input.LA(1);
	        if(!(_la===163 || _la===281)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2679;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifyFrontendHostClause() {
	    let localctx = new ModifyFrontendHostClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, StarRocksParser.RULE_modifyFrontendHostClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2681;
	        this.match(StarRocksParser.MODIFY);
	        this.state = 2682;
	        this.match(StarRocksParser.FRONTEND);
	        this.state = 2683;
	        this.match(StarRocksParser.HOST);
	        this.state = 2684;
	        this.string();
	        this.state = 2685;
	        this.match(StarRocksParser.TO);
	        this.state = 2686;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addBackendClause() {
	    let localctx = new AddBackendClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, StarRocksParser.RULE_addBackendClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2688;
	        this.match(StarRocksParser.ADD);
	        this.state = 2689;
	        this.match(StarRocksParser.BACKEND);
	        this.state = 2690;
	        this.string();
	        this.state = 2695;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,199,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2691;
	                this.match(StarRocksParser.T__2);
	                this.state = 2692;
	                this.string(); 
	            }
	            this.state = 2697;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,199,this._ctx);
	        }

	        this.state = 2701;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===214) {
	            this.state = 2698;
	            this.match(StarRocksParser.INTO);
	            this.state = 2699;
	            this.match(StarRocksParser.WAREHOUSE);
	            this.state = 2700;
	            localctx.warehouseName = this.identifierOrString();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropBackendClause() {
	    let localctx = new DropBackendClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, StarRocksParser.RULE_dropBackendClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2703;
	        this.match(StarRocksParser.DROP);
	        this.state = 2704;
	        this.match(StarRocksParser.BACKEND);
	        this.state = 2705;
	        this.string();
	        this.state = 2710;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,201,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2706;
	                this.match(StarRocksParser.T__2);
	                this.state = 2707;
	                this.string(); 
	            }
	            this.state = 2712;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,201,this._ctx);
	        }

	        this.state = 2716;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168) {
	            this.state = 2713;
	            this.match(StarRocksParser.FROM);
	            this.state = 2714;
	            this.match(StarRocksParser.WAREHOUSE);
	            this.state = 2715;
	            localctx.warehouseName = this.identifierOrString();
	        }

	        this.state = 2719;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===165) {
	            this.state = 2718;
	            this.match(StarRocksParser.FORCE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decommissionBackendClause() {
	    let localctx = new DecommissionBackendClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, StarRocksParser.RULE_decommissionBackendClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2721;
	        this.match(StarRocksParser.DECOMMISSION);
	        this.state = 2722;
	        this.match(StarRocksParser.BACKEND);
	        this.state = 2723;
	        this.string();
	        this.state = 2728;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,204,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2724;
	                this.match(StarRocksParser.T__2);
	                this.state = 2725;
	                this.string(); 
	            }
	            this.state = 2730;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,204,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifyBackendClause() {
	    let localctx = new ModifyBackendClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, StarRocksParser.RULE_modifyBackendClause);
	    try {
	        this.state = 2744;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2731;
	            this.match(StarRocksParser.MODIFY);
	            this.state = 2732;
	            this.match(StarRocksParser.BACKEND);
	            this.state = 2733;
	            this.match(StarRocksParser.HOST);
	            this.state = 2734;
	            this.string();
	            this.state = 2735;
	            this.match(StarRocksParser.TO);
	            this.state = 2736;
	            this.string();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2738;
	            this.match(StarRocksParser.MODIFY);
	            this.state = 2739;
	            this.match(StarRocksParser.BACKEND);
	            this.state = 2740;
	            this.string();
	            this.state = 2741;
	            this.match(StarRocksParser.SET);
	            this.state = 2742;
	            this.propertyList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addComputeNodeClause() {
	    let localctx = new AddComputeNodeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, StarRocksParser.RULE_addComputeNodeClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2746;
	        this.match(StarRocksParser.ADD);
	        this.state = 2747;
	        this.match(StarRocksParser.COMPUTE);
	        this.state = 2748;
	        this.match(StarRocksParser.NODE);
	        this.state = 2749;
	        this.string();
	        this.state = 2754;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,206,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2750;
	                this.match(StarRocksParser.T__2);
	                this.state = 2751;
	                this.string(); 
	            }
	            this.state = 2756;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,206,this._ctx);
	        }

	        this.state = 2760;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===214) {
	            this.state = 2757;
	            this.match(StarRocksParser.INTO);
	            this.state = 2758;
	            this.match(StarRocksParser.WAREHOUSE);
	            this.state = 2759;
	            localctx.warehouseName = this.identifierOrString();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropComputeNodeClause() {
	    let localctx = new DropComputeNodeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, StarRocksParser.RULE_dropComputeNodeClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2762;
	        this.match(StarRocksParser.DROP);
	        this.state = 2763;
	        this.match(StarRocksParser.COMPUTE);
	        this.state = 2764;
	        this.match(StarRocksParser.NODE);
	        this.state = 2765;
	        this.string();
	        this.state = 2770;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,208,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2766;
	                this.match(StarRocksParser.T__2);
	                this.state = 2767;
	                this.string(); 
	            }
	            this.state = 2772;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,208,this._ctx);
	        }

	        this.state = 2776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168) {
	            this.state = 2773;
	            this.match(StarRocksParser.FROM);
	            this.state = 2774;
	            this.match(StarRocksParser.WAREHOUSE);
	            this.state = 2775;
	            localctx.warehouseName = this.identifierOrString();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifyBrokerClause() {
	    let localctx = new ModifyBrokerClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, StarRocksParser.RULE_modifyBrokerClause);
	    try {
	        this.state = 2804;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2778;
	            this.match(StarRocksParser.ADD);
	            this.state = 2779;
	            this.match(StarRocksParser.BROKER);
	            this.state = 2780;
	            this.identifierOrString();
	            this.state = 2781;
	            this.string();
	            this.state = 2786;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,210,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2782;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 2783;
	                    this.string(); 
	                }
	                this.state = 2788;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,210,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2789;
	            this.match(StarRocksParser.DROP);
	            this.state = 2790;
	            this.match(StarRocksParser.BROKER);
	            this.state = 2791;
	            this.identifierOrString();
	            this.state = 2792;
	            this.string();
	            this.state = 2797;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,211,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2793;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 2794;
	                    this.string(); 
	                }
	                this.state = 2799;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,211,this._ctx);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2800;
	            this.match(StarRocksParser.DROP);
	            this.state = 2801;
	            this.match(StarRocksParser.ALL);
	            this.state = 2802;
	            this.match(StarRocksParser.BROKER);
	            this.state = 2803;
	            this.identifierOrString();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterLoadErrorUrlClause() {
	    let localctx = new AlterLoadErrorUrlClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, StarRocksParser.RULE_alterLoadErrorUrlClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2806;
	        this.match(StarRocksParser.SET);
	        this.state = 2807;
	        this.match(StarRocksParser.LOAD);
	        this.state = 2808;
	        this.match(StarRocksParser.ERRORS);
	        this.state = 2809;
	        this.match(StarRocksParser.HUB);
	        this.state = 2811;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 2810;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createImageClause() {
	    let localctx = new CreateImageClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, StarRocksParser.RULE_createImageClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2813;
	        this.match(StarRocksParser.CREATE);
	        this.state = 2814;
	        this.match(StarRocksParser.IMAGE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cleanTabletSchedQClause() {
	    let localctx = new CleanTabletSchedQClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, StarRocksParser.RULE_cleanTabletSchedQClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2816;
	        this.match(StarRocksParser.CLEAN);
	        this.state = 2817;
	        this.match(StarRocksParser.TABLET);
	        this.state = 2818;
	        this.match(StarRocksParser.SCHEDULER);
	        this.state = 2819;
	        this.match(StarRocksParser.QUEUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decommissionDiskClause() {
	    let localctx = new DecommissionDiskClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, StarRocksParser.RULE_decommissionDiskClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2821;
	        this.match(StarRocksParser.DECOMMISSION);
	        this.state = 2822;
	        this.match(StarRocksParser.DISK);
	        this.state = 2823;
	        this.string();
	        this.state = 2828;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 2824;
	            this.match(StarRocksParser.T__2);
	            this.state = 2825;
	            this.string();
	            this.state = 2830;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2831;
	        this.match(StarRocksParser.ON);
	        this.state = 2832;
	        this.match(StarRocksParser.BACKEND);
	        this.state = 2833;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelDecommissionDiskClause() {
	    let localctx = new CancelDecommissionDiskClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, StarRocksParser.RULE_cancelDecommissionDiskClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2835;
	        this.match(StarRocksParser.CANCEL);
	        this.state = 2836;
	        this.match(StarRocksParser.DECOMMISSION);
	        this.state = 2837;
	        this.match(StarRocksParser.DISK);
	        this.state = 2838;
	        this.string();
	        this.state = 2843;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 2839;
	            this.match(StarRocksParser.T__2);
	            this.state = 2840;
	            this.string();
	            this.state = 2845;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2846;
	        this.match(StarRocksParser.ON);
	        this.state = 2847;
	        this.match(StarRocksParser.BACKEND);
	        this.state = 2848;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	disableDiskClause() {
	    let localctx = new DisableDiskClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, StarRocksParser.RULE_disableDiskClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2850;
	        this.match(StarRocksParser.DISABLE);
	        this.state = 2851;
	        this.match(StarRocksParser.DISK);
	        this.state = 2852;
	        this.string();
	        this.state = 2857;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 2853;
	            this.match(StarRocksParser.T__2);
	            this.state = 2854;
	            this.string();
	            this.state = 2859;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2860;
	        this.match(StarRocksParser.ON);
	        this.state = 2861;
	        this.match(StarRocksParser.BACKEND);
	        this.state = 2862;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelDisableDiskClause() {
	    let localctx = new CancelDisableDiskClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, StarRocksParser.RULE_cancelDisableDiskClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2864;
	        this.match(StarRocksParser.CANCEL);
	        this.state = 2865;
	        this.match(StarRocksParser.DISABLE);
	        this.state = 2866;
	        this.match(StarRocksParser.DISK);
	        this.state = 2867;
	        this.string();
	        this.state = 2872;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 2868;
	            this.match(StarRocksParser.T__2);
	            this.state = 2869;
	            this.string();
	            this.state = 2874;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2875;
	        this.match(StarRocksParser.ON);
	        this.state = 2876;
	        this.match(StarRocksParser.BACKEND);
	        this.state = 2877;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndexClause() {
	    let localctx = new CreateIndexClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, StarRocksParser.RULE_createIndexClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2879;
	        this.match(StarRocksParser.ADD);
	        this.state = 2880;
	        this.match(StarRocksParser.INDEX);
	        this.state = 2881;
	        localctx.indexName = this.identifier();
	        this.state = 2882;
	        this.identifierList();
	        this.state = 2887;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===456) {
	            this.state = 2883;
	            this.indexType();
	            this.state = 2885;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 2884;
	                this.propertyList();
	            }

	        }

	        this.state = 2890;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 2889;
	            this.comment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropIndexClause() {
	    let localctx = new DropIndexClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, StarRocksParser.RULE_dropIndexClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2892;
	        this.match(StarRocksParser.DROP);
	        this.state = 2893;
	        this.match(StarRocksParser.INDEX);
	        this.state = 2894;
	        localctx.indexName = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRenameClause() {
	    let localctx = new TableRenameClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, StarRocksParser.RULE_tableRenameClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2896;
	        this.match(StarRocksParser.RENAME);
	        this.state = 2897;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	swapTableClause() {
	    let localctx = new SwapTableClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, StarRocksParser.RULE_swapTableClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2899;
	        this.match(StarRocksParser.SWAP);
	        this.state = 2900;
	        this.match(StarRocksParser.WITH);
	        this.state = 2901;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifyPropertiesClause() {
	    let localctx = new ModifyPropertiesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, StarRocksParser.RULE_modifyPropertiesClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2903;
	        this.match(StarRocksParser.SET);
	        this.state = 2904;
	        this.propertyList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifyCommentClause() {
	    let localctx = new ModifyCommentClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, StarRocksParser.RULE_modifyCommentClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2906;
	        this.match(StarRocksParser.COMMENT);
	        this.state = 2907;
	        this.match(StarRocksParser.EQ);
	        this.state = 2908;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optimizeClause() {
	    let localctx = new OptimizeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, StarRocksParser.RULE_optimizeClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2911;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,221,this._ctx);
	        if(la_===1) {
	            this.state = 2910;
	            this.partitionNames();

	        }
	        this.state = 2914;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===131 || _la===318 || _la===447) {
	            this.state = 2913;
	            this.keyDesc();
	        }

	        this.state = 2917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298) {
	            this.state = 2916;
	            this.partitionDesc();
	        }

	        this.state = 2920;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293) {
	            this.state = 2919;
	            this.orderByDesc();
	        }

	        this.state = 2923;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===126) {
	            this.state = 2922;
	            this.distributionDesc();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addColumnClause() {
	    let localctx = new AddColumnClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, StarRocksParser.RULE_addColumnClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2925;
	        this.match(StarRocksParser.ADD);
	        this.state = 2926;
	        this.match(StarRocksParser.COLUMN);
	        this.state = 2927;
	        this.columnDesc();
	        this.state = 2931;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 157:
	        	this.state = 2928;
	        	this.match(StarRocksParser.FIRST);
	        	break;
	        case 16:
	        	this.state = 2929;
	        	this.match(StarRocksParser.AFTER);
	        	this.state = 2930;
	        	this.identifier();
	        	break;
	        case -1:
	        case 3:
	        case 198:
	        case 327:
	        case 436:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 2935;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===198 || _la===436) {
	            this.state = 2933;
	            _la = this._input.LA(1);
	            if(!(_la===198 || _la===436)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2934;
	            localctx.rollupName = this.identifier();
	        }

	        this.state = 2938;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 2937;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addColumnsClause() {
	    let localctx = new AddColumnsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, StarRocksParser.RULE_addColumnsClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2940;
	        this.match(StarRocksParser.ADD);
	        this.state = 2941;
	        this.match(StarRocksParser.COLUMN);
	        this.state = 2942;
	        this.match(StarRocksParser.T__1);
	        this.state = 2943;
	        this.columnDesc();
	        this.state = 2948;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 2944;
	            this.match(StarRocksParser.T__2);
	            this.state = 2945;
	            this.columnDesc();
	            this.state = 2950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2951;
	        this.match(StarRocksParser.T__3);
	        this.state = 2954;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===198 || _la===436) {
	            this.state = 2952;
	            _la = this._input.LA(1);
	            if(!(_la===198 || _la===436)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2953;
	            localctx.rollupName = this.identifier();
	        }

	        this.state = 2957;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 2956;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropColumnClause() {
	    let localctx = new DropColumnClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, StarRocksParser.RULE_dropColumnClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2959;
	        this.match(StarRocksParser.DROP);
	        this.state = 2960;
	        this.match(StarRocksParser.COLUMN);
	        this.state = 2961;
	        this.identifier();
	        this.state = 2964;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168) {
	            this.state = 2962;
	            this.match(StarRocksParser.FROM);
	            this.state = 2963;
	            localctx.rollupName = this.identifier();
	        }

	        this.state = 2967;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 2966;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifyColumnClause() {
	    let localctx = new ModifyColumnClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, StarRocksParser.RULE_modifyColumnClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2969;
	        this.match(StarRocksParser.MODIFY);
	        this.state = 2970;
	        this.match(StarRocksParser.COLUMN);
	        this.state = 2971;
	        this.columnDesc();
	        this.state = 2975;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 157:
	        	this.state = 2972;
	        	this.match(StarRocksParser.FIRST);
	        	break;
	        case 16:
	        	this.state = 2973;
	        	this.match(StarRocksParser.AFTER);
	        	this.state = 2974;
	        	this.identifier();
	        	break;
	        case -1:
	        case 3:
	        case 168:
	        case 327:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 2979;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168) {
	            this.state = 2977;
	            this.match(StarRocksParser.FROM);
	            this.state = 2978;
	            localctx.rollupName = this.identifier();
	        }

	        this.state = 2982;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 2981;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnRenameClause() {
	    let localctx = new ColumnRenameClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, StarRocksParser.RULE_columnRenameClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2984;
	        this.match(StarRocksParser.RENAME);
	        this.state = 2985;
	        this.match(StarRocksParser.COLUMN);
	        this.state = 2986;
	        localctx.oldColumn = this.identifier();
	        this.state = 2987;
	        this.match(StarRocksParser.TO);
	        this.state = 2988;
	        localctx.newColumn = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reorderColumnsClause() {
	    let localctx = new ReorderColumnsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, StarRocksParser.RULE_reorderColumnsClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2990;
	        this.match(StarRocksParser.ORDER);
	        this.state = 2991;
	        this.match(StarRocksParser.BY);
	        this.state = 2992;
	        this.identifierList();
	        this.state = 2995;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168) {
	            this.state = 2993;
	            this.match(StarRocksParser.FROM);
	            this.state = 2994;
	            localctx.rollupName = this.identifier();
	        }

	        this.state = 2998;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 2997;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollupRenameClause() {
	    let localctx = new RollupRenameClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, StarRocksParser.RULE_rollupRenameClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3000;
	        this.match(StarRocksParser.RENAME);
	        this.state = 3001;
	        this.match(StarRocksParser.ROLLUP);
	        this.state = 3002;
	        localctx.rollupName = this.identifier();
	        this.state = 3003;
	        localctx.newRollupName = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compactionClause() {
	    let localctx = new CompactionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, StarRocksParser.RULE_compactionClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3006;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===38 || _la===92) {
	            this.state = 3005;
	            _la = this._input.LA(1);
	            if(!(_la===38 || _la===92)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3008;
	        this.match(StarRocksParser.COMPACT);
	        this.state = 3011;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 22:
	        case 23:
	        case 25:
	        case 26:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 99:
	        case 100:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 113:
	        case 118:
	        case 119:
	        case 120:
	        case 124:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 143:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 153:
	        case 154:
	        case 156:
	        case 157:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 173:
	        case 174:
	        case 176:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 194:
	        case 197:
	        case 199:
	        case 200:
	        case 202:
	        case 205:
	        case 209:
	        case 210:
	        case 211:
	        case 213:
	        case 217:
	        case 219:
	        case 220:
	        case 226:
	        case 229:
	        case 234:
	        case 235:
	        case 238:
	        case 240:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 256:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 286:
	        case 287:
	        case 288:
	        case 290:
	        case 291:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 339:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 347:
	        case 349:
	        case 350:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 365:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 392:
	        case 394:
	        case 395:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 415:
	        case 416:
	        case 417:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 426:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 437:
	        case 438:
	        case 439:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 448:
	        case 449:
	        case 452:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 486:
	        case 487:
	        case 495:
	        case 521:
	        case 522:
	        case 523:
	        case 529:
	        	this.state = 3009;
	        	this.identifier();
	        	break;
	        case 2:
	        	this.state = 3010;
	        	this.identifierList();
	        	break;
	        case -1:
	        case 3:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subfieldName() {
	    let localctx = new SubfieldNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, StarRocksParser.RULE_subfieldName);
	    try {
	        this.state = 3015;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3013;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3014;
	            this.match(StarRocksParser.ARRAY_ELEMENT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedFieldName() {
	    let localctx = new NestedFieldNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, StarRocksParser.RULE_nestedFieldName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3017;
	        this.subfieldName();
	        this.state = 3023;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1 || _la===524) {
	            this.state = 3021;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 524:
	                this.state = 3018;
	                this.match(StarRocksParser.DOT_IDENTIFIER);
	                break;
	            case 1:
	                this.state = 3019;
	                this.match(StarRocksParser.T__0);
	                this.state = 3020;
	                this.subfieldName();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3025;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addFieldClause() {
	    let localctx = new AddFieldClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, StarRocksParser.RULE_addFieldClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3026;
	        this.match(StarRocksParser.MODIFY);
	        this.state = 3027;
	        this.match(StarRocksParser.COLUMN);
	        this.state = 3028;
	        this.identifier();
	        this.state = 3029;
	        this.match(StarRocksParser.ADD);
	        this.state = 3030;
	        this.match(StarRocksParser.FIELD);
	        this.state = 3031;
	        this.subfieldDesc();
	        this.state = 3035;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 157:
	        	this.state = 3032;
	        	this.match(StarRocksParser.FIRST);
	        	break;
	        case 16:
	        	this.state = 3033;
	        	this.match(StarRocksParser.AFTER);
	        	this.state = 3034;
	        	this.identifier();
	        	break;
	        case -1:
	        case 3:
	        case 327:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 3038;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 3037;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropFieldClause() {
	    let localctx = new DropFieldClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, StarRocksParser.RULE_dropFieldClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3040;
	        this.match(StarRocksParser.MODIFY);
	        this.state = 3041;
	        this.match(StarRocksParser.COLUMN);
	        this.state = 3042;
	        this.identifier();
	        this.state = 3043;
	        this.match(StarRocksParser.DROP);
	        this.state = 3044;
	        this.match(StarRocksParser.FIELD);
	        this.state = 3045;
	        this.nestedFieldName();
	        this.state = 3047;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 3046;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createOrReplaceTagClause() {
	    let localctx = new CreateOrReplaceTagClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, StarRocksParser.RULE_createOrReplaceTagClause);
	    var _la = 0;
	    try {
	        this.state = 3068;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3051;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===88) {
	                this.state = 3049;
	                this.match(StarRocksParser.CREATE);
	                this.state = 3050;
	                this.match(StarRocksParser.OR);
	            }

	            this.state = 3053;
	            this.match(StarRocksParser.REPLACE);
	            this.state = 3054;
	            this.match(StarRocksParser.TAG);
	            this.state = 3055;
	            this.identifier();
	            this.state = 3056;
	            this.tagOptions();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3058;
	            this.match(StarRocksParser.CREATE);
	            this.state = 3059;
	            this.match(StarRocksParser.TAG);
	            this.state = 3063;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===193) {
	                this.state = 3060;
	                this.match(StarRocksParser.IF);
	                this.state = 3061;
	                this.match(StarRocksParser.NOT);
	                this.state = 3062;
	                this.match(StarRocksParser.EXISTS);
	            }

	            this.state = 3065;
	            this.identifier();
	            this.state = 3066;
	            this.tagOptions();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createOrReplaceBranchClause() {
	    let localctx = new CreateOrReplaceBranchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, StarRocksParser.RULE_createOrReplaceBranchClause);
	    var _la = 0;
	    try {
	        this.state = 3089;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3072;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===88) {
	                this.state = 3070;
	                this.match(StarRocksParser.CREATE);
	                this.state = 3071;
	                this.match(StarRocksParser.OR);
	            }

	            this.state = 3074;
	            this.match(StarRocksParser.REPLACE);
	            this.state = 3075;
	            this.match(StarRocksParser.BRANCH);
	            this.state = 3076;
	            this.identifier();
	            this.state = 3077;
	            this.branchOptions();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3079;
	            this.match(StarRocksParser.CREATE);
	            this.state = 3080;
	            this.match(StarRocksParser.BRANCH);
	            this.state = 3084;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===193) {
	                this.state = 3081;
	                this.match(StarRocksParser.IF);
	                this.state = 3082;
	                this.match(StarRocksParser.NOT);
	                this.state = 3083;
	                this.match(StarRocksParser.EXISTS);
	            }

	            this.state = 3086;
	            this.identifier();
	            this.state = 3087;
	            this.branchOptions();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropBranchClause() {
	    let localctx = new DropBranchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, StarRocksParser.RULE_dropBranchClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3091;
	        this.match(StarRocksParser.DROP);
	        this.state = 3092;
	        this.match(StarRocksParser.BRANCH);
	        this.state = 3095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 3093;
	            this.match(StarRocksParser.IF);
	            this.state = 3094;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 3097;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTagClause() {
	    let localctx = new DropTagClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, StarRocksParser.RULE_dropTagClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3099;
	        this.match(StarRocksParser.DROP);
	        this.state = 3100;
	        this.match(StarRocksParser.TAG);
	        this.state = 3103;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 3101;
	            this.match(StarRocksParser.IF);
	            this.state = 3102;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 3105;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOperationClause() {
	    let localctx = new TableOperationClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, StarRocksParser.RULE_tableOperationClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3107;
	        this.match(StarRocksParser.EXECUTE);
	        this.state = 3108;
	        this.functionCall();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tagOptions() {
	    let localctx = new TagOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, StarRocksParser.RULE_tagOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3114;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 3110;
	            this.match(StarRocksParser.AS);
	            this.state = 3111;
	            this.match(StarRocksParser.OF);
	            this.state = 3112;
	            this.match(StarRocksParser.VERSION);
	            this.state = 3113;
	            this.snapshotId();
	        }

	        this.state = 3117;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===360) {
	            this.state = 3116;
	            this.refRetain();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	branchOptions() {
	    let localctx = new BranchOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, StarRocksParser.RULE_branchOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3123;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 3119;
	            this.match(StarRocksParser.AS);
	            this.state = 3120;
	            this.match(StarRocksParser.OF);
	            this.state = 3121;
	            this.match(StarRocksParser.VERSION);
	            this.state = 3122;
	            this.snapshotId();
	        }

	        this.state = 3126;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===360) {
	            this.state = 3125;
	            this.refRetain();
	        }

	        this.state = 3129;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===476) {
	            this.state = 3128;
	            this.snapshotRetention();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	snapshotRetention() {
	    let localctx = new SnapshotRetentionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, StarRocksParser.RULE_snapshotRetention);
	    try {
	        this.state = 3145;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3131;
	            this.match(StarRocksParser.WITH);
	            this.state = 3132;
	            this.match(StarRocksParser.SNAPSHOT);
	            this.state = 3133;
	            this.match(StarRocksParser.RETENTION);
	            this.state = 3134;
	            this.minSnapshotsToKeep();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3135;
	            this.match(StarRocksParser.WITH);
	            this.state = 3136;
	            this.match(StarRocksParser.SNAPSHOT);
	            this.state = 3137;
	            this.match(StarRocksParser.RETENTION);
	            this.state = 3138;
	            this.maxSnapshotAge();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3139;
	            this.match(StarRocksParser.WITH);
	            this.state = 3140;
	            this.match(StarRocksParser.SNAPSHOT);
	            this.state = 3141;
	            this.match(StarRocksParser.RETENTION);
	            this.state = 3142;
	            this.minSnapshotsToKeep();
	            this.state = 3143;
	            this.maxSnapshotAge();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refRetain() {
	    let localctx = new RefRetainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, StarRocksParser.RULE_refRetain);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3147;
	        this.match(StarRocksParser.RETAIN);
	        this.state = 3148;
	        this.number();
	        this.state = 3149;
	        this.timeUnit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maxSnapshotAge() {
	    let localctx = new MaxSnapshotAgeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, StarRocksParser.RULE_maxSnapshotAge);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3151;
	        this.number();
	        this.state = 3152;
	        this.timeUnit();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minSnapshotsToKeep() {
	    let localctx = new MinSnapshotsToKeepContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, StarRocksParser.RULE_minSnapshotsToKeep);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3154;
	        this.number();
	        this.state = 3155;
	        this.match(StarRocksParser.SNAPSHOTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	snapshotId() {
	    let localctx = new SnapshotIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, StarRocksParser.RULE_snapshotId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3157;
	        this.number();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeUnit() {
	    let localctx = new TimeUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, StarRocksParser.RULE_timeUnit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3159;
	        _la = this._input.LA(1);
	        if(!(_la===106 || _la===190 || _la===261)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer_list() {
	    let localctx = new Integer_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, StarRocksParser.RULE_integer_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3161;
	        this.match(StarRocksParser.T__1);
	        this.state = 3162;
	        this.match(StarRocksParser.INTEGER_VALUE);
	        this.state = 3167;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 3163;
	            this.match(StarRocksParser.T__2);
	            this.state = 3164;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            this.state = 3169;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3170;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPersistentIndexClause() {
	    let localctx = new DropPersistentIndexClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, StarRocksParser.RULE_dropPersistentIndexClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3172;
	        this.match(StarRocksParser.DROP);
	        this.state = 3173;
	        this.match(StarRocksParser.PERSISTENT);
	        this.state = 3174;
	        this.match(StarRocksParser.INDEX);
	        this.state = 3175;
	        this.match(StarRocksParser.ON);
	        this.state = 3176;
	        this.match(StarRocksParser.TABLETS);
	        this.state = 3177;
	        this.integer_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addPartitionClause() {
	    let localctx = new AddPartitionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, StarRocksParser.RULE_addPartitionClause);
	    var _la = 0;
	    try {
	        this.state = 3208;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3179;
	            this.match(StarRocksParser.ADD);
	            this.state = 3181;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===424) {
	                this.state = 3180;
	                this.match(StarRocksParser.TEMPORARY);
	            }

	            this.state = 3186;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 298:
	                this.state = 3183;
	                this.singleRangePartition();
	                break;
	            case 299:
	                this.state = 3184;
	                this.match(StarRocksParser.PARTITIONS);
	                this.state = 3185;
	                this.multiRangePartition();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3189;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===126) {
	                this.state = 3188;
	                this.distributionDesc();
	            }

	            this.state = 3192;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===327) {
	                this.state = 3191;
	                this.properties();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3194;
	            this.match(StarRocksParser.ADD);
	            this.state = 3196;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===424) {
	                this.state = 3195;
	                this.match(StarRocksParser.TEMPORARY);
	            }

	            this.state = 3200;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,267,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3198;
	                this.singleItemListPartitionDesc();
	                break;

	            case 2:
	                this.state = 3199;
	                this.multiItemListPartitionDesc();
	                break;

	            }
	            this.state = 3203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===126) {
	                this.state = 3202;
	                this.distributionDesc();
	            }

	            this.state = 3206;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===327) {
	                this.state = 3205;
	                this.properties();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPartitionClause() {
	    let localctx = new DropPartitionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, StarRocksParser.RULE_dropPartitionClause);
	    var _la = 0;
	    try {
	        this.state = 3258;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3210;
	            this.match(StarRocksParser.DROP);
	            this.state = 3212;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===424) {
	                this.state = 3211;
	                this.match(StarRocksParser.TEMPORARY);
	            }

	            this.state = 3226;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 298:
	                this.state = 3214;
	                this.match(StarRocksParser.PARTITION);
	                this.state = 3217;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===193) {
	                    this.state = 3215;
	                    this.match(StarRocksParser.IF);
	                    this.state = 3216;
	                    this.match(StarRocksParser.EXISTS);
	                }

	                this.state = 3219;
	                this.identifier();
	                break;
	            case 299:
	                this.state = 3220;
	                this.match(StarRocksParser.PARTITIONS);
	                this.state = 3223;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===193) {
	                    this.state = 3221;
	                    this.match(StarRocksParser.IF);
	                    this.state = 3222;
	                    this.match(StarRocksParser.EXISTS);
	                }

	                this.state = 3225;
	                this.identifierList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3229;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===165) {
	                this.state = 3228;
	                this.match(StarRocksParser.FORCE);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3231;
	            this.match(StarRocksParser.DROP);
	            this.state = 3233;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===424) {
	                this.state = 3232;
	                this.match(StarRocksParser.TEMPORARY);
	            }

	            this.state = 3235;
	            this.match(StarRocksParser.PARTITIONS);
	            this.state = 3238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===193) {
	                this.state = 3236;
	                this.match(StarRocksParser.IF);
	                this.state = 3237;
	                this.match(StarRocksParser.EXISTS);
	            }

	            this.state = 3240;
	            this.multiRangePartition();
	            this.state = 3242;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===165) {
	                this.state = 3241;
	                this.match(StarRocksParser.FORCE);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3244;
	            this.match(StarRocksParser.DROP);
	            this.state = 3246;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===424) {
	                this.state = 3245;
	                this.match(StarRocksParser.TEMPORARY);
	            }

	            this.state = 3248;
	            this.match(StarRocksParser.PARTITIONS);
	            this.state = 3251;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===193) {
	                this.state = 3249;
	                this.match(StarRocksParser.IF);
	                this.state = 3250;
	                this.match(StarRocksParser.EXISTS);
	            }

	            this.state = 3253;
	            this.match(StarRocksParser.WHERE);
	            this.state = 3254;
	            localctx.where = this.expression(0);
	            this.state = 3256;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===165) {
	                this.state = 3255;
	                this.match(StarRocksParser.FORCE);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncatePartitionClause() {
	    let localctx = new TruncatePartitionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, StarRocksParser.RULE_truncatePartitionClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3260;
	        this.match(StarRocksParser.TRUNCATE);
	        this.state = 3261;
	        this.partitionNames();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modifyPartitionClause() {
	    let localctx = new ModifyPartitionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, StarRocksParser.RULE_modifyPartitionClause);
	    try {
	        this.state = 3277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3263;
	            this.match(StarRocksParser.MODIFY);
	            this.state = 3264;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 3270;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3265;
	                this.identifier();
	                break;

	            case 2:
	                this.state = 3266;
	                this.identifierList();
	                break;

	            case 3:
	                this.state = 3267;
	                this.match(StarRocksParser.T__1);
	                this.state = 3268;
	                this.match(StarRocksParser.ASTERISK_SYMBOL);
	                this.state = 3269;
	                this.match(StarRocksParser.T__3);
	                break;

	            }
	            this.state = 3272;
	            this.match(StarRocksParser.SET);
	            this.state = 3273;
	            this.propertyList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3274;
	            this.match(StarRocksParser.MODIFY);
	            this.state = 3275;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 3276;
	            this.distributionDesc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replacePartitionClause() {
	    let localctx = new ReplacePartitionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, StarRocksParser.RULE_replacePartitionClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3279;
	        this.match(StarRocksParser.REPLACE);
	        this.state = 3280;
	        localctx.parName = this.partitionNames();
	        this.state = 3281;
	        this.match(StarRocksParser.WITH);
	        this.state = 3282;
	        localctx.tempParName = this.partitionNames();
	        this.state = 3284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 3283;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionRenameClause() {
	    let localctx = new PartitionRenameClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, StarRocksParser.RULE_partitionRenameClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3286;
	        this.match(StarRocksParser.RENAME);
	        this.state = 3287;
	        this.match(StarRocksParser.PARTITION);
	        this.state = 3288;
	        localctx.parName = this.identifier();
	        this.state = 3289;
	        localctx.newParName = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatement() {
	    let localctx = new InsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, StarRocksParser.RULE_insertStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3292;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 122)) & ~0x1f) === 0 && ((1 << (_la - 122)) & 8388611) !== 0)) {
	            this.state = 3291;
	            this.explainDesc();
	        }

	        this.state = 3294;
	        this.match(StarRocksParser.INSERT);
	        this.state = 3295;
	        _la = this._input.LA(1);
	        if(!(_la===214 || _la===217)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3308;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3296;
	            this.qualifiedName();
	            this.state = 3298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===164 || _la===464) {
	                this.state = 3297;
	                this.writeBranch();
	            }

	            this.state = 3301;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===298 || _la===299 || _la===424) {
	                this.state = 3300;
	                this.partitionNames();
	            }

	            break;

	        case 2:
	            this.state = 3303;
	            this.match(StarRocksParser.FILES);
	            this.state = 3304;
	            this.propertyList();
	            break;

	        case 3:
	            this.state = 3305;
	            this.match(StarRocksParser.BLACKHOLE);
	            this.state = 3306;
	            this.match(StarRocksParser.T__1);
	            this.state = 3307;
	            this.match(StarRocksParser.T__3);
	            break;

	        }
	        this.state = 3313;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,290,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3310;
	                this.insertLabelOrColumnAliases(); 
	            }
	            this.state = 3315;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,290,this._ctx);
	        }

	        this.state = 3317;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 3316;
	            this.properties();
	        }

	        this.state = 3329;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 122:
	        case 123:
	        case 145:
	        case 386:
	        case 437:
	        case 476:
	            this.state = 3319;
	            this.queryStatement();
	            break;
	        case 458:
	            this.state = 3320;
	            this.match(StarRocksParser.VALUES);
	            this.state = 3321;
	            this.expressionsWithDefault();
	            this.state = 3326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3322;
	                this.match(StarRocksParser.T__2);
	                this.state = 3323;
	                this.expressionsWithDefault();
	                this.state = 3328;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertLabelOrColumnAliases() {
	    let localctx = new InsertLabelOrColumnAliasesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, StarRocksParser.RULE_insertLabelOrColumnAliases);
	    try {
	        this.state = 3335;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 55:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3331;
	            this.columnAliasesOrByName();
	            break;
	        case 476:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3332;
	            this.match(StarRocksParser.WITH);
	            this.state = 3333;
	            this.match(StarRocksParser.LABEL);
	            this.state = 3334;
	            localctx.label = this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnAliasesOrByName() {
	    let localctx = new ColumnAliasesOrByNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, StarRocksParser.RULE_columnAliasesOrByName);
	    try {
	        this.state = 3340;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3337;
	            this.columnAliases();
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3338;
	            this.match(StarRocksParser.BY);
	            this.state = 3339;
	            this.match(StarRocksParser.NAME);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateStatement() {
	    let localctx = new UpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, StarRocksParser.RULE_updateStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3343;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 122)) & ~0x1f) === 0 && ((1 << (_la - 122)) & 8388611) !== 0)) {
	            this.state = 3342;
	            this.explainDesc();
	        }

	        this.state = 3346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===476) {
	            this.state = 3345;
	            this.withClause();
	        }

	        this.state = 3348;
	        this.match(StarRocksParser.UPDATE);
	        this.state = 3349;
	        this.qualifiedName();
	        this.state = 3350;
	        this.match(StarRocksParser.SET);
	        this.state = 3351;
	        this.assignmentList();
	        this.state = 3352;
	        this.fromClause();
	        this.state = 3355;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 3353;
	            this.match(StarRocksParser.WHERE);
	            this.state = 3354;
	            localctx.where = this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatement() {
	    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, StarRocksParser.RULE_deleteStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3358;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 122)) & ~0x1f) === 0 && ((1 << (_la - 122)) & 8388611) !== 0)) {
	            this.state = 3357;
	            this.explainDesc();
	        }

	        this.state = 3361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===476) {
	            this.state = 3360;
	            this.withClause();
	        }

	        this.state = 3363;
	        this.match(StarRocksParser.DELETE);
	        this.state = 3364;
	        this.match(StarRocksParser.FROM);
	        this.state = 3365;
	        this.qualifiedName();
	        this.state = 3367;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298 || _la===299 || _la===424) {
	            this.state = 3366;
	            this.partitionNames();
	        }

	        this.state = 3371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===456) {
	            this.state = 3369;
	            this.match(StarRocksParser.USING);
	            this.state = 3370;
	            localctx.using = this.relations();
	        }

	        this.state = 3375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 3373;
	            this.match(StarRocksParser.WHERE);
	            this.state = 3374;
	            localctx.where = this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRoutineLoadStatement() {
	    let localctx = new CreateRoutineLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, StarRocksParser.RULE_createRoutineLoadStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3377;
	        this.match(StarRocksParser.CREATE);
	        this.state = 3378;
	        this.match(StarRocksParser.ROUTINE);
	        this.state = 3379;
	        this.match(StarRocksParser.LOAD);
	        this.state = 3383;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	        if(la_===1) {
	            this.state = 3380;
	            localctx.db = this.qualifiedName();
	            this.state = 3381;
	            this.match(StarRocksParser.T__0);

	        }
	        this.state = 3385;
	        localctx.name = this.identifier();
	        this.state = 3386;
	        this.match(StarRocksParser.ON);
	        this.state = 3387;
	        localctx.table = this.qualifiedName();
	        this.state = 3396;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75 || _la===298 || _la===299 || _la===374 || _la===424 || _la===474) {
	            this.state = 3388;
	            this.loadProperties();
	            this.state = 3393;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3389;
	                this.match(StarRocksParser.T__2);
	                this.state = 3390;
	                this.loadProperties();
	                this.state = 3395;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 3399;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 3398;
	            this.jobProperties();
	        }

	        this.state = 3401;
	        this.match(StarRocksParser.FROM);
	        this.state = 3402;
	        localctx.source = this.identifier();
	        this.state = 3404;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 3403;
	            this.dataSourceProperties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterRoutineLoadStatement() {
	    let localctx = new AlterRoutineLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, StarRocksParser.RULE_alterRoutineLoadStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3406;
	        this.match(StarRocksParser.ALTER);
	        this.state = 3407;
	        this.match(StarRocksParser.ROUTINE);
	        this.state = 3408;
	        this.match(StarRocksParser.LOAD);
	        this.state = 3409;
	        this.match(StarRocksParser.FOR);
	        this.state = 3413;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	        if(la_===1) {
	            this.state = 3410;
	            localctx.db = this.qualifiedName();
	            this.state = 3411;
	            this.match(StarRocksParser.T__0);

	        }
	        this.state = 3415;
	        localctx.name = this.identifier();
	        this.state = 3424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75 || _la===298 || _la===299 || _la===374 || _la===424 || _la===474) {
	            this.state = 3416;
	            this.loadProperties();
	            this.state = 3421;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3417;
	                this.match(StarRocksParser.T__2);
	                this.state = 3418;
	                this.loadProperties();
	                this.state = 3423;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 3427;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 3426;
	            this.jobProperties();
	        }

	        this.state = 3430;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168) {
	            this.state = 3429;
	            this.dataSource();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataSource() {
	    let localctx = new DataSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, StarRocksParser.RULE_dataSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3432;
	        this.match(StarRocksParser.FROM);
	        this.state = 3433;
	        localctx.source = this.identifier();
	        this.state = 3434;
	        this.dataSourceProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadProperties() {
	    let localctx = new LoadPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, StarRocksParser.RULE_loadProperties);
	    try {
	        this.state = 3442;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,314,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3436;
	            this.colSeparatorProperty();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3437;
	            this.rowDelimiterProperty();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3438;
	            this.importColumns();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3439;
	            this.match(StarRocksParser.WHERE);
	            this.state = 3440;
	            this.expression(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3441;
	            this.partitionNames();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colSeparatorProperty() {
	    let localctx = new ColSeparatorPropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, StarRocksParser.RULE_colSeparatorProperty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3444;
	        this.match(StarRocksParser.COLUMNS);
	        this.state = 3445;
	        this.match(StarRocksParser.TERMINATED);
	        this.state = 3446;
	        this.match(StarRocksParser.BY);
	        this.state = 3447;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowDelimiterProperty() {
	    let localctx = new RowDelimiterPropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, StarRocksParser.RULE_rowDelimiterProperty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3449;
	        this.match(StarRocksParser.ROWS);
	        this.state = 3450;
	        this.match(StarRocksParser.TERMINATED);
	        this.state = 3451;
	        this.match(StarRocksParser.BY);
	        this.state = 3452;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importColumns() {
	    let localctx = new ImportColumnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, StarRocksParser.RULE_importColumns);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3454;
	        this.match(StarRocksParser.COLUMNS);
	        this.state = 3455;
	        this.columnProperties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnProperties() {
	    let localctx = new ColumnPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, StarRocksParser.RULE_columnProperties);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3457;
	        this.match(StarRocksParser.T__1);
	        this.state = 3460;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3458;
	            this.qualifiedName();
	            break;

	        case 2:
	            this.state = 3459;
	            this.assignment();
	            break;

	        }
	        this.state = 3469;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 3462;
	            this.match(StarRocksParser.T__2);
	            this.state = 3465;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,316,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3463;
	                this.qualifiedName();
	                break;

	            case 2:
	                this.state = 3464;
	                this.assignment();
	                break;

	            }
	            this.state = 3471;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3472;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jobProperties() {
	    let localctx = new JobPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, StarRocksParser.RULE_jobProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3474;
	        this.properties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataSourceProperties() {
	    let localctx = new DataSourcePropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, StarRocksParser.RULE_dataSourceProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3476;
	        this.propertyList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopRoutineLoadStatement() {
	    let localctx = new StopRoutineLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, StarRocksParser.RULE_stopRoutineLoadStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3478;
	        this.match(StarRocksParser.STOP);
	        this.state = 3479;
	        this.match(StarRocksParser.ROUTINE);
	        this.state = 3480;
	        this.match(StarRocksParser.LOAD);
	        this.state = 3481;
	        this.match(StarRocksParser.FOR);
	        this.state = 3485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	        if(la_===1) {
	            this.state = 3482;
	            localctx.db = this.qualifiedName();
	            this.state = 3483;
	            this.match(StarRocksParser.T__0);

	        }
	        this.state = 3487;
	        localctx.name = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resumeRoutineLoadStatement() {
	    let localctx = new ResumeRoutineLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, StarRocksParser.RULE_resumeRoutineLoadStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3489;
	        this.match(StarRocksParser.RESUME);
	        this.state = 3490;
	        this.match(StarRocksParser.ROUTINE);
	        this.state = 3491;
	        this.match(StarRocksParser.LOAD);
	        this.state = 3492;
	        this.match(StarRocksParser.FOR);
	        this.state = 3496;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,319,this._ctx);
	        if(la_===1) {
	            this.state = 3493;
	            localctx.db = this.qualifiedName();
	            this.state = 3494;
	            this.match(StarRocksParser.T__0);

	        }
	        this.state = 3498;
	        localctx.name = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pauseRoutineLoadStatement() {
	    let localctx = new PauseRoutineLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, StarRocksParser.RULE_pauseRoutineLoadStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3500;
	        this.match(StarRocksParser.PAUSE);
	        this.state = 3501;
	        this.match(StarRocksParser.ROUTINE);
	        this.state = 3502;
	        this.match(StarRocksParser.LOAD);
	        this.state = 3503;
	        this.match(StarRocksParser.FOR);
	        this.state = 3507;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,320,this._ctx);
	        if(la_===1) {
	            this.state = 3504;
	            localctx.db = this.qualifiedName();
	            this.state = 3505;
	            this.match(StarRocksParser.T__0);

	        }
	        this.state = 3509;
	        localctx.name = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showRoutineLoadStatement() {
	    let localctx = new ShowRoutineLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, StarRocksParser.RULE_showRoutineLoadStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3511;
	        this.match(StarRocksParser.SHOW);
	        this.state = 3513;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 3512;
	            this.match(StarRocksParser.ALL);
	        }

	        this.state = 3515;
	        this.match(StarRocksParser.ROUTINE);
	        this.state = 3516;
	        this.match(StarRocksParser.LOAD);
	        this.state = 3524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===164) {
	            this.state = 3517;
	            this.match(StarRocksParser.FOR);
	            this.state = 3521;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
	            if(la_===1) {
	                this.state = 3518;
	                localctx.db = this.qualifiedName();
	                this.state = 3519;
	                this.match(StarRocksParser.T__0);

	            }
	            this.state = 3523;
	            localctx.name = this.identifier();
	        }

	        this.state = 3528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168) {
	            this.state = 3526;
	            this.match(StarRocksParser.FROM);
	            this.state = 3527;
	            localctx.db = this.qualifiedName();
	        }

	        this.state = 3532;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 3530;
	            this.match(StarRocksParser.WHERE);
	            this.state = 3531;
	            this.expression(0);
	        }

	        this.state = 3544;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293) {
	            this.state = 3534;
	            this.match(StarRocksParser.ORDER);
	            this.state = 3535;
	            this.match(StarRocksParser.BY);
	            this.state = 3536;
	            this.sortItem();
	            this.state = 3541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3537;
	                this.match(StarRocksParser.T__2);
	                this.state = 3538;
	                this.sortItem();
	                this.state = 3543;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 3547;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===237) {
	            this.state = 3546;
	            this.limitElement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showRoutineLoadTaskStatement() {
	    let localctx = new ShowRoutineLoadTaskStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, StarRocksParser.RULE_showRoutineLoadTaskStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3549;
	        this.match(StarRocksParser.SHOW);
	        this.state = 3550;
	        this.match(StarRocksParser.ROUTINE);
	        this.state = 3551;
	        this.match(StarRocksParser.LOAD);
	        this.state = 3552;
	        this.match(StarRocksParser.TASK);
	        this.state = 3555;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168) {
	            this.state = 3553;
	            this.match(StarRocksParser.FROM);
	            this.state = 3554;
	            localctx.db = this.qualifiedName();
	        }

	        this.state = 3557;
	        this.match(StarRocksParser.WHERE);
	        this.state = 3558;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCreateRoutineLoadStatement() {
	    let localctx = new ShowCreateRoutineLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, StarRocksParser.RULE_showCreateRoutineLoadStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3560;
	        this.match(StarRocksParser.SHOW);
	        this.state = 3561;
	        this.match(StarRocksParser.CREATE);
	        this.state = 3562;
	        this.match(StarRocksParser.ROUTINE);
	        this.state = 3563;
	        this.match(StarRocksParser.LOAD);
	        this.state = 3567;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
	        if(la_===1) {
	            this.state = 3564;
	            localctx.db = this.qualifiedName();
	            this.state = 3565;
	            this.match(StarRocksParser.T__0);

	        }
	        this.state = 3569;
	        localctx.name = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStreamLoadStatement() {
	    let localctx = new ShowStreamLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, StarRocksParser.RULE_showStreamLoadStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3571;
	        this.match(StarRocksParser.SHOW);
	        this.state = 3573;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 3572;
	            this.match(StarRocksParser.ALL);
	        }

	        this.state = 3575;
	        this.match(StarRocksParser.STREAM);
	        this.state = 3576;
	        this.match(StarRocksParser.LOAD);
	        this.state = 3584;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===164) {
	            this.state = 3577;
	            this.match(StarRocksParser.FOR);
	            this.state = 3581;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
	            if(la_===1) {
	                this.state = 3578;
	                localctx.db = this.qualifiedName();
	                this.state = 3579;
	                this.match(StarRocksParser.T__0);

	            }
	            this.state = 3583;
	            localctx.name = this.identifier();
	        }

	        this.state = 3588;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168) {
	            this.state = 3586;
	            this.match(StarRocksParser.FROM);
	            this.state = 3587;
	            localctx.db = this.qualifiedName();
	        }

	        this.state = 3592;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 3590;
	            this.match(StarRocksParser.WHERE);
	            this.state = 3591;
	            this.expression(0);
	        }

	        this.state = 3604;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293) {
	            this.state = 3594;
	            this.match(StarRocksParser.ORDER);
	            this.state = 3595;
	            this.match(StarRocksParser.BY);
	            this.state = 3596;
	            this.sortItem();
	            this.state = 3601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3597;
	                this.match(StarRocksParser.T__2);
	                this.state = 3598;
	                this.sortItem();
	                this.state = 3603;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 3607;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===237) {
	            this.state = 3606;
	            this.limitElement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyzeStatement() {
	    let localctx = new AnalyzeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, StarRocksParser.RULE_analyzeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3609;
	        this.match(StarRocksParser.ANALYZE);
	        this.state = 3611;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===171 || _la===379) {
	            this.state = 3610;
	            _la = this._input.LA(1);
	            if(!(_la===171 || _la===379)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3613;
	        this.match(StarRocksParser.TABLE);
	        this.state = 3614;
	        this.tableName();
	        this.state = 3616;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
	        if(la_===1) {
	            this.state = 3615;
	            this.analyzeColumnClause();

	        }
	        this.state = 3619;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298 || _la===299 || _la===424) {
	            this.state = 3618;
	            this.partitionNames();
	        }

	        this.state = 3624;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===476) {
	            this.state = 3621;
	            this.match(StarRocksParser.WITH);
	            this.state = 3622;
	            _la = this._input.LA(1);
	            if(!(_la===29 || _la===413)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3623;
	            this.match(StarRocksParser.MODE);
	        }

	        this.state = 3627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 3626;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyzeColumnClause() {
	    let localctx = new AnalyzeColumnClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, StarRocksParser.RULE_analyzeColumnClause);
	    var _la = 0;
	    try {
	        this.state = 3652;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new RegularColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3629;
	            this.match(StarRocksParser.T__1);
	            this.state = 3630;
	            this.qualifiedName();
	            this.state = 3635;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3631;
	                this.match(StarRocksParser.T__2);
	                this.state = 3632;
	                this.qualifiedName();
	                this.state = 3637;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3638;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 2:
	            localctx = new RegularColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3640;
	            this.qualifiedName();
	            this.state = 3645;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3641;
	                this.match(StarRocksParser.T__2);
	                this.state = 3642;
	                this.qualifiedName();
	                this.state = 3647;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 3:
	            localctx = new AllColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3648;
	            this.match(StarRocksParser.ALL);
	            this.state = 3649;
	            this.match(StarRocksParser.COLUMNS);
	            break;

	        case 4:
	            localctx = new PredicateColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3650;
	            this.match(StarRocksParser.PREDICATE);
	            this.state = 3651;
	            this.match(StarRocksParser.COLUMNS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropStatsStatement() {
	    let localctx = new DropStatsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, StarRocksParser.RULE_dropStatsStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3654;
	        this.match(StarRocksParser.DROP);
	        this.state = 3655;
	        this.match(StarRocksParser.STATS);
	        this.state = 3656;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	histogramStatement() {
	    let localctx = new HistogramStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, StarRocksParser.RULE_histogramStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3658;
	        this.match(StarRocksParser.ANALYZE);
	        this.state = 3659;
	        this.match(StarRocksParser.TABLE);
	        this.state = 3660;
	        this.tableName();
	        this.state = 3661;
	        this.match(StarRocksParser.UPDATE);
	        this.state = 3662;
	        this.match(StarRocksParser.HISTOGRAM);
	        this.state = 3663;
	        this.match(StarRocksParser.ON);
	        this.state = 3664;
	        this.analyzeColumnClause();
	        this.state = 3668;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
	        if(la_===1) {
	            this.state = 3665;
	            this.match(StarRocksParser.WITH);
	            this.state = 3666;
	            localctx.bucket = this.match(StarRocksParser.INTEGER_VALUE);
	            this.state = 3667;
	            this.match(StarRocksParser.BUCKETS);

	        }
	        this.state = 3671;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 3670;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyzeHistogramStatement() {
	    let localctx = new AnalyzeHistogramStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, StarRocksParser.RULE_analyzeHistogramStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3673;
	        this.histogramStatement();
	        this.state = 3677;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===476) {
	            this.state = 3674;
	            this.match(StarRocksParser.WITH);
	            this.state = 3675;
	            _la = this._input.LA(1);
	            if(!(_la===29 || _la===413)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3676;
	            this.match(StarRocksParser.MODE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropHistogramStatement() {
	    let localctx = new DropHistogramStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, StarRocksParser.RULE_dropHistogramStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3679;
	        this.match(StarRocksParser.ANALYZE);
	        this.state = 3680;
	        this.match(StarRocksParser.TABLE);
	        this.state = 3681;
	        this.qualifiedName();
	        this.state = 3682;
	        this.match(StarRocksParser.DROP);
	        this.state = 3683;
	        this.match(StarRocksParser.HISTOGRAM);
	        this.state = 3684;
	        this.match(StarRocksParser.ON);
	        this.state = 3685;
	        this.qualifiedName();
	        this.state = 3690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 3686;
	            this.match(StarRocksParser.T__2);
	            this.state = 3687;
	            this.qualifiedName();
	            this.state = 3692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createAnalyzeStatement() {
	    let localctx = new CreateAnalyzeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, StarRocksParser.RULE_createAnalyzeStatement);
	    var _la = 0;
	    try {
	        this.state = 3737;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,359,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3693;
	            this.match(StarRocksParser.CREATE);
	            this.state = 3694;
	            this.match(StarRocksParser.ANALYZE);
	            this.state = 3696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===171 || _la===379) {
	                this.state = 3695;
	                _la = this._input.LA(1);
	                if(!(_la===171 || _la===379)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 3698;
	            this.match(StarRocksParser.ALL);
	            this.state = 3700;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===327) {
	                this.state = 3699;
	                this.properties();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3702;
	            this.match(StarRocksParser.CREATE);
	            this.state = 3703;
	            this.match(StarRocksParser.ANALYZE);
	            this.state = 3705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===171 || _la===379) {
	                this.state = 3704;
	                _la = this._input.LA(1);
	                if(!(_la===171 || _la===379)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 3707;
	            this.match(StarRocksParser.DATABASE);
	            this.state = 3708;
	            localctx.db = this.identifier();
	            this.state = 3710;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===327) {
	                this.state = 3709;
	                this.properties();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3712;
	            this.match(StarRocksParser.CREATE);
	            this.state = 3713;
	            this.match(StarRocksParser.ANALYZE);
	            this.state = 3715;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===171 || _la===379) {
	                this.state = 3714;
	                _la = this._input.LA(1);
	                if(!(_la===171 || _la===379)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 3717;
	            this.match(StarRocksParser.TABLE);
	            this.state = 3718;
	            this.qualifiedName();
	            this.state = 3730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 3719;
	                this.match(StarRocksParser.T__1);
	                this.state = 3720;
	                this.qualifiedName();
	                this.state = 3725;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 3721;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 3722;
	                    this.qualifiedName();
	                    this.state = 3727;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 3728;
	                this.match(StarRocksParser.T__3);
	            }

	            this.state = 3733;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===327) {
	                this.state = 3732;
	                this.properties();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3735;
	            this.match(StarRocksParser.CREATE);
	            this.state = 3736;
	            this.histogramStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropAnalyzeJobStatement() {
	    let localctx = new DropAnalyzeJobStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, StarRocksParser.RULE_dropAnalyzeJobStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3739;
	        this.match(StarRocksParser.DROP);
	        this.state = 3740;
	        this.match(StarRocksParser.ANALYZE);
	        this.state = 3741;
	        this.match(StarRocksParser.INTEGER_VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showAnalyzeStatement() {
	    let localctx = new ShowAnalyzeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, StarRocksParser.RULE_showAnalyzeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3743;
	        this.match(StarRocksParser.SHOW);
	        this.state = 3744;
	        this.match(StarRocksParser.ANALYZE);
	        this.state = 3746;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===220 || _la===404) {
	            this.state = 3745;
	            _la = this._input.LA(1);
	            if(!(_la===220 || _la===404)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3750;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 3748;
	            this.match(StarRocksParser.WHERE);
	            this.state = 3749;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatsMetaStatement() {
	    let localctx = new ShowStatsMetaStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, StarRocksParser.RULE_showStatsMetaStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3752;
	        this.match(StarRocksParser.SHOW);
	        this.state = 3753;
	        this.match(StarRocksParser.STATS);
	        this.state = 3754;
	        this.match(StarRocksParser.META);
	        this.state = 3757;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 3755;
	            this.match(StarRocksParser.WHERE);
	            this.state = 3756;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showHistogramMetaStatement() {
	    let localctx = new ShowHistogramMetaStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, StarRocksParser.RULE_showHistogramMetaStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3759;
	        this.match(StarRocksParser.SHOW);
	        this.state = 3760;
	        this.match(StarRocksParser.HISTOGRAM);
	        this.state = 3761;
	        this.match(StarRocksParser.META);
	        this.state = 3764;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 3762;
	            this.match(StarRocksParser.WHERE);
	            this.state = 3763;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	killAnalyzeStatement() {
	    let localctx = new KillAnalyzeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, StarRocksParser.RULE_killAnalyzeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3766;
	        this.match(StarRocksParser.KILL);
	        this.state = 3767;
	        this.match(StarRocksParser.ANALYZE);
	        this.state = 3768;
	        this.match(StarRocksParser.INTEGER_VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyzeProfileStatement() {
	    let localctx = new AnalyzeProfileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, StarRocksParser.RULE_analyzeProfileStatement);
	    var _la = 0;
	    try {
	        this.state = 3787;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3770;
	            this.match(StarRocksParser.ANALYZE);
	            this.state = 3771;
	            this.match(StarRocksParser.PROFILE);
	            this.state = 3772;
	            this.match(StarRocksParser.FROM);
	            this.state = 3773;
	            this.string();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3774;
	            this.match(StarRocksParser.ANALYZE);
	            this.state = 3775;
	            this.match(StarRocksParser.PROFILE);
	            this.state = 3776;
	            this.match(StarRocksParser.FROM);
	            this.state = 3777;
	            this.string();
	            this.state = 3778;
	            this.match(StarRocksParser.T__2);
	            this.state = 3779;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            this.state = 3784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3780;
	                this.match(StarRocksParser.T__2);
	                this.state = 3781;
	                this.match(StarRocksParser.INTEGER_VALUE);
	                this.state = 3786;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createBaselinePlanStatement() {
	    let localctx = new CreateBaselinePlanStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, StarRocksParser.RULE_createBaselinePlanStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3789;
	        this.match(StarRocksParser.CREATE);
	        this.state = 3791;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===174) {
	            this.state = 3790;
	            this.match(StarRocksParser.GLOBAL);
	        }

	        this.state = 3793;
	        this.match(StarRocksParser.BASELINE);
	        this.state = 3796;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===285) {
	            this.state = 3794;
	            this.match(StarRocksParser.ON);
	            this.state = 3795;
	            this.queryRelation();
	        }

	        this.state = 3798;
	        this.match(StarRocksParser.USING);
	        this.state = 3799;
	        this.queryRelation();
	        this.state = 3801;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 3800;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropBaselinePlanStatement() {
	    let localctx = new DropBaselinePlanStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, StarRocksParser.RULE_dropBaselinePlanStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3803;
	        this.match(StarRocksParser.DROP);
	        this.state = 3804;
	        this.match(StarRocksParser.BASELINE);
	        this.state = 3805;
	        this.match(StarRocksParser.INTEGER_VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showBaselinePlanStatement() {
	    let localctx = new ShowBaselinePlanStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, StarRocksParser.RULE_showBaselinePlanStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3807;
	        this.match(StarRocksParser.SHOW);
	        this.state = 3808;
	        this.match(StarRocksParser.BASELINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createResourceGroupStatement() {
	    let localctx = new CreateResourceGroupStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, StarRocksParser.RULE_createResourceGroupStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3810;
	        this.match(StarRocksParser.CREATE);
	        this.state = 3811;
	        this.match(StarRocksParser.RESOURCE);
	        this.state = 3812;
	        this.match(StarRocksParser.GROUP);
	        this.state = 3816;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 3813;
	            this.match(StarRocksParser.IF);
	            this.state = 3814;
	            this.match(StarRocksParser.NOT);
	            this.state = 3815;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 3820;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===292) {
	            this.state = 3818;
	            this.match(StarRocksParser.OR);
	            this.state = 3819;
	            this.match(StarRocksParser.REPLACE);
	        }

	        this.state = 3822;
	        this.identifier();
	        this.state = 3832;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===436) {
	            this.state = 3823;
	            this.match(StarRocksParser.TO);
	            this.state = 3824;
	            this.classifier();
	            this.state = 3829;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3825;
	                this.match(StarRocksParser.T__2);
	                this.state = 3826;
	                this.classifier();
	                this.state = 3831;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 3834;
	        this.match(StarRocksParser.WITH);
	        this.state = 3835;
	        this.match(StarRocksParser.T__1);
	        this.state = 3836;
	        this.property();
	        this.state = 3841;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 3837;
	            this.match(StarRocksParser.T__2);
	            this.state = 3838;
	            this.property();
	            this.state = 3843;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3844;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropResourceGroupStatement() {
	    let localctx = new DropResourceGroupStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, StarRocksParser.RULE_dropResourceGroupStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3846;
	        this.match(StarRocksParser.DROP);
	        this.state = 3847;
	        this.match(StarRocksParser.RESOURCE);
	        this.state = 3848;
	        this.match(StarRocksParser.GROUP);
	        this.state = 3849;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterResourceGroupStatement() {
	    let localctx = new AlterResourceGroupStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, StarRocksParser.RULE_alterResourceGroupStatement);
	    var _la = 0;
	    try {
	        this.state = 3903;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,377,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3851;
	            this.match(StarRocksParser.ALTER);
	            this.state = 3852;
	            this.match(StarRocksParser.RESOURCE);
	            this.state = 3853;
	            this.match(StarRocksParser.GROUP);
	            this.state = 3854;
	            this.identifier();
	            this.state = 3855;
	            this.match(StarRocksParser.ADD);
	            this.state = 3856;
	            this.classifier();
	            this.state = 3861;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3857;
	                this.match(StarRocksParser.T__2);
	                this.state = 3858;
	                this.classifier();
	                this.state = 3863;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3864;
	            this.match(StarRocksParser.ALTER);
	            this.state = 3865;
	            this.match(StarRocksParser.RESOURCE);
	            this.state = 3866;
	            this.match(StarRocksParser.GROUP);
	            this.state = 3867;
	            this.identifier();
	            this.state = 3868;
	            this.match(StarRocksParser.DROP);
	            this.state = 3869;
	            this.match(StarRocksParser.T__1);
	            this.state = 3870;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            this.state = 3875;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3871;
	                this.match(StarRocksParser.T__2);
	                this.state = 3872;
	                this.match(StarRocksParser.INTEGER_VALUE);
	                this.state = 3877;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3878;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3880;
	            this.match(StarRocksParser.ALTER);
	            this.state = 3881;
	            this.match(StarRocksParser.RESOURCE);
	            this.state = 3882;
	            this.match(StarRocksParser.GROUP);
	            this.state = 3883;
	            this.identifier();
	            this.state = 3884;
	            this.match(StarRocksParser.DROP);
	            this.state = 3885;
	            this.match(StarRocksParser.ALL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3887;
	            this.match(StarRocksParser.ALTER);
	            this.state = 3888;
	            this.match(StarRocksParser.RESOURCE);
	            this.state = 3889;
	            this.match(StarRocksParser.GROUP);
	            this.state = 3890;
	            this.identifier();
	            this.state = 3891;
	            this.match(StarRocksParser.WITH);
	            this.state = 3892;
	            this.match(StarRocksParser.T__1);
	            this.state = 3893;
	            this.property();
	            this.state = 3898;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 3894;
	                this.match(StarRocksParser.T__2);
	                this.state = 3895;
	                this.property();
	                this.state = 3900;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3901;
	            this.match(StarRocksParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showResourceGroupStatement() {
	    let localctx = new ShowResourceGroupStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, StarRocksParser.RULE_showResourceGroupStatement);
	    var _la = 0;
	    try {
	        this.state = 3921;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,381,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3905;
	            this.match(StarRocksParser.SHOW);
	            this.state = 3907;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===463) {
	                this.state = 3906;
	                this.match(StarRocksParser.VERBOSE);
	            }

	            this.state = 3909;
	            this.match(StarRocksParser.RESOURCE);
	            this.state = 3910;
	            this.match(StarRocksParser.GROUP);
	            this.state = 3911;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3912;
	            this.match(StarRocksParser.SHOW);
	            this.state = 3914;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===463) {
	                this.state = 3913;
	                this.match(StarRocksParser.VERBOSE);
	            }

	            this.state = 3916;
	            this.match(StarRocksParser.RESOURCE);
	            this.state = 3917;
	            this.match(StarRocksParser.GROUPS);
	            this.state = 3919;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18) {
	                this.state = 3918;
	                this.match(StarRocksParser.ALL);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showResourceGroupUsageStatement() {
	    let localctx = new ShowResourceGroupUsageStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, StarRocksParser.RULE_showResourceGroupUsageStatement);
	    try {
	        this.state = 3932;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3923;
	            this.match(StarRocksParser.SHOW);
	            this.state = 3924;
	            this.match(StarRocksParser.USAGE);
	            this.state = 3925;
	            this.match(StarRocksParser.RESOURCE);
	            this.state = 3926;
	            this.match(StarRocksParser.GROUP);
	            this.state = 3927;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3928;
	            this.match(StarRocksParser.SHOW);
	            this.state = 3929;
	            this.match(StarRocksParser.USAGE);
	            this.state = 3930;
	            this.match(StarRocksParser.RESOURCE);
	            this.state = 3931;
	            this.match(StarRocksParser.GROUPS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createResourceStatement() {
	    let localctx = new CreateResourceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, StarRocksParser.RULE_createResourceStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3934;
	        this.match(StarRocksParser.CREATE);
	        this.state = 3936;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 3935;
	            this.match(StarRocksParser.EXTERNAL);
	        }

	        this.state = 3938;
	        this.match(StarRocksParser.RESOURCE);
	        this.state = 3939;
	        localctx.resourceName = this.identifierOrString();
	        this.state = 3941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 3940;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterResourceStatement() {
	    let localctx = new AlterResourceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, StarRocksParser.RULE_alterResourceStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3943;
	        this.match(StarRocksParser.ALTER);
	        this.state = 3944;
	        this.match(StarRocksParser.RESOURCE);
	        this.state = 3945;
	        localctx.resourceName = this.identifierOrString();
	        this.state = 3946;
	        this.match(StarRocksParser.SET);
	        this.state = 3947;
	        this.properties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropResourceStatement() {
	    let localctx = new DropResourceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, StarRocksParser.RULE_dropResourceStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3949;
	        this.match(StarRocksParser.DROP);
	        this.state = 3950;
	        this.match(StarRocksParser.RESOURCE);
	        this.state = 3951;
	        localctx.resourceName = this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showResourceStatement() {
	    let localctx = new ShowResourceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, StarRocksParser.RULE_showResourceStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3953;
	        this.match(StarRocksParser.SHOW);
	        this.state = 3954;
	        this.match(StarRocksParser.RESOURCES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classifier() {
	    let localctx = new ClassifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, StarRocksParser.RULE_classifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3956;
	        this.match(StarRocksParser.T__1);
	        this.state = 3957;
	        this.expressionList();
	        this.state = 3958;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showFunctionsStatement() {
	    let localctx = new ShowFunctionsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, StarRocksParser.RULE_showFunctionsStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3960;
	        this.match(StarRocksParser.SHOW);
	        this.state = 3962;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===171) {
	            this.state = 3961;
	            this.match(StarRocksParser.FULL);
	        }

	        this.state = 3965;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===54 || _la===174) {
	            this.state = 3964;
	            _la = this._input.LA(1);
	            if(!(_la===54 || _la===174)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3967;
	        this.match(StarRocksParser.FUNCTIONS);
	        this.state = 3970;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 3968;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3969;
	            localctx.db = this.qualifiedName();
	        }

	        this.state = 3976;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 3972;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 3973;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 3974;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 3975;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropFunctionStatement() {
	    let localctx = new DropFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, StarRocksParser.RULE_dropFunctionStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3978;
	        this.match(StarRocksParser.DROP);
	        this.state = 3980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===174) {
	            this.state = 3979;
	            this.match(StarRocksParser.GLOBAL);
	        }

	        this.state = 3982;
	        this.match(StarRocksParser.FUNCTION);
	        this.state = 3985;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 3983;
	            this.match(StarRocksParser.IF);
	            this.state = 3984;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 3987;
	        this.qualifiedName();
	        this.state = 3988;
	        this.match(StarRocksParser.T__1);
	        this.state = 3989;
	        this.typeList();
	        this.state = 3990;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createFunctionStatement() {
	    let localctx = new CreateFunctionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, StarRocksParser.RULE_createFunctionStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3992;
	        this.match(StarRocksParser.CREATE);
	        this.state = 3993;
	        this.orReplace();
	        this.state = 3995;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===174) {
	            this.state = 3994;
	            this.match(StarRocksParser.GLOBAL);
	        }

	        this.state = 3998;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===418) {
	            this.state = 3997;
	            localctx.functionType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===17 || _la===418)) {
	                localctx.functionType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 4000;
	        this.match(StarRocksParser.FUNCTION);
	        this.state = 4001;
	        this.ifNotExists();
	        this.state = 4002;
	        this.qualifiedName();
	        this.state = 4003;
	        this.match(StarRocksParser.T__1);
	        this.state = 4004;
	        this.typeList();
	        this.state = 4005;
	        this.match(StarRocksParser.T__3);
	        this.state = 4006;
	        this.match(StarRocksParser.RETURNS);
	        this.state = 4007;
	        localctx.returnType = this.type();
	        this.state = 4010;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,393,this._ctx);
	        if(la_===1+1) {
	            this.state = 4008;
	            this.properties();

	        } else if(la_===2+1) {
	            this.state = 4009;
	            this.inlineProperties();

	        }
	        this.state = 4013;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 4012;
	            this.inlineFunction();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineFunction() {
	    let localctx = new InlineFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, StarRocksParser.RULE_inlineFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4015;
	        this.match(StarRocksParser.AS);
	        this.state = 4016;
	        this.match(StarRocksParser.ATTACHMENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeList() {
	    let localctx = new TypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, StarRocksParser.RULE_typeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4019;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24 || ((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 4194439) !== 0) || ((((_la - 103)) & ~0x1f) === 0 && ((1 << (_la - 103)) & 33555427) !== 0) || _la===159 || _la===186 || ((((_la - 207)) & ~0x1f) === 0 && ((1 << (_la - 207)) & 2129923) !== 0) || _la===248 || _la===279 || _la===280 || _la===305 || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 8437769) !== 0) || ((((_la - 428)) & ~0x1f) === 0 && ((1 << (_la - 428)) & 2151677985) !== 0) || _la===460) {
	            this.state = 4018;
	            this.type();
	        }

	        this.state = 4025;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,396,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4021;
	                this.match(StarRocksParser.T__2);
	                this.state = 4022;
	                this.type(); 
	            }
	            this.state = 4027;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,396,this._ctx);
	        }

	        this.state = 4030;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===3) {
	            this.state = 4028;
	            this.match(StarRocksParser.T__2);
	            this.state = 4029;
	            this.match(StarRocksParser.DOTDOTDOT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadStatement() {
	    let localctx = new LoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, StarRocksParser.RULE_loadStatement);
	    var _la = 0;
	    try {
	        this.state = 4060;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,404,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4032;
	            this.match(StarRocksParser.LOAD);
	            this.state = 4033;
	            this.match(StarRocksParser.LABEL);
	            this.state = 4034;
	            localctx.label = this.labelName();
	            this.state = 4036;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 4035;
	                localctx.data = this.dataDescList();
	            }

	            this.state = 4039;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===476) {
	                this.state = 4038;
	                localctx.broker = this.brokerDesc();
	            }

	            this.state = 4043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===55) {
	                this.state = 4041;
	                this.match(StarRocksParser.BY);
	                this.state = 4042;
	                localctx.system = this.identifierOrString();
	            }

	            this.state = 4047;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===327) {
	                this.state = 4045;
	                this.match(StarRocksParser.PROPERTIES);
	                this.state = 4046;
	                localctx.props = this.propertyList();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4049;
	            this.match(StarRocksParser.LOAD);
	            this.state = 4050;
	            this.match(StarRocksParser.LABEL);
	            this.state = 4051;
	            localctx.label = this.labelName();
	            this.state = 4053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 4052;
	                localctx.data = this.dataDescList();
	            }

	            this.state = 4055;
	            localctx.resource = this.resourceDesc();
	            this.state = 4058;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===327) {
	                this.state = 4056;
	                this.match(StarRocksParser.PROPERTIES);
	                this.state = 4057;
	                localctx.props = this.propertyList();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelName() {
	    let localctx = new LabelNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, StarRocksParser.RULE_labelName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4065;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,405,this._ctx);
	        if(la_===1) {
	            this.state = 4062;
	            localctx.db = this.identifier();
	            this.state = 4063;
	            this.match(StarRocksParser.T__0);

	        }
	        this.state = 4067;
	        localctx.label = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataDescList() {
	    let localctx = new DataDescListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, StarRocksParser.RULE_dataDescList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4069;
	        this.match(StarRocksParser.T__1);
	        this.state = 4070;
	        this.dataDesc();
	        this.state = 4075;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 4071;
	            this.match(StarRocksParser.T__2);
	            this.state = 4072;
	            this.dataDesc();
	            this.state = 4077;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4078;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataDesc() {
	    let localctx = new DataDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, StarRocksParser.RULE_dataDesc);
	    var _la = 0;
	    try {
	        this.state = 4149;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,421,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4080;
	            this.match(StarRocksParser.DATA);
	            this.state = 4081;
	            this.match(StarRocksParser.INFILE);
	            this.state = 4082;
	            localctx.srcFiles = this.stringList();
	            this.state = 4084;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===270) {
	                this.state = 4083;
	                this.match(StarRocksParser.NEGATIVE);
	            }

	            this.state = 4086;
	            this.match(StarRocksParser.INTO);
	            this.state = 4087;
	            this.match(StarRocksParser.TABLE);
	            this.state = 4088;
	            localctx.dstTableName = this.identifier();
	            this.state = 4090;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===298 || _la===299 || _la===424) {
	                this.state = 4089;
	                localctx.partitions = this.partitionNames();
	            }

	            this.state = 4096;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,409,this._ctx);
	            if(la_===1) {
	                this.state = 4092;
	                this.match(StarRocksParser.COLUMNS);
	                this.state = 4093;
	                this.match(StarRocksParser.TERMINATED);
	                this.state = 4094;
	                this.match(StarRocksParser.BY);
	                this.state = 4095;
	                localctx.colSep = this.string();

	            }
	            this.state = 4102;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===374) {
	                this.state = 4098;
	                this.match(StarRocksParser.ROWS);
	                this.state = 4099;
	                this.match(StarRocksParser.TERMINATED);
	                this.state = 4100;
	                this.match(StarRocksParser.BY);
	                this.state = 4101;
	                localctx.rowSep = this.string();
	            }

	            this.state = 4105;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===166) {
	                this.state = 4104;
	                localctx.format = this.fileFormat();
	            }

	            this.state = 4108;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,412,this._ctx);
	            if(la_===1) {
	                this.state = 4107;
	                localctx.formatPropsField = this.formatProps();

	            }
	            this.state = 4111;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 4110;
	                localctx.colList = this.columnAliases();
	            }

	            this.state = 4118;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75) {
	                this.state = 4113;
	                this.match(StarRocksParser.COLUMNS);
	                this.state = 4114;
	                this.match(StarRocksParser.FROM);
	                this.state = 4115;
	                this.match(StarRocksParser.PATH);
	                this.state = 4116;
	                this.match(StarRocksParser.AS);
	                this.state = 4117;
	                localctx.colFromPath = this.identifierList();
	            }

	            this.state = 4122;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===391) {
	                this.state = 4120;
	                this.match(StarRocksParser.SET);
	                this.state = 4121;
	                localctx.colMappingList = this.classifier();
	            }

	            this.state = 4126;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===474) {
	                this.state = 4124;
	                this.match(StarRocksParser.WHERE);
	                this.state = 4125;
	                localctx.where = this.expression(0);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4128;
	            this.match(StarRocksParser.DATA);
	            this.state = 4129;
	            this.match(StarRocksParser.FROM);
	            this.state = 4130;
	            this.match(StarRocksParser.TABLE);
	            this.state = 4131;
	            localctx.srcTableName = this.identifier();
	            this.state = 4133;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===270) {
	                this.state = 4132;
	                this.match(StarRocksParser.NEGATIVE);
	            }

	            this.state = 4135;
	            this.match(StarRocksParser.INTO);
	            this.state = 4136;
	            this.match(StarRocksParser.TABLE);
	            this.state = 4137;
	            localctx.dstTableName = this.identifier();
	            this.state = 4139;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===298 || _la===299 || _la===424) {
	                this.state = 4138;
	                localctx.partitions = this.partitionNames();
	            }

	            this.state = 4143;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===391) {
	                this.state = 4141;
	                this.match(StarRocksParser.SET);
	                this.state = 4142;
	                localctx.colMappingList = this.classifier();
	            }

	            this.state = 4147;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===474) {
	                this.state = 4145;
	                this.match(StarRocksParser.WHERE);
	                this.state = 4146;
	                localctx.where = this.expression(0);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formatProps() {
	    let localctx = new FormatPropsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, StarRocksParser.RULE_formatProps);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4151;
	        this.match(StarRocksParser.T__1);
	        this.state = 4155;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===395) {
	            this.state = 4152;
	            this.match(StarRocksParser.SKIP_HEADER);
	            this.state = 4153;
	            this.match(StarRocksParser.EQ);
	            this.state = 4154;
	            this.match(StarRocksParser.INTEGER_VALUE);
	        }

	        this.state = 4160;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===439) {
	            this.state = 4157;
	            this.match(StarRocksParser.TRIM_SPACE);
	            this.state = 4158;
	            this.match(StarRocksParser.EQ);
	            this.state = 4159;
	            this.booleanValue();
	        }

	        this.state = 4165;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===135) {
	            this.state = 4162;
	            this.match(StarRocksParser.ENCLOSE);
	            this.state = 4163;
	            this.match(StarRocksParser.EQ);
	            this.state = 4164;
	            localctx.encloseCharacter = this.string();
	        }

	        this.state = 4170;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140) {
	            this.state = 4167;
	            this.match(StarRocksParser.ESCAPE);
	            this.state = 4168;
	            this.match(StarRocksParser.EQ);
	            this.state = 4169;
	            localctx.escapeCharacter = this.string();
	        }

	        this.state = 4172;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	brokerDesc() {
	    let localctx = new BrokerDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, StarRocksParser.RULE_brokerDesc);
	    var _la = 0;
	    try {
	        this.state = 4185;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,428,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4174;
	            this.match(StarRocksParser.WITH);
	            this.state = 4175;
	            this.match(StarRocksParser.BROKER);
	            this.state = 4177;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 4176;
	                localctx.props = this.propertyList();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4179;
	            this.match(StarRocksParser.WITH);
	            this.state = 4180;
	            this.match(StarRocksParser.BROKER);
	            this.state = 4181;
	            localctx.name = this.identifierOrString();
	            this.state = 4183;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 4182;
	                localctx.props = this.propertyList();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceDesc() {
	    let localctx = new ResourceDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, StarRocksParser.RULE_resourceDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4187;
	        this.match(StarRocksParser.WITH);
	        this.state = 4188;
	        this.match(StarRocksParser.RESOURCE);
	        this.state = 4189;
	        localctx.name = this.identifierOrString();
	        this.state = 4191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 4190;
	            localctx.props = this.propertyList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showLoadStatement() {
	    let localctx = new ShowLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, StarRocksParser.RULE_showLoadStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4193;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4194;
	        this.match(StarRocksParser.LOAD);
	        this.state = 4196;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 4195;
	            this.match(StarRocksParser.ALL);
	        }

	        this.state = 4200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168) {
	            this.state = 4198;
	            this.match(StarRocksParser.FROM);
	            this.state = 4199;
	            this.identifier();
	        }

	        this.state = 4204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 4202;
	            this.match(StarRocksParser.WHERE);
	            this.state = 4203;
	            this.expression(0);
	        }

	        this.state = 4216;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293) {
	            this.state = 4206;
	            this.match(StarRocksParser.ORDER);
	            this.state = 4207;
	            this.match(StarRocksParser.BY);
	            this.state = 4208;
	            this.sortItem();
	            this.state = 4213;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 4209;
	                this.match(StarRocksParser.T__2);
	                this.state = 4210;
	                this.sortItem();
	                this.state = 4215;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 4219;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===237) {
	            this.state = 4218;
	            this.limitElement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showLoadWarningsStatement() {
	    let localctx = new ShowLoadWarningsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, StarRocksParser.RULE_showLoadWarningsStatement);
	    var _la = 0;
	    try {
	        this.state = 4240;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,439,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4221;
	            this.match(StarRocksParser.SHOW);
	            this.state = 4222;
	            this.match(StarRocksParser.LOAD);
	            this.state = 4223;
	            this.match(StarRocksParser.WARNINGS);
	            this.state = 4226;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===168) {
	                this.state = 4224;
	                this.match(StarRocksParser.FROM);
	                this.state = 4225;
	                this.identifier();
	            }

	            this.state = 4230;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===474) {
	                this.state = 4228;
	                this.match(StarRocksParser.WHERE);
	                this.state = 4229;
	                this.expression(0);
	            }

	            this.state = 4233;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===237) {
	                this.state = 4232;
	                this.limitElement();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4235;
	            this.match(StarRocksParser.SHOW);
	            this.state = 4236;
	            this.match(StarRocksParser.LOAD);
	            this.state = 4237;
	            this.match(StarRocksParser.WARNINGS);
	            this.state = 4238;
	            this.match(StarRocksParser.ON);
	            this.state = 4239;
	            this.string();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelLoadStatement() {
	    let localctx = new CancelLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, StarRocksParser.RULE_cancelLoadStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4242;
	        this.match(StarRocksParser.CANCEL);
	        this.state = 4243;
	        this.match(StarRocksParser.LOAD);
	        this.state = 4246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168) {
	            this.state = 4244;
	            this.match(StarRocksParser.FROM);
	            this.state = 4245;
	            this.identifier();
	        }

	        this.state = 4250;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 4248;
	            this.match(StarRocksParser.WHERE);
	            this.state = 4249;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterLoadStatement() {
	    let localctx = new AlterLoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, StarRocksParser.RULE_alterLoadStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4252;
	        this.match(StarRocksParser.ALTER);
	        this.state = 4253;
	        this.match(StarRocksParser.LOAD);
	        this.state = 4254;
	        this.match(StarRocksParser.FOR);
	        this.state = 4258;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,442,this._ctx);
	        if(la_===1) {
	            this.state = 4255;
	            localctx.db = this.qualifiedName();
	            this.state = 4256;
	            this.match(StarRocksParser.T__0);

	        }
	        this.state = 4260;
	        localctx.name = this.identifier();
	        this.state = 4262;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 4261;
	            this.jobProperties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelCompactionStatement() {
	    let localctx = new CancelCompactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, StarRocksParser.RULE_cancelCompactionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4264;
	        this.match(StarRocksParser.CANCEL);
	        this.state = 4265;
	        this.match(StarRocksParser.COMPACTION);
	        this.state = 4266;
	        this.match(StarRocksParser.WHERE);
	        this.state = 4267;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showAuthorStatement() {
	    let localctx = new ShowAuthorStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, StarRocksParser.RULE_showAuthorStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4269;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4270;
	        this.match(StarRocksParser.AUTHORS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showBackendsStatement() {
	    let localctx = new ShowBackendsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, StarRocksParser.RULE_showBackendsStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4272;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4273;
	        this.match(StarRocksParser.BACKENDS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showBrokerStatement() {
	    let localctx = new ShowBrokerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, StarRocksParser.RULE_showBrokerStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4275;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4276;
	        this.match(StarRocksParser.BROKER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCharsetStatement() {
	    let localctx = new ShowCharsetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, StarRocksParser.RULE_showCharsetStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4278;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4284;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 64:
	            this.state = 4279;
	            this.match(StarRocksParser.CHAR);
	            this.state = 4280;
	            this.match(StarRocksParser.SET);
	            break;
	        case 66:
	            this.state = 4281;
	            this.match(StarRocksParser.CHARSET);
	            break;
	        case 65:
	            this.state = 4282;
	            this.match(StarRocksParser.CHARACTER);
	            this.state = 4283;
	            this.match(StarRocksParser.SET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 4290;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 4286;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 4287;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 4288;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 4289;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCollationStatement() {
	    let localctx = new ShowCollationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, StarRocksParser.RULE_showCollationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4292;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4293;
	        this.match(StarRocksParser.COLLATION);
	        this.state = 4298;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 4294;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 4295;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 4296;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 4297;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showDeleteStatement() {
	    let localctx = new ShowDeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, StarRocksParser.RULE_showDeleteStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4300;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4301;
	        this.match(StarRocksParser.DELETE);
	        this.state = 4304;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 4302;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4303;
	            localctx.db = this.qualifiedName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showDynamicPartitionStatement() {
	    let localctx = new ShowDynamicPartitionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, StarRocksParser.RULE_showDynamicPartitionStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4306;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4307;
	        this.match(StarRocksParser.DYNAMIC);
	        this.state = 4308;
	        this.match(StarRocksParser.PARTITION);
	        this.state = 4309;
	        this.match(StarRocksParser.TABLES);
	        this.state = 4312;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 4310;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4311;
	            localctx.db = this.qualifiedName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showEventsStatement() {
	    let localctx = new ShowEventsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, StarRocksParser.RULE_showEventsStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4314;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4315;
	        this.match(StarRocksParser.EVENTS);
	        this.state = 4318;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 4316;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4317;
	            localctx.catalog = this.qualifiedName();
	        }

	        this.state = 4324;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 4320;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 4321;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 4322;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 4323;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showEnginesStatement() {
	    let localctx = new ShowEnginesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, StarRocksParser.RULE_showEnginesStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4326;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4327;
	        this.match(StarRocksParser.ENGINES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showFrontendsStatement() {
	    let localctx = new ShowFrontendsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, StarRocksParser.RULE_showFrontendsStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4329;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4330;
	        this.match(StarRocksParser.FRONTENDS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showPluginsStatement() {
	    let localctx = new ShowPluginsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, StarRocksParser.RULE_showPluginsStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4332;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4333;
	        this.match(StarRocksParser.PLUGINS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showRepositoriesStatement() {
	    let localctx = new ShowRepositoriesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, StarRocksParser.RULE_showRepositoriesStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4335;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4336;
	        this.match(StarRocksParser.REPOSITORIES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showOpenTableStatement() {
	    let localctx = new ShowOpenTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, StarRocksParser.RULE_showOpenTableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4338;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4339;
	        this.match(StarRocksParser.OPEN);
	        this.state = 4340;
	        this.match(StarRocksParser.TABLES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showPrivilegesStatement() {
	    let localctx = new ShowPrivilegesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, StarRocksParser.RULE_showPrivilegesStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4342;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4343;
	        this.match(StarRocksParser.PRIVILEGES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showProcedureStatement() {
	    let localctx = new ShowProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, StarRocksParser.RULE_showProcedureStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4345;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4346;
	        _la = this._input.LA(1);
	        if(!(_la===172 || _la===323)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4347;
	        this.match(StarRocksParser.STATUS);
	        this.state = 4352;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 4348;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 4349;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 4350;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 4351;
	        	localctx.where = this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showProcStatement() {
	    let localctx = new ShowProcStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, StarRocksParser.RULE_showProcStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4354;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4355;
	        this.match(StarRocksParser.PROC);
	        this.state = 4356;
	        localctx.path = this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showProcesslistStatement() {
	    let localctx = new ShowProcesslistStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, StarRocksParser.RULE_showProcesslistStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4358;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4360;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===171) {
	            this.state = 4359;
	            this.match(StarRocksParser.FULL);
	        }

	        this.state = 4362;
	        this.match(StarRocksParser.PROCESSLIST);
	        this.state = 4365;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===164) {
	            this.state = 4363;
	            this.match(StarRocksParser.FOR);
	            this.state = 4364;
	            this.string();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showProfilelistStatement() {
	    let localctx = new ShowProfilelistStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, StarRocksParser.RULE_showProfilelistStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4367;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4368;
	        this.match(StarRocksParser.PROFILELIST);
	        this.state = 4371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===237) {
	            this.state = 4369;
	            this.match(StarRocksParser.LIMIT);
	            this.state = 4370;
	            localctx.limit = this.match(StarRocksParser.INTEGER_VALUE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showRunningQueriesStatement() {
	    let localctx = new ShowRunningQueriesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, StarRocksParser.RULE_showRunningQueriesStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4373;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4374;
	        this.match(StarRocksParser.RUNNING);
	        this.state = 4375;
	        this.match(StarRocksParser.QUERIES);
	        this.state = 4378;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===237) {
	            this.state = 4376;
	            this.match(StarRocksParser.LIMIT);
	            this.state = 4377;
	            localctx.limit = this.match(StarRocksParser.INTEGER_VALUE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatusStatement() {
	    let localctx = new ShowStatusStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, StarRocksParser.RULE_showStatusStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4380;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4382;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===174 || _la===240 || _la===390 || _la===463) {
	            this.state = 4381;
	            this.varType();
	        }

	        this.state = 4384;
	        this.match(StarRocksParser.STATUS);
	        this.state = 4389;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 4385;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 4386;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 4387;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 4388;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showTabletStatement() {
	    let localctx = new ShowTabletStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, StarRocksParser.RULE_showTabletStatement);
	    var _la = 0;
	    try {
	        this.state = 4420;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,463,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4391;
	            this.match(StarRocksParser.SHOW);
	            this.state = 4392;
	            this.match(StarRocksParser.TABLET);
	            this.state = 4393;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4394;
	            this.match(StarRocksParser.SHOW);
	            this.state = 4395;
	            _la = this._input.LA(1);
	            if(!(_la===420 || _la===421)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4396;
	            this.match(StarRocksParser.FROM);
	            this.state = 4397;
	            this.qualifiedName();
	            this.state = 4399;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===298 || _la===299 || _la===424) {
	                this.state = 4398;
	                this.partitionNames();
	            }

	            this.state = 4403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===474) {
	                this.state = 4401;
	                this.match(StarRocksParser.WHERE);
	                this.state = 4402;
	                this.expression(0);
	            }

	            this.state = 4415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===293) {
	                this.state = 4405;
	                this.match(StarRocksParser.ORDER);
	                this.state = 4406;
	                this.match(StarRocksParser.BY);
	                this.state = 4407;
	                this.sortItem();
	                this.state = 4412;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 4408;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 4409;
	                    this.sortItem();
	                    this.state = 4414;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 4418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===237) {
	                this.state = 4417;
	                this.limitElement();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showTransactionStatement() {
	    let localctx = new ShowTransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, StarRocksParser.RULE_showTransactionStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4422;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4423;
	        this.match(StarRocksParser.TRANSACTION);
	        this.state = 4426;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 4424;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4425;
	            localctx.db = this.qualifiedName();
	        }

	        this.state = 4430;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 4428;
	            this.match(StarRocksParser.WHERE);
	            this.state = 4429;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showTriggersStatement() {
	    let localctx = new ShowTriggersStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, StarRocksParser.RULE_showTriggersStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4432;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4434;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===171) {
	            this.state = 4433;
	            this.match(StarRocksParser.FULL);
	        }

	        this.state = 4436;
	        this.match(StarRocksParser.TRIGGERS);
	        this.state = 4439;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 4437;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4438;
	            localctx.catalog = this.qualifiedName();
	        }

	        this.state = 4445;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 4441;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 4442;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 4443;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 4444;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showUserPropertyStatement() {
	    let localctx = new ShowUserPropertyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, StarRocksParser.RULE_showUserPropertyStatement);
	    var _la = 0;
	    try {
	        this.state = 4467;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4447;
	            this.match(StarRocksParser.SHOW);
	            this.state = 4448;
	            this.match(StarRocksParser.PROPERTY);
	            this.state = 4451;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===164) {
	                this.state = 4449;
	                this.match(StarRocksParser.FOR);
	                this.state = 4450;
	                this.string();
	            }

	            this.state = 4455;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===236) {
	                this.state = 4453;
	                this.match(StarRocksParser.LIKE);
	                this.state = 4454;
	                this.string();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4457;
	            this.match(StarRocksParser.SHOW);
	            this.state = 4458;
	            this.match(StarRocksParser.PROPERTIES);
	            this.state = 4461;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===164) {
	                this.state = 4459;
	                this.match(StarRocksParser.FOR);
	                this.state = 4460;
	                this.string();
	            }

	            this.state = 4465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===236) {
	                this.state = 4463;
	                this.match(StarRocksParser.LIKE);
	                this.state = 4464;
	                this.string();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showVariablesStatement() {
	    let localctx = new ShowVariablesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, StarRocksParser.RULE_showVariablesStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4469;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4471;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===174 || _la===240 || _la===390 || _la===463) {
	            this.state = 4470;
	            this.varType();
	        }

	        this.state = 4473;
	        this.match(StarRocksParser.VARIABLES);
	        this.state = 4478;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 4474;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 4475;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 4476;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 4477;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showWarningStatement() {
	    let localctx = new ShowWarningStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, StarRocksParser.RULE_showWarningStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4480;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4481;
	        _la = this._input.LA(1);
	        if(!(_la===139 || _la===471)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4483;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===237) {
	            this.state = 4482;
	            this.limitElement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	helpStatement() {
	    let localctx = new HelpStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, StarRocksParser.RULE_helpStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4485;
	        this.match(StarRocksParser.HELP);
	        this.state = 4486;
	        this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUserStatement() {
	    let localctx = new CreateUserStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, StarRocksParser.RULE_createUserStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4488;
	        this.match(StarRocksParser.CREATE);
	        this.state = 4489;
	        this.match(StarRocksParser.USER);
	        this.state = 4493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 4490;
	            this.match(StarRocksParser.IF);
	            this.state = 4491;
	            this.match(StarRocksParser.NOT);
	            this.state = 4492;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 4495;
	        this.user();
	        this.state = 4497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===192) {
	            this.state = 4496;
	            this.authOption();
	        }

	        this.state = 4502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===114) {
	            this.state = 4499;
	            this.match(StarRocksParser.DEFAULT);
	            this.state = 4500;
	            this.match(StarRocksParser.ROLE);
	            this.state = 4501;
	            this.roleList();
	        }

	        this.state = 4505;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 4504;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropUserStatement() {
	    let localctx = new DropUserStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, StarRocksParser.RULE_dropUserStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4507;
	        this.match(StarRocksParser.DROP);
	        this.state = 4508;
	        this.match(StarRocksParser.USER);
	        this.state = 4511;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 4509;
	            this.match(StarRocksParser.IF);
	            this.state = 4510;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 4513;
	        this.user();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterUserStatement() {
	    let localctx = new AlterUserStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, StarRocksParser.RULE_alterUserStatement);
	    var _la = 0;
	    try {
	        this.state = 4548;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,486,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4515;
	            this.match(StarRocksParser.ALTER);
	            this.state = 4516;
	            this.match(StarRocksParser.USER);
	            this.state = 4519;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===193) {
	                this.state = 4517;
	                this.match(StarRocksParser.IF);
	                this.state = 4518;
	                this.match(StarRocksParser.EXISTS);
	            }

	            this.state = 4521;
	            this.user();
	            this.state = 4522;
	            this.authOption();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4524;
	            this.match(StarRocksParser.ALTER);
	            this.state = 4525;
	            this.match(StarRocksParser.USER);
	            this.state = 4528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===193) {
	                this.state = 4526;
	                this.match(StarRocksParser.IF);
	                this.state = 4527;
	                this.match(StarRocksParser.EXISTS);
	            }

	            this.state = 4530;
	            this.user();
	            this.state = 4531;
	            this.match(StarRocksParser.DEFAULT);
	            this.state = 4532;
	            this.match(StarRocksParser.ROLE);
	            this.state = 4536;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4533;
	                this.match(StarRocksParser.NONE);
	                break;

	            case 2:
	                this.state = 4534;
	                this.match(StarRocksParser.ALL);
	                break;

	            case 3:
	                this.state = 4535;
	                this.roleList();
	                break;

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4538;
	            this.match(StarRocksParser.ALTER);
	            this.state = 4539;
	            this.match(StarRocksParser.USER);
	            this.state = 4542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===193) {
	                this.state = 4540;
	                this.match(StarRocksParser.IF);
	                this.state = 4541;
	                this.match(StarRocksParser.EXISTS);
	            }

	            this.state = 4544;
	            this.user();
	            this.state = 4545;
	            this.match(StarRocksParser.SET);
	            this.state = 4546;
	            this.properties();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showUserStatement() {
	    let localctx = new ShowUserStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, StarRocksParser.RULE_showUserStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4550;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4551;
	        _la = this._input.LA(1);
	        if(!(_la===454 || _la===455)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showAuthenticationStatement() {
	    let localctx = new ShowAuthenticationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, StarRocksParser.RULE_showAuthenticationStatement);
	    var _la = 0;
	    try {
	        this.state = 4562;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,488,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ShowAllAuthenticationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4553;
	            this.match(StarRocksParser.SHOW);
	            this.state = 4554;
	            this.match(StarRocksParser.ALL);
	            this.state = 4555;
	            this.match(StarRocksParser.AUTHENTICATION);
	            break;

	        case 2:
	            localctx = new ShowAuthenticationForUserContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4556;
	            this.match(StarRocksParser.SHOW);
	            this.state = 4557;
	            this.match(StarRocksParser.AUTHENTICATION);
	            this.state = 4560;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===164) {
	                this.state = 4558;
	                this.match(StarRocksParser.FOR);
	                this.state = 4559;
	                this.user();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executeAsStatement() {
	    let localctx = new ExecuteAsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, StarRocksParser.RULE_executeAsStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4564;
	        this.match(StarRocksParser.EXECUTE);
	        this.state = 4565;
	        this.match(StarRocksParser.AS);
	        this.state = 4566;
	        this.user();
	        this.state = 4570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===476) {
	            this.state = 4567;
	            this.match(StarRocksParser.WITH);
	            this.state = 4568;
	            this.match(StarRocksParser.NO);
	            this.state = 4569;
	            this.match(StarRocksParser.REVERT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRoleStatement() {
	    let localctx = new CreateRoleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, StarRocksParser.RULE_createRoleStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4572;
	        this.match(StarRocksParser.CREATE);
	        this.state = 4573;
	        this.match(StarRocksParser.ROLE);
	        this.state = 4577;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 4574;
	            this.match(StarRocksParser.IF);
	            this.state = 4575;
	            this.match(StarRocksParser.NOT);
	            this.state = 4576;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 4579;
	        this.roleList();
	        this.state = 4581;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 4580;
	            this.comment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterRoleStatement() {
	    let localctx = new AlterRoleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, StarRocksParser.RULE_alterRoleStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4583;
	        this.match(StarRocksParser.ALTER);
	        this.state = 4584;
	        this.match(StarRocksParser.ROLE);
	        this.state = 4587;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 4585;
	            this.match(StarRocksParser.IF);
	            this.state = 4586;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 4589;
	        this.roleList();
	        this.state = 4590;
	        this.match(StarRocksParser.SET);
	        this.state = 4591;
	        this.match(StarRocksParser.COMMENT);
	        this.state = 4592;
	        this.match(StarRocksParser.EQ);
	        this.state = 4593;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropRoleStatement() {
	    let localctx = new DropRoleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, StarRocksParser.RULE_dropRoleStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4595;
	        this.match(StarRocksParser.DROP);
	        this.state = 4596;
	        this.match(StarRocksParser.ROLE);
	        this.state = 4599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 4597;
	            this.match(StarRocksParser.IF);
	            this.state = 4598;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 4601;
	        this.roleList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showRolesStatement() {
	    let localctx = new ShowRolesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, StarRocksParser.RULE_showRolesStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4603;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4604;
	        this.match(StarRocksParser.ROLES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantRoleStatement() {
	    let localctx = new GrantRoleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, StarRocksParser.RULE_grantRoleStatement);
	    try {
	        this.state = 4620;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,495,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new GrantRoleToUserContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4606;
	            this.match(StarRocksParser.GRANT);
	            this.state = 4607;
	            this.identifierOrStringList();
	            this.state = 4608;
	            this.match(StarRocksParser.TO);
	            this.state = 4610;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,494,this._ctx);
	            if(la_===1) {
	                this.state = 4609;
	                this.match(StarRocksParser.USER);

	            }
	            this.state = 4612;
	            this.user();
	            break;

	        case 2:
	            localctx = new GrantRoleToRoleContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4614;
	            this.match(StarRocksParser.GRANT);
	            this.state = 4615;
	            this.identifierOrStringList();
	            this.state = 4616;
	            this.match(StarRocksParser.TO);
	            this.state = 4617;
	            this.match(StarRocksParser.ROLE);
	            this.state = 4618;
	            this.identifierOrString();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeRoleStatement() {
	    let localctx = new RevokeRoleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, StarRocksParser.RULE_revokeRoleStatement);
	    try {
	        this.state = 4636;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,497,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new RevokeRoleFromUserContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4622;
	            this.match(StarRocksParser.REVOKE);
	            this.state = 4623;
	            this.identifierOrStringList();
	            this.state = 4624;
	            this.match(StarRocksParser.FROM);
	            this.state = 4626;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,496,this._ctx);
	            if(la_===1) {
	                this.state = 4625;
	                this.match(StarRocksParser.USER);

	            }
	            this.state = 4628;
	            this.user();
	            break;

	        case 2:
	            localctx = new RevokeRoleFromRoleContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4630;
	            this.match(StarRocksParser.REVOKE);
	            this.state = 4631;
	            this.identifierOrStringList();
	            this.state = 4632;
	            this.match(StarRocksParser.FROM);
	            this.state = 4633;
	            this.match(StarRocksParser.ROLE);
	            this.state = 4634;
	            this.identifierOrString();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setRoleStatement() {
	    let localctx = new SetRoleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, StarRocksParser.RULE_setRoleStatement);
	    var _la = 0;
	    try {
	        this.state = 4654;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,499,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4638;
	            this.match(StarRocksParser.SET);
	            this.state = 4639;
	            this.match(StarRocksParser.ROLE);
	            this.state = 4640;
	            this.match(StarRocksParser.DEFAULT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4641;
	            this.match(StarRocksParser.SET);
	            this.state = 4642;
	            this.match(StarRocksParser.ROLE);
	            this.state = 4643;
	            this.match(StarRocksParser.NONE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4644;
	            this.match(StarRocksParser.SET);
	            this.state = 4645;
	            this.match(StarRocksParser.ROLE);
	            this.state = 4646;
	            this.match(StarRocksParser.ALL);
	            this.state = 4649;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===142) {
	                this.state = 4647;
	                this.match(StarRocksParser.EXCEPT);
	                this.state = 4648;
	                this.roleList();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4651;
	            this.match(StarRocksParser.SET);
	            this.state = 4652;
	            this.match(StarRocksParser.ROLE);
	            this.state = 4653;
	            this.roleList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setDefaultRoleStatement() {
	    let localctx = new SetDefaultRoleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, StarRocksParser.RULE_setDefaultRoleStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4656;
	        this.match(StarRocksParser.SET);
	        this.state = 4657;
	        this.match(StarRocksParser.DEFAULT);
	        this.state = 4658;
	        this.match(StarRocksParser.ROLE);
	        this.state = 4662;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,500,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4659;
	            this.match(StarRocksParser.NONE);
	            break;

	        case 2:
	            this.state = 4660;
	            this.match(StarRocksParser.ALL);
	            break;

	        case 3:
	            this.state = 4661;
	            this.roleList();
	            break;

	        }
	        this.state = 4664;
	        this.match(StarRocksParser.TO);
	        this.state = 4665;
	        this.user();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantRevokeClause() {
	    let localctx = new GrantRevokeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, StarRocksParser.RULE_grantRevokeClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4673;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,502,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4668;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,501,this._ctx);
	            if(la_===1) {
	                this.state = 4667;
	                this.match(StarRocksParser.USER);

	            }
	            this.state = 4670;
	            this.user();
	            break;

	        case 2:
	            this.state = 4671;
	            this.match(StarRocksParser.ROLE);
	            this.state = 4672;
	            this.identifierOrString();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantPrivilegeStatement() {
	    let localctx = new GrantPrivilegeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, StarRocksParser.RULE_grantPrivilegeStatement);
	    var _la = 0;
	    try {
	        this.state = 4763;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,512,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new GrantOnUserContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4675;
	            this.match(StarRocksParser.GRANT);
	            this.state = 4676;
	            this.match(StarRocksParser.IMPERSONATE);
	            this.state = 4677;
	            this.match(StarRocksParser.ON);
	            this.state = 4678;
	            this.match(StarRocksParser.USER);
	            this.state = 4679;
	            this.user();
	            this.state = 4684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 4680;
	                this.match(StarRocksParser.T__2);
	                this.state = 4681;
	                this.user();
	                this.state = 4686;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4687;
	            this.match(StarRocksParser.TO);
	            this.state = 4688;
	            this.grantRevokeClause();
	            this.state = 4692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===476) {
	                this.state = 4689;
	                this.match(StarRocksParser.WITH);
	                this.state = 4690;
	                this.match(StarRocksParser.GRANT);
	                this.state = 4691;
	                this.match(StarRocksParser.OPTION);
	            }

	            break;

	        case 2:
	            localctx = new GrantOnTableBriefContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4694;
	            this.match(StarRocksParser.GRANT);
	            this.state = 4695;
	            this.privilegeTypeList();
	            this.state = 4696;
	            this.match(StarRocksParser.ON);
	            this.state = 4697;
	            this.privObjectNameList();
	            this.state = 4698;
	            this.match(StarRocksParser.TO);
	            this.state = 4699;
	            this.grantRevokeClause();
	            this.state = 4703;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===476) {
	                this.state = 4700;
	                this.match(StarRocksParser.WITH);
	                this.state = 4701;
	                this.match(StarRocksParser.GRANT);
	                this.state = 4702;
	                this.match(StarRocksParser.OPTION);
	            }

	            break;

	        case 3:
	            localctx = new GrantOnFuncContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4705;
	            this.match(StarRocksParser.GRANT);
	            this.state = 4706;
	            this.privilegeTypeList();
	            this.state = 4707;
	            this.match(StarRocksParser.ON);
	            this.state = 4709;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===174) {
	                this.state = 4708;
	                this.match(StarRocksParser.GLOBAL);
	            }

	            this.state = 4711;
	            this.match(StarRocksParser.FUNCTION);
	            this.state = 4712;
	            this.privFunctionObjectNameList();
	            this.state = 4713;
	            this.match(StarRocksParser.TO);
	            this.state = 4714;
	            this.grantRevokeClause();
	            this.state = 4718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===476) {
	                this.state = 4715;
	                this.match(StarRocksParser.WITH);
	                this.state = 4716;
	                this.match(StarRocksParser.GRANT);
	                this.state = 4717;
	                this.match(StarRocksParser.OPTION);
	            }

	            break;

	        case 4:
	            localctx = new GrantOnSystemContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4720;
	            this.match(StarRocksParser.GRANT);
	            this.state = 4721;
	            this.privilegeTypeList();
	            this.state = 4722;
	            this.match(StarRocksParser.ON);
	            this.state = 4723;
	            this.match(StarRocksParser.SYSTEM);
	            this.state = 4724;
	            this.match(StarRocksParser.TO);
	            this.state = 4725;
	            this.grantRevokeClause();
	            this.state = 4729;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===476) {
	                this.state = 4726;
	                this.match(StarRocksParser.WITH);
	                this.state = 4727;
	                this.match(StarRocksParser.GRANT);
	                this.state = 4728;
	                this.match(StarRocksParser.OPTION);
	            }

	            break;

	        case 5:
	            localctx = new GrantOnPrimaryObjContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4731;
	            this.match(StarRocksParser.GRANT);
	            this.state = 4732;
	            this.privilegeTypeList();
	            this.state = 4733;
	            this.match(StarRocksParser.ON);
	            this.state = 4734;
	            this.privObjectType();
	            this.state = 4735;
	            this.privObjectNameList();
	            this.state = 4736;
	            this.match(StarRocksParser.TO);
	            this.state = 4737;
	            this.grantRevokeClause();
	            this.state = 4741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===476) {
	                this.state = 4738;
	                this.match(StarRocksParser.WITH);
	                this.state = 4739;
	                this.match(StarRocksParser.GRANT);
	                this.state = 4740;
	                this.match(StarRocksParser.OPTION);
	            }

	            break;

	        case 6:
	            localctx = new GrantOnAllContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4743;
	            this.match(StarRocksParser.GRANT);
	            this.state = 4744;
	            this.privilegeTypeList();
	            this.state = 4745;
	            this.match(StarRocksParser.ON);
	            this.state = 4746;
	            this.match(StarRocksParser.ALL);
	            this.state = 4747;
	            this.privObjectTypePlural();
	            this.state = 4754;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,510,this._ctx);
	            if(la_===1) {
	                this.state = 4748;
	                this.match(StarRocksParser.IN);
	                this.state = 4749;
	                localctx.isAll = this.match(StarRocksParser.ALL);
	                this.state = 4750;
	                this.match(StarRocksParser.DATABASES);

	            } else if(la_===2) {
	                this.state = 4751;
	                this.match(StarRocksParser.IN);
	                this.state = 4752;
	                this.match(StarRocksParser.DATABASE);
	                this.state = 4753;
	                this.identifierOrString();

	            }
	            this.state = 4756;
	            this.match(StarRocksParser.TO);
	            this.state = 4757;
	            this.grantRevokeClause();
	            this.state = 4761;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===476) {
	                this.state = 4758;
	                this.match(StarRocksParser.WITH);
	                this.state = 4759;
	                this.match(StarRocksParser.GRANT);
	                this.state = 4760;
	                this.match(StarRocksParser.OPTION);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokePrivilegeStatement() {
	    let localctx = new RevokePrivilegeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, StarRocksParser.RULE_revokePrivilegeStatement);
	    var _la = 0;
	    try {
	        this.state = 4829;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,516,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new RevokeOnUserContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4765;
	            this.match(StarRocksParser.REVOKE);
	            this.state = 4766;
	            this.match(StarRocksParser.IMPERSONATE);
	            this.state = 4767;
	            this.match(StarRocksParser.ON);
	            this.state = 4768;
	            this.match(StarRocksParser.USER);
	            this.state = 4769;
	            this.user();
	            this.state = 4774;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 4770;
	                this.match(StarRocksParser.T__2);
	                this.state = 4771;
	                this.user();
	                this.state = 4776;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4777;
	            this.match(StarRocksParser.FROM);
	            this.state = 4778;
	            this.grantRevokeClause();
	            break;

	        case 2:
	            localctx = new RevokeOnTableBriefContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4780;
	            this.match(StarRocksParser.REVOKE);
	            this.state = 4781;
	            this.privilegeTypeList();
	            this.state = 4782;
	            this.match(StarRocksParser.ON);
	            this.state = 4783;
	            this.privObjectNameList();
	            this.state = 4784;
	            this.match(StarRocksParser.FROM);
	            this.state = 4785;
	            this.grantRevokeClause();
	            break;

	        case 3:
	            localctx = new RevokeOnFuncContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4787;
	            this.match(StarRocksParser.REVOKE);
	            this.state = 4788;
	            this.privilegeTypeList();
	            this.state = 4789;
	            this.match(StarRocksParser.ON);
	            this.state = 4791;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===174) {
	                this.state = 4790;
	                this.match(StarRocksParser.GLOBAL);
	            }

	            this.state = 4793;
	            this.match(StarRocksParser.FUNCTION);
	            this.state = 4794;
	            this.privFunctionObjectNameList();
	            this.state = 4795;
	            this.match(StarRocksParser.FROM);
	            this.state = 4796;
	            this.grantRevokeClause();
	            break;

	        case 4:
	            localctx = new RevokeOnSystemContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4798;
	            this.match(StarRocksParser.REVOKE);
	            this.state = 4799;
	            this.privilegeTypeList();
	            this.state = 4800;
	            this.match(StarRocksParser.ON);
	            this.state = 4801;
	            this.match(StarRocksParser.SYSTEM);
	            this.state = 4802;
	            this.match(StarRocksParser.FROM);
	            this.state = 4803;
	            this.grantRevokeClause();
	            break;

	        case 5:
	            localctx = new RevokeOnPrimaryObjContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4805;
	            this.match(StarRocksParser.REVOKE);
	            this.state = 4806;
	            this.privilegeTypeList();
	            this.state = 4807;
	            this.match(StarRocksParser.ON);
	            this.state = 4808;
	            this.privObjectType();
	            this.state = 4809;
	            this.privObjectNameList();
	            this.state = 4810;
	            this.match(StarRocksParser.FROM);
	            this.state = 4811;
	            this.grantRevokeClause();
	            break;

	        case 6:
	            localctx = new RevokeOnAllContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4813;
	            this.match(StarRocksParser.REVOKE);
	            this.state = 4814;
	            this.privilegeTypeList();
	            this.state = 4815;
	            this.match(StarRocksParser.ON);
	            this.state = 4816;
	            this.match(StarRocksParser.ALL);
	            this.state = 4817;
	            this.privObjectTypePlural();
	            this.state = 4824;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,515,this._ctx);
	            if(la_===1) {
	                this.state = 4818;
	                this.match(StarRocksParser.IN);
	                this.state = 4819;
	                localctx.isAll = this.match(StarRocksParser.ALL);
	                this.state = 4820;
	                this.match(StarRocksParser.DATABASES);

	            } else if(la_===2) {
	                this.state = 4821;
	                this.match(StarRocksParser.IN);
	                this.state = 4822;
	                this.match(StarRocksParser.DATABASE);
	                this.state = 4823;
	                this.identifierOrString();

	            }
	            this.state = 4826;
	            this.match(StarRocksParser.FROM);
	            this.state = 4827;
	            this.grantRevokeClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showGrantsStatement() {
	    let localctx = new ShowGrantsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, StarRocksParser.RULE_showGrantsStatement);
	    try {
	        this.state = 4845;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,518,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4831;
	            this.match(StarRocksParser.SHOW);
	            this.state = 4832;
	            this.match(StarRocksParser.GRANTS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4833;
	            this.match(StarRocksParser.SHOW);
	            this.state = 4834;
	            this.match(StarRocksParser.GRANTS);
	            this.state = 4835;
	            this.match(StarRocksParser.FOR);
	            this.state = 4837;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,517,this._ctx);
	            if(la_===1) {
	                this.state = 4836;
	                this.match(StarRocksParser.USER);

	            }
	            this.state = 4839;
	            this.user();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4840;
	            this.match(StarRocksParser.SHOW);
	            this.state = 4841;
	            this.match(StarRocksParser.GRANTS);
	            this.state = 4842;
	            this.match(StarRocksParser.FOR);
	            this.state = 4843;
	            this.match(StarRocksParser.ROLE);
	            this.state = 4844;
	            this.identifierOrString();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	authOption() {
	    let localctx = new AuthOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, StarRocksParser.RULE_authOption);
	    var _la = 0;
	    try {
	        this.state = 4860;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,521,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AuthWithoutPluginContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4847;
	            this.match(StarRocksParser.IDENTIFIED);
	            this.state = 4848;
	            this.match(StarRocksParser.BY);
	            this.state = 4850;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===300) {
	                this.state = 4849;
	                this.match(StarRocksParser.PASSWORD);
	            }

	            this.state = 4852;
	            this.string();
	            break;

	        case 2:
	            localctx = new AuthWithPluginContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4853;
	            this.match(StarRocksParser.IDENTIFIED);
	            this.state = 4854;
	            this.match(StarRocksParser.WITH);
	            this.state = 4855;
	            this.identifierOrString();
	            this.state = 4858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27 || _la===55) {
	                this.state = 4856;
	                _la = this._input.LA(1);
	                if(!(_la===27 || _la===55)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 4857;
	                this.string();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privObjectName() {
	    let localctx = new PrivObjectNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, StarRocksParser.RULE_privObjectName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4862;
	        this.identifierOrStringOrStar();
	        this.state = 4865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 4863;
	            this.match(StarRocksParser.T__0);
	            this.state = 4864;
	            this.identifierOrStringOrStar();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privObjectNameList() {
	    let localctx = new PrivObjectNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, StarRocksParser.RULE_privObjectNameList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4867;
	        this.privObjectName();
	        this.state = 4872;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 4868;
	            this.match(StarRocksParser.T__2);
	            this.state = 4869;
	            this.privObjectName();
	            this.state = 4874;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privFunctionObjectNameList() {
	    let localctx = new PrivFunctionObjectNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, StarRocksParser.RULE_privFunctionObjectNameList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4875;
	        this.qualifiedName();
	        this.state = 4876;
	        this.match(StarRocksParser.T__1);
	        this.state = 4877;
	        this.typeList();
	        this.state = 4878;
	        this.match(StarRocksParser.T__3);
	        this.state = 4887;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 4879;
	            this.match(StarRocksParser.T__2);
	            this.state = 4880;
	            this.qualifiedName();
	            this.state = 4881;
	            this.match(StarRocksParser.T__1);
	            this.state = 4882;
	            this.typeList();
	            this.state = 4883;
	            this.match(StarRocksParser.T__3);
	            this.state = 4889;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeTypeList() {
	    let localctx = new PrivilegeTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, StarRocksParser.RULE_privilegeTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4890;
	        this.privilegeType();
	        this.state = 4895;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 4891;
	            this.match(StarRocksParser.T__2);
	            this.state = 4892;
	            this.privilegeType();
	            this.state = 4897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeType() {
	    let localctx = new PrivilegeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, StarRocksParser.RULE_privilegeType);
	    var _la = 0;
	    try {
	        this.state = 4940;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 18:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4898;
	            this.match(StarRocksParser.ALL);
	            this.state = 4900;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===320) {
	                this.state = 4899;
	                this.match(StarRocksParser.PRIVILEGES);
	            }

	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4902;
	            this.match(StarRocksParser.ALTER);
	            break;
	        case 23:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4903;
	            this.match(StarRocksParser.APPLY);
	            break;
	        case 47:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4904;
	            this.match(StarRocksParser.BLACKLIST);
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4905;
	            this.match(StarRocksParser.CREATE);
	            this.state = 4923;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,527,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4906;
	                this.match(StarRocksParser.DATABASE);
	                break;

	            case 2:
	                this.state = 4907;
	                this.match(StarRocksParser.TABLE);
	                break;

	            case 3:
	                this.state = 4908;
	                this.match(StarRocksParser.VIEW);
	                break;

	            case 4:
	                this.state = 4909;
	                this.match(StarRocksParser.FUNCTION);
	                break;

	            case 5:
	                this.state = 4910;
	                this.match(StarRocksParser.GLOBAL);
	                this.state = 4911;
	                this.match(StarRocksParser.FUNCTION);
	                break;

	            case 6:
	                this.state = 4912;
	                this.match(StarRocksParser.MATERIALIZED);
	                this.state = 4913;
	                this.match(StarRocksParser.VIEW);
	                break;

	            case 7:
	                this.state = 4914;
	                this.match(StarRocksParser.RESOURCE);
	                break;

	            case 8:
	                this.state = 4915;
	                this.match(StarRocksParser.RESOURCE);
	                this.state = 4916;
	                this.match(StarRocksParser.GROUP);
	                break;

	            case 9:
	                this.state = 4917;
	                this.match(StarRocksParser.EXTERNAL);
	                this.state = 4918;
	                this.match(StarRocksParser.CATALOG);
	                break;

	            case 10:
	                this.state = 4919;
	                this.match(StarRocksParser.STORAGE);
	                this.state = 4920;
	                this.match(StarRocksParser.VOLUME);
	                break;

	            case 11:
	                this.state = 4921;
	                this.match(StarRocksParser.WAREHOUSE);
	                break;

	            case 12:
	                this.state = 4922;
	                this.match(StarRocksParser.PIPE);
	                break;

	            }
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4925;
	            this.match(StarRocksParser.DELETE);
	            break;
	        case 129:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4926;
	            this.match(StarRocksParser.DROP);
	            break;
	        case 146:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4927;
	            this.match(StarRocksParser.EXPORT);
	            break;
	        case 154:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4928;
	            this.match(StarRocksParser.FILE);
	            break;
	        case 194:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4929;
	            this.match(StarRocksParser.IMPERSONATE);
	            break;
	        case 206:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4930;
	            this.match(StarRocksParser.INSERT);
	            break;
	        case 175:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 4931;
	            this.match(StarRocksParser.GRANT);
	            break;
	        case 273:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 4932;
	            this.match(StarRocksParser.NODE);
	            break;
	        case 288:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 4933;
	            this.match(StarRocksParser.OPERATE);
	            break;
	        case 308:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 4934;
	            this.match(StarRocksParser.PLUGIN);
	            break;
	        case 354:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 4935;
	            this.match(StarRocksParser.REPOSITORY);
	            break;
	        case 343:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 4936;
	            this.match(StarRocksParser.REFRESH);
	            break;
	        case 386:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 4937;
	            this.match(StarRocksParser.SELECT);
	            break;
	        case 451:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 4938;
	            this.match(StarRocksParser.UPDATE);
	            break;
	        case 452:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 4939;
	            this.match(StarRocksParser.USAGE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privObjectType() {
	    let localctx = new PrivObjectTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, StarRocksParser.RULE_privObjectType);
	    try {
	        this.state = 4956;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,529,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4942;
	            this.match(StarRocksParser.CATALOG);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4943;
	            this.match(StarRocksParser.DATABASE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4944;
	            this.match(StarRocksParser.MATERIALIZED);
	            this.state = 4945;
	            this.match(StarRocksParser.VIEW);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4946;
	            this.match(StarRocksParser.RESOURCE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4947;
	            this.match(StarRocksParser.RESOURCE);
	            this.state = 4948;
	            this.match(StarRocksParser.GROUP);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4949;
	            this.match(StarRocksParser.STORAGE);
	            this.state = 4950;
	            this.match(StarRocksParser.VOLUME);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4951;
	            this.match(StarRocksParser.SYSTEM);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4952;
	            this.match(StarRocksParser.TABLE);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4953;
	            this.match(StarRocksParser.VIEW);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4954;
	            this.match(StarRocksParser.WAREHOUSE);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4955;
	            this.match(StarRocksParser.PIPE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privObjectTypePlural() {
	    let localctx = new PrivObjectTypePluralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, StarRocksParser.RULE_privObjectTypePlural);
	    try {
	        this.state = 4976;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 61:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4958;
	            this.match(StarRocksParser.CATALOGS);
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4959;
	            this.match(StarRocksParser.DATABASES);
	            break;
	        case 173:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4960;
	            this.match(StarRocksParser.FUNCTIONS);
	            break;
	        case 174:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4961;
	            this.match(StarRocksParser.GLOBAL);
	            this.state = 4962;
	            this.match(StarRocksParser.FUNCTIONS);
	            break;
	        case 253:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4963;
	            this.match(StarRocksParser.MATERIALIZED);
	            this.state = 4964;
	            this.match(StarRocksParser.VIEWS);
	            break;
	        case 314:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4965;
	            this.match(StarRocksParser.POLICIES);
	            break;
	        case 357:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4966;
	            this.match(StarRocksParser.RESOURCES);
	            break;
	        case 356:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4967;
	            this.match(StarRocksParser.RESOURCE);
	            this.state = 4968;
	            this.match(StarRocksParser.GROUPS);
	            break;
	        case 406:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4969;
	            this.match(StarRocksParser.STORAGE);
	            this.state = 4970;
	            this.match(StarRocksParser.VOLUMES);
	            break;
	        case 419:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4971;
	            this.match(StarRocksParser.TABLES);
	            break;
	        case 455:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4972;
	            this.match(StarRocksParser.USERS);
	            break;
	        case 466:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 4973;
	            this.match(StarRocksParser.VIEWS);
	            break;
	        case 470:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 4974;
	            this.match(StarRocksParser.WAREHOUSES);
	            break;
	        case 311:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 4975;
	            this.match(StarRocksParser.PIPES);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createSecurityIntegrationStatement() {
	    let localctx = new CreateSecurityIntegrationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, StarRocksParser.RULE_createSecurityIntegrationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4978;
	        this.match(StarRocksParser.CREATE);
	        this.state = 4979;
	        this.match(StarRocksParser.SECURITY);
	        this.state = 4980;
	        this.match(StarRocksParser.INTEGRATION);
	        this.state = 4981;
	        this.identifier();
	        this.state = 4982;
	        this.properties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSecurityIntegrationStatement() {
	    let localctx = new AlterSecurityIntegrationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, StarRocksParser.RULE_alterSecurityIntegrationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4984;
	        this.match(StarRocksParser.ALTER);
	        this.state = 4985;
	        this.match(StarRocksParser.SECURITY);
	        this.state = 4986;
	        this.match(StarRocksParser.INTEGRATION);
	        this.state = 4987;
	        this.identifier();
	        this.state = 4988;
	        this.match(StarRocksParser.SET);
	        this.state = 4989;
	        this.propertyList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropSecurityIntegrationStatement() {
	    let localctx = new DropSecurityIntegrationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, StarRocksParser.RULE_dropSecurityIntegrationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4991;
	        this.match(StarRocksParser.DROP);
	        this.state = 4992;
	        this.match(StarRocksParser.SECURITY);
	        this.state = 4993;
	        this.match(StarRocksParser.INTEGRATION);
	        this.state = 4994;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showSecurityIntegrationStatement() {
	    let localctx = new ShowSecurityIntegrationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, StarRocksParser.RULE_showSecurityIntegrationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4996;
	        this.match(StarRocksParser.SHOW);
	        this.state = 4997;
	        this.match(StarRocksParser.SECURITY);
	        this.state = 4998;
	        this.match(StarRocksParser.INTEGRATIONS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCreateSecurityIntegrationStatement() {
	    let localctx = new ShowCreateSecurityIntegrationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, StarRocksParser.RULE_showCreateSecurityIntegrationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5000;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5001;
	        this.match(StarRocksParser.CREATE);
	        this.state = 5002;
	        this.match(StarRocksParser.SECURITY);
	        this.state = 5003;
	        this.match(StarRocksParser.INTEGRATION);
	        this.state = 5004;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createGroupProviderStatement() {
	    let localctx = new CreateGroupProviderStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, StarRocksParser.RULE_createGroupProviderStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5006;
	        this.match(StarRocksParser.CREATE);
	        this.state = 5007;
	        this.match(StarRocksParser.GROUP);
	        this.state = 5008;
	        this.match(StarRocksParser.PROVIDER);
	        this.state = 5009;
	        this.identifier();
	        this.state = 5010;
	        this.properties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropGroupProviderStatement() {
	    let localctx = new DropGroupProviderStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, StarRocksParser.RULE_dropGroupProviderStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5012;
	        this.match(StarRocksParser.DROP);
	        this.state = 5013;
	        this.match(StarRocksParser.GROUP);
	        this.state = 5014;
	        this.match(StarRocksParser.PROVIDER);
	        this.state = 5015;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showGroupProvidersStatement() {
	    let localctx = new ShowGroupProvidersStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, StarRocksParser.RULE_showGroupProvidersStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5017;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5018;
	        this.match(StarRocksParser.GROUP);
	        this.state = 5019;
	        this.match(StarRocksParser.PROVIDERS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCreateGroupProviderStatement() {
	    let localctx = new ShowCreateGroupProviderStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, StarRocksParser.RULE_showCreateGroupProviderStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5021;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5022;
	        this.match(StarRocksParser.CREATE);
	        this.state = 5023;
	        this.match(StarRocksParser.GROUP);
	        this.state = 5024;
	        this.match(StarRocksParser.PROVIDER);
	        this.state = 5025;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backupStatement() {
	    let localctx = new BackupStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, StarRocksParser.RULE_backupStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5027;
	        this.match(StarRocksParser.BACKUP);
	        this.state = 5034;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 18:
	        	this.state = 5028;
	        	this.match(StarRocksParser.ALL);
	        	this.state = 5029;
	        	this.match(StarRocksParser.EXTERNAL);
	        	this.state = 5030;
	        	this.match(StarRocksParser.CATALOGS);
	        	break;
	        case 147:
	        	this.state = 5031;
	        	this.match(StarRocksParser.EXTERNAL);
	        	this.state = 5032;
	        	_la = this._input.LA(1);
	        	if(!(_la===60 || _la===61)) {
	        	this._errHandler.recoverInline(this);
	        	}
	        	else {
	        		this._errHandler.reportMatch(this);
	        	    this.consume();
	        	}
	        	this.state = 5033;
	        	this.identifierList();
	        	break;
	        case 101:
	        case 398:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 5038;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101) {
	            this.state = 5036;
	            this.match(StarRocksParser.DATABASE);
	            this.state = 5037;
	            localctx.dbName = this.identifier();
	        }

	        this.state = 5040;
	        this.match(StarRocksParser.SNAPSHOT);
	        this.state = 5041;
	        this.qualifiedName();
	        this.state = 5042;
	        this.match(StarRocksParser.TO);
	        this.state = 5043;
	        localctx.repoName = this.identifier();
	        this.state = 5056;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===285) {
	            this.state = 5044;
	            this.match(StarRocksParser.ON);
	            this.state = 5045;
	            this.match(StarRocksParser.T__1);
	            this.state = 5046;
	            this.backupRestoreObjectDesc();
	            this.state = 5051;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 5047;
	                this.match(StarRocksParser.T__2);
	                this.state = 5048;
	                this.backupRestoreObjectDesc();
	                this.state = 5053;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5054;
	            this.match(StarRocksParser.T__3);
	        }

	        this.state = 5060;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 5058;
	            this.match(StarRocksParser.PROPERTIES);
	            this.state = 5059;
	            this.propertyList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelBackupStatement() {
	    let localctx = new CancelBackupStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, StarRocksParser.RULE_cancelBackupStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5062;
	        this.match(StarRocksParser.CANCEL);
	        this.state = 5063;
	        this.match(StarRocksParser.BACKUP);
	        this.state = 5069;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 168:
	        case 198:
	        	this.state = 5064;
	        	_la = this._input.LA(1);
	        	if(!(_la===168 || _la===198)) {
	        	this._errHandler.recoverInline(this);
	        	}
	        	else {
	        		this._errHandler.reportMatch(this);
	        	    this.consume();
	        	}
	        	this.state = 5065;
	        	this.identifier();
	        	break;
	        case 164:
	        	this.state = 5066;
	        	this.match(StarRocksParser.FOR);
	        	this.state = 5067;
	        	this.match(StarRocksParser.EXTERNAL);
	        	this.state = 5068;
	        	this.match(StarRocksParser.CATALOG);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showBackupStatement() {
	    let localctx = new ShowBackupStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, StarRocksParser.RULE_showBackupStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5071;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5072;
	        this.match(StarRocksParser.BACKUP);
	        this.state = 5075;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 5073;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5074;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restoreStatement() {
	    let localctx = new RestoreStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, StarRocksParser.RULE_restoreStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5077;
	        this.match(StarRocksParser.RESTORE);
	        this.state = 5078;
	        this.match(StarRocksParser.SNAPSHOT);
	        this.state = 5079;
	        this.qualifiedName();
	        this.state = 5080;
	        this.match(StarRocksParser.FROM);
	        this.state = 5081;
	        localctx.repoName = this.identifier();
	        this.state = 5088;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 18:
	        	this.state = 5082;
	        	this.match(StarRocksParser.ALL);
	        	this.state = 5083;
	        	this.match(StarRocksParser.EXTERNAL);
	        	this.state = 5084;
	        	this.match(StarRocksParser.CATALOGS);
	        	break;
	        case 147:
	        	this.state = 5085;
	        	this.match(StarRocksParser.EXTERNAL);
	        	this.state = 5086;
	        	_la = this._input.LA(1);
	        	if(!(_la===60 || _la===61)) {
	        	this._errHandler.recoverInline(this);
	        	}
	        	else {
	        		this._errHandler.reportMatch(this);
	        	    this.consume();
	        	}
	        	this.state = 5087;
	        	this.identifierWithAliasList();
	        	break;
	        case -1:
	        case 101:
	        case 285:
	        case 327:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 5096;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101) {
	            this.state = 5090;
	            this.match(StarRocksParser.DATABASE);
	            this.state = 5091;
	            localctx.dbName = this.identifier();
	            this.state = 5094;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 5092;
	                this.match(StarRocksParser.AS);
	                this.state = 5093;
	                localctx.dbAlias = this.identifier();
	            }

	        }

	        this.state = 5110;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===285) {
	            this.state = 5098;
	            this.match(StarRocksParser.ON);
	            this.state = 5099;
	            this.match(StarRocksParser.T__1);
	            this.state = 5100;
	            this.backupRestoreObjectDesc();
	            this.state = 5105;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 5101;
	                this.match(StarRocksParser.T__2);
	                this.state = 5102;
	                this.backupRestoreObjectDesc();
	                this.state = 5107;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5108;
	            this.match(StarRocksParser.T__3);
	        }

	        this.state = 5114;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 5112;
	            this.match(StarRocksParser.PROPERTIES);
	            this.state = 5113;
	            this.propertyList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelRestoreStatement() {
	    let localctx = new CancelRestoreStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, StarRocksParser.RULE_cancelRestoreStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5116;
	        this.match(StarRocksParser.CANCEL);
	        this.state = 5117;
	        this.match(StarRocksParser.RESTORE);
	        this.state = 5123;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 168:
	        case 198:
	        	this.state = 5118;
	        	_la = this._input.LA(1);
	        	if(!(_la===168 || _la===198)) {
	        	this._errHandler.recoverInline(this);
	        	}
	        	else {
	        		this._errHandler.reportMatch(this);
	        	    this.consume();
	        	}
	        	this.state = 5119;
	        	this.identifier();
	        	break;
	        case 164:
	        	this.state = 5120;
	        	this.match(StarRocksParser.FOR);
	        	this.state = 5121;
	        	this.match(StarRocksParser.EXTERNAL);
	        	this.state = 5122;
	        	this.match(StarRocksParser.CATALOG);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showRestoreStatement() {
	    let localctx = new ShowRestoreStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, StarRocksParser.RULE_showRestoreStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5125;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5126;
	        this.match(StarRocksParser.RESTORE);
	        this.state = 5129;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 5127;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5128;
	            this.identifier();
	        }

	        this.state = 5133;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 5131;
	            this.match(StarRocksParser.WHERE);
	            this.state = 5132;
	            localctx.where = this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showSnapshotStatement() {
	    let localctx = new ShowSnapshotStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, StarRocksParser.RULE_showSnapshotStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5135;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5136;
	        this.match(StarRocksParser.SNAPSHOT);
	        this.state = 5137;
	        this.match(StarRocksParser.ON);
	        this.state = 5138;
	        this.identifier();
	        this.state = 5141;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 5139;
	            this.match(StarRocksParser.WHERE);
	            this.state = 5140;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRepositoryStatement() {
	    let localctx = new CreateRepositoryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, StarRocksParser.RULE_createRepositoryStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5143;
	        this.match(StarRocksParser.CREATE);
	        this.state = 5146;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===340) {
	            this.state = 5144;
	            this.match(StarRocksParser.READ);
	            this.state = 5145;
	            this.match(StarRocksParser.ONLY);
	        }

	        this.state = 5148;
	        this.match(StarRocksParser.REPOSITORY);
	        this.state = 5149;
	        localctx.repoName = this.identifier();
	        this.state = 5150;
	        this.match(StarRocksParser.WITH);
	        this.state = 5151;
	        this.match(StarRocksParser.BROKER);
	        this.state = 5153;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 11)) & ~0x1f) === 0 && ((1 << (_la - 11)) & 1073535099) !== 0) || ((((_la - 43)) & ~0x1f) === 0 && ((1 << (_la - 43)) & 1587507069) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 4077329375) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 4212799553) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 3655786391) !== 0) || ((((_la - 173)) & ~0x1f) === 0 && ((1 << (_la - 173)) & 758110987) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 1629540721) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4226154469) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 3761733439) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4292771831) !== 0) || ((((_la - 334)) & ~0x1f) === 0 && ((1 << (_la - 334)) & 3221071791) !== 0) || ((((_la - 368)) & ~0x1f) === 0 && ((1 << (_la - 368)) & 3447406399) !== 0) || ((((_la - 400)) & ~0x1f) === 0 && ((1 << (_la - 400)) & 4126916095) !== 0) || ((((_la - 432)) & ~0x1f) === 0 && ((1 << (_la - 432)) & 3939712749) !== 0) || ((((_la - 464)) & ~0x1f) === 0 && ((1 << (_la - 464)) & 2162158079) !== 0) || ((((_la - 517)) & ~0x1f) === 0 && ((1 << (_la - 517)) & 4211) !== 0)) {
	            this.state = 5152;
	            localctx.brokerName = this.identifierOrString();
	        }

	        this.state = 5155;
	        this.match(StarRocksParser.ON);
	        this.state = 5156;
	        this.match(StarRocksParser.LOCATION);
	        this.state = 5157;
	        localctx.location = this.string();
	        this.state = 5160;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 5158;
	            this.match(StarRocksParser.PROPERTIES);
	            this.state = 5159;
	            this.propertyList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropRepositoryStatement() {
	    let localctx = new DropRepositoryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, StarRocksParser.RULE_dropRepositoryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5162;
	        this.match(StarRocksParser.DROP);
	        this.state = 5163;
	        this.match(StarRocksParser.REPOSITORY);
	        this.state = 5164;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addSqlBlackListStatement() {
	    let localctx = new AddSqlBlackListStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, StarRocksParser.RULE_addSqlBlackListStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5166;
	        this.match(StarRocksParser.ADD);
	        this.state = 5167;
	        this.match(StarRocksParser.SQLBLACKLIST);
	        this.state = 5168;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delSqlBlackListStatement() {
	    let localctx = new DelSqlBlackListStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, StarRocksParser.RULE_delSqlBlackListStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5170;
	        this.match(StarRocksParser.DELETE);
	        this.state = 5171;
	        this.match(StarRocksParser.SQLBLACKLIST);
	        this.state = 5172;
	        this.match(StarRocksParser.INTEGER_VALUE);
	        this.state = 5177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 5173;
	            this.match(StarRocksParser.T__2);
	            this.state = 5174;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            this.state = 5179;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showSqlBlackListStatement() {
	    let localctx = new ShowSqlBlackListStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, StarRocksParser.RULE_showSqlBlackListStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5180;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5181;
	        this.match(StarRocksParser.SQLBLACKLIST);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showWhiteListStatement() {
	    let localctx = new ShowWhiteListStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, StarRocksParser.RULE_showWhiteListStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5183;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5184;
	        this.match(StarRocksParser.WHITELIST);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addBackendBlackListStatement() {
	    let localctx = new AddBackendBlackListStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, StarRocksParser.RULE_addBackendBlackListStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5186;
	        this.match(StarRocksParser.ADD);
	        this.state = 5187;
	        this.match(StarRocksParser.BACKEND);
	        this.state = 5188;
	        this.match(StarRocksParser.BLACKLIST);
	        this.state = 5189;
	        this.match(StarRocksParser.INTEGER_VALUE);
	        this.state = 5194;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 5190;
	            this.match(StarRocksParser.T__2);
	            this.state = 5191;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            this.state = 5196;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delBackendBlackListStatement() {
	    let localctx = new DelBackendBlackListStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, StarRocksParser.RULE_delBackendBlackListStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5197;
	        this.match(StarRocksParser.DELETE);
	        this.state = 5198;
	        this.match(StarRocksParser.BACKEND);
	        this.state = 5199;
	        this.match(StarRocksParser.BLACKLIST);
	        this.state = 5200;
	        this.match(StarRocksParser.INTEGER_VALUE);
	        this.state = 5205;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 5201;
	            this.match(StarRocksParser.T__2);
	            this.state = 5202;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            this.state = 5207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showBackendBlackListStatement() {
	    let localctx = new ShowBackendBlackListStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, StarRocksParser.RULE_showBackendBlackListStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5208;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5209;
	        this.match(StarRocksParser.BACKEND);
	        this.state = 5210;
	        this.match(StarRocksParser.BLACKLIST);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataCacheTarget() {
	    let localctx = new DataCacheTargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, StarRocksParser.RULE_dataCacheTarget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5212;
	        this.identifierOrStringOrStar();
	        this.state = 5213;
	        this.match(StarRocksParser.T__0);
	        this.state = 5214;
	        this.identifierOrStringOrStar();
	        this.state = 5215;
	        this.match(StarRocksParser.T__0);
	        this.state = 5216;
	        this.identifierOrStringOrStar();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDataCacheRuleStatement() {
	    let localctx = new CreateDataCacheRuleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, StarRocksParser.RULE_createDataCacheRuleStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5218;
	        this.match(StarRocksParser.CREATE);
	        this.state = 5219;
	        this.match(StarRocksParser.DATACACHE);
	        this.state = 5220;
	        this.match(StarRocksParser.RULE);
	        this.state = 5221;
	        this.dataCacheTarget();
	        this.state = 5224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 5222;
	            this.match(StarRocksParser.WHERE);
	            this.state = 5223;
	            this.expression(0);
	        }

	        this.state = 5226;
	        this.match(StarRocksParser.PRIORITY);
	        this.state = 5227;
	        this.match(StarRocksParser.EQ);
	        this.state = 5229;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===497) {
	            this.state = 5228;
	            this.match(StarRocksParser.MINUS_SYMBOL);
	        }

	        this.state = 5231;
	        this.match(StarRocksParser.INTEGER_VALUE);
	        this.state = 5233;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 5232;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showDataCacheRulesStatement() {
	    let localctx = new ShowDataCacheRulesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, StarRocksParser.RULE_showDataCacheRulesStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5235;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5236;
	        this.match(StarRocksParser.DATACACHE);
	        this.state = 5237;
	        this.match(StarRocksParser.RULES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropDataCacheRuleStatement() {
	    let localctx = new DropDataCacheRuleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, StarRocksParser.RULE_dropDataCacheRuleStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5239;
	        this.match(StarRocksParser.DROP);
	        this.state = 5240;
	        this.match(StarRocksParser.DATACACHE);
	        this.state = 5241;
	        this.match(StarRocksParser.RULE);
	        this.state = 5242;
	        this.match(StarRocksParser.INTEGER_VALUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clearDataCacheRulesStatement() {
	    let localctx = new ClearDataCacheRulesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, StarRocksParser.RULE_clearDataCacheRulesStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5244;
	        this.match(StarRocksParser.CLEAR);
	        this.state = 5245;
	        this.match(StarRocksParser.DATACACHE);
	        this.state = 5246;
	        this.match(StarRocksParser.RULES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataCacheSelectStatement() {
	    let localctx = new DataCacheSelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, StarRocksParser.RULE_dataCacheSelectStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5248;
	        this.match(StarRocksParser.CACHE);
	        this.state = 5249;
	        this.match(StarRocksParser.SELECT);
	        this.state = 5250;
	        this.selectItem();
	        this.state = 5255;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 5251;
	            this.match(StarRocksParser.T__2);
	            this.state = 5252;
	            this.selectItem();
	            this.state = 5257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5258;
	        this.match(StarRocksParser.FROM);
	        this.state = 5259;
	        this.qualifiedName();
	        this.state = 5262;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 5260;
	            this.match(StarRocksParser.WHERE);
	            this.state = 5261;
	            localctx.where = this.expression(0);
	        }

	        this.state = 5265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 5264;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exportStatement() {
	    let localctx = new ExportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, StarRocksParser.RULE_exportStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5267;
	        this.match(StarRocksParser.EXPORT);
	        this.state = 5268;
	        this.match(StarRocksParser.TABLE);
	        this.state = 5269;
	        this.tableDesc();
	        this.state = 5271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 5270;
	            this.columnAliases();
	        }

	        this.state = 5273;
	        this.match(StarRocksParser.TO);
	        this.state = 5274;
	        this.string();
	        this.state = 5278;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,561,this._ctx);
	        if(la_===1) {
	            this.state = 5275;
	            this.match(StarRocksParser.WITH);
	            this.state = 5276;
	            _la = this._input.LA(1);
	            if(!(_la===29 || _la===413)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5277;
	            this.match(StarRocksParser.MODE);

	        }
	        this.state = 5281;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 5280;
	            this.properties();
	        }

	        this.state = 5284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===476) {
	            this.state = 5283;
	            this.brokerDesc();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cancelExportStatement() {
	    let localctx = new CancelExportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, StarRocksParser.RULE_cancelExportStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5286;
	        this.match(StarRocksParser.CANCEL);
	        this.state = 5287;
	        this.match(StarRocksParser.EXPORT);
	        this.state = 5290;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 5288;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5289;
	            localctx.catalog = this.qualifiedName();
	        }

	        this.state = 5296;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 5292;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 5293;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 5294;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 5295;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showExportStatement() {
	    let localctx = new ShowExportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, StarRocksParser.RULE_showExportStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5298;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5299;
	        this.match(StarRocksParser.EXPORT);
	        this.state = 5302;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 5300;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5301;
	            localctx.catalog = this.qualifiedName();
	        }

	        this.state = 5308;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 5304;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 5305;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 5306;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 5307;
	        	this.expression(0);
	        	break;
	        case -1:
	        case 237:
	        case 293:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 5320;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293) {
	            this.state = 5310;
	            this.match(StarRocksParser.ORDER);
	            this.state = 5311;
	            this.match(StarRocksParser.BY);
	            this.state = 5312;
	            this.sortItem();
	            this.state = 5317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 5313;
	                this.match(StarRocksParser.T__2);
	                this.state = 5314;
	                this.sortItem();
	                this.state = 5319;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 5323;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===237) {
	            this.state = 5322;
	            this.limitElement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	installPluginStatement() {
	    let localctx = new InstallPluginStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, StarRocksParser.RULE_installPluginStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5325;
	        this.match(StarRocksParser.INSTALL);
	        this.state = 5326;
	        this.match(StarRocksParser.PLUGIN);
	        this.state = 5327;
	        this.match(StarRocksParser.FROM);
	        this.state = 5328;
	        this.identifierOrString();
	        this.state = 5330;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 5329;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uninstallPluginStatement() {
	    let localctx = new UninstallPluginStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, StarRocksParser.RULE_uninstallPluginStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5332;
	        this.match(StarRocksParser.UNINSTALL);
	        this.state = 5333;
	        this.match(StarRocksParser.PLUGIN);
	        this.state = 5334;
	        this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createFileStatement() {
	    let localctx = new CreateFileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, StarRocksParser.RULE_createFileStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5336;
	        this.match(StarRocksParser.CREATE);
	        this.state = 5337;
	        this.match(StarRocksParser.FILE);
	        this.state = 5338;
	        this.string();
	        this.state = 5341;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 5339;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5340;
	            localctx.catalog = this.qualifiedName();
	        }

	        this.state = 5343;
	        this.properties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropFileStatement() {
	    let localctx = new DropFileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, StarRocksParser.RULE_dropFileStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5345;
	        this.match(StarRocksParser.DROP);
	        this.state = 5346;
	        this.match(StarRocksParser.FILE);
	        this.state = 5347;
	        this.string();
	        this.state = 5350;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 5348;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5349;
	            localctx.catalog = this.qualifiedName();
	        }

	        this.state = 5352;
	        this.properties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showSmallFilesStatement() {
	    let localctx = new ShowSmallFilesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, StarRocksParser.RULE_showSmallFilesStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5354;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5355;
	        this.match(StarRocksParser.FILE);
	        this.state = 5358;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===168 || _la===198) {
	            this.state = 5356;
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===198)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5357;
	            localctx.catalog = this.qualifiedName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createPipeStatement() {
	    let localctx = new CreatePipeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, StarRocksParser.RULE_createPipeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5360;
	        this.match(StarRocksParser.CREATE);
	        this.state = 5361;
	        this.orReplace();
	        this.state = 5362;
	        this.match(StarRocksParser.PIPE);
	        this.state = 5363;
	        this.ifNotExists();
	        this.state = 5364;
	        this.qualifiedName();
	        this.state = 5366;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 5365;
	            this.properties();
	        }

	        this.state = 5368;
	        this.match(StarRocksParser.AS);
	        this.state = 5369;
	        this.insertStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropPipeStatement() {
	    let localctx = new DropPipeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, StarRocksParser.RULE_dropPipeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5371;
	        this.match(StarRocksParser.DROP);
	        this.state = 5372;
	        this.match(StarRocksParser.PIPE);
	        this.state = 5375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 5373;
	            this.match(StarRocksParser.IF);
	            this.state = 5374;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 5377;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterPipeClause() {
	    let localctx = new AlterPipeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, StarRocksParser.RULE_alterPipeClause);
	    try {
	        this.state = 5388;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,577,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5379;
	            this.match(StarRocksParser.SUSPEND);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5380;
	            this.match(StarRocksParser.RESUME);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5381;
	            this.match(StarRocksParser.RETRY);
	            this.state = 5382;
	            this.match(StarRocksParser.ALL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5383;
	            this.match(StarRocksParser.RETRY);
	            this.state = 5384;
	            this.match(StarRocksParser.FILE);
	            this.state = 5385;
	            localctx.fileName = this.string();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5386;
	            this.match(StarRocksParser.SET);
	            this.state = 5387;
	            this.propertyList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterPipeStatement() {
	    let localctx = new AlterPipeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, StarRocksParser.RULE_alterPipeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5390;
	        this.match(StarRocksParser.ALTER);
	        this.state = 5391;
	        this.match(StarRocksParser.PIPE);
	        this.state = 5392;
	        this.qualifiedName();
	        this.state = 5393;
	        this.alterPipeClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descPipeStatement() {
	    let localctx = new DescPipeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, StarRocksParser.RULE_descPipeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5395;
	        _la = this._input.LA(1);
	        if(!(_la===122 || _la===123)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5396;
	        this.match(StarRocksParser.PIPE);
	        this.state = 5397;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showPipeStatement() {
	    let localctx = new ShowPipeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, StarRocksParser.RULE_showPipeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5399;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5400;
	        this.match(StarRocksParser.PIPES);
	        this.state = 5407;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 236:
	        	this.state = 5401;
	        	this.match(StarRocksParser.LIKE);
	        	this.state = 5402;
	        	localctx.pattern = this.string();
	        	break;
	        case 474:
	        	this.state = 5403;
	        	this.match(StarRocksParser.WHERE);
	        	this.state = 5404;
	        	this.expression(0);
	        	break;
	        case 168:
	        	this.state = 5405;
	        	this.match(StarRocksParser.FROM);
	        	this.state = 5406;
	        	this.qualifiedName();
	        	break;
	        case -1:
	        case 237:
	        case 293:
	        case 528:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 5419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293) {
	            this.state = 5409;
	            this.match(StarRocksParser.ORDER);
	            this.state = 5410;
	            this.match(StarRocksParser.BY);
	            this.state = 5411;
	            this.sortItem();
	            this.state = 5416;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 5412;
	                this.match(StarRocksParser.T__2);
	                this.state = 5413;
	                this.sortItem();
	                this.state = 5418;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 5422;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===237) {
	            this.state = 5421;
	            this.limitElement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStatement() {
	    let localctx = new SetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, StarRocksParser.RULE_setStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5424;
	        this.match(StarRocksParser.SET);
	        this.state = 5425;
	        this.setVar();
	        this.state = 5430;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 5426;
	            this.match(StarRocksParser.T__2);
	            this.state = 5427;
	            this.setVar();
	            this.state = 5432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setVar() {
	    let localctx = new SetVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, StarRocksParser.RULE_setVar);
	    var _la = 0;
	    try {
	        this.state = 5498;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,592,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SetNamesContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5438;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 64:
	                this.state = 5433;
	                this.match(StarRocksParser.CHAR);
	                this.state = 5434;
	                this.match(StarRocksParser.SET);
	                break;
	            case 66:
	                this.state = 5435;
	                this.match(StarRocksParser.CHARSET);
	                break;
	            case 65:
	                this.state = 5436;
	                this.match(StarRocksParser.CHARACTER);
	                this.state = 5437;
	                this.match(StarRocksParser.SET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5442;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 12:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 22:
	            case 23:
	            case 25:
	            case 26:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 43:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 66:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 73:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 86:
	            case 87:
	            case 91:
	            case 92:
	            case 93:
	            case 99:
	            case 100:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 113:
	            case 118:
	            case 119:
	            case 120:
	            case 124:
	            case 126:
	            case 127:
	            case 131:
	            case 132:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 143:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 153:
	            case 154:
	            case 156:
	            case 157:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 166:
	            case 167:
	            case 169:
	            case 170:
	            case 173:
	            case 174:
	            case 176:
	            case 181:
	            case 182:
	            case 184:
	            case 185:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 194:
	            case 197:
	            case 199:
	            case 200:
	            case 202:
	            case 205:
	            case 209:
	            case 210:
	            case 211:
	            case 213:
	            case 217:
	            case 219:
	            case 220:
	            case 226:
	            case 229:
	            case 234:
	            case 235:
	            case 238:
	            case 240:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 250:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 256:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 286:
	            case 287:
	            case 288:
	            case 290:
	            case 291:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 339:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 347:
	            case 349:
	            case 350:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 365:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 392:
	            case 394:
	            case 395:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 415:
	            case 416:
	            case 417:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 426:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 437:
	            case 438:
	            case 439:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 448:
	            case 449:
	            case 452:
	            case 454:
	            case 455:
	            case 457:
	            case 459:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 475:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 486:
	            case 487:
	            case 495:
	            case 517:
	            case 518:
	            case 521:
	            case 522:
	            case 523:
	            case 529:
	                this.state = 5440;
	                this.identifierOrString();
	                break;
	            case 114:
	                this.state = 5441;
	                this.match(StarRocksParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            localctx = new SetNamesContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5444;
	            this.match(StarRocksParser.NAMES);
	            this.state = 5447;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 12:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 22:
	            case 23:
	            case 25:
	            case 26:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 43:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 66:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 73:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 86:
	            case 87:
	            case 91:
	            case 92:
	            case 93:
	            case 99:
	            case 100:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 113:
	            case 118:
	            case 119:
	            case 120:
	            case 124:
	            case 126:
	            case 127:
	            case 131:
	            case 132:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 143:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 153:
	            case 154:
	            case 156:
	            case 157:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 166:
	            case 167:
	            case 169:
	            case 170:
	            case 173:
	            case 174:
	            case 176:
	            case 181:
	            case 182:
	            case 184:
	            case 185:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 194:
	            case 197:
	            case 199:
	            case 200:
	            case 202:
	            case 205:
	            case 209:
	            case 210:
	            case 211:
	            case 213:
	            case 217:
	            case 219:
	            case 220:
	            case 226:
	            case 229:
	            case 234:
	            case 235:
	            case 238:
	            case 240:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 250:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 256:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 286:
	            case 287:
	            case 288:
	            case 290:
	            case 291:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 339:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 347:
	            case 349:
	            case 350:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 365:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 392:
	            case 394:
	            case 395:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 415:
	            case 416:
	            case 417:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 426:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 437:
	            case 438:
	            case 439:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 448:
	            case 449:
	            case 452:
	            case 454:
	            case 455:
	            case 457:
	            case 459:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 475:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 486:
	            case 487:
	            case 495:
	            case 517:
	            case 518:
	            case 521:
	            case 522:
	            case 523:
	            case 529:
	                this.state = 5445;
	                localctx.charset = this.identifierOrString();
	                break;
	            case 114:
	                this.state = 5446;
	                this.match(StarRocksParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 5454;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 5449;
	                this.match(StarRocksParser.COLLATE);
	                this.state = 5452;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 11:
	                case 12:
	                case 14:
	                case 15:
	                case 16:
	                case 17:
	                case 22:
	                case 23:
	                case 25:
	                case 26:
	                case 29:
	                case 30:
	                case 31:
	                case 32:
	                case 33:
	                case 34:
	                case 35:
	                case 36:
	                case 37:
	                case 38:
	                case 39:
	                case 40:
	                case 43:
	                case 45:
	                case 46:
	                case 47:
	                case 48:
	                case 49:
	                case 51:
	                case 52:
	                case 53:
	                case 54:
	                case 56:
	                case 57:
	                case 59:
	                case 60:
	                case 61:
	                case 62:
	                case 63:
	                case 66:
	                case 68:
	                case 69:
	                case 70:
	                case 71:
	                case 73:
	                case 75:
	                case 76:
	                case 77:
	                case 78:
	                case 79:
	                case 81:
	                case 82:
	                case 83:
	                case 84:
	                case 86:
	                case 87:
	                case 91:
	                case 92:
	                case 93:
	                case 99:
	                case 100:
	                case 103:
	                case 104:
	                case 105:
	                case 106:
	                case 107:
	                case 113:
	                case 118:
	                case 119:
	                case 120:
	                case 124:
	                case 126:
	                case 127:
	                case 131:
	                case 132:
	                case 134:
	                case 135:
	                case 136:
	                case 137:
	                case 138:
	                case 139:
	                case 140:
	                case 141:
	                case 143:
	                case 146:
	                case 147:
	                case 148:
	                case 149:
	                case 150:
	                case 151:
	                case 153:
	                case 154:
	                case 156:
	                case 157:
	                case 160:
	                case 161:
	                case 162:
	                case 163:
	                case 166:
	                case 167:
	                case 169:
	                case 170:
	                case 173:
	                case 174:
	                case 176:
	                case 181:
	                case 182:
	                case 184:
	                case 185:
	                case 187:
	                case 188:
	                case 189:
	                case 190:
	                case 191:
	                case 192:
	                case 194:
	                case 197:
	                case 199:
	                case 200:
	                case 202:
	                case 205:
	                case 209:
	                case 210:
	                case 211:
	                case 213:
	                case 217:
	                case 219:
	                case 220:
	                case 226:
	                case 229:
	                case 234:
	                case 235:
	                case 238:
	                case 240:
	                case 243:
	                case 244:
	                case 245:
	                case 246:
	                case 247:
	                case 248:
	                case 249:
	                case 250:
	                case 251:
	                case 252:
	                case 253:
	                case 254:
	                case 256:
	                case 259:
	                case 260:
	                case 261:
	                case 262:
	                case 263:
	                case 265:
	                case 266:
	                case 267:
	                case 268:
	                case 269:
	                case 270:
	                case 271:
	                case 272:
	                case 273:
	                case 274:
	                case 275:
	                case 278:
	                case 279:
	                case 280:
	                case 281:
	                case 282:
	                case 283:
	                case 284:
	                case 286:
	                case 287:
	                case 288:
	                case 290:
	                case 291:
	                case 299:
	                case 300:
	                case 301:
	                case 302:
	                case 303:
	                case 304:
	                case 306:
	                case 307:
	                case 308:
	                case 309:
	                case 310:
	                case 311:
	                case 312:
	                case 313:
	                case 314:
	                case 315:
	                case 316:
	                case 319:
	                case 320:
	                case 321:
	                case 322:
	                case 324:
	                case 325:
	                case 326:
	                case 327:
	                case 328:
	                case 329:
	                case 330:
	                case 331:
	                case 332:
	                case 333:
	                case 334:
	                case 335:
	                case 336:
	                case 337:
	                case 339:
	                case 341:
	                case 342:
	                case 343:
	                case 344:
	                case 347:
	                case 349:
	                case 350:
	                case 352:
	                case 353:
	                case 354:
	                case 355:
	                case 356:
	                case 357:
	                case 358:
	                case 359:
	                case 360:
	                case 361:
	                case 362:
	                case 363:
	                case 365:
	                case 368:
	                case 369:
	                case 370:
	                case 371:
	                case 372:
	                case 373:
	                case 376:
	                case 377:
	                case 378:
	                case 379:
	                case 380:
	                case 381:
	                case 384:
	                case 385:
	                case 387:
	                case 388:
	                case 389:
	                case 390:
	                case 392:
	                case 394:
	                case 395:
	                case 398:
	                case 399:
	                case 400:
	                case 401:
	                case 402:
	                case 403:
	                case 404:
	                case 405:
	                case 406:
	                case 407:
	                case 408:
	                case 410:
	                case 411:
	                case 412:
	                case 413:
	                case 415:
	                case 416:
	                case 417:
	                case 419:
	                case 420:
	                case 421:
	                case 422:
	                case 423:
	                case 424:
	                case 426:
	                case 428:
	                case 429:
	                case 430:
	                case 431:
	                case 432:
	                case 434:
	                case 435:
	                case 437:
	                case 438:
	                case 439:
	                case 441:
	                case 442:
	                case 443:
	                case 444:
	                case 445:
	                case 448:
	                case 449:
	                case 452:
	                case 454:
	                case 455:
	                case 457:
	                case 459:
	                case 461:
	                case 462:
	                case 463:
	                case 464:
	                case 465:
	                case 466:
	                case 467:
	                case 468:
	                case 469:
	                case 470:
	                case 471:
	                case 472:
	                case 475:
	                case 477:
	                case 478:
	                case 479:
	                case 480:
	                case 481:
	                case 482:
	                case 483:
	                case 484:
	                case 486:
	                case 487:
	                case 495:
	                case 517:
	                case 518:
	                case 521:
	                case 522:
	                case 523:
	                case 529:
	                    this.state = 5450;
	                    localctx.collate = this.identifierOrString();
	                    break;
	                case 114:
	                    this.state = 5451;
	                    this.match(StarRocksParser.DEFAULT);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            break;

	        case 3:
	            localctx = new SetPasswordContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5456;
	            this.match(StarRocksParser.PASSWORD);
	            this.state = 5457;
	            this.match(StarRocksParser.EQ);
	            this.state = 5464;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 517:
	            case 518:
	                this.state = 5458;
	                this.string();
	                break;
	            case 300:
	                this.state = 5459;
	                this.match(StarRocksParser.PASSWORD);
	                this.state = 5460;
	                this.match(StarRocksParser.T__1);
	                this.state = 5461;
	                this.string();
	                this.state = 5462;
	                this.match(StarRocksParser.T__3);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            localctx = new SetPasswordContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5466;
	            this.match(StarRocksParser.PASSWORD);
	            this.state = 5467;
	            this.match(StarRocksParser.FOR);
	            this.state = 5468;
	            this.user();
	            this.state = 5469;
	            this.match(StarRocksParser.EQ);
	            this.state = 5476;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 517:
	            case 518:
	                this.state = 5470;
	                this.string();
	                break;
	            case 300:
	                this.state = 5471;
	                this.match(StarRocksParser.PASSWORD);
	                this.state = 5472;
	                this.match(StarRocksParser.T__1);
	                this.state = 5473;
	                this.string();
	                this.state = 5474;
	                this.match(StarRocksParser.T__3);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 5:
	            localctx = new SetUserVarContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5478;
	            this.userVariable();
	            this.state = 5479;
	            this.match(StarRocksParser.EQ);
	            this.state = 5480;
	            this.expression(0);
	            break;

	        case 6:
	            localctx = new SetSystemVarContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5483;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,590,this._ctx);
	            if(la_===1) {
	                this.state = 5482;
	                this.varType();

	            }
	            this.state = 5485;
	            this.identifier();
	            this.state = 5486;
	            this.match(StarRocksParser.EQ);
	            this.state = 5487;
	            this.setExprOrDefault();
	            break;

	        case 7:
	            localctx = new SetSystemVarContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5489;
	            this.systemVariable();
	            this.state = 5490;
	            this.match(StarRocksParser.EQ);
	            this.state = 5491;
	            this.setExprOrDefault();
	            break;

	        case 8:
	            localctx = new SetTransactionContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5494;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===174 || _la===240 || _la===390 || _la===463) {
	                this.state = 5493;
	                this.varType();
	            }

	            this.state = 5496;
	            this.match(StarRocksParser.TRANSACTION);
	            this.state = 5497;
	            this.transaction_characteristics();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transaction_characteristics() {
	    let localctx = new Transaction_characteristicsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, StarRocksParser.RULE_transaction_characteristics);
	    try {
	        this.state = 5510;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,593,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5500;
	            this.transaction_access_mode();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5501;
	            this.isolation_level();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5502;
	            this.transaction_access_mode();
	            this.state = 5503;
	            this.match(StarRocksParser.T__2);
	            this.state = 5504;
	            this.isolation_level();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5506;
	            this.isolation_level();
	            this.state = 5507;
	            this.match(StarRocksParser.T__2);
	            this.state = 5508;
	            this.transaction_access_mode();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transaction_access_mode() {
	    let localctx = new Transaction_access_modeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, StarRocksParser.RULE_transaction_access_mode);
	    try {
	        this.state = 5516;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,594,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5512;
	            this.match(StarRocksParser.READ);
	            this.state = 5513;
	            this.match(StarRocksParser.ONLY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5514;
	            this.match(StarRocksParser.READ);
	            this.state = 5515;
	            this.match(StarRocksParser.WRITE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isolation_level() {
	    let localctx = new Isolation_levelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, StarRocksParser.RULE_isolation_level);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5518;
	        this.match(StarRocksParser.ISOLATION);
	        this.state = 5519;
	        this.match(StarRocksParser.LEVEL);
	        this.state = 5520;
	        this.isolation_types();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isolation_types() {
	    let localctx = new Isolation_typesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, StarRocksParser.RULE_isolation_types);
	    try {
	        this.state = 5529;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,595,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5522;
	            this.match(StarRocksParser.READ);
	            this.state = 5523;
	            this.match(StarRocksParser.UNCOMMITTED);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5524;
	            this.match(StarRocksParser.READ);
	            this.state = 5525;
	            this.match(StarRocksParser.COMMITTED);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5526;
	            this.match(StarRocksParser.REPEATABLE);
	            this.state = 5527;
	            this.match(StarRocksParser.READ);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5528;
	            this.match(StarRocksParser.SERIALIZABLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setExprOrDefault() {
	    let localctx = new SetExprOrDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, StarRocksParser.RULE_setExprOrDefault);
	    try {
	        this.state = 5535;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 114:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5531;
	            this.match(StarRocksParser.DEFAULT);
	            break;
	        case 285:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5532;
	            this.match(StarRocksParser.ON);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5533;
	            this.match(StarRocksParser.ALL);
	            break;
	        case 2:
	        case 6:
	        case 9:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 66:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 113:
	        case 116:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 124:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 143:
	        case 144:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 156:
	        case 157:
	        case 158:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 173:
	        case 174:
	        case 176:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 197:
	        case 199:
	        case 200:
	        case 202:
	        case 205:
	        case 209:
	        case 210:
	        case 211:
	        case 213:
	        case 217:
	        case 219:
	        case 220:
	        case 226:
	        case 227:
	        case 229:
	        case 230:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 238:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 256:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 286:
	        case 287:
	        case 288:
	        case 290:
	        case 291:
	        case 297:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 339:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 347:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 392:
	        case 394:
	        case 395:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 415:
	        case 416:
	        case 417:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 426:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 448:
	        case 449:
	        case 452:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 486:
	        case 487:
	        case 495:
	        case 496:
	        case 497:
	        case 503:
	        case 508:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 529:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5534;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setUserPropertyStatement() {
	    let localctx = new SetUserPropertyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, StarRocksParser.RULE_setUserPropertyStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5537;
	        this.match(StarRocksParser.SET);
	        this.state = 5538;
	        this.match(StarRocksParser.PROPERTY);
	        this.state = 5541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===164) {
	            this.state = 5539;
	            this.match(StarRocksParser.FOR);
	            this.state = 5540;
	            this.string();
	        }

	        this.state = 5543;
	        this.userPropertyList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleList() {
	    let localctx = new RoleListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, StarRocksParser.RULE_roleList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5545;
	        this.identifierOrString();
	        this.state = 5550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 5546;
	            this.match(StarRocksParser.T__2);
	            this.state = 5547;
	            this.identifierOrString();
	            this.state = 5552;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executeScriptStatement() {
	    let localctx = new ExecuteScriptStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, StarRocksParser.RULE_executeScriptStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5553;
	        this.match(StarRocksParser.ADMIN);
	        this.state = 5554;
	        this.match(StarRocksParser.EXECUTE);
	        this.state = 5555;
	        this.match(StarRocksParser.ON);
	        this.state = 5556;
	        _la = this._input.LA(1);
	        if(!(_la===169 || _la===514)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5557;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsupportedStatement() {
	    let localctx = new UnsupportedStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, StarRocksParser.RULE_unsupportedStatement);
	    var _la = 0;
	    try {
	        this.state = 5571;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 480:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5559;
	            this.match(StarRocksParser.LOCK);
	            this.state = 5560;
	            this.match(StarRocksParser.TABLES);
	            this.state = 5561;
	            this.lock_item();
	            this.state = 5566;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 5562;
	                this.match(StarRocksParser.T__2);
	                this.state = 5563;
	                this.lock_item();
	                this.state = 5568;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 481:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5569;
	            this.match(StarRocksParser.UNLOCK);
	            this.state = 5570;
	            this.match(StarRocksParser.TABLES);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lock_item() {
	    let localctx = new Lock_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, StarRocksParser.RULE_lock_item);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5573;
	        this.identifier();
	        this.state = 5578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,602,this._ctx);
	        if(la_===1) {
	            this.state = 5575;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 5574;
	                this.match(StarRocksParser.AS);
	            }

	            this.state = 5577;
	            localctx.alias = this.identifier();

	        }
	        this.state = 5580;
	        this.lock_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lock_type() {
	    let localctx = new Lock_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, StarRocksParser.RULE_lock_type);
	    var _la = 0;
	    try {
	        this.state = 5590;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 340:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5582;
	            this.match(StarRocksParser.READ);
	            this.state = 5584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===240) {
	                this.state = 5583;
	                this.match(StarRocksParser.LOCAL);
	            }

	            break;
	        case 478:
	        case 482:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===482) {
	                this.state = 5586;
	                this.match(StarRocksParser.LOW_PRIORITY);
	            }

	            this.state = 5589;
	            this.match(StarRocksParser.WRITE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterPlanAdvisorAddStatement() {
	    let localctx = new AlterPlanAdvisorAddStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, StarRocksParser.RULE_alterPlanAdvisorAddStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5592;
	        this.match(StarRocksParser.ALTER);
	        this.state = 5593;
	        this.match(StarRocksParser.PLAN);
	        this.state = 5594;
	        this.match(StarRocksParser.ADVISOR);
	        this.state = 5595;
	        this.match(StarRocksParser.ADD);
	        this.state = 5596;
	        this.queryStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncatePlanAdvisorStatement() {
	    let localctx = new TruncatePlanAdvisorStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, StarRocksParser.RULE_truncatePlanAdvisorStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5598;
	        this.match(StarRocksParser.TRUNCATE);
	        this.state = 5599;
	        this.match(StarRocksParser.PLAN);
	        this.state = 5600;
	        this.match(StarRocksParser.ADVISOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterPlanAdvisorDropStatement() {
	    let localctx = new AlterPlanAdvisorDropStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, StarRocksParser.RULE_alterPlanAdvisorDropStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5602;
	        this.match(StarRocksParser.ALTER);
	        this.state = 5603;
	        this.match(StarRocksParser.PLAN);
	        this.state = 5604;
	        this.match(StarRocksParser.ADVISOR);
	        this.state = 5605;
	        this.match(StarRocksParser.DROP);
	        this.state = 5606;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showPlanAdvisorStatement() {
	    let localctx = new ShowPlanAdvisorStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, StarRocksParser.RULE_showPlanAdvisorStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5608;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5609;
	        this.match(StarRocksParser.PLAN);
	        this.state = 5610;
	        this.match(StarRocksParser.ADVISOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createWarehouseStatement() {
	    let localctx = new CreateWarehouseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, StarRocksParser.RULE_createWarehouseStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5612;
	        this.match(StarRocksParser.CREATE);

	        this.state = 5613;
	        this.match(StarRocksParser.WAREHOUSE);
	        this.state = 5617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 5614;
	            this.match(StarRocksParser.IF);
	            this.state = 5615;
	            this.match(StarRocksParser.NOT);
	            this.state = 5616;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 5619;
	        localctx.warehouseName = this.identifierOrString();
	        this.state = 5621;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 5620;
	            this.comment();
	        }

	        this.state = 5624;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 5623;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropWarehouseStatement() {
	    let localctx = new DropWarehouseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, StarRocksParser.RULE_dropWarehouseStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5626;
	        this.match(StarRocksParser.DROP);
	        this.state = 5627;
	        this.match(StarRocksParser.WAREHOUSE);
	        this.state = 5630;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 5628;
	            this.match(StarRocksParser.IF);
	            this.state = 5629;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 5632;
	        localctx.warehouseName = this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	suspendWarehouseStatement() {
	    let localctx = new SuspendWarehouseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, StarRocksParser.RULE_suspendWarehouseStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5634;
	        this.match(StarRocksParser.SUSPEND);
	        this.state = 5635;
	        this.match(StarRocksParser.WAREHOUSE);
	        this.state = 5638;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 5636;
	            this.match(StarRocksParser.IF);
	            this.state = 5637;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 5640;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resumeWarehouseStatement() {
	    let localctx = new ResumeWarehouseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, StarRocksParser.RULE_resumeWarehouseStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5642;
	        this.match(StarRocksParser.RESUME);
	        this.state = 5643;
	        this.match(StarRocksParser.WAREHOUSE);
	        this.state = 5646;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 5644;
	            this.match(StarRocksParser.IF);
	            this.state = 5645;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 5648;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setWarehouseStatement() {
	    let localctx = new SetWarehouseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, StarRocksParser.RULE_setWarehouseStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5650;
	        this.match(StarRocksParser.SET);
	        this.state = 5652;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===390) {
	            this.state = 5651;
	            this.match(StarRocksParser.SESSION);
	        }

	        this.state = 5654;
	        this.match(StarRocksParser.WAREHOUSE);
	        this.state = 5656;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===488) {
	            this.state = 5655;
	            this.match(StarRocksParser.EQ);
	        }

	        this.state = 5658;
	        this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showWarehousesStatement() {
	    let localctx = new ShowWarehousesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, StarRocksParser.RULE_showWarehousesStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5660;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5661;
	        this.match(StarRocksParser.WAREHOUSES);
	        this.state = 5664;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===236) {
	            this.state = 5662;
	            this.match(StarRocksParser.LIKE);
	            this.state = 5663;
	            localctx.pattern = this.string();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showClustersStatement() {
	    let localctx = new ShowClustersStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, StarRocksParser.RULE_showClustersStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5666;
	        this.match(StarRocksParser.SHOW);
	        this.state = 5667;
	        this.match(StarRocksParser.CLUSTERS);
	        this.state = 5668;
	        this.match(StarRocksParser.FROM);
	        this.state = 5669;
	        this.match(StarRocksParser.WAREHOUSE);
	        this.state = 5670;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showNodesStatement() {
	    let localctx = new ShowNodesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, StarRocksParser.RULE_showNodesStatement);
	    var _la = 0;
	    try {
	        this.state = 5685;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,616,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5672;
	            this.match(StarRocksParser.SHOW);
	            this.state = 5673;
	            this.match(StarRocksParser.NODES);
	            this.state = 5674;
	            this.match(StarRocksParser.FROM);
	            this.state = 5675;
	            this.match(StarRocksParser.WAREHOUSES);
	            this.state = 5678;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===236) {
	                this.state = 5676;
	                this.match(StarRocksParser.LIKE);
	                this.state = 5677;
	                localctx.pattern = this.string();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5680;
	            this.match(StarRocksParser.SHOW);
	            this.state = 5681;
	            this.match(StarRocksParser.NODES);
	            this.state = 5682;
	            this.match(StarRocksParser.FROM);
	            this.state = 5683;
	            this.match(StarRocksParser.WAREHOUSE);
	            this.state = 5684;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterWarehouseStatement() {
	    let localctx = new AlterWarehouseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, StarRocksParser.RULE_alterWarehouseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5687;
	        this.match(StarRocksParser.ALTER);
	        this.state = 5688;
	        this.match(StarRocksParser.WAREHOUSE);
	        this.state = 5689;
	        localctx.warehouseName = this.identifierOrString();
	        this.state = 5690;
	        this.modifyPropertiesClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beginStatement() {
	    let localctx = new BeginStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, StarRocksParser.RULE_beginStatement);
	    var _la = 0;
	    try {
	        this.state = 5703;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 402:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5692;
	            this.match(StarRocksParser.START);
	            this.state = 5693;
	            this.match(StarRocksParser.TRANSACTION);
	            this.state = 5697;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===476) {
	                this.state = 5694;
	                this.match(StarRocksParser.WITH);
	                this.state = 5695;
	                this.match(StarRocksParser.CONSISTENT);
	                this.state = 5696;
	                this.match(StarRocksParser.SNAPSHOT);
	            }

	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5699;
	            this.match(StarRocksParser.BEGIN);
	            this.state = 5701;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===477) {
	                this.state = 5700;
	                this.match(StarRocksParser.WORK);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commitStatement() {
	    let localctx = new CommitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, StarRocksParser.RULE_commitStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5705;
	        this.match(StarRocksParser.COMMIT);
	        this.state = 5707;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===477) {
	            this.state = 5706;
	            this.match(StarRocksParser.WORK);
	        }

	        this.state = 5714;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21) {
	            this.state = 5709;
	            this.match(StarRocksParser.AND);
	            this.state = 5711;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===272) {
	                this.state = 5710;
	                this.match(StarRocksParser.NO);
	            }

	            this.state = 5713;
	            this.match(StarRocksParser.CHAIN);
	        }

	        this.state = 5720;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===272 || _la===346) {
	            this.state = 5717;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===272) {
	                this.state = 5716;
	                this.match(StarRocksParser.NO);
	            }

	            this.state = 5719;
	            this.match(StarRocksParser.RELEASE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollbackStatement() {
	    let localctx = new RollbackStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, StarRocksParser.RULE_rollbackStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5722;
	        this.match(StarRocksParser.ROLLBACK);
	        this.state = 5724;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===477) {
	            this.state = 5723;
	            this.match(StarRocksParser.WORK);
	        }

	        this.state = 5731;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21) {
	            this.state = 5726;
	            this.match(StarRocksParser.AND);
	            this.state = 5728;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===272) {
	                this.state = 5727;
	                this.match(StarRocksParser.NO);
	            }

	            this.state = 5730;
	            this.match(StarRocksParser.CHAIN);
	        }

	        this.state = 5737;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===272 || _la===346) {
	            this.state = 5734;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===272) {
	                this.state = 5733;
	                this.match(StarRocksParser.NO);
	            }

	            this.state = 5736;
	            this.match(StarRocksParser.RELEASE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	translateStatement() {
	    let localctx = new TranslateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, StarRocksParser.RULE_translateStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5739;
	        this.match(StarRocksParser.TRANSLATE);
	        this.state = 5740;
	        this.dialect();
	        this.state = 5741;
	        this.translateSQL();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dialect() {
	    let localctx = new DialectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, StarRocksParser.RULE_dialect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5743;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	translateSQL() {
	    let localctx = new TranslateSQLContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, StarRocksParser.RULE_translateSQL);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5746; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 5745;
	        		this.matchWildcard();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 5748; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,630, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryStatement() {
	    let localctx = new QueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, StarRocksParser.RULE_queryStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5752;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 122:
	        case 123:
	        case 145:
	        	this.state = 5750;
	        	this.explainDesc();
	        	break;
	        case 437:
	        	this.state = 5751;
	        	this.optimizerTrace();
	        	break;
	        case 2:
	        case 386:
	        case 476:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 5754;
	        this.queryRelation();
	        this.state = 5756;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===214) {
	            this.state = 5755;
	            this.outfile();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryRelation() {
	    let localctx = new QueryRelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, StarRocksParser.RULE_queryRelation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===476) {
	            this.state = 5758;
	            this.withClause();
	        }

	        this.state = 5761;
	        this.queryNoWith();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withClause() {
	    let localctx = new WithClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, StarRocksParser.RULE_withClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5763;
	        this.match(StarRocksParser.WITH);
	        this.state = 5764;
	        this.commonTableExpression();
	        this.state = 5769;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 5765;
	            this.match(StarRocksParser.T__2);
	            this.state = 5766;
	            this.commonTableExpression();
	            this.state = 5771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryNoWith() {
	    let localctx = new QueryNoWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, StarRocksParser.RULE_queryNoWith);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5772;
	        this.queryPrimary(0);
	        this.state = 5783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293) {
	            this.state = 5773;
	            this.match(StarRocksParser.ORDER);
	            this.state = 5774;
	            this.match(StarRocksParser.BY);
	            this.state = 5775;
	            this.sortItem();
	            this.state = 5780;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 5776;
	                this.match(StarRocksParser.T__2);
	                this.state = 5777;
	                this.sortItem();
	                this.state = 5782;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 5786;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===237) {
	            this.state = 5785;
	            this.limitElement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryPeriod() {
	    let localctx = new QueryPeriodContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, StarRocksParser.RULE_queryPeriod);
	    var _la = 0;
	    try {
	        this.state = 5820;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,642,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5789;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===164) {
	                this.state = 5788;
	                this.match(StarRocksParser.FOR);
	            }

	            this.state = 5791;
	            this.periodType();
	            this.state = 5792;
	            this.match(StarRocksParser.BETWEEN);
	            this.state = 5793;
	            this.expression(0);
	            this.state = 5794;
	            this.match(StarRocksParser.AND);
	            this.state = 5795;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5798;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===164) {
	                this.state = 5797;
	                this.match(StarRocksParser.FOR);
	            }

	            this.state = 5800;
	            this.periodType();
	            this.state = 5801;
	            this.match(StarRocksParser.FROM);
	            this.state = 5802;
	            this.expression(0);
	            this.state = 5803;
	            this.match(StarRocksParser.TO);
	            this.state = 5804;
	            this.expression(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5807;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===164) {
	                this.state = 5806;
	                this.match(StarRocksParser.FOR);
	            }

	            this.state = 5809;
	            this.periodType();
	            this.state = 5810;
	            this.match(StarRocksParser.ALL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5813;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===164) {
	                this.state = 5812;
	                this.match(StarRocksParser.FOR);
	            }

	            this.state = 5815;
	            this.periodType();
	            this.state = 5816;
	            this.match(StarRocksParser.AS);
	            this.state = 5817;
	            this.match(StarRocksParser.OF);
	            this.state = 5818;
	            localctx.end = this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	periodType() {
	    let localctx = new PeriodTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, StarRocksParser.RULE_periodType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5822;
	        _la = this._input.LA(1);
	        if(!(_la===415 || _la===430 || _la===464)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	queryPrimary(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new QueryPrimaryContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 748;
	    this.enterRecursionRule(localctx, 748, StarRocksParser.RULE_queryPrimary, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5827;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 386:
	            localctx = new QueryPrimaryDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 5825;
	            this.querySpecification();
	            break;
	        case 2:
	            localctx = new QueryWithParenthesesContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5826;
	            this.subquery();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 5843;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,647,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 5841;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,646,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SetOperationContext(this, new QueryPrimaryContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_queryPrimary);
	                    this.state = 5829;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 5830;
	                    localctx.operator = this.match(StarRocksParser.INTERSECT);
	                    this.state = 5832;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===18 || _la===125) {
	                        this.state = 5831;
	                        this.setQuantifier();
	                    }

	                    this.state = 5834;
	                    localctx.right = this.queryPrimary(3);
	                    break;

	                case 2:
	                    localctx = new SetOperationContext(this, new QueryPrimaryContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_queryPrimary);
	                    this.state = 5835;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 5836;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===142 || _la===262 || _la===446)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 5838;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===18 || _la===125) {
	                        this.state = 5837;
	                        this.setQuantifier();
	                    }

	                    this.state = 5840;
	                    localctx.right = this.queryPrimary(2);
	                    break;

	                } 
	            }
	            this.state = 5845;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,647,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	subquery() {
	    let localctx = new SubqueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, StarRocksParser.RULE_subquery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5846;
	        this.match(StarRocksParser.T__1);
	        this.state = 5847;
	        this.queryRelation();
	        this.state = 5848;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowConstructor() {
	    let localctx = new RowConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, StarRocksParser.RULE_rowConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5850;
	        this.match(StarRocksParser.T__1);
	        this.state = 5851;
	        this.expressionList();
	        this.state = 5852;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortItem() {
	    let localctx = new SortItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, StarRocksParser.RULE_sortItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5854;
	        this.expression(0);
	        this.state = 5856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===28 || _la===122) {
	            this.state = 5855;
	            localctx.ordering = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===28 || _la===122)) {
	                localctx.ordering = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5860;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===278) {
	            this.state = 5858;
	            this.match(StarRocksParser.NULLS);
	            this.state = 5859;
	            localctx.nullOrdering = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===157 || _la===229)) {
	                localctx.nullOrdering = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitConstExpr() {
	    let localctx = new LimitConstExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, StarRocksParser.RULE_limitConstExpr);
	    try {
	        this.state = 5865;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 514:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5862;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            break;
	        case 297:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5863;
	            this.match(StarRocksParser.PARAMETER);
	            break;
	        case 513:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5864;
	            this.userVariable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitElement() {
	    let localctx = new LimitElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, StarRocksParser.RULE_limitElement);
	    var _la = 0;
	    try {
	        this.state = 5878;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,652,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5867;
	            this.match(StarRocksParser.LIMIT);
	            this.state = 5868;
	            localctx.limit = this.limitConstExpr();
	            this.state = 5871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===284) {
	                this.state = 5869;
	                this.match(StarRocksParser.OFFSET);
	                this.state = 5870;
	                localctx.offset = this.limitConstExpr();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5873;
	            this.match(StarRocksParser.LIMIT);
	            this.state = 5874;
	            localctx.offset = this.limitConstExpr();
	            this.state = 5875;
	            this.match(StarRocksParser.T__2);
	            this.state = 5876;
	            localctx.limit = this.limitConstExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecification() {
	    let localctx = new QuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, StarRocksParser.RULE_querySpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5880;
	        this.match(StarRocksParser.SELECT);
	        this.state = 5882;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18 || _la===125) {
	            this.state = 5881;
	            this.setQuantifier();
	        }

	        this.state = 5884;
	        this.selectItem();
	        this.state = 5889;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,654,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5885;
	                this.match(StarRocksParser.T__2);
	                this.state = 5886;
	                this.selectItem(); 
	            }
	            this.state = 5891;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,654,this._ctx);
	        }

	        this.state = 5892;
	        this.fromClause();

	        this.state = 5895;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,655,this._ctx);
	        if(la_===1) {
	            this.state = 5893;
	            this.match(StarRocksParser.WHERE);
	            this.state = 5894;
	            localctx.where = this.expression(0);

	        }
	        this.state = 5900;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,656,this._ctx);
	        if(la_===1) {
	            this.state = 5897;
	            this.match(StarRocksParser.GROUP);
	            this.state = 5898;
	            this.match(StarRocksParser.BY);
	            this.state = 5899;
	            this.groupingElement();

	        }
	        this.state = 5904;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,657,this._ctx);
	        if(la_===1) {
	            this.state = 5902;
	            this.match(StarRocksParser.HAVING);
	            this.state = 5903;
	            localctx.having = this.expression(0);

	        }
	        this.state = 5911;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,658,this._ctx);
	        if(la_===1) {
	            this.state = 5906;
	            this.match(StarRocksParser.QUALIFY);
	            this.state = 5907;
	            localctx.qualifyFunction = this.selectItem();
	            this.state = 5908;
	            this.comparisonOperator();
	            this.state = 5909;
	            localctx.limit = this.match(StarRocksParser.INTEGER_VALUE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromClause() {
	    let localctx = new FromClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, StarRocksParser.RULE_fromClause);
	    try {
	        this.state = 5922;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,661,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new FromContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5918;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,660,this._ctx);
	            if(la_===1) {
	                this.state = 5913;
	                this.match(StarRocksParser.FROM);
	                this.state = 5914;
	                this.relations();
	                this.state = 5916;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,659,this._ctx);
	                if(la_===1) {
	                    this.state = 5915;
	                    this.pivotClause();

	                }

	            }
	            break;

	        case 2:
	            localctx = new DualContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5920;
	            this.match(StarRocksParser.FROM);
	            this.state = 5921;
	            this.match(StarRocksParser.DUAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingElement() {
	    let localctx = new GroupingElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, StarRocksParser.RULE_groupingElement);
	    var _la = 0;
	    try {
	        this.state = 5950;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,665,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new RollupContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5924;
	            this.match(StarRocksParser.ROLLUP);
	            this.state = 5925;
	            this.match(StarRocksParser.T__1);
	            this.state = 5927;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 5926;
	                this.expressionList();
	            }

	            this.state = 5929;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 2:
	            localctx = new CubeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5930;
	            this.match(StarRocksParser.CUBE);
	            this.state = 5931;
	            this.match(StarRocksParser.T__1);
	            this.state = 5933;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 5932;
	                this.expressionList();
	            }

	            this.state = 5935;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 3:
	            localctx = new MultipleGroupingSetsContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5936;
	            this.match(StarRocksParser.GROUPING);
	            this.state = 5937;
	            this.match(StarRocksParser.SETS);
	            this.state = 5938;
	            this.match(StarRocksParser.T__1);
	            this.state = 5939;
	            this.groupingSet();
	            this.state = 5944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 5940;
	                this.match(StarRocksParser.T__2);
	                this.state = 5941;
	                this.groupingSet();
	                this.state = 5946;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5947;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 4:
	            localctx = new SingleGroupingSetContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5949;
	            this.expressionList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingSet() {
	    let localctx = new GroupingSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, StarRocksParser.RULE_groupingSet);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5952;
	        this.match(StarRocksParser.T__1);
	        this.state = 5954;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	            this.state = 5953;
	            this.expression(0);
	        }

	        this.state = 5960;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 5956;
	            this.match(StarRocksParser.T__2);
	            this.state = 5957;
	            this.expression(0);
	            this.state = 5962;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5963;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonTableExpression() {
	    let localctx = new CommonTableExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, StarRocksParser.RULE_commonTableExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5965;
	        localctx.name = this.identifier();
	        this.state = 5967;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 5966;
	            this.columnAliases();
	        }

	        this.state = 5969;
	        this.match(StarRocksParser.AS);
	        this.state = 5970;
	        this.match(StarRocksParser.T__1);
	        this.state = 5971;
	        this.queryRelation();
	        this.state = 5972;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setQuantifier() {
	    let localctx = new SetQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, StarRocksParser.RULE_setQuantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5974;
	        _la = this._input.LA(1);
	        if(!(_la===18 || _la===125)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, StarRocksParser.RULE_selectItem);
	    var _la = 0;
	    try {
	        this.state = 5991;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,672,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SelectSingleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5976;
	            this.expression(0);
	            this.state = 5984;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,671,this._ctx);
	            if(la_===1) {
	                this.state = 5978;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===27) {
	                    this.state = 5977;
	                    this.match(StarRocksParser.AS);
	                }

	                this.state = 5982;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 11:
	                case 12:
	                case 14:
	                case 15:
	                case 16:
	                case 17:
	                case 22:
	                case 23:
	                case 25:
	                case 26:
	                case 29:
	                case 30:
	                case 31:
	                case 32:
	                case 33:
	                case 34:
	                case 35:
	                case 36:
	                case 37:
	                case 38:
	                case 39:
	                case 40:
	                case 43:
	                case 45:
	                case 46:
	                case 47:
	                case 48:
	                case 49:
	                case 51:
	                case 52:
	                case 53:
	                case 54:
	                case 56:
	                case 57:
	                case 59:
	                case 60:
	                case 61:
	                case 62:
	                case 63:
	                case 66:
	                case 68:
	                case 69:
	                case 70:
	                case 71:
	                case 73:
	                case 75:
	                case 76:
	                case 77:
	                case 78:
	                case 79:
	                case 81:
	                case 82:
	                case 83:
	                case 84:
	                case 86:
	                case 87:
	                case 91:
	                case 92:
	                case 93:
	                case 99:
	                case 100:
	                case 103:
	                case 104:
	                case 105:
	                case 106:
	                case 107:
	                case 113:
	                case 118:
	                case 119:
	                case 120:
	                case 124:
	                case 126:
	                case 127:
	                case 131:
	                case 132:
	                case 134:
	                case 135:
	                case 136:
	                case 137:
	                case 138:
	                case 139:
	                case 140:
	                case 141:
	                case 143:
	                case 146:
	                case 147:
	                case 148:
	                case 149:
	                case 150:
	                case 151:
	                case 153:
	                case 154:
	                case 156:
	                case 157:
	                case 160:
	                case 161:
	                case 162:
	                case 163:
	                case 166:
	                case 167:
	                case 169:
	                case 170:
	                case 173:
	                case 174:
	                case 176:
	                case 181:
	                case 182:
	                case 184:
	                case 185:
	                case 187:
	                case 188:
	                case 189:
	                case 190:
	                case 191:
	                case 192:
	                case 194:
	                case 197:
	                case 199:
	                case 200:
	                case 202:
	                case 205:
	                case 209:
	                case 210:
	                case 211:
	                case 213:
	                case 217:
	                case 219:
	                case 220:
	                case 226:
	                case 229:
	                case 234:
	                case 235:
	                case 238:
	                case 240:
	                case 243:
	                case 244:
	                case 245:
	                case 246:
	                case 247:
	                case 248:
	                case 249:
	                case 250:
	                case 251:
	                case 252:
	                case 253:
	                case 254:
	                case 256:
	                case 259:
	                case 260:
	                case 261:
	                case 262:
	                case 263:
	                case 265:
	                case 266:
	                case 267:
	                case 268:
	                case 269:
	                case 270:
	                case 271:
	                case 272:
	                case 273:
	                case 274:
	                case 275:
	                case 278:
	                case 279:
	                case 280:
	                case 281:
	                case 282:
	                case 283:
	                case 284:
	                case 286:
	                case 287:
	                case 288:
	                case 290:
	                case 291:
	                case 299:
	                case 300:
	                case 301:
	                case 302:
	                case 303:
	                case 304:
	                case 306:
	                case 307:
	                case 308:
	                case 309:
	                case 310:
	                case 311:
	                case 312:
	                case 313:
	                case 314:
	                case 315:
	                case 316:
	                case 319:
	                case 320:
	                case 321:
	                case 322:
	                case 324:
	                case 325:
	                case 326:
	                case 327:
	                case 328:
	                case 329:
	                case 330:
	                case 331:
	                case 332:
	                case 333:
	                case 334:
	                case 335:
	                case 336:
	                case 337:
	                case 339:
	                case 341:
	                case 342:
	                case 343:
	                case 344:
	                case 347:
	                case 349:
	                case 350:
	                case 352:
	                case 353:
	                case 354:
	                case 355:
	                case 356:
	                case 357:
	                case 358:
	                case 359:
	                case 360:
	                case 361:
	                case 362:
	                case 363:
	                case 365:
	                case 368:
	                case 369:
	                case 370:
	                case 371:
	                case 372:
	                case 373:
	                case 376:
	                case 377:
	                case 378:
	                case 379:
	                case 380:
	                case 381:
	                case 384:
	                case 385:
	                case 387:
	                case 388:
	                case 389:
	                case 390:
	                case 392:
	                case 394:
	                case 395:
	                case 398:
	                case 399:
	                case 400:
	                case 401:
	                case 402:
	                case 403:
	                case 404:
	                case 405:
	                case 406:
	                case 407:
	                case 408:
	                case 410:
	                case 411:
	                case 412:
	                case 413:
	                case 415:
	                case 416:
	                case 417:
	                case 419:
	                case 420:
	                case 421:
	                case 422:
	                case 423:
	                case 424:
	                case 426:
	                case 428:
	                case 429:
	                case 430:
	                case 431:
	                case 432:
	                case 434:
	                case 435:
	                case 437:
	                case 438:
	                case 439:
	                case 441:
	                case 442:
	                case 443:
	                case 444:
	                case 445:
	                case 448:
	                case 449:
	                case 452:
	                case 454:
	                case 455:
	                case 457:
	                case 459:
	                case 461:
	                case 462:
	                case 463:
	                case 464:
	                case 465:
	                case 466:
	                case 467:
	                case 468:
	                case 469:
	                case 470:
	                case 471:
	                case 472:
	                case 475:
	                case 477:
	                case 478:
	                case 479:
	                case 480:
	                case 481:
	                case 482:
	                case 483:
	                case 484:
	                case 486:
	                case 487:
	                case 495:
	                case 521:
	                case 522:
	                case 523:
	                case 529:
	                    this.state = 5980;
	                    this.identifier();
	                    break;
	                case 517:
	                case 518:
	                    this.state = 5981;
	                    this.string();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }

	            }
	            break;

	        case 2:
	            localctx = new SelectAllContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5986;
	            this.qualifiedName();
	            this.state = 5987;
	            this.match(StarRocksParser.T__0);
	            this.state = 5988;
	            this.match(StarRocksParser.ASTERISK_SYMBOL);
	            break;

	        case 3:
	            localctx = new SelectAllContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5990;
	            this.match(StarRocksParser.ASTERISK_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relations() {
	    let localctx = new RelationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, StarRocksParser.RULE_relations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5993;
	        this.relation();
	        this.state = 6001;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,674,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 5994;
	                this.match(StarRocksParser.T__2);
	                this.state = 5996;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===231) {
	                    this.state = 5995;
	                    this.match(StarRocksParser.LATERAL);
	                }

	                this.state = 5998;
	                this.relation(); 
	            }
	            this.state = 6003;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,674,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relation() {
	    let localctx = new RelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, StarRocksParser.RULE_relation);
	    var _la = 0;
	    try {
	        this.state = 6021;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,677,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6004;
	            this.relationPrimary();
	            this.state = 6008;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,675,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6005;
	                    this.joinRelation(); 
	                }
	                this.state = 6010;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,675,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6011;
	            this.match(StarRocksParser.T__1);
	            this.state = 6012;
	            this.relationPrimary();
	            this.state = 6016;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===89 || _la===171 || ((((_la - 204)) & ~0x1f) === 0 && ((1 << (_la - 204)) & 537001985) !== 0) || _la===366) {
	                this.state = 6013;
	                this.joinRelation();
	                this.state = 6018;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6019;
	            this.match(StarRocksParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationPrimary() {
	    let localctx = new RelationPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, StarRocksParser.RULE_relationPrimary);
	    var _la = 0;
	    try {
	        this.state = 6126;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,703,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6023;
	            this.qualifiedName();
	            this.state = 6025;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,678,this._ctx);
	            if(la_===1) {
	                this.state = 6024;
	                this.queryPeriod();

	            }
	            this.state = 6028;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,679,this._ctx);
	            if(la_===1) {
	                this.state = 6027;
	                this.partitionNames();

	            }
	            this.state = 6031;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,680,this._ctx);
	            if(la_===1) {
	                this.state = 6030;
	                this.tabletList();

	            }
	            this.state = 6034;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,681,this._ctx);
	            if(la_===1) {
	                this.state = 6033;
	                this.replicaList();

	            }
	            this.state = 6037;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,682,this._ctx);
	            if(la_===1) {
	                this.state = 6036;
	                this.sampleClause();

	            }
	            this.state = 6043;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,684,this._ctx);
	            if(la_===1) {
	                this.state = 6040;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===27) {
	                    this.state = 6039;
	                    this.match(StarRocksParser.AS);
	                }

	                this.state = 6042;
	                localctx.alias = this.identifier();

	            }
	            this.state = 6046;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,685,this._ctx);
	            if(la_===1) {
	                this.state = 6045;
	                this.bracketHint();

	            }
	            this.state = 6050;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,686,this._ctx);
	            if(la_===1) {
	                this.state = 6048;
	                this.match(StarRocksParser.BEFORE);
	                this.state = 6049;
	                localctx.ts = this.string();

	            }
	            break;

	        case 2:
	            localctx = new InlineTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6052;
	            this.match(StarRocksParser.T__1);
	            this.state = 6053;
	            this.match(StarRocksParser.VALUES);
	            this.state = 6054;
	            this.rowConstructor();
	            this.state = 6059;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 6055;
	                this.match(StarRocksParser.T__2);
	                this.state = 6056;
	                this.rowConstructor();
	                this.state = 6061;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6062;
	            this.match(StarRocksParser.T__3);
	            this.state = 6070;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,690,this._ctx);
	            if(la_===1) {
	                this.state = 6064;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===27) {
	                    this.state = 6063;
	                    this.match(StarRocksParser.AS);
	                }

	                this.state = 6066;
	                localctx.alias = this.identifier();
	                this.state = 6068;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,689,this._ctx);
	                if(la_===1) {
	                    this.state = 6067;
	                    this.columnAliases();

	                }

	            }
	            break;

	        case 3:
	            localctx = new SubqueryWithAliasContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6072;
	            this.subquery();
	            this.state = 6080;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,693,this._ctx);
	            if(la_===1) {
	                this.state = 6074;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===27) {
	                    this.state = 6073;
	                    this.match(StarRocksParser.AS);
	                }

	                this.state = 6076;
	                localctx.alias = this.identifier();
	                this.state = 6078;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,692,this._ctx);
	                if(la_===1) {
	                    this.state = 6077;
	                    this.columnAliases();

	                }

	            }
	            break;

	        case 4:
	            localctx = new TableFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6082;
	            this.qualifiedName();
	            this.state = 6083;
	            this.match(StarRocksParser.T__1);
	            this.state = 6084;
	            this.expressionList();
	            this.state = 6085;
	            this.match(StarRocksParser.T__3);
	            this.state = 6093;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,696,this._ctx);
	            if(la_===1) {
	                this.state = 6087;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===27) {
	                    this.state = 6086;
	                    this.match(StarRocksParser.AS);
	                }

	                this.state = 6089;
	                localctx.alias = this.identifier();
	                this.state = 6091;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,695,this._ctx);
	                if(la_===1) {
	                    this.state = 6090;
	                    this.columnAliases();

	                }

	            }
	            break;

	        case 5:
	            localctx = new NormalizedTableFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6095;
	            this.match(StarRocksParser.TABLE);
	            this.state = 6096;
	            this.match(StarRocksParser.T__1);
	            this.state = 6097;
	            this.qualifiedName();
	            this.state = 6098;
	            this.match(StarRocksParser.T__1);
	            this.state = 6099;
	            this.argumentList();
	            this.state = 6100;
	            this.match(StarRocksParser.T__3);
	            this.state = 6101;
	            this.match(StarRocksParser.T__3);
	            this.state = 6109;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,699,this._ctx);
	            if(la_===1) {
	                this.state = 6103;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===27) {
	                    this.state = 6102;
	                    this.match(StarRocksParser.AS);
	                }

	                this.state = 6105;
	                localctx.alias = this.identifier();
	                this.state = 6107;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,698,this._ctx);
	                if(la_===1) {
	                    this.state = 6106;
	                    this.columnAliases();

	                }

	            }
	            break;

	        case 6:
	            localctx = new FileTableFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6111;
	            this.match(StarRocksParser.FILES);
	            this.state = 6112;
	            this.propertyList();
	            this.state = 6120;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,702,this._ctx);
	            if(la_===1) {
	                this.state = 6114;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===27) {
	                    this.state = 6113;
	                    this.match(StarRocksParser.AS);
	                }

	                this.state = 6116;
	                localctx.alias = this.identifier();
	                this.state = 6118;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,701,this._ctx);
	                if(la_===1) {
	                    this.state = 6117;
	                    this.columnAliases();

	                }

	            }
	            break;

	        case 7:
	            localctx = new ParenthesizedRelationContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6122;
	            this.match(StarRocksParser.T__1);
	            this.state = 6123;
	            this.relations();
	            this.state = 6124;
	            this.match(StarRocksParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pivotClause() {
	    let localctx = new PivotClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, StarRocksParser.RULE_pivotClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6128;
	        this.match(StarRocksParser.PIVOT);
	        this.state = 6129;
	        this.match(StarRocksParser.T__1);
	        this.state = 6130;
	        this.pivotAggregationExpression();
	        this.state = 6135;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 6131;
	            this.match(StarRocksParser.T__2);
	            this.state = 6132;
	            this.pivotAggregationExpression();
	            this.state = 6137;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6138;
	        this.match(StarRocksParser.FOR);
	        this.state = 6141;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 22:
	        case 23:
	        case 25:
	        case 26:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 99:
	        case 100:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 113:
	        case 118:
	        case 119:
	        case 120:
	        case 124:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 143:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 153:
	        case 154:
	        case 156:
	        case 157:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 173:
	        case 174:
	        case 176:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 194:
	        case 197:
	        case 199:
	        case 200:
	        case 202:
	        case 205:
	        case 209:
	        case 210:
	        case 211:
	        case 213:
	        case 217:
	        case 219:
	        case 220:
	        case 226:
	        case 229:
	        case 234:
	        case 235:
	        case 238:
	        case 240:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 256:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 286:
	        case 287:
	        case 288:
	        case 290:
	        case 291:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 339:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 347:
	        case 349:
	        case 350:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 365:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 392:
	        case 394:
	        case 395:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 415:
	        case 416:
	        case 417:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 426:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 437:
	        case 438:
	        case 439:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 448:
	        case 449:
	        case 452:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 486:
	        case 487:
	        case 495:
	        case 521:
	        case 522:
	        case 523:
	        case 529:
	            this.state = 6139;
	            this.identifier();
	            break;
	        case 2:
	            this.state = 6140;
	            this.identifierList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 6143;
	        this.match(StarRocksParser.IN);
	        this.state = 6144;
	        this.match(StarRocksParser.T__1);
	        this.state = 6145;
	        this.pivotValue();
	        this.state = 6150;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 6146;
	            this.match(StarRocksParser.T__2);
	            this.state = 6147;
	            this.pivotValue();
	            this.state = 6152;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6153;
	        this.match(StarRocksParser.T__3);
	        this.state = 6154;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pivotAggregationExpression() {
	    let localctx = new PivotAggregationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, StarRocksParser.RULE_pivotAggregationExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6156;
	        this.functionCall();
	        this.state = 6164;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 11)) & ~0x1f) === 0 && ((1 << (_la - 11)) & 1073600635) !== 0) || ((((_la - 43)) & ~0x1f) === 0 && ((1 << (_la - 43)) & 1587507069) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 4077329375) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 4212799553) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 3655786391) !== 0) || ((((_la - 173)) & ~0x1f) === 0 && ((1 << (_la - 173)) & 758110987) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 1629540721) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4226154469) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 3761733439) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4292771831) !== 0) || ((((_la - 334)) & ~0x1f) === 0 && ((1 << (_la - 334)) & 3221071791) !== 0) || ((((_la - 368)) & ~0x1f) === 0 && ((1 << (_la - 368)) & 3447406399) !== 0) || ((((_la - 400)) & ~0x1f) === 0 && ((1 << (_la - 400)) & 4126916095) !== 0) || ((((_la - 432)) & ~0x1f) === 0 && ((1 << (_la - 432)) & 3939712749) !== 0) || ((((_la - 464)) & ~0x1f) === 0 && ((1 << (_la - 464)) & 2162158079) !== 0) || ((((_la - 517)) & ~0x1f) === 0 && ((1 << (_la - 517)) & 4211) !== 0)) {
	            this.state = 6158;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 6157;
	                this.match(StarRocksParser.AS);
	            }

	            this.state = 6162;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 12:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 22:
	            case 23:
	            case 25:
	            case 26:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 43:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 66:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 73:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 86:
	            case 87:
	            case 91:
	            case 92:
	            case 93:
	            case 99:
	            case 100:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 113:
	            case 118:
	            case 119:
	            case 120:
	            case 124:
	            case 126:
	            case 127:
	            case 131:
	            case 132:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 143:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 153:
	            case 154:
	            case 156:
	            case 157:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 166:
	            case 167:
	            case 169:
	            case 170:
	            case 173:
	            case 174:
	            case 176:
	            case 181:
	            case 182:
	            case 184:
	            case 185:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 194:
	            case 197:
	            case 199:
	            case 200:
	            case 202:
	            case 205:
	            case 209:
	            case 210:
	            case 211:
	            case 213:
	            case 217:
	            case 219:
	            case 220:
	            case 226:
	            case 229:
	            case 234:
	            case 235:
	            case 238:
	            case 240:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 250:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 256:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 286:
	            case 287:
	            case 288:
	            case 290:
	            case 291:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 339:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 347:
	            case 349:
	            case 350:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 365:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 392:
	            case 394:
	            case 395:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 415:
	            case 416:
	            case 417:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 426:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 437:
	            case 438:
	            case 439:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 448:
	            case 449:
	            case 452:
	            case 454:
	            case 455:
	            case 457:
	            case 459:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 475:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 486:
	            case 487:
	            case 495:
	            case 521:
	            case 522:
	            case 523:
	            case 529:
	                this.state = 6160;
	                this.identifier();
	                break;
	            case 517:
	            case 518:
	                this.state = 6161;
	                this.string();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pivotValue() {
	    let localctx = new PivotValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, StarRocksParser.RULE_pivotValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6168;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	        case 103:
	        case 104:
	        case 152:
	        case 160:
	        case 213:
	        case 277:
	        case 297:
	        case 440:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	            this.state = 6166;
	            this.literalExpression();
	            break;
	        case 2:
	            this.state = 6167;
	            this.literalExpressionList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 6177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 11)) & ~0x1f) === 0 && ((1 << (_la - 11)) & 1073600635) !== 0) || ((((_la - 43)) & ~0x1f) === 0 && ((1 << (_la - 43)) & 1587507069) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 4077329375) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 4212799553) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 3655786391) !== 0) || ((((_la - 173)) & ~0x1f) === 0 && ((1 << (_la - 173)) & 758110987) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 1629540721) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4226154469) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 3761733439) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4292771831) !== 0) || ((((_la - 334)) & ~0x1f) === 0 && ((1 << (_la - 334)) & 3221071791) !== 0) || ((((_la - 368)) & ~0x1f) === 0 && ((1 << (_la - 368)) & 3447406399) !== 0) || ((((_la - 400)) & ~0x1f) === 0 && ((1 << (_la - 400)) & 4126916095) !== 0) || ((((_la - 432)) & ~0x1f) === 0 && ((1 << (_la - 432)) & 3939712749) !== 0) || ((((_la - 464)) & ~0x1f) === 0 && ((1 << (_la - 464)) & 2162158079) !== 0) || ((((_la - 517)) & ~0x1f) === 0 && ((1 << (_la - 517)) & 4211) !== 0)) {
	            this.state = 6171;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 6170;
	                this.match(StarRocksParser.AS);
	            }

	            this.state = 6175;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 12:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 22:
	            case 23:
	            case 25:
	            case 26:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 43:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 66:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 73:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 86:
	            case 87:
	            case 91:
	            case 92:
	            case 93:
	            case 99:
	            case 100:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 113:
	            case 118:
	            case 119:
	            case 120:
	            case 124:
	            case 126:
	            case 127:
	            case 131:
	            case 132:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 143:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 153:
	            case 154:
	            case 156:
	            case 157:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 166:
	            case 167:
	            case 169:
	            case 170:
	            case 173:
	            case 174:
	            case 176:
	            case 181:
	            case 182:
	            case 184:
	            case 185:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 194:
	            case 197:
	            case 199:
	            case 200:
	            case 202:
	            case 205:
	            case 209:
	            case 210:
	            case 211:
	            case 213:
	            case 217:
	            case 219:
	            case 220:
	            case 226:
	            case 229:
	            case 234:
	            case 235:
	            case 238:
	            case 240:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 250:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 256:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 286:
	            case 287:
	            case 288:
	            case 290:
	            case 291:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 339:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 347:
	            case 349:
	            case 350:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 365:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 392:
	            case 394:
	            case 395:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 415:
	            case 416:
	            case 417:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 426:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 437:
	            case 438:
	            case 439:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 448:
	            case 449:
	            case 452:
	            case 454:
	            case 455:
	            case 457:
	            case 459:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 475:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 486:
	            case 487:
	            case 495:
	            case 521:
	            case 522:
	            case 523:
	            case 529:
	                this.state = 6173;
	                this.identifier();
	                break;
	            case 517:
	            case 518:
	                this.state = 6174;
	                this.string();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sampleClause() {
	    let localctx = new SampleClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, StarRocksParser.RULE_sampleClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6179;
	        this.match(StarRocksParser.SAMPLE);
	        this.state = 6181;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,714,this._ctx);
	        if(la_===1) {
	            this.state = 6180;
	            this.propertyList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentList() {
	    let localctx = new ArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, StarRocksParser.RULE_argumentList);
	    try {
	        this.state = 6185;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,715,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6183;
	            this.expressionList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6184;
	            this.namedArgumentList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedArgumentList() {
	    let localctx = new NamedArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, StarRocksParser.RULE_namedArgumentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6187;
	        this.namedArgument();
	        this.state = 6192;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 6188;
	            this.match(StarRocksParser.T__2);
	            this.state = 6189;
	            this.namedArgument();
	            this.state = 6194;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedArgument() {
	    let localctx = new NamedArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, StarRocksParser.RULE_namedArgument);
	    try {
	        localctx = new NamedArgumentsContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6195;
	        this.identifier();
	        this.state = 6196;
	        this.match(StarRocksParser.T__4);
	        this.state = 6197;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinRelation() {
	    let localctx = new JoinRelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, StarRocksParser.RULE_joinRelation);
	    var _la = 0;
	    try {
	        this.state = 6220;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	        case 204:
	        case 221:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6199;
	            this.crossOrInnerJoinType();
	            this.state = 6201;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===6) {
	                this.state = 6200;
	                this.bracketHint();
	            }

	            this.state = 6204;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 6203;
	                this.match(StarRocksParser.LATERAL);
	            }

	            this.state = 6206;
	            localctx.rightRelation = this.relationPrimary();
	            this.state = 6208;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,719,this._ctx);
	            if(la_===1) {
	                this.state = 6207;
	                this.joinCriteria();

	            }
	            break;
	        case 171:
	        case 233:
	        case 366:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6210;
	            this.outerAndSemiJoinType();
	            this.state = 6212;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===6) {
	                this.state = 6211;
	                this.bracketHint();
	            }

	            this.state = 6215;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 6214;
	                this.match(StarRocksParser.LATERAL);
	            }

	            this.state = 6217;
	            localctx.rightRelation = this.relationPrimary();
	            this.state = 6218;
	            this.joinCriteria();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	crossOrInnerJoinType() {
	    let localctx = new CrossOrInnerJoinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, StarRocksParser.RULE_crossOrInnerJoinType);
	    try {
	        this.state = 6228;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,723,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6222;
	            this.match(StarRocksParser.JOIN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6223;
	            this.match(StarRocksParser.INNER);
	            this.state = 6224;
	            this.match(StarRocksParser.JOIN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6225;
	            this.match(StarRocksParser.CROSS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6226;
	            this.match(StarRocksParser.CROSS);
	            this.state = 6227;
	            this.match(StarRocksParser.JOIN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outerAndSemiJoinType() {
	    let localctx = new OuterAndSemiJoinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, StarRocksParser.RULE_outerAndSemiJoinType);
	    try {
	        this.state = 6257;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,724,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6230;
	            this.match(StarRocksParser.LEFT);
	            this.state = 6231;
	            this.match(StarRocksParser.JOIN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6232;
	            this.match(StarRocksParser.RIGHT);
	            this.state = 6233;
	            this.match(StarRocksParser.JOIN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6234;
	            this.match(StarRocksParser.FULL);
	            this.state = 6235;
	            this.match(StarRocksParser.JOIN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6236;
	            this.match(StarRocksParser.LEFT);
	            this.state = 6237;
	            this.match(StarRocksParser.OUTER);
	            this.state = 6238;
	            this.match(StarRocksParser.JOIN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6239;
	            this.match(StarRocksParser.RIGHT);
	            this.state = 6240;
	            this.match(StarRocksParser.OUTER);
	            this.state = 6241;
	            this.match(StarRocksParser.JOIN);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6242;
	            this.match(StarRocksParser.FULL);
	            this.state = 6243;
	            this.match(StarRocksParser.OUTER);
	            this.state = 6244;
	            this.match(StarRocksParser.JOIN);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6245;
	            this.match(StarRocksParser.LEFT);
	            this.state = 6246;
	            this.match(StarRocksParser.SEMI);
	            this.state = 6247;
	            this.match(StarRocksParser.JOIN);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6248;
	            this.match(StarRocksParser.RIGHT);
	            this.state = 6249;
	            this.match(StarRocksParser.SEMI);
	            this.state = 6250;
	            this.match(StarRocksParser.JOIN);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6251;
	            this.match(StarRocksParser.LEFT);
	            this.state = 6252;
	            this.match(StarRocksParser.ANTI);
	            this.state = 6253;
	            this.match(StarRocksParser.JOIN);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6254;
	            this.match(StarRocksParser.RIGHT);
	            this.state = 6255;
	            this.match(StarRocksParser.ANTI);
	            this.state = 6256;
	            this.match(StarRocksParser.JOIN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracketHint() {
	    let localctx = new BracketHintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, StarRocksParser.RULE_bracketHint);
	    var _la = 0;
	    try {
	        this.state = 6277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,726,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6259;
	            this.match(StarRocksParser.T__5);
	            this.state = 6260;
	            this.identifier();
	            this.state = 6265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 6261;
	                this.match(StarRocksParser.T__2);
	                this.state = 6262;
	                this.identifier();
	                this.state = 6267;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6268;
	            this.match(StarRocksParser.T__6);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6270;
	            this.match(StarRocksParser.T__5);
	            this.state = 6271;
	            this.identifier();
	            this.state = 6272;
	            this.match(StarRocksParser.BITOR);
	            this.state = 6273;
	            this.primaryExpression(0);
	            this.state = 6274;
	            this.literalExpressionList();
	            this.state = 6275;
	            this.match(StarRocksParser.T__6);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hintMap() {
	    let localctx = new HintMapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, StarRocksParser.RULE_hintMap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6279;
	        localctx.k = this.identifierOrString();
	        this.state = 6280;
	        this.match(StarRocksParser.EQ);
	        this.state = 6281;
	        localctx.v = this.literalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinCriteria() {
	    let localctx = new JoinCriteriaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, StarRocksParser.RULE_joinCriteria);
	    var _la = 0;
	    try {
	        this.state = 6297;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 285:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6283;
	            this.match(StarRocksParser.ON);
	            this.state = 6284;
	            this.expression(0);
	            break;
	        case 456:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6285;
	            this.match(StarRocksParser.USING);
	            this.state = 6286;
	            this.match(StarRocksParser.T__1);
	            this.state = 6287;
	            this.identifier();
	            this.state = 6292;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 6288;
	                this.match(StarRocksParser.T__2);
	                this.state = 6289;
	                this.identifier();
	                this.state = 6294;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6295;
	            this.match(StarRocksParser.T__3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnAliases() {
	    let localctx = new ColumnAliasesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, StarRocksParser.RULE_columnAliases);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6299;
	        this.match(StarRocksParser.T__1);
	        this.state = 6300;
	        this.identifier();
	        this.state = 6305;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 6301;
	            this.match(StarRocksParser.T__2);
	            this.state = 6302;
	            this.identifier();
	            this.state = 6307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6308;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionNames() {
	    let localctx = new PartitionNamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, StarRocksParser.RULE_partitionNames);
	    var _la = 0;
	    try {
	        this.state = 6331;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,733,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6311;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===424) {
	                this.state = 6310;
	                this.match(StarRocksParser.TEMPORARY);
	            }

	            this.state = 6313;
	            _la = this._input.LA(1);
	            if(!(_la===298 || _la===299)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6314;
	            this.match(StarRocksParser.T__1);
	            this.state = 6315;
	            this.identifierOrString();
	            this.state = 6320;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 6316;
	                this.match(StarRocksParser.T__2);
	                this.state = 6317;
	                this.identifierOrString();
	                this.state = 6322;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6323;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===424) {
	                this.state = 6325;
	                this.match(StarRocksParser.TEMPORARY);
	            }

	            this.state = 6328;
	            _la = this._input.LA(1);
	            if(!(_la===298 || _la===299)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6329;
	            this.identifierOrString();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6330;
	            this.keyPartitions();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyPartitions() {
	    let localctx = new KeyPartitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, StarRocksParser.RULE_keyPartitions);
	    var _la = 0;
	    try {
	        localctx = new KeyPartitionListContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6333;
	        this.match(StarRocksParser.PARTITION);
	        this.state = 6334;
	        this.match(StarRocksParser.T__1);
	        this.state = 6335;
	        this.keyPartition();
	        this.state = 6340;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 6336;
	            this.match(StarRocksParser.T__2);
	            this.state = 6337;
	            this.keyPartition();
	            this.state = 6342;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6343;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tabletList() {
	    let localctx = new TabletListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, StarRocksParser.RULE_tabletList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6345;
	        this.match(StarRocksParser.TABLET);
	        this.state = 6346;
	        this.match(StarRocksParser.T__1);
	        this.state = 6347;
	        this.match(StarRocksParser.INTEGER_VALUE);
	        this.state = 6352;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 6348;
	            this.match(StarRocksParser.T__2);
	            this.state = 6349;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            this.state = 6354;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6355;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prepareStatement() {
	    let localctx = new PrepareStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, StarRocksParser.RULE_prepareStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6357;
	        this.match(StarRocksParser.PREPARE);
	        this.state = 6358;
	        this.identifier();
	        this.state = 6359;
	        this.match(StarRocksParser.FROM);
	        this.state = 6360;
	        this.prepareSql();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prepareSql() {
	    let localctx = new PrepareSqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, StarRocksParser.RULE_prepareSql);
	    try {
	        this.state = 6364;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 13:
	        case 14:
	        case 19:
	        case 20:
	        case 37:
	        case 40:
	        case 56:
	        case 57:
	        case 68:
	        case 69:
	        case 77:
	        case 88:
	        case 107:
	        case 115:
	        case 122:
	        case 123:
	        case 129:
	        case 143:
	        case 145:
	        case 146:
	        case 175:
	        case 184:
	        case 205:
	        case 206:
	        case 225:
	        case 239:
	        case 302:
	        case 317:
	        case 342:
	        case 343:
	        case 358:
	        case 359:
	        case 364:
	        case 370:
	        case 386:
	        case 391:
	        case 396:
	        case 402:
	        case 405:
	        case 410:
	        case 412:
	        case 413:
	        case 435:
	        case 437:
	        case 441:
	        case 448:
	        case 451:
	        case 453:
	        case 476:
	        case 480:
	        case 481:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6362;
	            this.statement();
	            break;
	        case 517:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6363;
	            this.match(StarRocksParser.SINGLE_QUOTED_TEXT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executeStatement() {
	    let localctx = new ExecuteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, StarRocksParser.RULE_executeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6366;
	        this.match(StarRocksParser.EXECUTE);
	        this.state = 6367;
	        this.identifier();
	        this.state = 6379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===456) {
	            this.state = 6368;
	            this.match(StarRocksParser.USING);
	            this.state = 6369;
	            this.match(StarRocksParser.AT);
	            this.state = 6370;
	            this.identifierOrString();
	            this.state = 6376;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 6371;
	                this.match(StarRocksParser.T__2);
	                this.state = 6372;
	                this.match(StarRocksParser.AT);
	                this.state = 6373;
	                this.identifierOrString();
	                this.state = 6378;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deallocateStatement() {
	    let localctx = new DeallocateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, StarRocksParser.RULE_deallocateStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6381;
	        _la = this._input.LA(1);
	        if(!(_la===107 || _la===129)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6382;
	        this.match(StarRocksParser.PREPARE);
	        this.state = 6383;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replicaList() {
	    let localctx = new ReplicaListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, StarRocksParser.RULE_replicaList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6385;
	        this.match(StarRocksParser.REPLICA);
	        this.state = 6386;
	        this.match(StarRocksParser.T__1);
	        this.state = 6387;
	        this.match(StarRocksParser.INTEGER_VALUE);
	        this.state = 6392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 6388;
	            this.match(StarRocksParser.T__2);
	            this.state = 6389;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            this.state = 6394;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6395;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionsWithDefault() {
	    let localctx = new ExpressionsWithDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, StarRocksParser.RULE_expressionsWithDefault);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6397;
	        this.match(StarRocksParser.T__1);
	        this.state = 6398;
	        this.expressionOrDefault();
	        this.state = 6403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 6399;
	            this.match(StarRocksParser.T__2);
	            this.state = 6400;
	            this.expressionOrDefault();
	            this.state = 6405;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6406;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionOrDefault() {
	    let localctx = new ExpressionOrDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, StarRocksParser.RULE_expressionOrDefault);
	    try {
	        this.state = 6410;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 6:
	        case 9:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 66:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 113:
	        case 116:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 124:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 143:
	        case 144:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 156:
	        case 157:
	        case 158:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 173:
	        case 174:
	        case 176:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 197:
	        case 199:
	        case 200:
	        case 202:
	        case 205:
	        case 209:
	        case 210:
	        case 211:
	        case 213:
	        case 217:
	        case 219:
	        case 220:
	        case 226:
	        case 227:
	        case 229:
	        case 230:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 238:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 256:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 286:
	        case 287:
	        case 288:
	        case 290:
	        case 291:
	        case 297:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 339:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 347:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 392:
	        case 394:
	        case 395:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 415:
	        case 416:
	        case 417:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 426:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 448:
	        case 449:
	        case 452:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 486:
	        case 487:
	        case 495:
	        case 496:
	        case 497:
	        case 503:
	        case 508:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 529:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6408;
	            this.expression(0);
	            break;
	        case 114:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6409;
	            this.match(StarRocksParser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapExpressionList() {
	    let localctx = new MapExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, StarRocksParser.RULE_mapExpressionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6412;
	        this.mapExpression();
	        this.state = 6417;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 6413;
	            this.match(StarRocksParser.T__2);
	            this.state = 6414;
	            this.mapExpression();
	            this.state = 6419;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapExpression() {
	    let localctx = new MapExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, StarRocksParser.RULE_mapExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6420;
	        localctx.key = this.expression(0);
	        this.state = 6421;
	        this.match(StarRocksParser.T__7);
	        this.state = 6422;
	        localctx.value = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionSingleton() {
	    let localctx = new ExpressionSingletonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, StarRocksParser.RULE_expressionSingleton);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6424;
	        this.expression(0);
	        this.state = 6425;
	        this.match(StarRocksParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 834;
	    this.enterRecursionRule(localctx, 834, StarRocksParser.RULE_expression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6434;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 6:
	        case 9:
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 66:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 101:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 113:
	        case 116:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 124:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 143:
	        case 144:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        case 154:
	        case 156:
	        case 157:
	        case 158:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 173:
	        case 174:
	        case 176:
	        case 179:
	        case 180:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 193:
	        case 194:
	        case 197:
	        case 199:
	        case 200:
	        case 202:
	        case 205:
	        case 209:
	        case 210:
	        case 211:
	        case 213:
	        case 217:
	        case 219:
	        case 220:
	        case 226:
	        case 227:
	        case 229:
	        case 230:
	        case 232:
	        case 233:
	        case 234:
	        case 235:
	        case 236:
	        case 238:
	        case 240:
	        case 241:
	        case 242:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 256:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 286:
	        case 287:
	        case 288:
	        case 290:
	        case 291:
	        case 297:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 339:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 347:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 392:
	        case 394:
	        case 395:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 415:
	        case 416:
	        case 417:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 426:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 448:
	        case 449:
	        case 452:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 486:
	        case 487:
	        case 495:
	        case 496:
	        case 497:
	        case 503:
	        case 508:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 522:
	        case 523:
	        case 529:
	            localctx = new ExpressionDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 6429;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,743,this._ctx);
	            if(la_===1) {
	                this.state = 6428;
	                this.match(StarRocksParser.BINARY);

	            }
	            this.state = 6431;
	            this.booleanExpression(0);
	            break;
	        case 276:
	            localctx = new LogicalNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6432;
	            this.match(StarRocksParser.NOT);
	            this.state = 6433;
	            this.expression(3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 6444;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,746,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 6442;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,745,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new LogicalBinaryContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_expression);
	                    this.state = 6436;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 6437;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===21 || _la===502)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 6438;
	                    localctx.right = this.expression(3);
	                    break;

	                case 2:
	                    localctx = new LogicalBinaryContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_expression);
	                    this.state = 6439;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 6440;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===292 || _la===501)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 6441;
	                    localctx.right = this.expression(2);
	                    break;

	                } 
	            }
	            this.state = 6446;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,746,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, StarRocksParser.RULE_expressionList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6447;
	        this.expression(0);
	        this.state = 6452;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,747,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6448;
	                this.match(StarRocksParser.T__2);
	                this.state = 6449;
	                this.expression(0); 
	            }
	            this.state = 6454;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,747,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	booleanExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 838;
	    this.enterRecursionRule(localctx, 838, StarRocksParser.RULE_booleanExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new BooleanExpressionDefaultContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 6456;
	        this.predicate();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 6476;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,750,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 6474;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,749,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new IsNullContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_booleanExpression);
	                    this.state = 6458;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 6459;
	                    this.match(StarRocksParser.IS);
	                    this.state = 6461;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===276) {
	                        this.state = 6460;
	                        this.match(StarRocksParser.NOT);
	                    }

	                    this.state = 6463;
	                    this.match(StarRocksParser.NULL);
	                    break;

	                case 2:
	                    localctx = new ComparisonContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_booleanExpression);
	                    this.state = 6464;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 6465;
	                    this.comparisonOperator();
	                    this.state = 6466;
	                    localctx.right = this.predicate();
	                    break;

	                case 3:
	                    localctx = new ScalarSubqueryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_booleanExpression);
	                    this.state = 6468;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 6469;
	                    this.comparisonOperator();
	                    this.state = 6470;
	                    this.match(StarRocksParser.T__1);
	                    this.state = 6471;
	                    this.queryRelation();
	                    this.state = 6472;
	                    this.match(StarRocksParser.T__3);
	                    break;

	                } 
	            }
	            this.state = 6478;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,750,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	predicate() {
	    let localctx = new PredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, StarRocksParser.RULE_predicate);
	    try {
	        this.state = 6484;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,752,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6479;
	            localctx._valueExpression = this.valueExpression(0);
	            this.state = 6481;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,751,this._ctx);
	            if(la_===1) {
	                this.state = 6480;
	                this.predicateOperations(localctx._valueExpression);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6483;
	            this.tupleInSubquery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tupleInSubquery() {
	    let localctx = new TupleInSubqueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, StarRocksParser.RULE_tupleInSubquery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6486;
	        this.match(StarRocksParser.T__1);
	        this.state = 6487;
	        this.expression(0);
	        this.state = 6490; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 6488;
	            this.match(StarRocksParser.T__2);
	            this.state = 6489;
	            this.expression(0);
	            this.state = 6492; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===3);
	        this.state = 6494;
	        this.match(StarRocksParser.T__3);
	        this.state = 6496;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===276) {
	            this.state = 6495;
	            this.match(StarRocksParser.NOT);
	        }

	        this.state = 6498;
	        this.match(StarRocksParser.IN);
	        this.state = 6499;
	        this.match(StarRocksParser.T__1);
	        this.state = 6500;
	        this.queryRelation();
	        this.state = 6501;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicateOperations(value) {
	    let localctx = new PredicateOperationsContext(this, this._ctx, this.state, value);
	    this.enterRule(localctx, 844, StarRocksParser.RULE_predicateOperations);
	    var _la = 0;
	    try {
	        this.state = 6532;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,759,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new InSubqueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6504;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===276) {
	                this.state = 6503;
	                this.match(StarRocksParser.NOT);
	            }

	            this.state = 6506;
	            this.match(StarRocksParser.IN);
	            this.state = 6507;
	            this.match(StarRocksParser.T__1);
	            this.state = 6508;
	            this.queryRelation();
	            this.state = 6509;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 2:
	            localctx = new InListContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6512;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===276) {
	                this.state = 6511;
	                this.match(StarRocksParser.NOT);
	            }

	            this.state = 6514;
	            this.match(StarRocksParser.IN);
	            this.state = 6515;
	            this.match(StarRocksParser.T__1);
	            this.state = 6516;
	            this.expressionList();
	            this.state = 6517;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 3:
	            localctx = new BetweenContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6520;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===276) {
	                this.state = 6519;
	                this.match(StarRocksParser.NOT);
	            }

	            this.state = 6522;
	            this.match(StarRocksParser.BETWEEN);
	            this.state = 6523;
	            localctx.lower = this.valueExpression(0);
	            this.state = 6524;
	            this.match(StarRocksParser.AND);
	            this.state = 6525;
	            localctx.upper = this.predicate();
	            break;

	        case 4:
	            localctx = new LikeContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===276) {
	                this.state = 6527;
	                this.match(StarRocksParser.NOT);
	            }

	            this.state = 6530;
	            _la = this._input.LA(1);
	            if(!(_la===236 || _la===345 || _la===367)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6531;
	            localctx.pattern = this.valueExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	valueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 846;
	    this.enterRecursionRule(localctx, 846, StarRocksParser.RULE_valueExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new ValueExpressionDefaultContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 6535;
	        this.primaryExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 6563;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,761,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 6561;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,760,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_valueExpression);
	                    this.state = 6537;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 6538;
	                    localctx.operator = this.match(StarRocksParser.BITXOR);
	                    this.state = 6539;
	                    localctx.right = this.valueExpression(9);
	                    break;

	                case 2:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_valueExpression);
	                    this.state = 6540;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 6541;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===264 || ((((_la - 498)) & ~0x1f) === 0 && ((1 << (_la - 498)) & 71) !== 0))) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 6542;
	                    localctx.right = this.valueExpression(8);
	                    break;

	                case 3:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_valueExpression);
	                    this.state = 6543;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 6544;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===496 || _la===497)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 6545;
	                    localctx.right = this.valueExpression(7);
	                    break;

	                case 4:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_valueExpression);
	                    this.state = 6546;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 6547;
	                    localctx.operator = this.match(StarRocksParser.BITAND);
	                    this.state = 6548;
	                    localctx.right = this.valueExpression(6);
	                    break;

	                case 5:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_valueExpression);
	                    this.state = 6549;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 6550;
	                    localctx.operator = this.match(StarRocksParser.BITOR);
	                    this.state = 6551;
	                    localctx.right = this.valueExpression(5);
	                    break;

	                case 6:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_valueExpression);
	                    this.state = 6552;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 6553;
	                    localctx.operator = this.match(StarRocksParser.BIT_SHIFT_LEFT);
	                    this.state = 6554;
	                    localctx.right = this.valueExpression(4);
	                    break;

	                case 7:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_valueExpression);
	                    this.state = 6555;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 6556;
	                    localctx.operator = this.match(StarRocksParser.BIT_SHIFT_RIGHT);
	                    this.state = 6557;
	                    localctx.right = this.valueExpression(3);
	                    break;

	                case 8:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_valueExpression);
	                    this.state = 6558;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 6559;
	                    localctx.operator = this.match(StarRocksParser.BIT_SHIFT_RIGHT_LOGICAL);
	                    this.state = 6560;
	                    localctx.right = this.valueExpression(2);
	                    break;

	                } 
	            }
	            this.state = 6565;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,761,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	primaryExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 848;
	    this.enterRecursionRule(localctx, 848, StarRocksParser.RULE_primaryExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6671;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,772,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UserVariableExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 6567;
	            this.userVariable();
	            break;

	        case 2:
	            localctx = new SystemVariableExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6568;
	            this.systemVariable();
	            break;

	        case 3:
	            localctx = new DictionaryGetExprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6569;
	            this.match(StarRocksParser.DICTIONARY_GET);
	            this.state = 6570;
	            this.match(StarRocksParser.T__1);
	            this.state = 6571;
	            this.expressionList();
	            this.state = 6572;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 4:
	            localctx = new FunctionCallExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6574;
	            this.functionCall();
	            break;

	        case 5:
	            localctx = new OdbcFunctionCallExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6575;
	            this.match(StarRocksParser.T__8);
	            this.state = 6576;
	            this.match(StarRocksParser.FN);
	            this.state = 6577;
	            this.functionCall();
	            this.state = 6578;
	            this.match(StarRocksParser.T__9);
	            break;

	        case 6:
	            localctx = new LiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6580;
	            this.literalExpression();
	            break;

	        case 7:
	            localctx = new ColumnRefContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6581;
	            this.columnReference();
	            break;

	        case 8:
	            localctx = new ArithmeticUnaryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6582;
	            localctx.operator = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 496)) & ~0x1f) === 0 && ((1 << (_la - 496)) & 4099) !== 0))) {
	                localctx.operator = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6583;
	            this.primaryExpression(18);
	            break;

	        case 9:
	            localctx = new ArithmeticUnaryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6584;
	            localctx.operator = this.match(StarRocksParser.LOGICAL_NOT);
	            this.state = 6585;
	            this.primaryExpression(17);
	            break;

	        case 10:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6586;
	            this.match(StarRocksParser.T__1);
	            this.state = 6587;
	            this.expression(0);
	            this.state = 6588;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 11:
	            localctx = new ExistsContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6590;
	            this.match(StarRocksParser.EXISTS);
	            this.state = 6591;
	            this.match(StarRocksParser.T__1);
	            this.state = 6592;
	            this.queryRelation();
	            this.state = 6593;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 12:
	            localctx = new SubqueryExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6595;
	            this.subquery();
	            break;

	        case 13:
	            localctx = new CastContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6596;
	            this.match(StarRocksParser.CAST);
	            this.state = 6597;
	            this.match(StarRocksParser.T__1);
	            this.state = 6598;
	            this.expression(0);
	            this.state = 6599;
	            this.match(StarRocksParser.AS);
	            this.state = 6600;
	            this.type();
	            this.state = 6601;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 14:
	            localctx = new ConvertContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6603;
	            this.match(StarRocksParser.CONVERT);
	            this.state = 6604;
	            this.match(StarRocksParser.T__1);
	            this.state = 6605;
	            this.expression(0);
	            this.state = 6606;
	            this.match(StarRocksParser.T__2);
	            this.state = 6607;
	            this.type();
	            this.state = 6608;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 15:
	            localctx = new SimpleCaseContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6610;
	            this.match(StarRocksParser.CASE);
	            this.state = 6611;
	            localctx.caseExpr = this.expression(0);
	            this.state = 6613; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 6612;
	                this.whenClause();
	                this.state = 6615; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===473);
	            this.state = 6619;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===133) {
	                this.state = 6617;
	                this.match(StarRocksParser.ELSE);
	                this.state = 6618;
	                localctx.elseExpression = this.expression(0);
	            }

	            this.state = 6621;
	            this.match(StarRocksParser.END);
	            break;

	        case 16:
	            localctx = new SearchedCaseContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6623;
	            this.match(StarRocksParser.CASE);
	            this.state = 6625; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 6624;
	                this.whenClause();
	                this.state = 6627; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===473);
	            this.state = 6631;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===133) {
	                this.state = 6629;
	                this.match(StarRocksParser.ELSE);
	                this.state = 6630;
	                localctx.elseExpression = this.expression(0);
	            }

	            this.state = 6633;
	            this.match(StarRocksParser.END);
	            break;

	        case 17:
	            localctx = new ArrayConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6636;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 6635;
	                this.arrayType();
	            }

	            this.state = 6638;
	            this.match(StarRocksParser.T__5);
	            this.state = 6640;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 6639;
	                this.expressionList();
	            }

	            this.state = 6642;
	            this.match(StarRocksParser.T__6);
	            break;

	        case 18:
	            localctx = new MapConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6643;
	            this.mapType();
	            this.state = 6644;
	            this.match(StarRocksParser.T__8);
	            this.state = 6646;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 6645;
	                this.mapExpressionList();
	            }

	            this.state = 6648;
	            this.match(StarRocksParser.T__9);
	            break;

	        case 19:
	            localctx = new MapConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6650;
	            this.match(StarRocksParser.MAP);
	            this.state = 6651;
	            this.match(StarRocksParser.T__8);
	            this.state = 6653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 6652;
	                this.mapExpressionList();
	            }

	            this.state = 6655;
	            this.match(StarRocksParser.T__9);
	            break;

	        case 20:
	            localctx = new LambdaFunctionExprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6658;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 12:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 22:
	            case 23:
	            case 25:
	            case 26:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 43:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 56:
	            case 57:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 66:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 73:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 86:
	            case 87:
	            case 91:
	            case 92:
	            case 93:
	            case 99:
	            case 100:
	            case 103:
	            case 104:
	            case 105:
	            case 106:
	            case 107:
	            case 113:
	            case 118:
	            case 119:
	            case 120:
	            case 124:
	            case 126:
	            case 127:
	            case 131:
	            case 132:
	            case 134:
	            case 135:
	            case 136:
	            case 137:
	            case 138:
	            case 139:
	            case 140:
	            case 141:
	            case 143:
	            case 146:
	            case 147:
	            case 148:
	            case 149:
	            case 150:
	            case 151:
	            case 153:
	            case 154:
	            case 156:
	            case 157:
	            case 160:
	            case 161:
	            case 162:
	            case 163:
	            case 166:
	            case 167:
	            case 169:
	            case 170:
	            case 173:
	            case 174:
	            case 176:
	            case 181:
	            case 182:
	            case 184:
	            case 185:
	            case 187:
	            case 188:
	            case 189:
	            case 190:
	            case 191:
	            case 192:
	            case 194:
	            case 197:
	            case 199:
	            case 200:
	            case 202:
	            case 205:
	            case 209:
	            case 210:
	            case 211:
	            case 213:
	            case 217:
	            case 219:
	            case 220:
	            case 226:
	            case 229:
	            case 234:
	            case 235:
	            case 238:
	            case 240:
	            case 243:
	            case 244:
	            case 245:
	            case 246:
	            case 247:
	            case 248:
	            case 249:
	            case 250:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 256:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 286:
	            case 287:
	            case 288:
	            case 290:
	            case 291:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 319:
	            case 320:
	            case 321:
	            case 322:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 339:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 347:
	            case 349:
	            case 350:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 365:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 392:
	            case 394:
	            case 395:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 404:
	            case 405:
	            case 406:
	            case 407:
	            case 408:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 415:
	            case 416:
	            case 417:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 426:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 437:
	            case 438:
	            case 439:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 448:
	            case 449:
	            case 452:
	            case 454:
	            case 455:
	            case 457:
	            case 459:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 475:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 486:
	            case 487:
	            case 495:
	            case 521:
	            case 522:
	            case 523:
	            case 529:
	                this.state = 6656;
	                this.identifier();
	                break;
	            case 2:
	                this.state = 6657;
	                this.identifierList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 6660;
	            this.match(StarRocksParser.ARROW);
	            this.state = 6661;
	            this.expression(0);
	            break;

	        case 21:
	            localctx = new LambdaFunctionExprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 6663;
	            this.identifierList();
	            this.state = 6664;
	            this.match(StarRocksParser.ARROW);
	            this.state = 6665;
	            this.match(StarRocksParser.T__1);
	            this.state = 6667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 6666;
	                this.expressionList();
	            }

	            this.state = 6669;
	            this.match(StarRocksParser.T__3);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 6714;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,779,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 6712;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,778,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ConcatContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_primaryExpression);
	                    this.state = 6673;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 6674;
	                    this.match(StarRocksParser.CONCAT);
	                    this.state = 6675;
	                    localctx.right = this.primaryExpression(20);
	                    break;

	                case 2:
	                    localctx = new MatchExprContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_primaryExpression);
	                    this.state = 6676;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 6678;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===276) {
	                        this.state = 6677;
	                        this.match(StarRocksParser.NOT);
	                    }

	                    this.state = 6680;
	                    this.match(StarRocksParser.MATCH);
	                    this.state = 6681;
	                    localctx.right = this.primaryExpression(2);
	                    break;

	                case 3:
	                    localctx = new CollateContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_primaryExpression);
	                    this.state = 6682;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 6683;
	                    this.match(StarRocksParser.COLLATE);
	                    this.state = 6686;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 11:
	                    case 12:
	                    case 14:
	                    case 15:
	                    case 16:
	                    case 17:
	                    case 22:
	                    case 23:
	                    case 25:
	                    case 26:
	                    case 29:
	                    case 30:
	                    case 31:
	                    case 32:
	                    case 33:
	                    case 34:
	                    case 35:
	                    case 36:
	                    case 37:
	                    case 38:
	                    case 39:
	                    case 40:
	                    case 43:
	                    case 45:
	                    case 46:
	                    case 47:
	                    case 48:
	                    case 49:
	                    case 51:
	                    case 52:
	                    case 53:
	                    case 54:
	                    case 56:
	                    case 57:
	                    case 59:
	                    case 60:
	                    case 61:
	                    case 62:
	                    case 63:
	                    case 66:
	                    case 68:
	                    case 69:
	                    case 70:
	                    case 71:
	                    case 73:
	                    case 75:
	                    case 76:
	                    case 77:
	                    case 78:
	                    case 79:
	                    case 81:
	                    case 82:
	                    case 83:
	                    case 84:
	                    case 86:
	                    case 87:
	                    case 91:
	                    case 92:
	                    case 93:
	                    case 99:
	                    case 100:
	                    case 103:
	                    case 104:
	                    case 105:
	                    case 106:
	                    case 107:
	                    case 113:
	                    case 118:
	                    case 119:
	                    case 120:
	                    case 124:
	                    case 126:
	                    case 127:
	                    case 131:
	                    case 132:
	                    case 134:
	                    case 135:
	                    case 136:
	                    case 137:
	                    case 138:
	                    case 139:
	                    case 140:
	                    case 141:
	                    case 143:
	                    case 146:
	                    case 147:
	                    case 148:
	                    case 149:
	                    case 150:
	                    case 151:
	                    case 153:
	                    case 154:
	                    case 156:
	                    case 157:
	                    case 160:
	                    case 161:
	                    case 162:
	                    case 163:
	                    case 166:
	                    case 167:
	                    case 169:
	                    case 170:
	                    case 173:
	                    case 174:
	                    case 176:
	                    case 181:
	                    case 182:
	                    case 184:
	                    case 185:
	                    case 187:
	                    case 188:
	                    case 189:
	                    case 190:
	                    case 191:
	                    case 192:
	                    case 194:
	                    case 197:
	                    case 199:
	                    case 200:
	                    case 202:
	                    case 205:
	                    case 209:
	                    case 210:
	                    case 211:
	                    case 213:
	                    case 217:
	                    case 219:
	                    case 220:
	                    case 226:
	                    case 229:
	                    case 234:
	                    case 235:
	                    case 238:
	                    case 240:
	                    case 243:
	                    case 244:
	                    case 245:
	                    case 246:
	                    case 247:
	                    case 248:
	                    case 249:
	                    case 250:
	                    case 251:
	                    case 252:
	                    case 253:
	                    case 254:
	                    case 256:
	                    case 259:
	                    case 260:
	                    case 261:
	                    case 262:
	                    case 263:
	                    case 265:
	                    case 266:
	                    case 267:
	                    case 268:
	                    case 269:
	                    case 270:
	                    case 271:
	                    case 272:
	                    case 273:
	                    case 274:
	                    case 275:
	                    case 278:
	                    case 279:
	                    case 280:
	                    case 281:
	                    case 282:
	                    case 283:
	                    case 284:
	                    case 286:
	                    case 287:
	                    case 288:
	                    case 290:
	                    case 291:
	                    case 299:
	                    case 300:
	                    case 301:
	                    case 302:
	                    case 303:
	                    case 304:
	                    case 306:
	                    case 307:
	                    case 308:
	                    case 309:
	                    case 310:
	                    case 311:
	                    case 312:
	                    case 313:
	                    case 314:
	                    case 315:
	                    case 316:
	                    case 319:
	                    case 320:
	                    case 321:
	                    case 322:
	                    case 324:
	                    case 325:
	                    case 326:
	                    case 327:
	                    case 328:
	                    case 329:
	                    case 330:
	                    case 331:
	                    case 332:
	                    case 333:
	                    case 334:
	                    case 335:
	                    case 336:
	                    case 337:
	                    case 339:
	                    case 341:
	                    case 342:
	                    case 343:
	                    case 344:
	                    case 347:
	                    case 349:
	                    case 350:
	                    case 352:
	                    case 353:
	                    case 354:
	                    case 355:
	                    case 356:
	                    case 357:
	                    case 358:
	                    case 359:
	                    case 360:
	                    case 361:
	                    case 362:
	                    case 363:
	                    case 365:
	                    case 368:
	                    case 369:
	                    case 370:
	                    case 371:
	                    case 372:
	                    case 373:
	                    case 376:
	                    case 377:
	                    case 378:
	                    case 379:
	                    case 380:
	                    case 381:
	                    case 384:
	                    case 385:
	                    case 387:
	                    case 388:
	                    case 389:
	                    case 390:
	                    case 392:
	                    case 394:
	                    case 395:
	                    case 398:
	                    case 399:
	                    case 400:
	                    case 401:
	                    case 402:
	                    case 403:
	                    case 404:
	                    case 405:
	                    case 406:
	                    case 407:
	                    case 408:
	                    case 410:
	                    case 411:
	                    case 412:
	                    case 413:
	                    case 415:
	                    case 416:
	                    case 417:
	                    case 419:
	                    case 420:
	                    case 421:
	                    case 422:
	                    case 423:
	                    case 424:
	                    case 426:
	                    case 428:
	                    case 429:
	                    case 430:
	                    case 431:
	                    case 432:
	                    case 434:
	                    case 435:
	                    case 437:
	                    case 438:
	                    case 439:
	                    case 441:
	                    case 442:
	                    case 443:
	                    case 444:
	                    case 445:
	                    case 448:
	                    case 449:
	                    case 452:
	                    case 454:
	                    case 455:
	                    case 457:
	                    case 459:
	                    case 461:
	                    case 462:
	                    case 463:
	                    case 464:
	                    case 465:
	                    case 466:
	                    case 467:
	                    case 468:
	                    case 469:
	                    case 470:
	                    case 471:
	                    case 472:
	                    case 475:
	                    case 477:
	                    case 478:
	                    case 479:
	                    case 480:
	                    case 481:
	                    case 482:
	                    case 483:
	                    case 484:
	                    case 486:
	                    case 487:
	                    case 495:
	                    case 521:
	                    case 522:
	                    case 523:
	                    case 529:
	                        this.state = 6684;
	                        this.identifier();
	                        break;
	                    case 517:
	                    case 518:
	                        this.state = 6685;
	                        this.string();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;

	                case 4:
	                    localctx = new DereferenceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.base = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_primaryExpression);
	                    this.state = 6688;
	                    if (!( this.precpred(this._ctx, 20))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
	                    }
	                    this.state = 6692;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 524:
	                        this.state = 6689;
	                        this.match(StarRocksParser.DOT_IDENTIFIER);
	                        break;
	                    case 1:
	                        this.state = 6690;
	                        this.match(StarRocksParser.T__0);
	                        this.state = 6691;
	                        localctx.fieldName = this.identifier();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;

	                case 5:
	                    localctx = new CollectionSubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.value = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_primaryExpression);
	                    this.state = 6694;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 6695;
	                    this.match(StarRocksParser.T__5);
	                    this.state = 6696;
	                    localctx.index = this.valueExpression(0);
	                    this.state = 6697;
	                    this.match(StarRocksParser.T__6);
	                    break;

	                case 6:
	                    localctx = new ArraySliceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_primaryExpression);
	                    this.state = 6699;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 6700;
	                    this.match(StarRocksParser.T__5);
	                    this.state = 6702;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===514) {
	                        this.state = 6701;
	                        localctx.start = this.match(StarRocksParser.INTEGER_VALUE);
	                    }

	                    this.state = 6704;
	                    this.match(StarRocksParser.T__7);
	                    this.state = 6706;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===514) {
	                        this.state = 6705;
	                        localctx.end = this.match(StarRocksParser.INTEGER_VALUE);
	                    }

	                    this.state = 6708;
	                    this.match(StarRocksParser.T__6);
	                    break;

	                case 7:
	                    localctx = new ArrowExpressionContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, StarRocksParser.RULE_primaryExpression);
	                    this.state = 6709;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 6710;
	                    this.match(StarRocksParser.ARROW);
	                    this.state = 6711;
	                    this.string();
	                    break;

	                } 
	            }
	            this.state = 6716;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,779,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	literalExpression() {
	    let localctx = new LiteralExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, StarRocksParser.RULE_literalExpression);
	    var _la = 0;
	    try {
	        this.state = 6727;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	            localctx = new NullLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6717;
	            this.match(StarRocksParser.NULL);
	            break;
	        case 152:
	        case 440:
	            localctx = new BooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6718;
	            this.booleanValue();
	            break;
	        case 514:
	        case 515:
	        case 516:
	            localctx = new NumericLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6719;
	            this.number();
	            break;
	        case 103:
	        case 104:
	            localctx = new DateLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6720;
	            _la = this._input.LA(1);
	            if(!(_la===103 || _la===104)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6721;
	            this.string();
	            break;
	        case 517:
	        case 518:
	            localctx = new StringLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6722;
	            this.string();
	            break;
	        case 213:
	            localctx = new IntervalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6723;
	            this.interval();
	            break;
	        case 62:
	        case 160:
	            localctx = new UnitBoundaryLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6724;
	            this.unitBoundary();
	            break;
	        case 519:
	        case 520:
	            localctx = new BinaryLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6725;
	            this.binary();
	            break;
	        case 297:
	            localctx = new ParameterContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6726;
	            this.match(StarRocksParser.PARAMETER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, StarRocksParser.RULE_functionCall);
	    var _la = 0;
	    try {
	        this.state = 6801;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,791,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExtractContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6729;
	            this.match(StarRocksParser.EXTRACT);
	            this.state = 6730;
	            this.match(StarRocksParser.T__1);
	            this.state = 6731;
	            this.identifier();
	            this.state = 6732;
	            this.match(StarRocksParser.FROM);
	            this.state = 6733;
	            this.valueExpression(0);
	            this.state = 6734;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 2:
	            localctx = new GroupingOperationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6736;
	            this.match(StarRocksParser.GROUPING);
	            this.state = 6737;
	            this.match(StarRocksParser.T__1);
	            this.state = 6746;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 6738;
	                this.expression(0);
	                this.state = 6743;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 6739;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 6740;
	                    this.expression(0);
	                    this.state = 6745;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6748;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 3:
	            localctx = new GroupingOperationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6749;
	            this.match(StarRocksParser.GROUPING_ID);
	            this.state = 6750;
	            this.match(StarRocksParser.T__1);
	            this.state = 6759;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 6751;
	                this.expression(0);
	                this.state = 6756;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 6752;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 6753;
	                    this.expression(0);
	                    this.state = 6758;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6761;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 4:
	            localctx = new InformationFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6762;
	            this.informationFunctionExpression();
	            break;

	        case 5:
	            localctx = new SpecialDateTimeContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6763;
	            this.specialDateTimeExpression();
	            break;

	        case 6:
	            localctx = new SpecialFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6764;
	            this.specialFunctionExpression();
	            break;

	        case 7:
	            localctx = new AggregationFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6765;
	            this.aggregationFunction();
	            this.state = 6767;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,785,this._ctx);
	            if(la_===1) {
	                this.state = 6766;
	                this.over();

	            }
	            break;

	        case 8:
	            localctx = new WindowFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6769;
	            this.windowFunction();
	            this.state = 6770;
	            this.over();
	            break;

	        case 9:
	            localctx = new TranslateFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6772;
	            this.match(StarRocksParser.TRANSLATE);
	            this.state = 6773;
	            this.match(StarRocksParser.T__1);
	            this.state = 6782;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 6774;
	                this.expression(0);
	                this.state = 6779;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 6775;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 6776;
	                    this.expression(0);
	                    this.state = 6781;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6784;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 10:
	            localctx = new SimpleFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6785;
	            this.qualifiedName();
	            this.state = 6786;
	            this.match(StarRocksParser.T__1);
	            this.state = 6795;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 6787;
	                this.expression(0);
	                this.state = 6792;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 6788;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 6789;
	                    this.expression(0);
	                    this.state = 6794;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6797;
	            this.match(StarRocksParser.T__3);
	            this.state = 6799;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,790,this._ctx);
	            if(la_===1) {
	                this.state = 6798;
	                this.over();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregationFunction() {
	    let localctx = new AggregationFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, StarRocksParser.RULE_aggregationFunction);
	    var _la = 0;
	    try {
	        this.state = 6928;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,811,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6803;
	            this.match(StarRocksParser.AVG);
	            this.state = 6804;
	            this.match(StarRocksParser.T__1);
	            this.state = 6806;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18 || _la===125) {
	                this.state = 6805;
	                this.setQuantifier();
	            }

	            this.state = 6808;
	            this.expression(0);
	            this.state = 6809;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6811;
	            this.match(StarRocksParser.COUNT);
	            this.state = 6812;
	            this.match(StarRocksParser.T__1);
	            this.state = 6814;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===498) {
	                this.state = 6813;
	                this.match(StarRocksParser.ASTERISK_SYMBOL);
	            }

	            this.state = 6816;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6817;
	            this.match(StarRocksParser.COUNT);
	            this.state = 6818;
	            this.match(StarRocksParser.T__1);
	            this.state = 6823;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18 || _la===125) {
	                this.state = 6819;
	                this.setQuantifier();
	                this.state = 6821;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,794,this._ctx);
	                if(la_===1) {
	                    this.state = 6820;
	                    this.bracketHint();

	                }
	            }

	            this.state = 6833;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 6825;
	                this.expression(0);
	                this.state = 6830;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 6826;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 6827;
	                    this.expression(0);
	                    this.state = 6832;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6835;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6836;
	            this.match(StarRocksParser.MAX);
	            this.state = 6837;
	            this.match(StarRocksParser.T__1);
	            this.state = 6839;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18 || _la===125) {
	                this.state = 6838;
	                this.setQuantifier();
	            }

	            this.state = 6841;
	            this.expression(0);
	            this.state = 6842;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6844;
	            this.match(StarRocksParser.MIN);
	            this.state = 6845;
	            this.match(StarRocksParser.T__1);
	            this.state = 6847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18 || _la===125) {
	                this.state = 6846;
	                this.setQuantifier();
	            }

	            this.state = 6849;
	            this.expression(0);
	            this.state = 6850;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6852;
	            this.match(StarRocksParser.SUM);
	            this.state = 6853;
	            this.match(StarRocksParser.T__1);
	            this.state = 6855;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18 || _la===125) {
	                this.state = 6854;
	                this.setQuantifier();
	            }

	            this.state = 6857;
	            this.expression(0);
	            this.state = 6858;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6860;
	            this.match(StarRocksParser.ARRAY_AGG);
	            this.state = 6861;
	            this.match(StarRocksParser.T__1);
	            this.state = 6863;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18 || _la===125) {
	                this.state = 6862;
	                this.setQuantifier();
	            }

	            this.state = 6865;
	            this.expression(0);
	            this.state = 6876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===293) {
	                this.state = 6866;
	                this.match(StarRocksParser.ORDER);
	                this.state = 6867;
	                this.match(StarRocksParser.BY);
	                this.state = 6868;
	                this.sortItem();
	                this.state = 6873;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 6869;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 6870;
	                    this.sortItem();
	                    this.state = 6875;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6878;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6880;
	            this.match(StarRocksParser.ARRAY_AGG_DISTINCT);
	            this.state = 6881;
	            this.match(StarRocksParser.T__1);
	            this.state = 6882;
	            this.expression(0);
	            this.state = 6893;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===293) {
	                this.state = 6883;
	                this.match(StarRocksParser.ORDER);
	                this.state = 6884;
	                this.match(StarRocksParser.BY);
	                this.state = 6885;
	                this.sortItem();
	                this.state = 6890;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 6886;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 6887;
	                    this.sortItem();
	                    this.state = 6892;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6895;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6897;
	            this.match(StarRocksParser.GROUP_CONCAT);
	            this.state = 6898;
	            this.match(StarRocksParser.T__1);
	            this.state = 6900;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18 || _la===125) {
	                this.state = 6899;
	                this.setQuantifier();
	            }

	            this.state = 6902;
	            this.expression(0);
	            this.state = 6907;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 6903;
	                this.match(StarRocksParser.T__2);
	                this.state = 6904;
	                this.expression(0);
	                this.state = 6909;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 6920;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===293) {
	                this.state = 6910;
	                this.match(StarRocksParser.ORDER);
	                this.state = 6911;
	                this.match(StarRocksParser.BY);
	                this.state = 6912;
	                this.sortItem();
	                this.state = 6917;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 6913;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 6914;
	                    this.sortItem();
	                    this.state = 6919;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 6924;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===388) {
	                this.state = 6922;
	                this.match(StarRocksParser.SEPARATOR);
	                this.state = 6923;
	                this.expression(0);
	            }

	            this.state = 6926;
	            this.match(StarRocksParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userVariable() {
	    let localctx = new UserVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, StarRocksParser.RULE_userVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6930;
	        this.match(StarRocksParser.AT);
	        this.state = 6931;
	        this.identifierOrString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	systemVariable() {
	    let localctx = new SystemVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, StarRocksParser.RULE_systemVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6933;
	        this.match(StarRocksParser.AT);
	        this.state = 6934;
	        this.match(StarRocksParser.AT);
	        this.state = 6938;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,812,this._ctx);
	        if(la_===1) {
	            this.state = 6935;
	            this.varType();
	            this.state = 6936;
	            this.match(StarRocksParser.T__0);

	        }
	        this.state = 6940;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnReference() {
	    let localctx = new ColumnReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, StarRocksParser.RULE_columnReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6942;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	informationFunctionExpression() {
	    let localctx = new InformationFunctionExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, StarRocksParser.RULE_informationFunctionExpression);
	    try {
	        this.state = 6966;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6944;
	            localctx.name = this.match(StarRocksParser.CATALOG);
	            this.state = 6945;
	            this.match(StarRocksParser.T__1);
	            this.state = 6946;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6947;
	            localctx.name = this.match(StarRocksParser.DATABASE);
	            this.state = 6948;
	            this.match(StarRocksParser.T__1);
	            this.state = 6949;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 382:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6950;
	            localctx.name = this.match(StarRocksParser.SCHEMA);
	            this.state = 6951;
	            this.match(StarRocksParser.T__1);
	            this.state = 6952;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 454:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6953;
	            localctx.name = this.match(StarRocksParser.USER);
	            this.state = 6954;
	            this.match(StarRocksParser.T__1);
	            this.state = 6955;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6956;
	            localctx.name = this.match(StarRocksParser.CURRENT_USER);
	            this.state = 6959;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,813,this._ctx);
	            if(la_===1) {
	                this.state = 6957;
	                this.match(StarRocksParser.T__1);
	                this.state = 6958;
	                this.match(StarRocksParser.T__3);

	            }
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6961;
	            localctx.name = this.match(StarRocksParser.CURRENT_ROLE);
	            this.state = 6964;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,814,this._ctx);
	            if(la_===1) {
	                this.state = 6962;
	                this.match(StarRocksParser.T__1);
	                this.state = 6963;
	                this.match(StarRocksParser.T__3);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specialDateTimeExpression() {
	    let localctx = new SpecialDateTimeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, StarRocksParser.RULE_specialDateTimeExpression);
	    try {
	        this.state = 6993;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 94:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6968;
	            localctx.name = this.match(StarRocksParser.CURRENT_DATE);
	            this.state = 6971;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,816,this._ctx);
	            if(la_===1) {
	                this.state = 6969;
	                this.match(StarRocksParser.T__1);
	                this.state = 6970;
	                this.match(StarRocksParser.T__3);

	            }
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6973;
	            localctx.name = this.match(StarRocksParser.CURRENT_TIME);
	            this.state = 6976;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,817,this._ctx);
	            if(la_===1) {
	                this.state = 6974;
	                this.match(StarRocksParser.T__1);
	                this.state = 6975;
	                this.match(StarRocksParser.T__3);

	            }
	            break;
	        case 97:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6978;
	            localctx.name = this.match(StarRocksParser.CURRENT_TIMESTAMP);
	            this.state = 6981;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,818,this._ctx);
	            if(la_===1) {
	                this.state = 6979;
	                this.match(StarRocksParser.T__1);
	                this.state = 6980;
	                this.match(StarRocksParser.T__3);

	            }
	            break;
	        case 241:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6983;
	            localctx.name = this.match(StarRocksParser.LOCALTIME);
	            this.state = 6986;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,819,this._ctx);
	            if(la_===1) {
	                this.state = 6984;
	                this.match(StarRocksParser.T__1);
	                this.state = 6985;
	                this.match(StarRocksParser.T__3);

	            }
	            break;
	        case 242:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6988;
	            localctx.name = this.match(StarRocksParser.LOCALTIMESTAMP);
	            this.state = 6991;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,820,this._ctx);
	            if(la_===1) {
	                this.state = 6989;
	                this.match(StarRocksParser.T__1);
	                this.state = 6990;
	                this.match(StarRocksParser.T__3);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specialFunctionExpression() {
	    let localctx = new SpecialFunctionExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, StarRocksParser.RULE_specialFunctionExpression);
	    var _la = 0;
	    try {
	        this.state = 7136;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6995;
	            this.match(StarRocksParser.CHAR);
	            this.state = 6996;
	            this.match(StarRocksParser.T__1);
	            this.state = 6997;
	            this.expression(0);
	            this.state = 6998;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 105:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7000;
	            this.match(StarRocksParser.DAY);
	            this.state = 7001;
	            this.match(StarRocksParser.T__1);
	            this.state = 7002;
	            this.expression(0);
	            this.state = 7003;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 189:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7005;
	            this.match(StarRocksParser.HOUR);
	            this.state = 7006;
	            this.match(StarRocksParser.T__1);
	            this.state = 7007;
	            this.expression(0);
	            this.state = 7008;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 193:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7010;
	            this.match(StarRocksParser.IF);
	            this.state = 7011;
	            this.match(StarRocksParser.T__1);
	            this.state = 7020;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 7012;
	                this.expression(0);
	                this.state = 7017;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 7013;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 7014;
	                    this.expression(0);
	                    this.state = 7019;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7022;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 233:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7023;
	            this.match(StarRocksParser.LEFT);
	            this.state = 7024;
	            this.match(StarRocksParser.T__1);
	            this.state = 7025;
	            this.expression(0);
	            this.state = 7026;
	            this.match(StarRocksParser.T__2);
	            this.state = 7027;
	            this.expression(0);
	            this.state = 7028;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 236:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7030;
	            this.match(StarRocksParser.LIKE);
	            this.state = 7031;
	            this.match(StarRocksParser.T__1);
	            this.state = 7032;
	            this.expression(0);
	            this.state = 7033;
	            this.match(StarRocksParser.T__2);
	            this.state = 7034;
	            this.expression(0);
	            this.state = 7035;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 260:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7037;
	            this.match(StarRocksParser.MINUTE);
	            this.state = 7038;
	            this.match(StarRocksParser.T__1);
	            this.state = 7039;
	            this.expression(0);
	            this.state = 7040;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 264:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7042;
	            this.match(StarRocksParser.MOD);
	            this.state = 7043;
	            this.match(StarRocksParser.T__1);
	            this.state = 7044;
	            this.expression(0);
	            this.state = 7045;
	            this.match(StarRocksParser.T__2);
	            this.state = 7046;
	            this.expression(0);
	            this.state = 7047;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 267:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7049;
	            this.match(StarRocksParser.MONTH);
	            this.state = 7050;
	            this.match(StarRocksParser.T__1);
	            this.state = 7051;
	            this.expression(0);
	            this.state = 7052;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 332:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7054;
	            this.match(StarRocksParser.QUARTER);
	            this.state = 7055;
	            this.match(StarRocksParser.T__1);
	            this.state = 7056;
	            this.expression(0);
	            this.state = 7057;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 345:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 7059;
	            this.match(StarRocksParser.REGEXP);
	            this.state = 7060;
	            this.match(StarRocksParser.T__1);
	            this.state = 7061;
	            this.expression(0);
	            this.state = 7062;
	            this.match(StarRocksParser.T__2);
	            this.state = 7063;
	            this.expression(0);
	            this.state = 7064;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 351:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 7066;
	            this.match(StarRocksParser.REPLACE);
	            this.state = 7067;
	            this.match(StarRocksParser.T__1);
	            this.state = 7076;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 7068;
	                this.expression(0);
	                this.state = 7073;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 7069;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 7070;
	                    this.expression(0);
	                    this.state = 7075;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7078;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 366:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 7079;
	            this.match(StarRocksParser.RIGHT);
	            this.state = 7080;
	            this.match(StarRocksParser.T__1);
	            this.state = 7081;
	            this.expression(0);
	            this.state = 7082;
	            this.match(StarRocksParser.T__2);
	            this.state = 7083;
	            this.expression(0);
	            this.state = 7084;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 367:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 7086;
	            this.match(StarRocksParser.RLIKE);
	            this.state = 7087;
	            this.match(StarRocksParser.T__1);
	            this.state = 7088;
	            this.expression(0);
	            this.state = 7089;
	            this.match(StarRocksParser.T__2);
	            this.state = 7090;
	            this.expression(0);
	            this.state = 7091;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 384:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 7093;
	            this.match(StarRocksParser.SECOND);
	            this.state = 7094;
	            this.match(StarRocksParser.T__1);
	            this.state = 7095;
	            this.expression(0);
	            this.state = 7096;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 431:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 7098;
	            this.match(StarRocksParser.TIMESTAMPADD);
	            this.state = 7099;
	            this.match(StarRocksParser.T__1);
	            this.state = 7100;
	            this.unitIdentifier();
	            this.state = 7101;
	            this.match(StarRocksParser.T__2);
	            this.state = 7102;
	            this.expression(0);
	            this.state = 7103;
	            this.match(StarRocksParser.T__2);
	            this.state = 7104;
	            this.expression(0);
	            this.state = 7105;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 432:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 7107;
	            this.match(StarRocksParser.TIMESTAMPDIFF);
	            this.state = 7108;
	            this.match(StarRocksParser.T__1);
	            this.state = 7109;
	            this.unitIdentifier();
	            this.state = 7110;
	            this.match(StarRocksParser.T__2);
	            this.state = 7111;
	            this.expression(0);
	            this.state = 7112;
	            this.match(StarRocksParser.T__2);
	            this.state = 7113;
	            this.expression(0);
	            this.state = 7114;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 479:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 7116;
	            this.match(StarRocksParser.YEAR);
	            this.state = 7117;
	            this.match(StarRocksParser.T__1);
	            this.state = 7118;
	            this.expression(0);
	            this.state = 7119;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 300:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 7121;
	            this.match(StarRocksParser.PASSWORD);
	            this.state = 7122;
	            this.match(StarRocksParser.T__1);
	            this.state = 7123;
	            this.string();
	            this.state = 7124;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 160:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 7126;
	            this.match(StarRocksParser.FLOOR);
	            this.state = 7127;
	            this.match(StarRocksParser.T__1);
	            this.state = 7128;
	            this.expression(0);
	            this.state = 7129;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 7131;
	            this.match(StarRocksParser.CEIL);
	            this.state = 7132;
	            this.match(StarRocksParser.T__1);
	            this.state = 7133;
	            this.expression(0);
	            this.state = 7134;
	            this.match(StarRocksParser.T__3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFunction() {
	    let localctx = new WindowFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, StarRocksParser.RULE_windowFunction);
	    var _la = 0;
	    try {
	        this.state = 7235;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 375:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7138;
	            localctx.name = this.match(StarRocksParser.ROW_NUMBER);
	            this.state = 7139;
	            this.match(StarRocksParser.T__1);
	            this.state = 7140;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 339:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7141;
	            localctx.name = this.match(StarRocksParser.RANK);
	            this.state = 7142;
	            this.match(StarRocksParser.T__1);
	            this.state = 7143;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7144;
	            localctx.name = this.match(StarRocksParser.DENSE_RANK);
	            this.state = 7145;
	            this.match(StarRocksParser.T__1);
	            this.state = 7146;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7147;
	            localctx.name = this.match(StarRocksParser.CUME_DIST);
	            this.state = 7148;
	            this.match(StarRocksParser.T__1);
	            this.state = 7149;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 304:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7150;
	            localctx.name = this.match(StarRocksParser.PERCENT_RANK);
	            this.state = 7151;
	            this.match(StarRocksParser.T__1);
	            this.state = 7152;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 121:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7153;
	            localctx.name = this.match(StarRocksParser.NTILE);
	            this.state = 7154;
	            this.match(StarRocksParser.T__1);
	            this.state = 7156;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 7155;
	                this.expression(0);
	            }

	            this.state = 7158;
	            this.match(StarRocksParser.T__3);
	            break;
	        case 232:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7159;
	            localctx.name = this.match(StarRocksParser.LEAD);
	            this.state = 7160;
	            this.match(StarRocksParser.T__1);
	            this.state = 7172;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 7161;
	                this.expression(0);
	                this.state = 7163;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===196) {
	                    this.state = 7162;
	                    this.ignoreNulls();
	                }

	                this.state = 7169;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 7165;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 7166;
	                    this.expression(0);
	                    this.state = 7171;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7174;
	            this.match(StarRocksParser.T__3);
	            this.state = 7176;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===196) {
	                this.state = 7175;
	                this.ignoreNulls();
	            }

	            break;
	        case 227:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7178;
	            localctx.name = this.match(StarRocksParser.LAG);
	            this.state = 7179;
	            this.match(StarRocksParser.T__1);
	            this.state = 7191;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 7180;
	                this.expression(0);
	                this.state = 7182;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===196) {
	                    this.state = 7181;
	                    this.ignoreNulls();
	                }

	                this.state = 7188;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 7184;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 7185;
	                    this.expression(0);
	                    this.state = 7190;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7193;
	            this.match(StarRocksParser.T__3);
	            this.state = 7195;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===196) {
	                this.state = 7194;
	                this.ignoreNulls();
	            }

	            break;
	        case 158:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7197;
	            localctx.name = this.match(StarRocksParser.FIRST_VALUE);
	            this.state = 7198;
	            this.match(StarRocksParser.T__1);
	            this.state = 7210;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 7199;
	                this.expression(0);
	                this.state = 7201;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===196) {
	                    this.state = 7200;
	                    this.ignoreNulls();
	                }

	                this.state = 7207;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 7203;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 7204;
	                    this.expression(0);
	                    this.state = 7209;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7212;
	            this.match(StarRocksParser.T__3);
	            this.state = 7214;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===196) {
	                this.state = 7213;
	                this.ignoreNulls();
	            }

	            break;
	        case 230:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7216;
	            localctx.name = this.match(StarRocksParser.LAST_VALUE);
	            this.state = 7217;
	            this.match(StarRocksParser.T__1);
	            this.state = 7229;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3888372292) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4286310911) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4177459957) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 3553759167) !== 0) || ((((_la - 131)) & ~0x1f) === 0 && ((1 << (_la - 131)) & 4009736187) !== 0) || ((((_la - 163)) & ~0x1f) === 0 && ((1 << (_la - 163)) & 4285476057) !== 0) || ((((_la - 197)) & ~0x1f) === 0 && ((1 << (_la - 197)) & 1624338733) !== 0) || ((((_la - 229)) & ~0x1f) === 0 && ((1 << (_la - 229)) & 3422550779) !== 0) || ((((_la - 261)) & ~0x1f) === 0 && ((1 << (_la - 261)) & 1862270975) !== 0) || ((((_la - 297)) & ~0x1f) === 0 && ((1 << (_la - 297)) & 4224712445) !== 0) || ((((_la - 329)) & ~0x1f) === 0 && ((1 << (_la - 329)) & 4294309375) !== 0) || ((((_la - 361)) & ~0x1f) === 0 && ((1 << (_la - 361)) & 3183468535) !== 0) || ((((_la - 394)) & ~0x1f) === 0 && ((1 << (_la - 394)) & 2129625075) !== 0) || ((((_la - 426)) & ~0x1f) === 0 && ((1 << (_la - 426)) & 3033529213) !== 0) || ((((_la - 459)) & ~0x1f) === 0 && ((1 << (_la - 459)) & 469581821) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 536617223) !== 0) || _la===529) {
	                this.state = 7218;
	                this.expression(0);
	                this.state = 7220;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===196) {
	                    this.state = 7219;
	                    this.ignoreNulls();
	                }

	                this.state = 7226;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 7222;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 7223;
	                    this.expression(0);
	                    this.state = 7228;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7231;
	            this.match(StarRocksParser.T__3);
	            this.state = 7233;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===196) {
	                this.state = 7232;
	                this.ignoreNulls();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenClause() {
	    let localctx = new WhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, StarRocksParser.RULE_whenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7237;
	        this.match(StarRocksParser.WHEN);
	        this.state = 7238;
	        localctx.condition = this.expression(0);
	        this.state = 7239;
	        this.match(StarRocksParser.THEN);
	        this.state = 7240;
	        localctx.result = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	over() {
	    let localctx = new OverContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, StarRocksParser.RULE_over);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7242;
	        this.match(StarRocksParser.OVER);
	        this.state = 7243;
	        this.match(StarRocksParser.T__1);
	        this.state = 7257;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6 || _la===298) {
	            this.state = 7245;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===6) {
	                this.state = 7244;
	                this.bracketHint();
	            }

	            this.state = 7247;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 7248;
	            this.match(StarRocksParser.BY);
	            this.state = 7249;
	            localctx._expression = this.expression(0);
	            localctx.partition.push(localctx._expression);
	            this.state = 7254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 7250;
	                this.match(StarRocksParser.T__2);
	                this.state = 7251;
	                localctx._expression = this.expression(0);
	                localctx.partition.push(localctx._expression);
	                this.state = 7256;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 7269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===293) {
	            this.state = 7259;
	            this.match(StarRocksParser.ORDER);
	            this.state = 7260;
	            this.match(StarRocksParser.BY);
	            this.state = 7261;
	            this.sortItem();
	            this.state = 7266;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===3) {
	                this.state = 7262;
	                this.match(StarRocksParser.T__2);
	                this.state = 7263;
	                this.sortItem();
	                this.state = 7268;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 7272;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===338 || _la===374) {
	            this.state = 7271;
	            this.windowFrame();
	        }

	        this.state = 7274;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ignoreNulls() {
	    let localctx = new IgnoreNullsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, StarRocksParser.RULE_ignoreNulls);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7276;
	        this.match(StarRocksParser.IGNORE);
	        this.state = 7277;
	        this.match(StarRocksParser.NULLS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrame() {
	    let localctx = new WindowFrameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, StarRocksParser.RULE_windowFrame);
	    try {
	        this.state = 7295;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,851,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7279;
	            localctx.frameType = this.match(StarRocksParser.RANGE);
	            this.state = 7280;
	            localctx.start = this.frameBound();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7281;
	            localctx.frameType = this.match(StarRocksParser.ROWS);
	            this.state = 7282;
	            localctx.start = this.frameBound();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7283;
	            localctx.frameType = this.match(StarRocksParser.RANGE);
	            this.state = 7284;
	            this.match(StarRocksParser.BETWEEN);
	            this.state = 7285;
	            localctx.start = this.frameBound();
	            this.state = 7286;
	            this.match(StarRocksParser.AND);
	            this.state = 7287;
	            localctx.end = this.frameBound();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7289;
	            localctx.frameType = this.match(StarRocksParser.ROWS);
	            this.state = 7290;
	            this.match(StarRocksParser.BETWEEN);
	            this.state = 7291;
	            localctx.start = this.frameBound();
	            this.state = 7292;
	            this.match(StarRocksParser.AND);
	            this.state = 7293;
	            localctx.end = this.frameBound();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frameBound() {
	    let localctx = new FrameBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, StarRocksParser.RULE_frameBound);
	    var _la = 0;
	    try {
	        this.state = 7306;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,852,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UnboundedFrameContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7297;
	            this.match(StarRocksParser.UNBOUNDED);
	            this.state = 7298;
	            localctx.boundType = this.match(StarRocksParser.PRECEDING);
	            break;

	        case 2:
	            localctx = new UnboundedFrameContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7299;
	            this.match(StarRocksParser.UNBOUNDED);
	            this.state = 7300;
	            localctx.boundType = this.match(StarRocksParser.FOLLOWING);
	            break;

	        case 3:
	            localctx = new CurrentRowBoundContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7301;
	            this.match(StarRocksParser.CURRENT);
	            this.state = 7302;
	            this.match(StarRocksParser.ROW);
	            break;

	        case 4:
	            localctx = new BoundedFrameContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7303;
	            this.expression(0);
	            this.state = 7304;
	            localctx.boundType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===162 || _la===315)) {
	                localctx.boundType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backupRestoreObjectDesc() {
	    let localctx = new BackupRestoreObjectDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, StarRocksParser.RULE_backupRestoreObjectDesc);
	    var _la = 0;
	    try {
	        this.state = 7347;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,860,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7308;
	            this.backupRestoreTableDesc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7317;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 18:
	                this.state = 7309;
	                this.match(StarRocksParser.ALL);
	                this.state = 7310;
	                _la = this._input.LA(1);
	                if(!(_la===172 || _la===173)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            case 172:
	            case 173:
	                this.state = 7311;
	                _la = this._input.LA(1);
	                if(!(_la===172 || _la===173)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 7312;
	                this.qualifiedName();
	                this.state = 7315;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===27) {
	                    this.state = 7313;
	                    this.match(StarRocksParser.AS);
	                    this.state = 7314;
	                    this.identifier();
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7323;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 18:
	                this.state = 7319;
	                this.match(StarRocksParser.ALL);
	                this.state = 7320;
	                _la = this._input.LA(1);
	                if(!(_la===418 || _la===419)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            case 418:
	            case 419:
	                this.state = 7321;
	                _la = this._input.LA(1);
	                if(!(_la===418 || _la===419)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 7322;
	                this.backupRestoreTableDesc();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7335;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 18:
	                this.state = 7325;
	                this.match(StarRocksParser.ALL);
	                this.state = 7326;
	                this.match(StarRocksParser.MATERIALIZED);
	                this.state = 7327;
	                _la = this._input.LA(1);
	                if(!(_la===465 || _la===466)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            case 253:
	                this.state = 7328;
	                this.match(StarRocksParser.MATERIALIZED);
	                this.state = 7329;
	                _la = this._input.LA(1);
	                if(!(_la===465 || _la===466)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 7330;
	                this.qualifiedName();
	                this.state = 7333;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===27) {
	                    this.state = 7331;
	                    this.match(StarRocksParser.AS);
	                    this.state = 7332;
	                    this.identifier();
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7345;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 18:
	                this.state = 7337;
	                this.match(StarRocksParser.ALL);
	                this.state = 7338;
	                _la = this._input.LA(1);
	                if(!(_la===465 || _la===466)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            case 465:
	            case 466:
	                this.state = 7339;
	                _la = this._input.LA(1);
	                if(!(_la===465 || _la===466)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 7340;
	                this.qualifiedName();
	                this.state = 7343;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===27) {
	                    this.state = 7341;
	                    this.match(StarRocksParser.AS);
	                    this.state = 7342;
	                    this.identifier();
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableDesc() {
	    let localctx = new TableDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, StarRocksParser.RULE_tableDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7349;
	        this.qualifiedName();
	        this.state = 7351;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298 || _la===299 || _la===424) {
	            this.state = 7350;
	            this.partitionNames();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	backupRestoreTableDesc() {
	    let localctx = new BackupRestoreTableDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 884, StarRocksParser.RULE_backupRestoreTableDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7353;
	        this.qualifiedName();
	        this.state = 7355;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===298 || _la===299 || _la===424) {
	            this.state = 7354;
	            this.partitionNames();
	        }

	        this.state = 7359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 7357;
	            this.match(StarRocksParser.AS);
	            this.state = 7358;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainDesc() {
	    let localctx = new ExplainDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 886, StarRocksParser.RULE_explainDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7361;
	        _la = this._input.LA(1);
	        if(!(((((_la - 122)) & ~0x1f) === 0 && ((1 << (_la - 122)) & 8388611) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7363;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20 || _la===86 || _la===246 || _la===381 || _la===463) {
	            this.state = 7362;
	            _la = this._input.LA(1);
	            if(!(_la===20 || _la===86 || _la===246 || _la===381 || _la===463)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optimizerTrace() {
	    let localctx = new OptimizerTraceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, StarRocksParser.RULE_optimizerTrace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7365;
	        this.match(StarRocksParser.TRACE);
	        this.state = 7366;
	        _la = this._input.LA(1);
	        if(!(_la===18 || _la===245 || _la===341 || _la===429 || _la===458)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 11)) & ~0x1f) === 0 && ((1 << (_la - 11)) & 1073535099) !== 0) || ((((_la - 43)) & ~0x1f) === 0 && ((1 << (_la - 43)) & 1587507069) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 4077329375) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 4212799553) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 3655786391) !== 0) || ((((_la - 173)) & ~0x1f) === 0 && ((1 << (_la - 173)) & 758110987) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 1629540721) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4226154469) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 3761733439) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4292771831) !== 0) || ((((_la - 334)) & ~0x1f) === 0 && ((1 << (_la - 334)) & 3221071791) !== 0) || ((((_la - 368)) & ~0x1f) === 0 && ((1 << (_la - 368)) & 3447406399) !== 0) || ((((_la - 400)) & ~0x1f) === 0 && ((1 << (_la - 400)) & 4126916095) !== 0) || ((((_la - 432)) & ~0x1f) === 0 && ((1 << (_la - 432)) & 3939712749) !== 0) || ((((_la - 464)) & ~0x1f) === 0 && ((1 << (_la - 464)) & 2162158079) !== 0) || ((((_la - 521)) & ~0x1f) === 0 && ((1 << (_la - 521)) & 263) !== 0)) {
	            this.state = 7367;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionExpr() {
	    let localctx = new PartitionExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, StarRocksParser.RULE_partitionExpr);
	    try {
	        this.state = 7372;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,866,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7370;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7371;
	            this.functionCall();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDesc() {
	    let localctx = new PartitionDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, StarRocksParser.RULE_partitionDesc);
	    var _la = 0;
	    try {
	        this.state = 7462;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,878,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7374;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 7375;
	            this.match(StarRocksParser.BY);
	            this.state = 7376;
	            this.match(StarRocksParser.RANGE);
	            this.state = 7377;
	            this.identifierList();
	            this.state = 7378;
	            this.match(StarRocksParser.T__1);
	            this.state = 7387;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===298 || _la===402) {
	                this.state = 7379;
	                this.rangePartitionDesc();
	                this.state = 7384;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 7380;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 7381;
	                    this.rangePartitionDesc();
	                    this.state = 7386;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7389;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7391;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 7392;
	            this.match(StarRocksParser.BY);
	            this.state = 7393;
	            this.match(StarRocksParser.RANGE);
	            this.state = 7394;
	            this.primaryExpression(0);
	            this.state = 7395;
	            this.match(StarRocksParser.T__1);
	            this.state = 7404;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===298 || _la===402) {
	                this.state = 7396;
	                this.rangePartitionDesc();
	                this.state = 7401;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 7397;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 7398;
	                    this.rangePartitionDesc();
	                    this.state = 7403;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7406;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7408;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 7409;
	            this.match(StarRocksParser.BY);
	            this.state = 7411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===238) {
	                this.state = 7410;
	                this.match(StarRocksParser.LIST);
	            }

	            this.state = 7413;
	            this.identifierList();
	            this.state = 7414;
	            this.match(StarRocksParser.T__1);
	            this.state = 7423;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===298) {
	                this.state = 7415;
	                this.listPartitionDesc();
	                this.state = 7420;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 7416;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 7417;
	                    this.listPartitionDesc();
	                    this.state = 7422;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7425;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7427;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 7428;
	            this.match(StarRocksParser.BY);
	            this.state = 7430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===238) {
	                this.state = 7429;
	                this.match(StarRocksParser.LIST);
	            }

	            this.state = 7432;
	            this.identifierList();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7433;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 7434;
	            this.match(StarRocksParser.BY);
	            this.state = 7435;
	            this.functionCall();
	            this.state = 7436;
	            this.match(StarRocksParser.T__1);
	            this.state = 7445;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===298 || _la===402) {
	                this.state = 7437;
	                this.rangePartitionDesc();
	                this.state = 7442;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===3) {
	                    this.state = 7438;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 7439;
	                    this.rangePartitionDesc();
	                    this.state = 7444;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7447;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7449;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 7450;
	            this.match(StarRocksParser.BY);
	            this.state = 7451;
	            this.functionCall();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7452;
	            this.match(StarRocksParser.PARTITION);
	            this.state = 7453;
	            this.match(StarRocksParser.BY);
	            this.state = 7454;
	            this.partitionExpr();
	            this.state = 7459;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,877,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 7455;
	                    this.match(StarRocksParser.T__2);
	                    this.state = 7456;
	                    this.partitionExpr(); 
	                }
	                this.state = 7461;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,877,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listPartitionDesc() {
	    let localctx = new ListPartitionDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 894, StarRocksParser.RULE_listPartitionDesc);
	    try {
	        this.state = 7466;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,879,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7464;
	            this.singleItemListPartitionDesc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7465;
	            this.multiItemListPartitionDesc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleItemListPartitionDesc() {
	    let localctx = new SingleItemListPartitionDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 896, StarRocksParser.RULE_singleItemListPartitionDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7468;
	        this.match(StarRocksParser.PARTITION);
	        this.state = 7472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 7469;
	            this.match(StarRocksParser.IF);
	            this.state = 7470;
	            this.match(StarRocksParser.NOT);
	            this.state = 7471;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 7474;
	        this.identifier();
	        this.state = 7475;
	        this.match(StarRocksParser.VALUES);
	        this.state = 7476;
	        this.match(StarRocksParser.IN);
	        this.state = 7477;
	        this.singleListPartitionValues();
	        this.state = 7479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 7478;
	            this.propertyList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiItemListPartitionDesc() {
	    let localctx = new MultiItemListPartitionDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 898, StarRocksParser.RULE_multiItemListPartitionDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7481;
	        this.match(StarRocksParser.PARTITION);
	        this.state = 7485;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 7482;
	            this.match(StarRocksParser.IF);
	            this.state = 7483;
	            this.match(StarRocksParser.NOT);
	            this.state = 7484;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 7487;
	        this.identifier();
	        this.state = 7488;
	        this.match(StarRocksParser.VALUES);
	        this.state = 7489;
	        this.match(StarRocksParser.IN);
	        this.state = 7490;
	        this.multiListPartitionValues();
	        this.state = 7492;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 7491;
	            this.propertyList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiListPartitionValues() {
	    let localctx = new MultiListPartitionValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 900, StarRocksParser.RULE_multiListPartitionValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7494;
	        this.match(StarRocksParser.T__1);
	        this.state = 7495;
	        this.singleListPartitionValues();
	        this.state = 7500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7496;
	            this.match(StarRocksParser.T__2);
	            this.state = 7497;
	            this.singleListPartitionValues();
	            this.state = 7502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7503;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleListPartitionValues() {
	    let localctx = new SingleListPartitionValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 902, StarRocksParser.RULE_singleListPartitionValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7505;
	        this.match(StarRocksParser.T__1);
	        this.state = 7506;
	        this.listPartitionValue();
	        this.state = 7511;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7507;
	            this.match(StarRocksParser.T__2);
	            this.state = 7508;
	            this.listPartitionValue();
	            this.state = 7513;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7514;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listPartitionValues() {
	    let localctx = new ListPartitionValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 904, StarRocksParser.RULE_listPartitionValues);
	    try {
	        this.state = 7518;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,886,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7516;
	            this.singleListPartitionValues();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7517;
	            this.multiListPartitionValues();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listPartitionValue() {
	    let localctx = new ListPartitionValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 906, StarRocksParser.RULE_listPartitionValue);
	    try {
	        this.state = 7522;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7520;
	            this.match(StarRocksParser.NULL);
	            break;
	        case 517:
	        case 518:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7521;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringList() {
	    let localctx = new StringListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 908, StarRocksParser.RULE_stringList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7524;
	        this.match(StarRocksParser.T__1);
	        this.state = 7525;
	        this.string();
	        this.state = 7530;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7526;
	            this.match(StarRocksParser.T__2);
	            this.state = 7527;
	            this.string();
	            this.state = 7532;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7533;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literalExpressionList() {
	    let localctx = new LiteralExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 910, StarRocksParser.RULE_literalExpressionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7535;
	        this.match(StarRocksParser.T__1);
	        this.state = 7536;
	        this.literalExpression();
	        this.state = 7541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7537;
	            this.match(StarRocksParser.T__2);
	            this.state = 7538;
	            this.literalExpression();
	            this.state = 7543;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7544;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangePartitionDesc() {
	    let localctx = new RangePartitionDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 912, StarRocksParser.RULE_rangePartitionDesc);
	    try {
	        this.state = 7548;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 298:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7546;
	            this.singleRangePartition();
	            break;
	        case 402:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7547;
	            this.multiRangePartition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleRangePartition() {
	    let localctx = new SingleRangePartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 914, StarRocksParser.RULE_singleRangePartition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7550;
	        this.match(StarRocksParser.PARTITION);
	        this.state = 7554;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 7551;
	            this.match(StarRocksParser.IF);
	            this.state = 7552;
	            this.match(StarRocksParser.NOT);
	            this.state = 7553;
	            this.match(StarRocksParser.EXISTS);
	        }

	        this.state = 7556;
	        this.identifier();
	        this.state = 7557;
	        this.match(StarRocksParser.VALUES);
	        this.state = 7558;
	        this.partitionKeyDesc();
	        this.state = 7560;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 7559;
	            this.propertyList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiRangePartition() {
	    let localctx = new MultiRangePartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 916, StarRocksParser.RULE_multiRangePartition);
	    try {
	        this.state = 7588;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,893,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7562;
	            this.match(StarRocksParser.START);
	            this.state = 7563;
	            this.match(StarRocksParser.T__1);
	            this.state = 7564;
	            this.string();
	            this.state = 7565;
	            this.match(StarRocksParser.T__3);
	            this.state = 7566;
	            this.match(StarRocksParser.END);
	            this.state = 7567;
	            this.match(StarRocksParser.T__1);
	            this.state = 7568;
	            this.string();
	            this.state = 7569;
	            this.match(StarRocksParser.T__3);
	            this.state = 7570;
	            this.match(StarRocksParser.EVERY);
	            this.state = 7571;
	            this.match(StarRocksParser.T__1);
	            this.state = 7572;
	            this.interval();
	            this.state = 7573;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7575;
	            this.match(StarRocksParser.START);
	            this.state = 7576;
	            this.match(StarRocksParser.T__1);
	            this.state = 7577;
	            this.string();
	            this.state = 7578;
	            this.match(StarRocksParser.T__3);
	            this.state = 7579;
	            this.match(StarRocksParser.END);
	            this.state = 7580;
	            this.match(StarRocksParser.T__1);
	            this.state = 7581;
	            this.string();
	            this.state = 7582;
	            this.match(StarRocksParser.T__3);
	            this.state = 7583;
	            this.match(StarRocksParser.EVERY);
	            this.state = 7584;
	            this.match(StarRocksParser.T__1);
	            this.state = 7585;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            this.state = 7586;
	            this.match(StarRocksParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionRangeDesc() {
	    let localctx = new PartitionRangeDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 918, StarRocksParser.RULE_partitionRangeDesc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7590;
	        this.match(StarRocksParser.START);
	        this.state = 7591;
	        this.match(StarRocksParser.T__1);
	        this.state = 7592;
	        this.string();
	        this.state = 7593;
	        this.match(StarRocksParser.T__3);
	        this.state = 7594;
	        this.match(StarRocksParser.END);
	        this.state = 7595;
	        this.match(StarRocksParser.T__1);
	        this.state = 7596;
	        this.string();
	        this.state = 7597;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionKeyDesc() {
	    let localctx = new PartitionKeyDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 920, StarRocksParser.RULE_partitionKeyDesc);
	    try {
	        this.state = 7611;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 234:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7599;
	            this.match(StarRocksParser.LESS);
	            this.state = 7600;
	            this.match(StarRocksParser.THAN);
	            this.state = 7603;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 255:
	                this.state = 7601;
	                this.match(StarRocksParser.MAXVALUE);
	                break;
	            case 2:
	                this.state = 7602;
	                this.partitionValueList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7605;
	            this.match(StarRocksParser.T__5);
	            this.state = 7606;
	            this.partitionValueList();
	            this.state = 7607;
	            this.match(StarRocksParser.T__2);
	            this.state = 7608;
	            this.partitionValueList();
	            this.state = 7609;
	            this.match(StarRocksParser.T__3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionValueList() {
	    let localctx = new PartitionValueListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 922, StarRocksParser.RULE_partitionValueList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7613;
	        this.match(StarRocksParser.T__1);
	        this.state = 7614;
	        this.partitionValue();
	        this.state = 7619;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7615;
	            this.match(StarRocksParser.T__2);
	            this.state = 7616;
	            this.partitionValue();
	            this.state = 7621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7622;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyPartition() {
	    let localctx = new KeyPartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 924, StarRocksParser.RULE_keyPartition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7624;
	        localctx.partitionColName = this.identifier();
	        this.state = 7625;
	        this.match(StarRocksParser.EQ);
	        this.state = 7626;
	        localctx.partitionColValue = this.literalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionValue() {
	    let localctx = new PartitionValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 926, StarRocksParser.RULE_partitionValue);
	    try {
	        this.state = 7630;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 255:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7628;
	            this.match(StarRocksParser.MAXVALUE);
	            break;
	        case 517:
	        case 518:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7629;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	distributionClause() {
	    let localctx = new DistributionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 928, StarRocksParser.RULE_distributionClause);
	    var _la = 0;
	    try {
	        this.state = 7644;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,899,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7632;
	            this.match(StarRocksParser.DISTRIBUTED);
	            this.state = 7633;
	            this.match(StarRocksParser.BY);
	            this.state = 7634;
	            this.match(StarRocksParser.HASH);
	            this.state = 7635;
	            this.identifierList();
	            this.state = 7638;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53) {
	                this.state = 7636;
	                this.match(StarRocksParser.BUCKETS);
	                this.state = 7637;
	                this.match(StarRocksParser.INTEGER_VALUE);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7640;
	            this.match(StarRocksParser.DISTRIBUTED);
	            this.state = 7641;
	            this.match(StarRocksParser.BY);
	            this.state = 7642;
	            this.match(StarRocksParser.HASH);
	            this.state = 7643;
	            this.identifierList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	distributionDesc() {
	    let localctx = new DistributionDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 930, StarRocksParser.RULE_distributionDesc);
	    var _la = 0;
	    try {
	        this.state = 7665;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,902,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7646;
	            this.match(StarRocksParser.DISTRIBUTED);
	            this.state = 7647;
	            this.match(StarRocksParser.BY);
	            this.state = 7648;
	            this.match(StarRocksParser.HASH);
	            this.state = 7649;
	            this.identifierList();
	            this.state = 7652;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53) {
	                this.state = 7650;
	                this.match(StarRocksParser.BUCKETS);
	                this.state = 7651;
	                this.match(StarRocksParser.INTEGER_VALUE);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7654;
	            this.match(StarRocksParser.DISTRIBUTED);
	            this.state = 7655;
	            this.match(StarRocksParser.BY);
	            this.state = 7656;
	            this.match(StarRocksParser.HASH);
	            this.state = 7657;
	            this.identifierList();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7658;
	            this.match(StarRocksParser.DISTRIBUTED);
	            this.state = 7659;
	            this.match(StarRocksParser.BY);
	            this.state = 7660;
	            this.match(StarRocksParser.RANDOM);
	            this.state = 7663;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53) {
	                this.state = 7661;
	                this.match(StarRocksParser.BUCKETS);
	                this.state = 7662;
	                this.match(StarRocksParser.INTEGER_VALUE);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refreshSchemeDesc() {
	    let localctx = new RefreshSchemeDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 932, StarRocksParser.RULE_refreshSchemeDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7667;
	        this.match(StarRocksParser.REFRESH);
	        this.state = 7669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===117 || _la===195) {
	            this.state = 7668;
	            _la = this._input.LA(1);
	            if(!(_la===117 || _la===195)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 7687;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,905,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7671;
	            this.match(StarRocksParser.ASYNC);
	            break;

	        case 2:
	            this.state = 7672;
	            this.match(StarRocksParser.ASYNC);
	            this.state = 7678;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===402) {
	                this.state = 7673;
	                this.match(StarRocksParser.START);
	                this.state = 7674;
	                this.match(StarRocksParser.T__1);
	                this.state = 7675;
	                this.string();
	                this.state = 7676;
	                this.match(StarRocksParser.T__3);
	            }

	            this.state = 7680;
	            this.match(StarRocksParser.EVERY);
	            this.state = 7681;
	            this.match(StarRocksParser.T__1);
	            this.state = 7682;
	            this.interval();
	            this.state = 7683;
	            this.match(StarRocksParser.T__3);
	            break;

	        case 3:
	            this.state = 7685;
	            this.match(StarRocksParser.INCREMENTAL);
	            break;

	        case 4:
	            this.state = 7686;
	            this.match(StarRocksParser.MANUAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statusDesc() {
	    let localctx = new StatusDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 934, StarRocksParser.RULE_statusDesc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7689;
	        _la = this._input.LA(1);
	        if(!(_la===12 || _la===199)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	properties() {
	    let localctx = new PropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 936, StarRocksParser.RULE_properties);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7691;
	        this.match(StarRocksParser.PROPERTIES);
	        this.state = 7692;
	        this.match(StarRocksParser.T__1);
	        this.state = 7693;
	        this.property();
	        this.state = 7698;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7694;
	            this.match(StarRocksParser.T__2);
	            this.state = 7695;
	            this.property();
	            this.state = 7700;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7701;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extProperties() {
	    let localctx = new ExtPropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 938, StarRocksParser.RULE_extProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7703;
	        this.match(StarRocksParser.BROKER);
	        this.state = 7704;
	        this.properties();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyList() {
	    let localctx = new PropertyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 940, StarRocksParser.RULE_propertyList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7706;
	        this.match(StarRocksParser.T__1);
	        this.state = 7707;
	        this.property();
	        this.state = 7712;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7708;
	            this.match(StarRocksParser.T__2);
	            this.state = 7709;
	            this.property();
	            this.state = 7714;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7715;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userPropertyList() {
	    let localctx = new UserPropertyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 942, StarRocksParser.RULE_userPropertyList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7717;
	        this.property();
	        this.state = 7722;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7718;
	            this.match(StarRocksParser.T__2);
	            this.state = 7719;
	            this.property();
	            this.state = 7724;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	property() {
	    let localctx = new PropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 944, StarRocksParser.RULE_property);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7725;
	        localctx.key = this.string();
	        this.state = 7726;
	        this.match(StarRocksParser.EQ);
	        this.state = 7727;
	        localctx.value = this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineProperties() {
	    let localctx = new InlinePropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 946, StarRocksParser.RULE_inlineProperties);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7729;
	        this.inlineProperty();
	        this.state = 7733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 11)) & ~0x1f) === 0 && ((1 << (_la - 11)) & 1073535099) !== 0) || ((((_la - 43)) & ~0x1f) === 0 && ((1 << (_la - 43)) & 1587507069) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 4077329375) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 4212799553) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 3655786391) !== 0) || ((((_la - 173)) & ~0x1f) === 0 && ((1 << (_la - 173)) & 758110987) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 1629540721) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4226154469) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 3761733439) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4292771831) !== 0) || ((((_la - 334)) & ~0x1f) === 0 && ((1 << (_la - 334)) & 3221071791) !== 0) || ((((_la - 368)) & ~0x1f) === 0 && ((1 << (_la - 368)) & 3447406399) !== 0) || ((((_la - 400)) & ~0x1f) === 0 && ((1 << (_la - 400)) & 4126916095) !== 0) || ((((_la - 432)) & ~0x1f) === 0 && ((1 << (_la - 432)) & 3939712749) !== 0) || ((((_la - 464)) & ~0x1f) === 0 && ((1 << (_la - 464)) & 2162158079) !== 0) || ((((_la - 521)) & ~0x1f) === 0 && ((1 << (_la - 521)) & 263) !== 0)) {
	            this.state = 7730;
	            this.inlineProperty();
	            this.state = 7735;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineProperty() {
	    let localctx = new InlinePropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 948, StarRocksParser.RULE_inlineProperty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7736;
	        localctx.key = this.identifier();
	        this.state = 7737;
	        this.match(StarRocksParser.EQ);
	        this.state = 7738;
	        localctx.value = this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varType() {
	    let localctx = new VarTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 950, StarRocksParser.RULE_varType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7740;
	        _la = this._input.LA(1);
	        if(!(_la===174 || _la===240 || _la===390 || _la===463)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment() {
	    let localctx = new CommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 952, StarRocksParser.RULE_comment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7742;
	        this.match(StarRocksParser.COMMENT);
	        this.state = 7743;
	        this.string();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outfile() {
	    let localctx = new OutfileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 954, StarRocksParser.RULE_outfile);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7745;
	        this.match(StarRocksParser.INTO);
	        this.state = 7746;
	        this.match(StarRocksParser.OUTFILE);
	        this.state = 7747;
	        localctx.file = this.string();
	        this.state = 7749;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===166) {
	            this.state = 7748;
	            this.fileFormat();
	        }

	        this.state = 7752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===327) {
	            this.state = 7751;
	            this.properties();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileFormat() {
	    let localctx = new FileFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 956, StarRocksParser.RULE_fileFormat);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7754;
	        this.match(StarRocksParser.FORMAT);
	        this.state = 7755;
	        this.match(StarRocksParser.AS);
	        this.state = 7758;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 22:
	        case 23:
	        case 25:
	        case 26:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 99:
	        case 100:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 113:
	        case 118:
	        case 119:
	        case 120:
	        case 124:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 143:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 153:
	        case 154:
	        case 156:
	        case 157:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 173:
	        case 174:
	        case 176:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 194:
	        case 197:
	        case 199:
	        case 200:
	        case 202:
	        case 205:
	        case 209:
	        case 210:
	        case 211:
	        case 213:
	        case 217:
	        case 219:
	        case 220:
	        case 226:
	        case 229:
	        case 234:
	        case 235:
	        case 238:
	        case 240:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 256:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 286:
	        case 287:
	        case 288:
	        case 290:
	        case 291:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 339:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 347:
	        case 349:
	        case 350:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 365:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 392:
	        case 394:
	        case 395:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 415:
	        case 416:
	        case 417:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 426:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 437:
	        case 438:
	        case 439:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 448:
	        case 449:
	        case 452:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 486:
	        case 487:
	        case 495:
	        case 521:
	        case 522:
	        case 523:
	        case 529:
	            this.state = 7756;
	            this.identifier();
	            break;
	        case 517:
	        case 518:
	            this.state = 7757;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 958, StarRocksParser.RULE_string);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7760;
	        _la = this._input.LA(1);
	        if(!(_la===517 || _la===518)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binary() {
	    let localctx = new BinaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 960, StarRocksParser.RULE_binary);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7762;
	        _la = this._input.LA(1);
	        if(!(_la===519 || _la===520)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 962, StarRocksParser.RULE_comparisonOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7764;
	        _la = this._input.LA(1);
	        if(!(((((_la - 488)) & ~0x1f) === 0 && ((1 << (_la - 488)) & 127) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanValue() {
	    let localctx = new BooleanValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 964, StarRocksParser.RULE_booleanValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7766;
	        _la = this._input.LA(1);
	        if(!(_la===152 || _la===440)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interval() {
	    let localctx = new IntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 966, StarRocksParser.RULE_interval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7768;
	        this.match(StarRocksParser.INTERVAL);
	        this.state = 7769;
	        localctx.value = this.expression(0);
	        this.state = 7770;
	        localctx.from = this.unitIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	taskInterval() {
	    let localctx = new TaskIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 968, StarRocksParser.RULE_taskInterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7772;
	        this.match(StarRocksParser.INTERVAL);
	        this.state = 7773;
	        localctx.value = this.expression(0);
	        this.state = 7774;
	        localctx.from = this.taskUnitIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	taskUnitIdentifier() {
	    let localctx = new TaskUnitIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 970, StarRocksParser.RULE_taskUnitIdentifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7776;
	        _la = this._input.LA(1);
	        if(!(_la===105 || _la===189 || _la===260 || _la===384)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unitIdentifier() {
	    let localctx = new UnitIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 972, StarRocksParser.RULE_unitIdentifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7778;
	        _la = this._input.LA(1);
	        if(!(_la===105 || _la===189 || ((((_la - 257)) & ~0x1f) === 0 && ((1 << (_la - 257)) & 1035) !== 0) || _la===332 || _la===384 || _la===472 || _la===479)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unitBoundary() {
	    let localctx = new UnitBoundaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 974, StarRocksParser.RULE_unitBoundary);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7780;
	        _la = this._input.LA(1);
	        if(!(_la===62 || _la===160)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type() {
	    let localctx = new TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 976, StarRocksParser.RULE_type);
	    try {
	        this.state = 7787;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 42:
	        case 43:
	        case 44:
	        case 49:
	        case 64:
	        case 103:
	        case 104:
	        case 128:
	        case 159:
	        case 186:
	        case 207:
	        case 208:
	        case 222:
	        case 228:
	        case 305:
	        case 394:
	        case 397:
	        case 408:
	        case 409:
	        case 428:
	        case 433:
	        case 450:
	        case 459:
	        case 460:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7782;
	            this.baseType();
	            break;
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 279:
	        case 280:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7783;
	            this.decimalType();
	            break;
	        case 24:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7784;
	            this.arrayType();
	            break;
	        case 417:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7785;
	            this.structType();
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7786;
	            this.mapType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayType() {
	    let localctx = new ArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 978, StarRocksParser.RULE_arrayType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7789;
	        this.match(StarRocksParser.ARRAY);
	        this.state = 7790;
	        this.match(StarRocksParser.LT);
	        this.state = 7791;
	        this.type();
	        this.state = 7792;
	        this.match(StarRocksParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapType() {
	    let localctx = new MapTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 980, StarRocksParser.RULE_mapType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7794;
	        this.match(StarRocksParser.MAP);
	        this.state = 7795;
	        this.match(StarRocksParser.LT);
	        this.state = 7796;
	        this.type();
	        this.state = 7797;
	        this.match(StarRocksParser.T__2);
	        this.state = 7798;
	        this.type();
	        this.state = 7799;
	        this.match(StarRocksParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subfieldDesc() {
	    let localctx = new SubfieldDescContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 982, StarRocksParser.RULE_subfieldDesc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7803;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,914,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7801;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 7802;
	            this.nestedFieldName();
	            break;

	        }
	        this.state = 7805;
	        this.type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subfieldDescs() {
	    let localctx = new SubfieldDescsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 984, StarRocksParser.RULE_subfieldDescs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7807;
	        this.subfieldDesc();
	        this.state = 7812;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7808;
	            this.match(StarRocksParser.T__2);
	            this.state = 7809;
	            this.subfieldDesc();
	            this.state = 7814;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structType() {
	    let localctx = new StructTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 986, StarRocksParser.RULE_structType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7815;
	        this.match(StarRocksParser.STRUCT);
	        this.state = 7816;
	        this.match(StarRocksParser.LT);
	        this.state = 7817;
	        this.subfieldDescs();
	        this.state = 7818;
	        this.match(StarRocksParser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 988, StarRocksParser.RULE_typeParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7820;
	        this.match(StarRocksParser.T__1);
	        this.state = 7821;
	        this.match(StarRocksParser.INTEGER_VALUE);
	        this.state = 7822;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseType() {
	    let localctx = new BaseTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 990, StarRocksParser.RULE_baseType);
	    var _la = 0;
	    try {
	        this.state = 7892;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,930,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7824;
	            this.match(StarRocksParser.BOOLEAN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7825;
	            this.match(StarRocksParser.TINYINT);
	            this.state = 7827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 7826;
	                this.typeParameter();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7829;
	            this.match(StarRocksParser.SMALLINT);
	            this.state = 7831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 7830;
	                this.typeParameter();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7833;
	            this.match(StarRocksParser.SIGNED);
	            this.state = 7835;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===207) {
	                this.state = 7834;
	                this.match(StarRocksParser.INT);
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7837;
	            this.match(StarRocksParser.SIGNED);
	            this.state = 7839;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===208) {
	                this.state = 7838;
	                this.match(StarRocksParser.INTEGER);
	            }

	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7841;
	            this.match(StarRocksParser.UNSIGNED);
	            this.state = 7843;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===207) {
	                this.state = 7842;
	                this.match(StarRocksParser.INT);
	            }

	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7845;
	            this.match(StarRocksParser.UNSIGNED);
	            this.state = 7847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===208) {
	                this.state = 7846;
	                this.match(StarRocksParser.INTEGER);
	            }

	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7849;
	            this.match(StarRocksParser.INT);
	            this.state = 7851;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 7850;
	                this.typeParameter();
	            }

	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7853;
	            this.match(StarRocksParser.INTEGER);
	            this.state = 7855;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 7854;
	                this.typeParameter();
	            }

	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7857;
	            this.match(StarRocksParser.BIGINT);
	            this.state = 7859;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 7858;
	                this.typeParameter();
	            }

	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 7861;
	            this.match(StarRocksParser.LARGEINT);
	            this.state = 7863;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 7862;
	                this.typeParameter();
	            }

	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 7865;
	            this.match(StarRocksParser.FLOAT);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 7866;
	            this.match(StarRocksParser.DOUBLE);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 7867;
	            this.match(StarRocksParser.DATE);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 7868;
	            this.match(StarRocksParser.DATETIME);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 7869;
	            this.match(StarRocksParser.TIME);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 7870;
	            this.match(StarRocksParser.CHAR);
	            this.state = 7872;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 7871;
	                this.typeParameter();
	            }

	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 7874;
	            this.match(StarRocksParser.VARCHAR);
	            this.state = 7876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 7875;
	                this.typeParameter();
	            }

	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 7878;
	            this.match(StarRocksParser.STRING);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 7879;
	            this.match(StarRocksParser.TEXT);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 7880;
	            this.match(StarRocksParser.BITMAP);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 7881;
	            this.match(StarRocksParser.HLL);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 7882;
	            this.match(StarRocksParser.PERCENTILE);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 7883;
	            this.match(StarRocksParser.JSON);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 7884;
	            this.match(StarRocksParser.VARBINARY);
	            this.state = 7886;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 7885;
	                this.typeParameter();
	            }

	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 7888;
	            this.match(StarRocksParser.BINARY);
	            this.state = 7890;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 7889;
	                this.typeParameter();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalType() {
	    let localctx = new DecimalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 992, StarRocksParser.RULE_decimalType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7894;
	        _la = this._input.LA(1);
	        if(!(((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 31) !== 0) || _la===279 || _la===280)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7902;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 7895;
	            this.match(StarRocksParser.T__1);
	            this.state = 7896;
	            localctx.precision = this.match(StarRocksParser.INTEGER_VALUE);
	            this.state = 7899;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3) {
	                this.state = 7897;
	                this.match(StarRocksParser.T__2);
	                this.state = 7898;
	                localctx.scale = this.match(StarRocksParser.INTEGER_VALUE);
	            }

	            this.state = 7901;
	            this.match(StarRocksParser.T__3);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedName() {
	    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 994, StarRocksParser.RULE_qualifiedName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7904;
	        this.identifier();
	        this.state = 7910;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,934,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7908;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 524:
	                    this.state = 7905;
	                    this.match(StarRocksParser.DOT_IDENTIFIER);
	                    break;
	                case 1:
	                    this.state = 7906;
	                    this.match(StarRocksParser.T__0);
	                    this.state = 7907;
	                    this.identifier();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 7912;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,934,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableName() {
	    let localctx = new TableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 996, StarRocksParser.RULE_tableName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7913;
	        this.qualifiedName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	writeBranch() {
	    let localctx = new WriteBranchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 998, StarRocksParser.RULE_writeBranch);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7916;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===164) {
	            this.state = 7915;
	            this.match(StarRocksParser.FOR);
	        }

	        this.state = 7918;
	        this.match(StarRocksParser.VERSION);
	        this.state = 7919;
	        this.match(StarRocksParser.AS);
	        this.state = 7920;
	        this.match(StarRocksParser.OF);
	        this.state = 7921;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1000, StarRocksParser.RULE_identifier);
	    try {
	        this.state = 7927;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 521:
	            localctx = new UnquotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7923;
	            this.match(StarRocksParser.LETTER_IDENTIFIER);
	            break;
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 22:
	        case 23:
	        case 25:
	        case 26:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 99:
	        case 100:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 113:
	        case 118:
	        case 119:
	        case 120:
	        case 124:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 143:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 153:
	        case 154:
	        case 156:
	        case 157:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 173:
	        case 174:
	        case 176:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 194:
	        case 197:
	        case 199:
	        case 200:
	        case 202:
	        case 205:
	        case 209:
	        case 210:
	        case 211:
	        case 213:
	        case 217:
	        case 219:
	        case 220:
	        case 226:
	        case 229:
	        case 234:
	        case 235:
	        case 238:
	        case 240:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 256:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 286:
	        case 287:
	        case 288:
	        case 290:
	        case 291:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 339:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 347:
	        case 349:
	        case 350:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 365:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 392:
	        case 394:
	        case 395:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 415:
	        case 416:
	        case 417:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 426:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 437:
	        case 438:
	        case 439:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 448:
	        case 449:
	        case 452:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 486:
	        case 487:
	        case 495:
	        case 529:
	            localctx = new UnquotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7924;
	            this.nonReserved();
	            break;
	        case 522:
	            localctx = new DigitIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7925;
	            this.match(StarRocksParser.DIGIT_IDENTIFIER);
	            break;
	        case 523:
	            localctx = new BackQuotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7926;
	            this.match(StarRocksParser.BACKQUOTED_IDENTIFIER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierWithAlias() {
	    let localctx = new IdentifierWithAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1002, StarRocksParser.RULE_identifierWithAlias);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7929;
	        localctx.originalName = this.identifier();
	        this.state = 7932;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===27) {
	            this.state = 7930;
	            this.match(StarRocksParser.AS);
	            this.state = 7931;
	            localctx.alias = this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierWithAliasList() {
	    let localctx = new IdentifierWithAliasListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1004, StarRocksParser.RULE_identifierWithAliasList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7934;
	        this.match(StarRocksParser.T__1);
	        this.state = 7935;
	        this.identifierWithAlias();
	        this.state = 7940;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7936;
	            this.match(StarRocksParser.T__2);
	            this.state = 7937;
	            this.identifierWithAlias();
	            this.state = 7942;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7943;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1006, StarRocksParser.RULE_identifierList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7945;
	        this.match(StarRocksParser.T__1);
	        this.state = 7946;
	        this.identifier();
	        this.state = 7951;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7947;
	            this.match(StarRocksParser.T__2);
	            this.state = 7948;
	            this.identifier();
	            this.state = 7953;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7954;
	        this.match(StarRocksParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierOrString() {
	    let localctx = new IdentifierOrStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1008, StarRocksParser.RULE_identifierOrString);
	    try {
	        this.state = 7958;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 22:
	        case 23:
	        case 25:
	        case 26:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 99:
	        case 100:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 113:
	        case 118:
	        case 119:
	        case 120:
	        case 124:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 143:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 153:
	        case 154:
	        case 156:
	        case 157:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 173:
	        case 174:
	        case 176:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 194:
	        case 197:
	        case 199:
	        case 200:
	        case 202:
	        case 205:
	        case 209:
	        case 210:
	        case 211:
	        case 213:
	        case 217:
	        case 219:
	        case 220:
	        case 226:
	        case 229:
	        case 234:
	        case 235:
	        case 238:
	        case 240:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 256:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 286:
	        case 287:
	        case 288:
	        case 290:
	        case 291:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 339:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 347:
	        case 349:
	        case 350:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 365:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 392:
	        case 394:
	        case 395:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 415:
	        case 416:
	        case 417:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 426:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 437:
	        case 438:
	        case 439:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 448:
	        case 449:
	        case 452:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 486:
	        case 487:
	        case 495:
	        case 521:
	        case 522:
	        case 523:
	        case 529:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7956;
	            this.identifier();
	            break;
	        case 517:
	        case 518:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7957;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierOrStringList() {
	    let localctx = new IdentifierOrStringListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1010, StarRocksParser.RULE_identifierOrStringList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7960;
	        this.identifierOrString();
	        this.state = 7965;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7961;
	            this.match(StarRocksParser.T__2);
	            this.state = 7962;
	            this.identifierOrString();
	            this.state = 7967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierOrStringOrStar() {
	    let localctx = new IdentifierOrStringOrStarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1012, StarRocksParser.RULE_identifierOrStringOrStar);
	    try {
	        this.state = 7971;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 498:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7968;
	            this.match(StarRocksParser.ASTERISK_SYMBOL);
	            break;
	        case 11:
	        case 12:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 22:
	        case 23:
	        case 25:
	        case 26:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 43:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 56:
	        case 57:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 66:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 73:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 86:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 99:
	        case 100:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 113:
	        case 118:
	        case 119:
	        case 120:
	        case 124:
	        case 126:
	        case 127:
	        case 131:
	        case 132:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 143:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 153:
	        case 154:
	        case 156:
	        case 157:
	        case 160:
	        case 161:
	        case 162:
	        case 163:
	        case 166:
	        case 167:
	        case 169:
	        case 170:
	        case 173:
	        case 174:
	        case 176:
	        case 181:
	        case 182:
	        case 184:
	        case 185:
	        case 187:
	        case 188:
	        case 189:
	        case 190:
	        case 191:
	        case 192:
	        case 194:
	        case 197:
	        case 199:
	        case 200:
	        case 202:
	        case 205:
	        case 209:
	        case 210:
	        case 211:
	        case 213:
	        case 217:
	        case 219:
	        case 220:
	        case 226:
	        case 229:
	        case 234:
	        case 235:
	        case 238:
	        case 240:
	        case 243:
	        case 244:
	        case 245:
	        case 246:
	        case 247:
	        case 248:
	        case 249:
	        case 250:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 256:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 286:
	        case 287:
	        case 288:
	        case 290:
	        case 291:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 319:
	        case 320:
	        case 321:
	        case 322:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 339:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 347:
	        case 349:
	        case 350:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 365:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 392:
	        case 394:
	        case 395:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 404:
	        case 405:
	        case 406:
	        case 407:
	        case 408:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 415:
	        case 416:
	        case 417:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 426:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 437:
	        case 438:
	        case 439:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 448:
	        case 449:
	        case 452:
	        case 454:
	        case 455:
	        case 457:
	        case 459:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 475:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 486:
	        case 487:
	        case 495:
	        case 521:
	        case 522:
	        case 523:
	        case 529:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7969;
	            this.identifier();
	            break;
	        case 517:
	        case 518:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7970;
	            this.string();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	user() {
	    let localctx = new UserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1014, StarRocksParser.RULE_user);
	    try {
	        this.state = 7984;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,943,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UserWithoutHostContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7973;
	            this.identifierOrString();
	            break;

	        case 2:
	            localctx = new UserWithHostContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7974;
	            this.identifierOrString();
	            this.state = 7975;
	            this.match(StarRocksParser.AT);
	            this.state = 7976;
	            this.identifierOrString();
	            break;

	        case 3:
	            localctx = new UserWithHostAndBlanketContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7978;
	            this.identifierOrString();
	            this.state = 7979;
	            this.match(StarRocksParser.AT);
	            this.state = 7980;
	            this.match(StarRocksParser.T__5);
	            this.state = 7981;
	            this.identifierOrString();
	            this.state = 7982;
	            this.match(StarRocksParser.T__6);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1016, StarRocksParser.RULE_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7986;
	        this.identifier();
	        this.state = 7987;
	        this.match(StarRocksParser.EQ);
	        this.state = 7988;
	        this.expressionOrDefault();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentList() {
	    let localctx = new AssignmentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1018, StarRocksParser.RULE_assignmentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7990;
	        this.assignment();
	        this.state = 7995;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===3) {
	            this.state = 7991;
	            this.match(StarRocksParser.T__2);
	            this.state = 7992;
	            this.assignment();
	            this.state = 7997;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1020, StarRocksParser.RULE_number);
	    try {
	        this.state = 8001;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 515:
	            localctx = new DecimalValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7998;
	            this.match(StarRocksParser.DECIMAL_VALUE);
	            break;
	        case 516:
	            localctx = new DoubleValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7999;
	            this.match(StarRocksParser.DOUBLE_VALUE);
	            break;
	        case 514:
	            localctx = new IntegerValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8000;
	            this.match(StarRocksParser.INTEGER_VALUE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonReserved() {
	    let localctx = new NonReservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1022, StarRocksParser.RULE_nonReserved);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8003;
	        _la = this._input.LA(1);
	        if(!(((((_la - 11)) & ~0x1f) === 0 && ((1 << (_la - 11)) & 1073535099) !== 0) || ((((_la - 43)) & ~0x1f) === 0 && ((1 << (_la - 43)) & 1587507069) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 4077329375) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 4212799553) !== 0) || ((((_la - 139)) & ~0x1f) === 0 && ((1 << (_la - 139)) & 3655786391) !== 0) || ((((_la - 173)) & ~0x1f) === 0 && ((1 << (_la - 173)) & 758110987) !== 0) || ((((_la - 205)) & ~0x1f) === 0 && ((1 << (_la - 205)) & 1629540721) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 4226154469) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 3761733439) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 4292771831) !== 0) || ((((_la - 334)) & ~0x1f) === 0 && ((1 << (_la - 334)) & 3221071791) !== 0) || ((((_la - 368)) & ~0x1f) === 0 && ((1 << (_la - 368)) & 3447406399) !== 0) || ((((_la - 400)) & ~0x1f) === 0 && ((1 << (_la - 400)) & 4126916095) !== 0) || ((((_la - 432)) & ~0x1f) === 0 && ((1 << (_la - 432)) & 3939712749) !== 0) || ((((_la - 464)) & ~0x1f) === 0 && ((1 << (_la - 464)) & 2162158079) !== 0) || _la===529)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

StarRocksParser.EOF = antlr4.Token.EOF;
StarRocksParser.T__0 = 1;
StarRocksParser.T__1 = 2;
StarRocksParser.T__2 = 3;
StarRocksParser.T__3 = 4;
StarRocksParser.T__4 = 5;
StarRocksParser.T__5 = 6;
StarRocksParser.T__6 = 7;
StarRocksParser.T__7 = 8;
StarRocksParser.T__8 = 9;
StarRocksParser.T__9 = 10;
StarRocksParser.ACCESS = 11;
StarRocksParser.ACTIVE = 12;
StarRocksParser.ADD = 13;
StarRocksParser.ADMIN = 14;
StarRocksParser.ADVISOR = 15;
StarRocksParser.AFTER = 16;
StarRocksParser.AGGREGATE = 17;
StarRocksParser.ALL = 18;
StarRocksParser.ALTER = 19;
StarRocksParser.ANALYZE = 20;
StarRocksParser.AND = 21;
StarRocksParser.ANTI = 22;
StarRocksParser.APPLY = 23;
StarRocksParser.ARRAY = 24;
StarRocksParser.ARRAY_AGG = 25;
StarRocksParser.ARRAY_AGG_DISTINCT = 26;
StarRocksParser.AS = 27;
StarRocksParser.ASC = 28;
StarRocksParser.ASYNC = 29;
StarRocksParser.AUTHORS = 30;
StarRocksParser.AUTHENTICATION = 31;
StarRocksParser.AUTOMATED = 32;
StarRocksParser.AUTO_INCREMENT = 33;
StarRocksParser.AVG = 34;
StarRocksParser.BACKEND = 35;
StarRocksParser.BACKENDS = 36;
StarRocksParser.BACKUP = 37;
StarRocksParser.BASE = 38;
StarRocksParser.BASELINE = 39;
StarRocksParser.BEGIN = 40;
StarRocksParser.BETWEEN = 41;
StarRocksParser.BIGINT = 42;
StarRocksParser.BINARY = 43;
StarRocksParser.BITMAP = 44;
StarRocksParser.BITMAP_UNION = 45;
StarRocksParser.BLACKHOLE = 46;
StarRocksParser.BLACKLIST = 47;
StarRocksParser.BODY = 48;
StarRocksParser.BOOLEAN = 49;
StarRocksParser.BOTH = 50;
StarRocksParser.BRANCH = 51;
StarRocksParser.BROKER = 52;
StarRocksParser.BUCKETS = 53;
StarRocksParser.BUILTIN = 54;
StarRocksParser.BY = 55;
StarRocksParser.CACHE = 56;
StarRocksParser.CANCEL = 57;
StarRocksParser.CASE = 58;
StarRocksParser.CAST = 59;
StarRocksParser.CATALOG = 60;
StarRocksParser.CATALOGS = 61;
StarRocksParser.CEIL = 62;
StarRocksParser.CHAIN = 63;
StarRocksParser.CHAR = 64;
StarRocksParser.CHARACTER = 65;
StarRocksParser.CHARSET = 66;
StarRocksParser.CHECK = 67;
StarRocksParser.CLEAN = 68;
StarRocksParser.CLEAR = 69;
StarRocksParser.CLUSTER = 70;
StarRocksParser.CLUSTERS = 71;
StarRocksParser.COLLATE = 72;
StarRocksParser.COLLATION = 73;
StarRocksParser.COLUMN = 74;
StarRocksParser.COLUMNS = 75;
StarRocksParser.COMMENT = 76;
StarRocksParser.COMMIT = 77;
StarRocksParser.COMMITTED = 78;
StarRocksParser.COMPACT = 79;
StarRocksParser.COMPACTION = 80;
StarRocksParser.COMPUTE = 81;
StarRocksParser.CONFIG = 82;
StarRocksParser.CONNECTION = 83;
StarRocksParser.CONSISTENT = 84;
StarRocksParser.CONVERT = 85;
StarRocksParser.COSTS = 86;
StarRocksParser.COUNT = 87;
StarRocksParser.CREATE = 88;
StarRocksParser.CROSS = 89;
StarRocksParser.CUBE = 90;
StarRocksParser.CUME_DIST = 91;
StarRocksParser.CUMULATIVE = 92;
StarRocksParser.CURRENT = 93;
StarRocksParser.CURRENT_DATE = 94;
StarRocksParser.CURRENT_ROLE = 95;
StarRocksParser.CURRENT_TIME = 96;
StarRocksParser.CURRENT_TIMESTAMP = 97;
StarRocksParser.CURRENT_USER = 98;
StarRocksParser.DATA = 99;
StarRocksParser.DATACACHE = 100;
StarRocksParser.DATABASE = 101;
StarRocksParser.DATABASES = 102;
StarRocksParser.DATE = 103;
StarRocksParser.DATETIME = 104;
StarRocksParser.DAY = 105;
StarRocksParser.DAYS = 106;
StarRocksParser.DEALLOCATE = 107;
StarRocksParser.DECIMAL = 108;
StarRocksParser.DECIMALV2 = 109;
StarRocksParser.DECIMAL32 = 110;
StarRocksParser.DECIMAL64 = 111;
StarRocksParser.DECIMAL128 = 112;
StarRocksParser.DECOMMISSION = 113;
StarRocksParser.DEFAULT = 114;
StarRocksParser.DELETE = 115;
StarRocksParser.DENSE_RANK = 116;
StarRocksParser.DEFERRED = 117;
StarRocksParser.DIALECT = 118;
StarRocksParser.DICTIONARY = 119;
StarRocksParser.DICTIONARY_GET = 120;
StarRocksParser.NTILE = 121;
StarRocksParser.DESC = 122;
StarRocksParser.DESCRIBE = 123;
StarRocksParser.DISABLE = 124;
StarRocksParser.DISTINCT = 125;
StarRocksParser.DISTRIBUTED = 126;
StarRocksParser.DISTRIBUTION = 127;
StarRocksParser.DOUBLE = 128;
StarRocksParser.DROP = 129;
StarRocksParser.DUAL = 130;
StarRocksParser.DUPLICATE = 131;
StarRocksParser.DYNAMIC = 132;
StarRocksParser.ELSE = 133;
StarRocksParser.ENABLE = 134;
StarRocksParser.ENCLOSE = 135;
StarRocksParser.END = 136;
StarRocksParser.ENGINE = 137;
StarRocksParser.ENGINES = 138;
StarRocksParser.ERRORS = 139;
StarRocksParser.ESCAPE = 140;
StarRocksParser.EVENTS = 141;
StarRocksParser.EXCEPT = 142;
StarRocksParser.EXECUTE = 143;
StarRocksParser.EXISTS = 144;
StarRocksParser.EXPLAIN = 145;
StarRocksParser.EXPORT = 146;
StarRocksParser.EXTERNAL = 147;
StarRocksParser.EXTRACT = 148;
StarRocksParser.EVERY = 149;
StarRocksParser.FAILPOINT = 150;
StarRocksParser.FAILPOINTS = 151;
StarRocksParser.FALSE = 152;
StarRocksParser.FIELDS = 153;
StarRocksParser.FILE = 154;
StarRocksParser.FILES = 155;
StarRocksParser.FILTER = 156;
StarRocksParser.FIRST = 157;
StarRocksParser.FIRST_VALUE = 158;
StarRocksParser.FLOAT = 159;
StarRocksParser.FLOOR = 160;
StarRocksParser.FN = 161;
StarRocksParser.FOLLOWING = 162;
StarRocksParser.FOLLOWER = 163;
StarRocksParser.FOR = 164;
StarRocksParser.FORCE = 165;
StarRocksParser.FORMAT = 166;
StarRocksParser.FREE = 167;
StarRocksParser.FROM = 168;
StarRocksParser.FRONTEND = 169;
StarRocksParser.FRONTENDS = 170;
StarRocksParser.FULL = 171;
StarRocksParser.FUNCTION = 172;
StarRocksParser.FUNCTIONS = 173;
StarRocksParser.GLOBAL = 174;
StarRocksParser.GRANT = 175;
StarRocksParser.GRANTS = 176;
StarRocksParser.GROUP = 177;
StarRocksParser.GROUPS = 178;
StarRocksParser.GROUPING = 179;
StarRocksParser.GROUPING_ID = 180;
StarRocksParser.GROUP_CONCAT = 181;
StarRocksParser.HASH = 182;
StarRocksParser.HAVING = 183;
StarRocksParser.HELP = 184;
StarRocksParser.HISTOGRAM = 185;
StarRocksParser.HLL = 186;
StarRocksParser.HLL_UNION = 187;
StarRocksParser.HOST = 188;
StarRocksParser.HOUR = 189;
StarRocksParser.HOURS = 190;
StarRocksParser.HUB = 191;
StarRocksParser.IDENTIFIED = 192;
StarRocksParser.IF = 193;
StarRocksParser.IMPERSONATE = 194;
StarRocksParser.IMMEDIATE = 195;
StarRocksParser.IGNORE = 196;
StarRocksParser.IMAGE = 197;
StarRocksParser.IN = 198;
StarRocksParser.INACTIVE = 199;
StarRocksParser.INCREMENTAL = 200;
StarRocksParser.INDEX = 201;
StarRocksParser.INDEXES = 202;
StarRocksParser.INFILE = 203;
StarRocksParser.INNER = 204;
StarRocksParser.INSTALL = 205;
StarRocksParser.INSERT = 206;
StarRocksParser.INT = 207;
StarRocksParser.INTEGER = 208;
StarRocksParser.INTEGRATION = 209;
StarRocksParser.INTEGRATIONS = 210;
StarRocksParser.INTERMEDIATE = 211;
StarRocksParser.INTERSECT = 212;
StarRocksParser.INTERVAL = 213;
StarRocksParser.INTO = 214;
StarRocksParser.INVOKER = 215;
StarRocksParser.GIN = 216;
StarRocksParser.OVERWRITE = 217;
StarRocksParser.IS = 218;
StarRocksParser.ISOLATION = 219;
StarRocksParser.JOB = 220;
StarRocksParser.JOIN = 221;
StarRocksParser.JSON = 222;
StarRocksParser.KEY = 223;
StarRocksParser.KEYS = 224;
StarRocksParser.KILL = 225;
StarRocksParser.LABEL = 226;
StarRocksParser.LAG = 227;
StarRocksParser.LARGEINT = 228;
StarRocksParser.LAST = 229;
StarRocksParser.LAST_VALUE = 230;
StarRocksParser.LATERAL = 231;
StarRocksParser.LEAD = 232;
StarRocksParser.LEFT = 233;
StarRocksParser.LESS = 234;
StarRocksParser.LEVEL = 235;
StarRocksParser.LIKE = 236;
StarRocksParser.LIMIT = 237;
StarRocksParser.LIST = 238;
StarRocksParser.LOAD = 239;
StarRocksParser.LOCAL = 240;
StarRocksParser.LOCALTIME = 241;
StarRocksParser.LOCALTIMESTAMP = 242;
StarRocksParser.LOCATION = 243;
StarRocksParser.LOCATIONS = 244;
StarRocksParser.LOGS = 245;
StarRocksParser.LOGICAL = 246;
StarRocksParser.MANUAL = 247;
StarRocksParser.MAP = 248;
StarRocksParser.MAPPING = 249;
StarRocksParser.MAPPINGS = 250;
StarRocksParser.MASKING = 251;
StarRocksParser.MATCH = 252;
StarRocksParser.MATERIALIZED = 253;
StarRocksParser.MAX = 254;
StarRocksParser.MAXVALUE = 255;
StarRocksParser.MERGE = 256;
StarRocksParser.MICROSECOND = 257;
StarRocksParser.MILLISECOND = 258;
StarRocksParser.MIN = 259;
StarRocksParser.MINUTE = 260;
StarRocksParser.MINUTES = 261;
StarRocksParser.MINUS = 262;
StarRocksParser.META = 263;
StarRocksParser.MOD = 264;
StarRocksParser.MODE = 265;
StarRocksParser.MODIFY = 266;
StarRocksParser.MONTH = 267;
StarRocksParser.NAME = 268;
StarRocksParser.NAMES = 269;
StarRocksParser.NEGATIVE = 270;
StarRocksParser.NGRAMBF = 271;
StarRocksParser.NO = 272;
StarRocksParser.NODE = 273;
StarRocksParser.NODES = 274;
StarRocksParser.NONE = 275;
StarRocksParser.NOT = 276;
StarRocksParser.NULL = 277;
StarRocksParser.NULLS = 278;
StarRocksParser.NUMBER = 279;
StarRocksParser.NUMERIC = 280;
StarRocksParser.OBSERVER = 281;
StarRocksParser.OF = 282;
StarRocksParser.OFF = 283;
StarRocksParser.OFFSET = 284;
StarRocksParser.ON = 285;
StarRocksParser.ONLY = 286;
StarRocksParser.OPEN = 287;
StarRocksParser.OPERATE = 288;
StarRocksParser.OPTIMIZE = 289;
StarRocksParser.OPTIMIZER = 290;
StarRocksParser.OPTION = 291;
StarRocksParser.OR = 292;
StarRocksParser.ORDER = 293;
StarRocksParser.OUTER = 294;
StarRocksParser.OUTFILE = 295;
StarRocksParser.OVER = 296;
StarRocksParser.PARAMETER = 297;
StarRocksParser.PARTITION = 298;
StarRocksParser.PARTITIONS = 299;
StarRocksParser.PASSWORD = 300;
StarRocksParser.PATH = 301;
StarRocksParser.PAUSE = 302;
StarRocksParser.PENDING = 303;
StarRocksParser.PERCENT_RANK = 304;
StarRocksParser.PERCENTILE = 305;
StarRocksParser.PERCENTILE_UNION = 306;
StarRocksParser.PLAN = 307;
StarRocksParser.PLUGIN = 308;
StarRocksParser.PLUGINS = 309;
StarRocksParser.PIPE = 310;
StarRocksParser.PIPES = 311;
StarRocksParser.PIVOT = 312;
StarRocksParser.POLICY = 313;
StarRocksParser.POLICIES = 314;
StarRocksParser.PRECEDING = 315;
StarRocksParser.PREDICATE = 316;
StarRocksParser.PREPARE = 317;
StarRocksParser.PRIMARY = 318;
StarRocksParser.PRIORITY = 319;
StarRocksParser.PRIVILEGES = 320;
StarRocksParser.PROBABILITY = 321;
StarRocksParser.PROC = 322;
StarRocksParser.PROCEDURE = 323;
StarRocksParser.PROCESSLIST = 324;
StarRocksParser.PROFILE = 325;
StarRocksParser.PROFILELIST = 326;
StarRocksParser.PROPERTIES = 327;
StarRocksParser.PROPERTY = 328;
StarRocksParser.PROVIDER = 329;
StarRocksParser.PROVIDERS = 330;
StarRocksParser.QUALIFY = 331;
StarRocksParser.QUARTER = 332;
StarRocksParser.QUERY = 333;
StarRocksParser.QUERIES = 334;
StarRocksParser.QUEUE = 335;
StarRocksParser.QUOTA = 336;
StarRocksParser.RANDOM = 337;
StarRocksParser.RANGE = 338;
StarRocksParser.RANK = 339;
StarRocksParser.READ = 340;
StarRocksParser.REASON = 341;
StarRocksParser.RECOVER = 342;
StarRocksParser.REFRESH = 343;
StarRocksParser.REWRITE = 344;
StarRocksParser.REGEXP = 345;
StarRocksParser.RELEASE = 346;
StarRocksParser.REMOVE = 347;
StarRocksParser.RENAME = 348;
StarRocksParser.REPAIR = 349;
StarRocksParser.REPEATABLE = 350;
StarRocksParser.REPLACE = 351;
StarRocksParser.REPLACE_IF_NOT_NULL = 352;
StarRocksParser.REPLICA = 353;
StarRocksParser.REPOSITORY = 354;
StarRocksParser.REPOSITORIES = 355;
StarRocksParser.RESOURCE = 356;
StarRocksParser.RESOURCES = 357;
StarRocksParser.RESTORE = 358;
StarRocksParser.RESUME = 359;
StarRocksParser.RETAIN = 360;
StarRocksParser.RETENTION = 361;
StarRocksParser.RETURNS = 362;
StarRocksParser.RETRY = 363;
StarRocksParser.REVOKE = 364;
StarRocksParser.REVERT = 365;
StarRocksParser.RIGHT = 366;
StarRocksParser.RLIKE = 367;
StarRocksParser.ROLE = 368;
StarRocksParser.ROLES = 369;
StarRocksParser.ROLLBACK = 370;
StarRocksParser.ROLLUP = 371;
StarRocksParser.ROUTINE = 372;
StarRocksParser.ROW = 373;
StarRocksParser.ROWS = 374;
StarRocksParser.ROW_NUMBER = 375;
StarRocksParser.RULE = 376;
StarRocksParser.RULES = 377;
StarRocksParser.RUNNING = 378;
StarRocksParser.SAMPLE = 379;
StarRocksParser.SCHEDULE = 380;
StarRocksParser.SCHEDULER = 381;
StarRocksParser.SCHEMA = 382;
StarRocksParser.SCHEMAS = 383;
StarRocksParser.SECOND = 384;
StarRocksParser.SECURITY = 385;
StarRocksParser.SELECT = 386;
StarRocksParser.SEMI = 387;
StarRocksParser.SEPARATOR = 388;
StarRocksParser.SERIALIZABLE = 389;
StarRocksParser.SESSION = 390;
StarRocksParser.SET = 391;
StarRocksParser.SETS = 392;
StarRocksParser.SET_VAR = 393;
StarRocksParser.SIGNED = 394;
StarRocksParser.SKIP_HEADER = 395;
StarRocksParser.SHOW = 396;
StarRocksParser.SMALLINT = 397;
StarRocksParser.SNAPSHOT = 398;
StarRocksParser.SNAPSHOTS = 399;
StarRocksParser.SQLBLACKLIST = 400;
StarRocksParser.STARROCKS = 401;
StarRocksParser.START = 402;
StarRocksParser.STATS = 403;
StarRocksParser.STATUS = 404;
StarRocksParser.STOP = 405;
StarRocksParser.STORAGE = 406;
StarRocksParser.STREAM = 407;
StarRocksParser.STRING = 408;
StarRocksParser.TEXT = 409;
StarRocksParser.SUBMIT = 410;
StarRocksParser.SUM = 411;
StarRocksParser.SUSPEND = 412;
StarRocksParser.SYNC = 413;
StarRocksParser.SYSTEM = 414;
StarRocksParser.SYSTEM_TIME = 415;
StarRocksParser.SWAP = 416;
StarRocksParser.STRUCT = 417;
StarRocksParser.TABLE = 418;
StarRocksParser.TABLES = 419;
StarRocksParser.TABLET = 420;
StarRocksParser.TABLETS = 421;
StarRocksParser.TAG = 422;
StarRocksParser.TASK = 423;
StarRocksParser.TEMPORARY = 424;
StarRocksParser.TERMINATED = 425;
StarRocksParser.THAN = 426;
StarRocksParser.THEN = 427;
StarRocksParser.TIME = 428;
StarRocksParser.TIMES = 429;
StarRocksParser.TIMESTAMP = 430;
StarRocksParser.TIMESTAMPADD = 431;
StarRocksParser.TIMESTAMPDIFF = 432;
StarRocksParser.TINYINT = 433;
StarRocksParser.TRANSACTION = 434;
StarRocksParser.TRANSLATE = 435;
StarRocksParser.TO = 436;
StarRocksParser.TRACE = 437;
StarRocksParser.TRIGGERS = 438;
StarRocksParser.TRIM_SPACE = 439;
StarRocksParser.TRUE = 440;
StarRocksParser.TRUNCATE = 441;
StarRocksParser.TYPE = 442;
StarRocksParser.TYPES = 443;
StarRocksParser.UNBOUNDED = 444;
StarRocksParser.UNCOMMITTED = 445;
StarRocksParser.UNION = 446;
StarRocksParser.UNIQUE = 447;
StarRocksParser.UNINSTALL = 448;
StarRocksParser.UNSET = 449;
StarRocksParser.UNSIGNED = 450;
StarRocksParser.UPDATE = 451;
StarRocksParser.USAGE = 452;
StarRocksParser.USE = 453;
StarRocksParser.USER = 454;
StarRocksParser.USERS = 455;
StarRocksParser.USING = 456;
StarRocksParser.VALUE = 457;
StarRocksParser.VALUES = 458;
StarRocksParser.VARBINARY = 459;
StarRocksParser.VARCHAR = 460;
StarRocksParser.VARIABLES = 461;
StarRocksParser.VECTOR = 462;
StarRocksParser.VERBOSE = 463;
StarRocksParser.VERSION = 464;
StarRocksParser.VIEW = 465;
StarRocksParser.VIEWS = 466;
StarRocksParser.VOLUME = 467;
StarRocksParser.VOLUMES = 468;
StarRocksParser.WAREHOUSE = 469;
StarRocksParser.WAREHOUSES = 470;
StarRocksParser.WARNINGS = 471;
StarRocksParser.WEEK = 472;
StarRocksParser.WHEN = 473;
StarRocksParser.WHERE = 474;
StarRocksParser.WHITELIST = 475;
StarRocksParser.WITH = 476;
StarRocksParser.WORK = 477;
StarRocksParser.WRITE = 478;
StarRocksParser.YEAR = 479;
StarRocksParser.LOCK = 480;
StarRocksParser.UNLOCK = 481;
StarRocksParser.LOW_PRIORITY = 482;
StarRocksParser.DISK = 483;
StarRocksParser.BEFORE = 484;
StarRocksParser.DOUBLE_DOLLAR = 485;
StarRocksParser.FIELD = 486;
StarRocksParser.PERSISTENT = 487;
StarRocksParser.EQ = 488;
StarRocksParser.NEQ = 489;
StarRocksParser.LT = 490;
StarRocksParser.LTE = 491;
StarRocksParser.GT = 492;
StarRocksParser.GTE = 493;
StarRocksParser.EQ_FOR_NULL = 494;
StarRocksParser.ARRAY_ELEMENT = 495;
StarRocksParser.PLUS_SYMBOL = 496;
StarRocksParser.MINUS_SYMBOL = 497;
StarRocksParser.ASTERISK_SYMBOL = 498;
StarRocksParser.SLASH_SYMBOL = 499;
StarRocksParser.PERCENT_SYMBOL = 500;
StarRocksParser.LOGICAL_OR = 501;
StarRocksParser.LOGICAL_AND = 502;
StarRocksParser.LOGICAL_NOT = 503;
StarRocksParser.INT_DIV = 504;
StarRocksParser.BITAND = 505;
StarRocksParser.BITOR = 506;
StarRocksParser.BITXOR = 507;
StarRocksParser.BITNOT = 508;
StarRocksParser.BIT_SHIFT_LEFT = 509;
StarRocksParser.BIT_SHIFT_RIGHT = 510;
StarRocksParser.BIT_SHIFT_RIGHT_LOGICAL = 511;
StarRocksParser.ARROW = 512;
StarRocksParser.AT = 513;
StarRocksParser.INTEGER_VALUE = 514;
StarRocksParser.DECIMAL_VALUE = 515;
StarRocksParser.DOUBLE_VALUE = 516;
StarRocksParser.SINGLE_QUOTED_TEXT = 517;
StarRocksParser.DOUBLE_QUOTED_TEXT = 518;
StarRocksParser.BINARY_SINGLE_QUOTED_TEXT = 519;
StarRocksParser.BINARY_DOUBLE_QUOTED_TEXT = 520;
StarRocksParser.LETTER_IDENTIFIER = 521;
StarRocksParser.DIGIT_IDENTIFIER = 522;
StarRocksParser.BACKQUOTED_IDENTIFIER = 523;
StarRocksParser.DOT_IDENTIFIER = 524;
StarRocksParser.SIMPLE_COMMENT = 525;
StarRocksParser.BRACKETED_COMMENT = 526;
StarRocksParser.OPTIMIZER_HINT = 527;
StarRocksParser.SEMICOLON = 528;
StarRocksParser.DOTDOTDOT = 529;
StarRocksParser.WS = 530;
StarRocksParser.ATTACHMENT = 531;
StarRocksParser.CONCAT = 532;

StarRocksParser.RULE_sqlStatements = 0;
StarRocksParser.RULE_singleStatement = 1;
StarRocksParser.RULE_emptyStatement = 2;
StarRocksParser.RULE_statement = 3;
StarRocksParser.RULE_useDatabaseStatement = 4;
StarRocksParser.RULE_useCatalogStatement = 5;
StarRocksParser.RULE_setCatalogStatement = 6;
StarRocksParser.RULE_showDatabasesStatement = 7;
StarRocksParser.RULE_alterDbQuotaStatement = 8;
StarRocksParser.RULE_createDbStatement = 9;
StarRocksParser.RULE_dropDbStatement = 10;
StarRocksParser.RULE_showCreateDbStatement = 11;
StarRocksParser.RULE_alterDatabaseRenameStatement = 12;
StarRocksParser.RULE_recoverDbStmt = 13;
StarRocksParser.RULE_showDataStmt = 14;
StarRocksParser.RULE_createTableStatement = 15;
StarRocksParser.RULE_columnDesc = 16;
StarRocksParser.RULE_charsetName = 17;
StarRocksParser.RULE_defaultDesc = 18;
StarRocksParser.RULE_generatedColumnDesc = 19;
StarRocksParser.RULE_indexDesc = 20;
StarRocksParser.RULE_engineDesc = 21;
StarRocksParser.RULE_charsetDesc = 22;
StarRocksParser.RULE_collateDesc = 23;
StarRocksParser.RULE_keyDesc = 24;
StarRocksParser.RULE_orderByDesc = 25;
StarRocksParser.RULE_columnNullable = 26;
StarRocksParser.RULE_typeWithNullable = 27;
StarRocksParser.RULE_aggStateDesc = 28;
StarRocksParser.RULE_aggDesc = 29;
StarRocksParser.RULE_rollupDesc = 30;
StarRocksParser.RULE_rollupItem = 31;
StarRocksParser.RULE_dupKeys = 32;
StarRocksParser.RULE_fromRollup = 33;
StarRocksParser.RULE_orReplace = 34;
StarRocksParser.RULE_ifNotExists = 35;
StarRocksParser.RULE_createTableAsSelectStatement = 36;
StarRocksParser.RULE_dropTableStatement = 37;
StarRocksParser.RULE_cleanTemporaryTableStatement = 38;
StarRocksParser.RULE_alterTableStatement = 39;
StarRocksParser.RULE_createIndexStatement = 40;
StarRocksParser.RULE_dropIndexStatement = 41;
StarRocksParser.RULE_indexType = 42;
StarRocksParser.RULE_showTableStatement = 43;
StarRocksParser.RULE_showTemporaryTablesStatement = 44;
StarRocksParser.RULE_showCreateTableStatement = 45;
StarRocksParser.RULE_showColumnStatement = 46;
StarRocksParser.RULE_showTableStatusStatement = 47;
StarRocksParser.RULE_refreshTableStatement = 48;
StarRocksParser.RULE_showAlterStatement = 49;
StarRocksParser.RULE_descTableStatement = 50;
StarRocksParser.RULE_createTableLikeStatement = 51;
StarRocksParser.RULE_showIndexStatement = 52;
StarRocksParser.RULE_recoverTableStatement = 53;
StarRocksParser.RULE_truncateTableStatement = 54;
StarRocksParser.RULE_cancelAlterTableStatement = 55;
StarRocksParser.RULE_showPartitionsStatement = 56;
StarRocksParser.RULE_recoverPartitionStatement = 57;
StarRocksParser.RULE_createViewStatement = 58;
StarRocksParser.RULE_alterViewStatement = 59;
StarRocksParser.RULE_dropViewStatement = 60;
StarRocksParser.RULE_columnNameWithComment = 61;
StarRocksParser.RULE_submitTaskStatement = 62;
StarRocksParser.RULE_taskClause = 63;
StarRocksParser.RULE_dropTaskStatement = 64;
StarRocksParser.RULE_taskScheduleDesc = 65;
StarRocksParser.RULE_createMaterializedViewStatement = 66;
StarRocksParser.RULE_mvPartitionExprs = 67;
StarRocksParser.RULE_materializedViewDesc = 68;
StarRocksParser.RULE_showMaterializedViewsStatement = 69;
StarRocksParser.RULE_dropMaterializedViewStatement = 70;
StarRocksParser.RULE_alterMaterializedViewStatement = 71;
StarRocksParser.RULE_refreshMaterializedViewStatement = 72;
StarRocksParser.RULE_cancelRefreshMaterializedViewStatement = 73;
StarRocksParser.RULE_adminSetConfigStatement = 74;
StarRocksParser.RULE_adminSetReplicaStatusStatement = 75;
StarRocksParser.RULE_adminShowConfigStatement = 76;
StarRocksParser.RULE_adminShowReplicaDistributionStatement = 77;
StarRocksParser.RULE_adminShowReplicaStatusStatement = 78;
StarRocksParser.RULE_adminRepairTableStatement = 79;
StarRocksParser.RULE_adminCancelRepairTableStatement = 80;
StarRocksParser.RULE_adminCheckTabletsStatement = 81;
StarRocksParser.RULE_adminSetPartitionVersion = 82;
StarRocksParser.RULE_killStatement = 83;
StarRocksParser.RULE_syncStatement = 84;
StarRocksParser.RULE_adminSetAutomatedSnapshotOnStatement = 85;
StarRocksParser.RULE_adminSetAutomatedSnapshotOffStatement = 86;
StarRocksParser.RULE_alterSystemStatement = 87;
StarRocksParser.RULE_cancelAlterSystemStatement = 88;
StarRocksParser.RULE_showComputeNodesStatement = 89;
StarRocksParser.RULE_createExternalCatalogStatement = 90;
StarRocksParser.RULE_showCreateExternalCatalogStatement = 91;
StarRocksParser.RULE_dropExternalCatalogStatement = 92;
StarRocksParser.RULE_showCatalogsStatement = 93;
StarRocksParser.RULE_alterCatalogStatement = 94;
StarRocksParser.RULE_createStorageVolumeStatement = 95;
StarRocksParser.RULE_typeDesc = 96;
StarRocksParser.RULE_locationsDesc = 97;
StarRocksParser.RULE_showStorageVolumesStatement = 98;
StarRocksParser.RULE_dropStorageVolumeStatement = 99;
StarRocksParser.RULE_alterStorageVolumeStatement = 100;
StarRocksParser.RULE_alterStorageVolumeClause = 101;
StarRocksParser.RULE_modifyStorageVolumePropertiesClause = 102;
StarRocksParser.RULE_modifyStorageVolumeCommentClause = 103;
StarRocksParser.RULE_descStorageVolumeStatement = 104;
StarRocksParser.RULE_setDefaultStorageVolumeStatement = 105;
StarRocksParser.RULE_updateFailPointStatusStatement = 106;
StarRocksParser.RULE_showFailPointStatement = 107;
StarRocksParser.RULE_createDictionaryStatement = 108;
StarRocksParser.RULE_dropDictionaryStatement = 109;
StarRocksParser.RULE_refreshDictionaryStatement = 110;
StarRocksParser.RULE_showDictionaryStatement = 111;
StarRocksParser.RULE_cancelRefreshDictionaryStatement = 112;
StarRocksParser.RULE_dictionaryColumnDesc = 113;
StarRocksParser.RULE_dictionaryName = 114;
StarRocksParser.RULE_alterClause = 115;
StarRocksParser.RULE_addFrontendClause = 116;
StarRocksParser.RULE_dropFrontendClause = 117;
StarRocksParser.RULE_modifyFrontendHostClause = 118;
StarRocksParser.RULE_addBackendClause = 119;
StarRocksParser.RULE_dropBackendClause = 120;
StarRocksParser.RULE_decommissionBackendClause = 121;
StarRocksParser.RULE_modifyBackendClause = 122;
StarRocksParser.RULE_addComputeNodeClause = 123;
StarRocksParser.RULE_dropComputeNodeClause = 124;
StarRocksParser.RULE_modifyBrokerClause = 125;
StarRocksParser.RULE_alterLoadErrorUrlClause = 126;
StarRocksParser.RULE_createImageClause = 127;
StarRocksParser.RULE_cleanTabletSchedQClause = 128;
StarRocksParser.RULE_decommissionDiskClause = 129;
StarRocksParser.RULE_cancelDecommissionDiskClause = 130;
StarRocksParser.RULE_disableDiskClause = 131;
StarRocksParser.RULE_cancelDisableDiskClause = 132;
StarRocksParser.RULE_createIndexClause = 133;
StarRocksParser.RULE_dropIndexClause = 134;
StarRocksParser.RULE_tableRenameClause = 135;
StarRocksParser.RULE_swapTableClause = 136;
StarRocksParser.RULE_modifyPropertiesClause = 137;
StarRocksParser.RULE_modifyCommentClause = 138;
StarRocksParser.RULE_optimizeClause = 139;
StarRocksParser.RULE_addColumnClause = 140;
StarRocksParser.RULE_addColumnsClause = 141;
StarRocksParser.RULE_dropColumnClause = 142;
StarRocksParser.RULE_modifyColumnClause = 143;
StarRocksParser.RULE_columnRenameClause = 144;
StarRocksParser.RULE_reorderColumnsClause = 145;
StarRocksParser.RULE_rollupRenameClause = 146;
StarRocksParser.RULE_compactionClause = 147;
StarRocksParser.RULE_subfieldName = 148;
StarRocksParser.RULE_nestedFieldName = 149;
StarRocksParser.RULE_addFieldClause = 150;
StarRocksParser.RULE_dropFieldClause = 151;
StarRocksParser.RULE_createOrReplaceTagClause = 152;
StarRocksParser.RULE_createOrReplaceBranchClause = 153;
StarRocksParser.RULE_dropBranchClause = 154;
StarRocksParser.RULE_dropTagClause = 155;
StarRocksParser.RULE_tableOperationClause = 156;
StarRocksParser.RULE_tagOptions = 157;
StarRocksParser.RULE_branchOptions = 158;
StarRocksParser.RULE_snapshotRetention = 159;
StarRocksParser.RULE_refRetain = 160;
StarRocksParser.RULE_maxSnapshotAge = 161;
StarRocksParser.RULE_minSnapshotsToKeep = 162;
StarRocksParser.RULE_snapshotId = 163;
StarRocksParser.RULE_timeUnit = 164;
StarRocksParser.RULE_integer_list = 165;
StarRocksParser.RULE_dropPersistentIndexClause = 166;
StarRocksParser.RULE_addPartitionClause = 167;
StarRocksParser.RULE_dropPartitionClause = 168;
StarRocksParser.RULE_truncatePartitionClause = 169;
StarRocksParser.RULE_modifyPartitionClause = 170;
StarRocksParser.RULE_replacePartitionClause = 171;
StarRocksParser.RULE_partitionRenameClause = 172;
StarRocksParser.RULE_insertStatement = 173;
StarRocksParser.RULE_insertLabelOrColumnAliases = 174;
StarRocksParser.RULE_columnAliasesOrByName = 175;
StarRocksParser.RULE_updateStatement = 176;
StarRocksParser.RULE_deleteStatement = 177;
StarRocksParser.RULE_createRoutineLoadStatement = 178;
StarRocksParser.RULE_alterRoutineLoadStatement = 179;
StarRocksParser.RULE_dataSource = 180;
StarRocksParser.RULE_loadProperties = 181;
StarRocksParser.RULE_colSeparatorProperty = 182;
StarRocksParser.RULE_rowDelimiterProperty = 183;
StarRocksParser.RULE_importColumns = 184;
StarRocksParser.RULE_columnProperties = 185;
StarRocksParser.RULE_jobProperties = 186;
StarRocksParser.RULE_dataSourceProperties = 187;
StarRocksParser.RULE_stopRoutineLoadStatement = 188;
StarRocksParser.RULE_resumeRoutineLoadStatement = 189;
StarRocksParser.RULE_pauseRoutineLoadStatement = 190;
StarRocksParser.RULE_showRoutineLoadStatement = 191;
StarRocksParser.RULE_showRoutineLoadTaskStatement = 192;
StarRocksParser.RULE_showCreateRoutineLoadStatement = 193;
StarRocksParser.RULE_showStreamLoadStatement = 194;
StarRocksParser.RULE_analyzeStatement = 195;
StarRocksParser.RULE_analyzeColumnClause = 196;
StarRocksParser.RULE_dropStatsStatement = 197;
StarRocksParser.RULE_histogramStatement = 198;
StarRocksParser.RULE_analyzeHistogramStatement = 199;
StarRocksParser.RULE_dropHistogramStatement = 200;
StarRocksParser.RULE_createAnalyzeStatement = 201;
StarRocksParser.RULE_dropAnalyzeJobStatement = 202;
StarRocksParser.RULE_showAnalyzeStatement = 203;
StarRocksParser.RULE_showStatsMetaStatement = 204;
StarRocksParser.RULE_showHistogramMetaStatement = 205;
StarRocksParser.RULE_killAnalyzeStatement = 206;
StarRocksParser.RULE_analyzeProfileStatement = 207;
StarRocksParser.RULE_createBaselinePlanStatement = 208;
StarRocksParser.RULE_dropBaselinePlanStatement = 209;
StarRocksParser.RULE_showBaselinePlanStatement = 210;
StarRocksParser.RULE_createResourceGroupStatement = 211;
StarRocksParser.RULE_dropResourceGroupStatement = 212;
StarRocksParser.RULE_alterResourceGroupStatement = 213;
StarRocksParser.RULE_showResourceGroupStatement = 214;
StarRocksParser.RULE_showResourceGroupUsageStatement = 215;
StarRocksParser.RULE_createResourceStatement = 216;
StarRocksParser.RULE_alterResourceStatement = 217;
StarRocksParser.RULE_dropResourceStatement = 218;
StarRocksParser.RULE_showResourceStatement = 219;
StarRocksParser.RULE_classifier = 220;
StarRocksParser.RULE_showFunctionsStatement = 221;
StarRocksParser.RULE_dropFunctionStatement = 222;
StarRocksParser.RULE_createFunctionStatement = 223;
StarRocksParser.RULE_inlineFunction = 224;
StarRocksParser.RULE_typeList = 225;
StarRocksParser.RULE_loadStatement = 226;
StarRocksParser.RULE_labelName = 227;
StarRocksParser.RULE_dataDescList = 228;
StarRocksParser.RULE_dataDesc = 229;
StarRocksParser.RULE_formatProps = 230;
StarRocksParser.RULE_brokerDesc = 231;
StarRocksParser.RULE_resourceDesc = 232;
StarRocksParser.RULE_showLoadStatement = 233;
StarRocksParser.RULE_showLoadWarningsStatement = 234;
StarRocksParser.RULE_cancelLoadStatement = 235;
StarRocksParser.RULE_alterLoadStatement = 236;
StarRocksParser.RULE_cancelCompactionStatement = 237;
StarRocksParser.RULE_showAuthorStatement = 238;
StarRocksParser.RULE_showBackendsStatement = 239;
StarRocksParser.RULE_showBrokerStatement = 240;
StarRocksParser.RULE_showCharsetStatement = 241;
StarRocksParser.RULE_showCollationStatement = 242;
StarRocksParser.RULE_showDeleteStatement = 243;
StarRocksParser.RULE_showDynamicPartitionStatement = 244;
StarRocksParser.RULE_showEventsStatement = 245;
StarRocksParser.RULE_showEnginesStatement = 246;
StarRocksParser.RULE_showFrontendsStatement = 247;
StarRocksParser.RULE_showPluginsStatement = 248;
StarRocksParser.RULE_showRepositoriesStatement = 249;
StarRocksParser.RULE_showOpenTableStatement = 250;
StarRocksParser.RULE_showPrivilegesStatement = 251;
StarRocksParser.RULE_showProcedureStatement = 252;
StarRocksParser.RULE_showProcStatement = 253;
StarRocksParser.RULE_showProcesslistStatement = 254;
StarRocksParser.RULE_showProfilelistStatement = 255;
StarRocksParser.RULE_showRunningQueriesStatement = 256;
StarRocksParser.RULE_showStatusStatement = 257;
StarRocksParser.RULE_showTabletStatement = 258;
StarRocksParser.RULE_showTransactionStatement = 259;
StarRocksParser.RULE_showTriggersStatement = 260;
StarRocksParser.RULE_showUserPropertyStatement = 261;
StarRocksParser.RULE_showVariablesStatement = 262;
StarRocksParser.RULE_showWarningStatement = 263;
StarRocksParser.RULE_helpStatement = 264;
StarRocksParser.RULE_createUserStatement = 265;
StarRocksParser.RULE_dropUserStatement = 266;
StarRocksParser.RULE_alterUserStatement = 267;
StarRocksParser.RULE_showUserStatement = 268;
StarRocksParser.RULE_showAuthenticationStatement = 269;
StarRocksParser.RULE_executeAsStatement = 270;
StarRocksParser.RULE_createRoleStatement = 271;
StarRocksParser.RULE_alterRoleStatement = 272;
StarRocksParser.RULE_dropRoleStatement = 273;
StarRocksParser.RULE_showRolesStatement = 274;
StarRocksParser.RULE_grantRoleStatement = 275;
StarRocksParser.RULE_revokeRoleStatement = 276;
StarRocksParser.RULE_setRoleStatement = 277;
StarRocksParser.RULE_setDefaultRoleStatement = 278;
StarRocksParser.RULE_grantRevokeClause = 279;
StarRocksParser.RULE_grantPrivilegeStatement = 280;
StarRocksParser.RULE_revokePrivilegeStatement = 281;
StarRocksParser.RULE_showGrantsStatement = 282;
StarRocksParser.RULE_authOption = 283;
StarRocksParser.RULE_privObjectName = 284;
StarRocksParser.RULE_privObjectNameList = 285;
StarRocksParser.RULE_privFunctionObjectNameList = 286;
StarRocksParser.RULE_privilegeTypeList = 287;
StarRocksParser.RULE_privilegeType = 288;
StarRocksParser.RULE_privObjectType = 289;
StarRocksParser.RULE_privObjectTypePlural = 290;
StarRocksParser.RULE_createSecurityIntegrationStatement = 291;
StarRocksParser.RULE_alterSecurityIntegrationStatement = 292;
StarRocksParser.RULE_dropSecurityIntegrationStatement = 293;
StarRocksParser.RULE_showSecurityIntegrationStatement = 294;
StarRocksParser.RULE_showCreateSecurityIntegrationStatement = 295;
StarRocksParser.RULE_createGroupProviderStatement = 296;
StarRocksParser.RULE_dropGroupProviderStatement = 297;
StarRocksParser.RULE_showGroupProvidersStatement = 298;
StarRocksParser.RULE_showCreateGroupProviderStatement = 299;
StarRocksParser.RULE_backupStatement = 300;
StarRocksParser.RULE_cancelBackupStatement = 301;
StarRocksParser.RULE_showBackupStatement = 302;
StarRocksParser.RULE_restoreStatement = 303;
StarRocksParser.RULE_cancelRestoreStatement = 304;
StarRocksParser.RULE_showRestoreStatement = 305;
StarRocksParser.RULE_showSnapshotStatement = 306;
StarRocksParser.RULE_createRepositoryStatement = 307;
StarRocksParser.RULE_dropRepositoryStatement = 308;
StarRocksParser.RULE_addSqlBlackListStatement = 309;
StarRocksParser.RULE_delSqlBlackListStatement = 310;
StarRocksParser.RULE_showSqlBlackListStatement = 311;
StarRocksParser.RULE_showWhiteListStatement = 312;
StarRocksParser.RULE_addBackendBlackListStatement = 313;
StarRocksParser.RULE_delBackendBlackListStatement = 314;
StarRocksParser.RULE_showBackendBlackListStatement = 315;
StarRocksParser.RULE_dataCacheTarget = 316;
StarRocksParser.RULE_createDataCacheRuleStatement = 317;
StarRocksParser.RULE_showDataCacheRulesStatement = 318;
StarRocksParser.RULE_dropDataCacheRuleStatement = 319;
StarRocksParser.RULE_clearDataCacheRulesStatement = 320;
StarRocksParser.RULE_dataCacheSelectStatement = 321;
StarRocksParser.RULE_exportStatement = 322;
StarRocksParser.RULE_cancelExportStatement = 323;
StarRocksParser.RULE_showExportStatement = 324;
StarRocksParser.RULE_installPluginStatement = 325;
StarRocksParser.RULE_uninstallPluginStatement = 326;
StarRocksParser.RULE_createFileStatement = 327;
StarRocksParser.RULE_dropFileStatement = 328;
StarRocksParser.RULE_showSmallFilesStatement = 329;
StarRocksParser.RULE_createPipeStatement = 330;
StarRocksParser.RULE_dropPipeStatement = 331;
StarRocksParser.RULE_alterPipeClause = 332;
StarRocksParser.RULE_alterPipeStatement = 333;
StarRocksParser.RULE_descPipeStatement = 334;
StarRocksParser.RULE_showPipeStatement = 335;
StarRocksParser.RULE_setStatement = 336;
StarRocksParser.RULE_setVar = 337;
StarRocksParser.RULE_transaction_characteristics = 338;
StarRocksParser.RULE_transaction_access_mode = 339;
StarRocksParser.RULE_isolation_level = 340;
StarRocksParser.RULE_isolation_types = 341;
StarRocksParser.RULE_setExprOrDefault = 342;
StarRocksParser.RULE_setUserPropertyStatement = 343;
StarRocksParser.RULE_roleList = 344;
StarRocksParser.RULE_executeScriptStatement = 345;
StarRocksParser.RULE_unsupportedStatement = 346;
StarRocksParser.RULE_lock_item = 347;
StarRocksParser.RULE_lock_type = 348;
StarRocksParser.RULE_alterPlanAdvisorAddStatement = 349;
StarRocksParser.RULE_truncatePlanAdvisorStatement = 350;
StarRocksParser.RULE_alterPlanAdvisorDropStatement = 351;
StarRocksParser.RULE_showPlanAdvisorStatement = 352;
StarRocksParser.RULE_createWarehouseStatement = 353;
StarRocksParser.RULE_dropWarehouseStatement = 354;
StarRocksParser.RULE_suspendWarehouseStatement = 355;
StarRocksParser.RULE_resumeWarehouseStatement = 356;
StarRocksParser.RULE_setWarehouseStatement = 357;
StarRocksParser.RULE_showWarehousesStatement = 358;
StarRocksParser.RULE_showClustersStatement = 359;
StarRocksParser.RULE_showNodesStatement = 360;
StarRocksParser.RULE_alterWarehouseStatement = 361;
StarRocksParser.RULE_beginStatement = 362;
StarRocksParser.RULE_commitStatement = 363;
StarRocksParser.RULE_rollbackStatement = 364;
StarRocksParser.RULE_translateStatement = 365;
StarRocksParser.RULE_dialect = 366;
StarRocksParser.RULE_translateSQL = 367;
StarRocksParser.RULE_queryStatement = 368;
StarRocksParser.RULE_queryRelation = 369;
StarRocksParser.RULE_withClause = 370;
StarRocksParser.RULE_queryNoWith = 371;
StarRocksParser.RULE_queryPeriod = 372;
StarRocksParser.RULE_periodType = 373;
StarRocksParser.RULE_queryPrimary = 374;
StarRocksParser.RULE_subquery = 375;
StarRocksParser.RULE_rowConstructor = 376;
StarRocksParser.RULE_sortItem = 377;
StarRocksParser.RULE_limitConstExpr = 378;
StarRocksParser.RULE_limitElement = 379;
StarRocksParser.RULE_querySpecification = 380;
StarRocksParser.RULE_fromClause = 381;
StarRocksParser.RULE_groupingElement = 382;
StarRocksParser.RULE_groupingSet = 383;
StarRocksParser.RULE_commonTableExpression = 384;
StarRocksParser.RULE_setQuantifier = 385;
StarRocksParser.RULE_selectItem = 386;
StarRocksParser.RULE_relations = 387;
StarRocksParser.RULE_relation = 388;
StarRocksParser.RULE_relationPrimary = 389;
StarRocksParser.RULE_pivotClause = 390;
StarRocksParser.RULE_pivotAggregationExpression = 391;
StarRocksParser.RULE_pivotValue = 392;
StarRocksParser.RULE_sampleClause = 393;
StarRocksParser.RULE_argumentList = 394;
StarRocksParser.RULE_namedArgumentList = 395;
StarRocksParser.RULE_namedArgument = 396;
StarRocksParser.RULE_joinRelation = 397;
StarRocksParser.RULE_crossOrInnerJoinType = 398;
StarRocksParser.RULE_outerAndSemiJoinType = 399;
StarRocksParser.RULE_bracketHint = 400;
StarRocksParser.RULE_hintMap = 401;
StarRocksParser.RULE_joinCriteria = 402;
StarRocksParser.RULE_columnAliases = 403;
StarRocksParser.RULE_partitionNames = 404;
StarRocksParser.RULE_keyPartitions = 405;
StarRocksParser.RULE_tabletList = 406;
StarRocksParser.RULE_prepareStatement = 407;
StarRocksParser.RULE_prepareSql = 408;
StarRocksParser.RULE_executeStatement = 409;
StarRocksParser.RULE_deallocateStatement = 410;
StarRocksParser.RULE_replicaList = 411;
StarRocksParser.RULE_expressionsWithDefault = 412;
StarRocksParser.RULE_expressionOrDefault = 413;
StarRocksParser.RULE_mapExpressionList = 414;
StarRocksParser.RULE_mapExpression = 415;
StarRocksParser.RULE_expressionSingleton = 416;
StarRocksParser.RULE_expression = 417;
StarRocksParser.RULE_expressionList = 418;
StarRocksParser.RULE_booleanExpression = 419;
StarRocksParser.RULE_predicate = 420;
StarRocksParser.RULE_tupleInSubquery = 421;
StarRocksParser.RULE_predicateOperations = 422;
StarRocksParser.RULE_valueExpression = 423;
StarRocksParser.RULE_primaryExpression = 424;
StarRocksParser.RULE_literalExpression = 425;
StarRocksParser.RULE_functionCall = 426;
StarRocksParser.RULE_aggregationFunction = 427;
StarRocksParser.RULE_userVariable = 428;
StarRocksParser.RULE_systemVariable = 429;
StarRocksParser.RULE_columnReference = 430;
StarRocksParser.RULE_informationFunctionExpression = 431;
StarRocksParser.RULE_specialDateTimeExpression = 432;
StarRocksParser.RULE_specialFunctionExpression = 433;
StarRocksParser.RULE_windowFunction = 434;
StarRocksParser.RULE_whenClause = 435;
StarRocksParser.RULE_over = 436;
StarRocksParser.RULE_ignoreNulls = 437;
StarRocksParser.RULE_windowFrame = 438;
StarRocksParser.RULE_frameBound = 439;
StarRocksParser.RULE_backupRestoreObjectDesc = 440;
StarRocksParser.RULE_tableDesc = 441;
StarRocksParser.RULE_backupRestoreTableDesc = 442;
StarRocksParser.RULE_explainDesc = 443;
StarRocksParser.RULE_optimizerTrace = 444;
StarRocksParser.RULE_partitionExpr = 445;
StarRocksParser.RULE_partitionDesc = 446;
StarRocksParser.RULE_listPartitionDesc = 447;
StarRocksParser.RULE_singleItemListPartitionDesc = 448;
StarRocksParser.RULE_multiItemListPartitionDesc = 449;
StarRocksParser.RULE_multiListPartitionValues = 450;
StarRocksParser.RULE_singleListPartitionValues = 451;
StarRocksParser.RULE_listPartitionValues = 452;
StarRocksParser.RULE_listPartitionValue = 453;
StarRocksParser.RULE_stringList = 454;
StarRocksParser.RULE_literalExpressionList = 455;
StarRocksParser.RULE_rangePartitionDesc = 456;
StarRocksParser.RULE_singleRangePartition = 457;
StarRocksParser.RULE_multiRangePartition = 458;
StarRocksParser.RULE_partitionRangeDesc = 459;
StarRocksParser.RULE_partitionKeyDesc = 460;
StarRocksParser.RULE_partitionValueList = 461;
StarRocksParser.RULE_keyPartition = 462;
StarRocksParser.RULE_partitionValue = 463;
StarRocksParser.RULE_distributionClause = 464;
StarRocksParser.RULE_distributionDesc = 465;
StarRocksParser.RULE_refreshSchemeDesc = 466;
StarRocksParser.RULE_statusDesc = 467;
StarRocksParser.RULE_properties = 468;
StarRocksParser.RULE_extProperties = 469;
StarRocksParser.RULE_propertyList = 470;
StarRocksParser.RULE_userPropertyList = 471;
StarRocksParser.RULE_property = 472;
StarRocksParser.RULE_inlineProperties = 473;
StarRocksParser.RULE_inlineProperty = 474;
StarRocksParser.RULE_varType = 475;
StarRocksParser.RULE_comment = 476;
StarRocksParser.RULE_outfile = 477;
StarRocksParser.RULE_fileFormat = 478;
StarRocksParser.RULE_string = 479;
StarRocksParser.RULE_binary = 480;
StarRocksParser.RULE_comparisonOperator = 481;
StarRocksParser.RULE_booleanValue = 482;
StarRocksParser.RULE_interval = 483;
StarRocksParser.RULE_taskInterval = 484;
StarRocksParser.RULE_taskUnitIdentifier = 485;
StarRocksParser.RULE_unitIdentifier = 486;
StarRocksParser.RULE_unitBoundary = 487;
StarRocksParser.RULE_type = 488;
StarRocksParser.RULE_arrayType = 489;
StarRocksParser.RULE_mapType = 490;
StarRocksParser.RULE_subfieldDesc = 491;
StarRocksParser.RULE_subfieldDescs = 492;
StarRocksParser.RULE_structType = 493;
StarRocksParser.RULE_typeParameter = 494;
StarRocksParser.RULE_baseType = 495;
StarRocksParser.RULE_decimalType = 496;
StarRocksParser.RULE_qualifiedName = 497;
StarRocksParser.RULE_tableName = 498;
StarRocksParser.RULE_writeBranch = 499;
StarRocksParser.RULE_identifier = 500;
StarRocksParser.RULE_identifierWithAlias = 501;
StarRocksParser.RULE_identifierWithAliasList = 502;
StarRocksParser.RULE_identifierList = 503;
StarRocksParser.RULE_identifierOrString = 504;
StarRocksParser.RULE_identifierOrStringList = 505;
StarRocksParser.RULE_identifierOrStringOrStar = 506;
StarRocksParser.RULE_user = 507;
StarRocksParser.RULE_assignment = 508;
StarRocksParser.RULE_assignmentList = 509;
StarRocksParser.RULE_number = 510;
StarRocksParser.RULE_nonReserved = 511;

class SqlStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_sqlStatements;
    }

	EOF() {
	    return this.getToken(StarRocksParser.EOF, 0);
	};

	singleStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleStatementContext);
	    } else {
	        return this.getTypedRuleContext(SingleStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSqlStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSqlStatements(this);
		}
	}


}



class SingleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_singleStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	SEMICOLON() {
	    return this.getToken(StarRocksParser.SEMICOLON, 0);
	};

	EOF() {
	    return this.getToken(StarRocksParser.EOF, 0);
	};

	emptyStatement() {
	    return this.getTypedRuleContext(EmptyStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSingleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSingleStatement(this);
		}
	}


}



class EmptyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_emptyStatement;
    }

	SEMICOLON() {
	    return this.getToken(StarRocksParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterEmptyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitEmptyStatement(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_statement;
    }

	queryStatement() {
	    return this.getTypedRuleContext(QueryStatementContext,0);
	};

	useDatabaseStatement() {
	    return this.getTypedRuleContext(UseDatabaseStatementContext,0);
	};

	useCatalogStatement() {
	    return this.getTypedRuleContext(UseCatalogStatementContext,0);
	};

	setCatalogStatement() {
	    return this.getTypedRuleContext(SetCatalogStatementContext,0);
	};

	showDatabasesStatement() {
	    return this.getTypedRuleContext(ShowDatabasesStatementContext,0);
	};

	alterDbQuotaStatement() {
	    return this.getTypedRuleContext(AlterDbQuotaStatementContext,0);
	};

	createDbStatement() {
	    return this.getTypedRuleContext(CreateDbStatementContext,0);
	};

	dropDbStatement() {
	    return this.getTypedRuleContext(DropDbStatementContext,0);
	};

	showCreateDbStatement() {
	    return this.getTypedRuleContext(ShowCreateDbStatementContext,0);
	};

	alterDatabaseRenameStatement() {
	    return this.getTypedRuleContext(AlterDatabaseRenameStatementContext,0);
	};

	recoverDbStmt() {
	    return this.getTypedRuleContext(RecoverDbStmtContext,0);
	};

	showDataStmt() {
	    return this.getTypedRuleContext(ShowDataStmtContext,0);
	};

	createTableStatement() {
	    return this.getTypedRuleContext(CreateTableStatementContext,0);
	};

	createTableAsSelectStatement() {
	    return this.getTypedRuleContext(CreateTableAsSelectStatementContext,0);
	};

	createTableLikeStatement() {
	    return this.getTypedRuleContext(CreateTableLikeStatementContext,0);
	};

	showCreateTableStatement() {
	    return this.getTypedRuleContext(ShowCreateTableStatementContext,0);
	};

	dropTableStatement() {
	    return this.getTypedRuleContext(DropTableStatementContext,0);
	};

	cleanTemporaryTableStatement() {
	    return this.getTypedRuleContext(CleanTemporaryTableStatementContext,0);
	};

	recoverTableStatement() {
	    return this.getTypedRuleContext(RecoverTableStatementContext,0);
	};

	truncateTableStatement() {
	    return this.getTypedRuleContext(TruncateTableStatementContext,0);
	};

	showTableStatement() {
	    return this.getTypedRuleContext(ShowTableStatementContext,0);
	};

	descTableStatement() {
	    return this.getTypedRuleContext(DescTableStatementContext,0);
	};

	showTableStatusStatement() {
	    return this.getTypedRuleContext(ShowTableStatusStatementContext,0);
	};

	showColumnStatement() {
	    return this.getTypedRuleContext(ShowColumnStatementContext,0);
	};

	refreshTableStatement() {
	    return this.getTypedRuleContext(RefreshTableStatementContext,0);
	};

	alterTableStatement() {
	    return this.getTypedRuleContext(AlterTableStatementContext,0);
	};

	cancelAlterTableStatement() {
	    return this.getTypedRuleContext(CancelAlterTableStatementContext,0);
	};

	showAlterStatement() {
	    return this.getTypedRuleContext(ShowAlterStatementContext,0);
	};

	showTemporaryTablesStatement() {
	    return this.getTypedRuleContext(ShowTemporaryTablesStatementContext,0);
	};

	createViewStatement() {
	    return this.getTypedRuleContext(CreateViewStatementContext,0);
	};

	alterViewStatement() {
	    return this.getTypedRuleContext(AlterViewStatementContext,0);
	};

	dropViewStatement() {
	    return this.getTypedRuleContext(DropViewStatementContext,0);
	};

	showPartitionsStatement() {
	    return this.getTypedRuleContext(ShowPartitionsStatementContext,0);
	};

	recoverPartitionStatement() {
	    return this.getTypedRuleContext(RecoverPartitionStatementContext,0);
	};

	createIndexStatement() {
	    return this.getTypedRuleContext(CreateIndexStatementContext,0);
	};

	dropIndexStatement() {
	    return this.getTypedRuleContext(DropIndexStatementContext,0);
	};

	showIndexStatement() {
	    return this.getTypedRuleContext(ShowIndexStatementContext,0);
	};

	submitTaskStatement() {
	    return this.getTypedRuleContext(SubmitTaskStatementContext,0);
	};

	dropTaskStatement() {
	    return this.getTypedRuleContext(DropTaskStatementContext,0);
	};

	createMaterializedViewStatement() {
	    return this.getTypedRuleContext(CreateMaterializedViewStatementContext,0);
	};

	showMaterializedViewsStatement() {
	    return this.getTypedRuleContext(ShowMaterializedViewsStatementContext,0);
	};

	dropMaterializedViewStatement() {
	    return this.getTypedRuleContext(DropMaterializedViewStatementContext,0);
	};

	alterMaterializedViewStatement() {
	    return this.getTypedRuleContext(AlterMaterializedViewStatementContext,0);
	};

	refreshMaterializedViewStatement() {
	    return this.getTypedRuleContext(RefreshMaterializedViewStatementContext,0);
	};

	cancelRefreshMaterializedViewStatement() {
	    return this.getTypedRuleContext(CancelRefreshMaterializedViewStatementContext,0);
	};

	createExternalCatalogStatement() {
	    return this.getTypedRuleContext(CreateExternalCatalogStatementContext,0);
	};

	dropExternalCatalogStatement() {
	    return this.getTypedRuleContext(DropExternalCatalogStatementContext,0);
	};

	showCatalogsStatement() {
	    return this.getTypedRuleContext(ShowCatalogsStatementContext,0);
	};

	showCreateExternalCatalogStatement() {
	    return this.getTypedRuleContext(ShowCreateExternalCatalogStatementContext,0);
	};

	alterCatalogStatement() {
	    return this.getTypedRuleContext(AlterCatalogStatementContext,0);
	};

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	updateStatement() {
	    return this.getTypedRuleContext(UpdateStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	createRoutineLoadStatement() {
	    return this.getTypedRuleContext(CreateRoutineLoadStatementContext,0);
	};

	alterRoutineLoadStatement() {
	    return this.getTypedRuleContext(AlterRoutineLoadStatementContext,0);
	};

	stopRoutineLoadStatement() {
	    return this.getTypedRuleContext(StopRoutineLoadStatementContext,0);
	};

	resumeRoutineLoadStatement() {
	    return this.getTypedRuleContext(ResumeRoutineLoadStatementContext,0);
	};

	pauseRoutineLoadStatement() {
	    return this.getTypedRuleContext(PauseRoutineLoadStatementContext,0);
	};

	showRoutineLoadStatement() {
	    return this.getTypedRuleContext(ShowRoutineLoadStatementContext,0);
	};

	showRoutineLoadTaskStatement() {
	    return this.getTypedRuleContext(ShowRoutineLoadTaskStatementContext,0);
	};

	showCreateRoutineLoadStatement() {
	    return this.getTypedRuleContext(ShowCreateRoutineLoadStatementContext,0);
	};

	showStreamLoadStatement() {
	    return this.getTypedRuleContext(ShowStreamLoadStatementContext,0);
	};

	adminSetConfigStatement() {
	    return this.getTypedRuleContext(AdminSetConfigStatementContext,0);
	};

	adminSetReplicaStatusStatement() {
	    return this.getTypedRuleContext(AdminSetReplicaStatusStatementContext,0);
	};

	adminShowConfigStatement() {
	    return this.getTypedRuleContext(AdminShowConfigStatementContext,0);
	};

	adminShowReplicaDistributionStatement() {
	    return this.getTypedRuleContext(AdminShowReplicaDistributionStatementContext,0);
	};

	adminShowReplicaStatusStatement() {
	    return this.getTypedRuleContext(AdminShowReplicaStatusStatementContext,0);
	};

	adminRepairTableStatement() {
	    return this.getTypedRuleContext(AdminRepairTableStatementContext,0);
	};

	adminCancelRepairTableStatement() {
	    return this.getTypedRuleContext(AdminCancelRepairTableStatementContext,0);
	};

	adminCheckTabletsStatement() {
	    return this.getTypedRuleContext(AdminCheckTabletsStatementContext,0);
	};

	adminSetPartitionVersion() {
	    return this.getTypedRuleContext(AdminSetPartitionVersionContext,0);
	};

	killStatement() {
	    return this.getTypedRuleContext(KillStatementContext,0);
	};

	syncStatement() {
	    return this.getTypedRuleContext(SyncStatementContext,0);
	};

	executeScriptStatement() {
	    return this.getTypedRuleContext(ExecuteScriptStatementContext,0);
	};

	adminSetAutomatedSnapshotOnStatement() {
	    return this.getTypedRuleContext(AdminSetAutomatedSnapshotOnStatementContext,0);
	};

	adminSetAutomatedSnapshotOffStatement() {
	    return this.getTypedRuleContext(AdminSetAutomatedSnapshotOffStatementContext,0);
	};

	alterSystemStatement() {
	    return this.getTypedRuleContext(AlterSystemStatementContext,0);
	};

	cancelAlterSystemStatement() {
	    return this.getTypedRuleContext(CancelAlterSystemStatementContext,0);
	};

	showComputeNodesStatement() {
	    return this.getTypedRuleContext(ShowComputeNodesStatementContext,0);
	};

	analyzeStatement() {
	    return this.getTypedRuleContext(AnalyzeStatementContext,0);
	};

	dropStatsStatement() {
	    return this.getTypedRuleContext(DropStatsStatementContext,0);
	};

	createAnalyzeStatement() {
	    return this.getTypedRuleContext(CreateAnalyzeStatementContext,0);
	};

	dropAnalyzeJobStatement() {
	    return this.getTypedRuleContext(DropAnalyzeJobStatementContext,0);
	};

	analyzeHistogramStatement() {
	    return this.getTypedRuleContext(AnalyzeHistogramStatementContext,0);
	};

	dropHistogramStatement() {
	    return this.getTypedRuleContext(DropHistogramStatementContext,0);
	};

	showAnalyzeStatement() {
	    return this.getTypedRuleContext(ShowAnalyzeStatementContext,0);
	};

	showStatsMetaStatement() {
	    return this.getTypedRuleContext(ShowStatsMetaStatementContext,0);
	};

	showHistogramMetaStatement() {
	    return this.getTypedRuleContext(ShowHistogramMetaStatementContext,0);
	};

	killAnalyzeStatement() {
	    return this.getTypedRuleContext(KillAnalyzeStatementContext,0);
	};

	analyzeProfileStatement() {
	    return this.getTypedRuleContext(AnalyzeProfileStatementContext,0);
	};

	createResourceGroupStatement() {
	    return this.getTypedRuleContext(CreateResourceGroupStatementContext,0);
	};

	dropResourceGroupStatement() {
	    return this.getTypedRuleContext(DropResourceGroupStatementContext,0);
	};

	alterResourceGroupStatement() {
	    return this.getTypedRuleContext(AlterResourceGroupStatementContext,0);
	};

	showResourceGroupStatement() {
	    return this.getTypedRuleContext(ShowResourceGroupStatementContext,0);
	};

	showResourceGroupUsageStatement() {
	    return this.getTypedRuleContext(ShowResourceGroupUsageStatementContext,0);
	};

	createResourceStatement() {
	    return this.getTypedRuleContext(CreateResourceStatementContext,0);
	};

	alterResourceStatement() {
	    return this.getTypedRuleContext(AlterResourceStatementContext,0);
	};

	dropResourceStatement() {
	    return this.getTypedRuleContext(DropResourceStatementContext,0);
	};

	showResourceStatement() {
	    return this.getTypedRuleContext(ShowResourceStatementContext,0);
	};

	showFunctionsStatement() {
	    return this.getTypedRuleContext(ShowFunctionsStatementContext,0);
	};

	dropFunctionStatement() {
	    return this.getTypedRuleContext(DropFunctionStatementContext,0);
	};

	createFunctionStatement() {
	    return this.getTypedRuleContext(CreateFunctionStatementContext,0);
	};

	loadStatement() {
	    return this.getTypedRuleContext(LoadStatementContext,0);
	};

	showLoadStatement() {
	    return this.getTypedRuleContext(ShowLoadStatementContext,0);
	};

	showLoadWarningsStatement() {
	    return this.getTypedRuleContext(ShowLoadWarningsStatementContext,0);
	};

	cancelLoadStatement() {
	    return this.getTypedRuleContext(CancelLoadStatementContext,0);
	};

	alterLoadStatement() {
	    return this.getTypedRuleContext(AlterLoadStatementContext,0);
	};

	showAuthorStatement() {
	    return this.getTypedRuleContext(ShowAuthorStatementContext,0);
	};

	showBackendsStatement() {
	    return this.getTypedRuleContext(ShowBackendsStatementContext,0);
	};

	showBrokerStatement() {
	    return this.getTypedRuleContext(ShowBrokerStatementContext,0);
	};

	showCharsetStatement() {
	    return this.getTypedRuleContext(ShowCharsetStatementContext,0);
	};

	showCollationStatement() {
	    return this.getTypedRuleContext(ShowCollationStatementContext,0);
	};

	showDeleteStatement() {
	    return this.getTypedRuleContext(ShowDeleteStatementContext,0);
	};

	showDynamicPartitionStatement() {
	    return this.getTypedRuleContext(ShowDynamicPartitionStatementContext,0);
	};

	showEventsStatement() {
	    return this.getTypedRuleContext(ShowEventsStatementContext,0);
	};

	showEnginesStatement() {
	    return this.getTypedRuleContext(ShowEnginesStatementContext,0);
	};

	showFrontendsStatement() {
	    return this.getTypedRuleContext(ShowFrontendsStatementContext,0);
	};

	showPluginsStatement() {
	    return this.getTypedRuleContext(ShowPluginsStatementContext,0);
	};

	showRepositoriesStatement() {
	    return this.getTypedRuleContext(ShowRepositoriesStatementContext,0);
	};

	showOpenTableStatement() {
	    return this.getTypedRuleContext(ShowOpenTableStatementContext,0);
	};

	showPrivilegesStatement() {
	    return this.getTypedRuleContext(ShowPrivilegesStatementContext,0);
	};

	showProcedureStatement() {
	    return this.getTypedRuleContext(ShowProcedureStatementContext,0);
	};

	showProcStatement() {
	    return this.getTypedRuleContext(ShowProcStatementContext,0);
	};

	showProcesslistStatement() {
	    return this.getTypedRuleContext(ShowProcesslistStatementContext,0);
	};

	showProfilelistStatement() {
	    return this.getTypedRuleContext(ShowProfilelistStatementContext,0);
	};

	showRunningQueriesStatement() {
	    return this.getTypedRuleContext(ShowRunningQueriesStatementContext,0);
	};

	showStatusStatement() {
	    return this.getTypedRuleContext(ShowStatusStatementContext,0);
	};

	showTabletStatement() {
	    return this.getTypedRuleContext(ShowTabletStatementContext,0);
	};

	showTransactionStatement() {
	    return this.getTypedRuleContext(ShowTransactionStatementContext,0);
	};

	showTriggersStatement() {
	    return this.getTypedRuleContext(ShowTriggersStatementContext,0);
	};

	showUserPropertyStatement() {
	    return this.getTypedRuleContext(ShowUserPropertyStatementContext,0);
	};

	showVariablesStatement() {
	    return this.getTypedRuleContext(ShowVariablesStatementContext,0);
	};

	showWarningStatement() {
	    return this.getTypedRuleContext(ShowWarningStatementContext,0);
	};

	helpStatement() {
	    return this.getTypedRuleContext(HelpStatementContext,0);
	};

	createUserStatement() {
	    return this.getTypedRuleContext(CreateUserStatementContext,0);
	};

	dropUserStatement() {
	    return this.getTypedRuleContext(DropUserStatementContext,0);
	};

	alterUserStatement() {
	    return this.getTypedRuleContext(AlterUserStatementContext,0);
	};

	showUserStatement() {
	    return this.getTypedRuleContext(ShowUserStatementContext,0);
	};

	showAuthenticationStatement() {
	    return this.getTypedRuleContext(ShowAuthenticationStatementContext,0);
	};

	executeAsStatement() {
	    return this.getTypedRuleContext(ExecuteAsStatementContext,0);
	};

	createRoleStatement() {
	    return this.getTypedRuleContext(CreateRoleStatementContext,0);
	};

	alterRoleStatement() {
	    return this.getTypedRuleContext(AlterRoleStatementContext,0);
	};

	dropRoleStatement() {
	    return this.getTypedRuleContext(DropRoleStatementContext,0);
	};

	showRolesStatement() {
	    return this.getTypedRuleContext(ShowRolesStatementContext,0);
	};

	grantRoleStatement() {
	    return this.getTypedRuleContext(GrantRoleStatementContext,0);
	};

	revokeRoleStatement() {
	    return this.getTypedRuleContext(RevokeRoleStatementContext,0);
	};

	setRoleStatement() {
	    return this.getTypedRuleContext(SetRoleStatementContext,0);
	};

	setDefaultRoleStatement() {
	    return this.getTypedRuleContext(SetDefaultRoleStatementContext,0);
	};

	grantPrivilegeStatement() {
	    return this.getTypedRuleContext(GrantPrivilegeStatementContext,0);
	};

	revokePrivilegeStatement() {
	    return this.getTypedRuleContext(RevokePrivilegeStatementContext,0);
	};

	showGrantsStatement() {
	    return this.getTypedRuleContext(ShowGrantsStatementContext,0);
	};

	createSecurityIntegrationStatement() {
	    return this.getTypedRuleContext(CreateSecurityIntegrationStatementContext,0);
	};

	alterSecurityIntegrationStatement() {
	    return this.getTypedRuleContext(AlterSecurityIntegrationStatementContext,0);
	};

	dropSecurityIntegrationStatement() {
	    return this.getTypedRuleContext(DropSecurityIntegrationStatementContext,0);
	};

	showSecurityIntegrationStatement() {
	    return this.getTypedRuleContext(ShowSecurityIntegrationStatementContext,0);
	};

	showCreateSecurityIntegrationStatement() {
	    return this.getTypedRuleContext(ShowCreateSecurityIntegrationStatementContext,0);
	};

	createGroupProviderStatement() {
	    return this.getTypedRuleContext(CreateGroupProviderStatementContext,0);
	};

	dropGroupProviderStatement() {
	    return this.getTypedRuleContext(DropGroupProviderStatementContext,0);
	};

	showGroupProvidersStatement() {
	    return this.getTypedRuleContext(ShowGroupProvidersStatementContext,0);
	};

	showCreateGroupProviderStatement() {
	    return this.getTypedRuleContext(ShowCreateGroupProviderStatementContext,0);
	};

	backupStatement() {
	    return this.getTypedRuleContext(BackupStatementContext,0);
	};

	cancelBackupStatement() {
	    return this.getTypedRuleContext(CancelBackupStatementContext,0);
	};

	showBackupStatement() {
	    return this.getTypedRuleContext(ShowBackupStatementContext,0);
	};

	restoreStatement() {
	    return this.getTypedRuleContext(RestoreStatementContext,0);
	};

	cancelRestoreStatement() {
	    return this.getTypedRuleContext(CancelRestoreStatementContext,0);
	};

	showRestoreStatement() {
	    return this.getTypedRuleContext(ShowRestoreStatementContext,0);
	};

	showSnapshotStatement() {
	    return this.getTypedRuleContext(ShowSnapshotStatementContext,0);
	};

	createRepositoryStatement() {
	    return this.getTypedRuleContext(CreateRepositoryStatementContext,0);
	};

	dropRepositoryStatement() {
	    return this.getTypedRuleContext(DropRepositoryStatementContext,0);
	};

	addSqlBlackListStatement() {
	    return this.getTypedRuleContext(AddSqlBlackListStatementContext,0);
	};

	delSqlBlackListStatement() {
	    return this.getTypedRuleContext(DelSqlBlackListStatementContext,0);
	};

	showSqlBlackListStatement() {
	    return this.getTypedRuleContext(ShowSqlBlackListStatementContext,0);
	};

	showWhiteListStatement() {
	    return this.getTypedRuleContext(ShowWhiteListStatementContext,0);
	};

	addBackendBlackListStatement() {
	    return this.getTypedRuleContext(AddBackendBlackListStatementContext,0);
	};

	delBackendBlackListStatement() {
	    return this.getTypedRuleContext(DelBackendBlackListStatementContext,0);
	};

	showBackendBlackListStatement() {
	    return this.getTypedRuleContext(ShowBackendBlackListStatementContext,0);
	};

	createDataCacheRuleStatement() {
	    return this.getTypedRuleContext(CreateDataCacheRuleStatementContext,0);
	};

	showDataCacheRulesStatement() {
	    return this.getTypedRuleContext(ShowDataCacheRulesStatementContext,0);
	};

	dropDataCacheRuleStatement() {
	    return this.getTypedRuleContext(DropDataCacheRuleStatementContext,0);
	};

	clearDataCacheRulesStatement() {
	    return this.getTypedRuleContext(ClearDataCacheRulesStatementContext,0);
	};

	dataCacheSelectStatement() {
	    return this.getTypedRuleContext(DataCacheSelectStatementContext,0);
	};

	exportStatement() {
	    return this.getTypedRuleContext(ExportStatementContext,0);
	};

	cancelExportStatement() {
	    return this.getTypedRuleContext(CancelExportStatementContext,0);
	};

	showExportStatement() {
	    return this.getTypedRuleContext(ShowExportStatementContext,0);
	};

	installPluginStatement() {
	    return this.getTypedRuleContext(InstallPluginStatementContext,0);
	};

	uninstallPluginStatement() {
	    return this.getTypedRuleContext(UninstallPluginStatementContext,0);
	};

	createFileStatement() {
	    return this.getTypedRuleContext(CreateFileStatementContext,0);
	};

	dropFileStatement() {
	    return this.getTypedRuleContext(DropFileStatementContext,0);
	};

	showSmallFilesStatement() {
	    return this.getTypedRuleContext(ShowSmallFilesStatementContext,0);
	};

	setStatement() {
	    return this.getTypedRuleContext(SetStatementContext,0);
	};

	setUserPropertyStatement() {
	    return this.getTypedRuleContext(SetUserPropertyStatementContext,0);
	};

	createStorageVolumeStatement() {
	    return this.getTypedRuleContext(CreateStorageVolumeStatementContext,0);
	};

	alterStorageVolumeStatement() {
	    return this.getTypedRuleContext(AlterStorageVolumeStatementContext,0);
	};

	dropStorageVolumeStatement() {
	    return this.getTypedRuleContext(DropStorageVolumeStatementContext,0);
	};

	showStorageVolumesStatement() {
	    return this.getTypedRuleContext(ShowStorageVolumesStatementContext,0);
	};

	descStorageVolumeStatement() {
	    return this.getTypedRuleContext(DescStorageVolumeStatementContext,0);
	};

	setDefaultStorageVolumeStatement() {
	    return this.getTypedRuleContext(SetDefaultStorageVolumeStatementContext,0);
	};

	createPipeStatement() {
	    return this.getTypedRuleContext(CreatePipeStatementContext,0);
	};

	dropPipeStatement() {
	    return this.getTypedRuleContext(DropPipeStatementContext,0);
	};

	alterPipeStatement() {
	    return this.getTypedRuleContext(AlterPipeStatementContext,0);
	};

	showPipeStatement() {
	    return this.getTypedRuleContext(ShowPipeStatementContext,0);
	};

	descPipeStatement() {
	    return this.getTypedRuleContext(DescPipeStatementContext,0);
	};

	cancelCompactionStatement() {
	    return this.getTypedRuleContext(CancelCompactionStatementContext,0);
	};

	updateFailPointStatusStatement() {
	    return this.getTypedRuleContext(UpdateFailPointStatusStatementContext,0);
	};

	showFailPointStatement() {
	    return this.getTypedRuleContext(ShowFailPointStatementContext,0);
	};

	prepareStatement() {
	    return this.getTypedRuleContext(PrepareStatementContext,0);
	};

	executeStatement() {
	    return this.getTypedRuleContext(ExecuteStatementContext,0);
	};

	deallocateStatement() {
	    return this.getTypedRuleContext(DeallocateStatementContext,0);
	};

	createDictionaryStatement() {
	    return this.getTypedRuleContext(CreateDictionaryStatementContext,0);
	};

	dropDictionaryStatement() {
	    return this.getTypedRuleContext(DropDictionaryStatementContext,0);
	};

	refreshDictionaryStatement() {
	    return this.getTypedRuleContext(RefreshDictionaryStatementContext,0);
	};

	showDictionaryStatement() {
	    return this.getTypedRuleContext(ShowDictionaryStatementContext,0);
	};

	cancelRefreshDictionaryStatement() {
	    return this.getTypedRuleContext(CancelRefreshDictionaryStatementContext,0);
	};

	alterPlanAdvisorAddStatement() {
	    return this.getTypedRuleContext(AlterPlanAdvisorAddStatementContext,0);
	};

	truncatePlanAdvisorStatement() {
	    return this.getTypedRuleContext(TruncatePlanAdvisorStatementContext,0);
	};

	alterPlanAdvisorDropStatement() {
	    return this.getTypedRuleContext(AlterPlanAdvisorDropStatementContext,0);
	};

	showPlanAdvisorStatement() {
	    return this.getTypedRuleContext(ShowPlanAdvisorStatementContext,0);
	};

	createWarehouseStatement() {
	    return this.getTypedRuleContext(CreateWarehouseStatementContext,0);
	};

	dropWarehouseStatement() {
	    return this.getTypedRuleContext(DropWarehouseStatementContext,0);
	};

	suspendWarehouseStatement() {
	    return this.getTypedRuleContext(SuspendWarehouseStatementContext,0);
	};

	resumeWarehouseStatement() {
	    return this.getTypedRuleContext(ResumeWarehouseStatementContext,0);
	};

	setWarehouseStatement() {
	    return this.getTypedRuleContext(SetWarehouseStatementContext,0);
	};

	showWarehousesStatement() {
	    return this.getTypedRuleContext(ShowWarehousesStatementContext,0);
	};

	showClustersStatement() {
	    return this.getTypedRuleContext(ShowClustersStatementContext,0);
	};

	showNodesStatement() {
	    return this.getTypedRuleContext(ShowNodesStatementContext,0);
	};

	alterWarehouseStatement() {
	    return this.getTypedRuleContext(AlterWarehouseStatementContext,0);
	};

	beginStatement() {
	    return this.getTypedRuleContext(BeginStatementContext,0);
	};

	commitStatement() {
	    return this.getTypedRuleContext(CommitStatementContext,0);
	};

	rollbackStatement() {
	    return this.getTypedRuleContext(RollbackStatementContext,0);
	};

	translateStatement() {
	    return this.getTypedRuleContext(TranslateStatementContext,0);
	};

	createBaselinePlanStatement() {
	    return this.getTypedRuleContext(CreateBaselinePlanStatementContext,0);
	};

	dropBaselinePlanStatement() {
	    return this.getTypedRuleContext(DropBaselinePlanStatementContext,0);
	};

	showBaselinePlanStatement() {
	    return this.getTypedRuleContext(ShowBaselinePlanStatementContext,0);
	};

	unsupportedStatement() {
	    return this.getTypedRuleContext(UnsupportedStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitStatement(this);
		}
	}


}



class UseDatabaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_useDatabaseStatement;
    }

	USE() {
	    return this.getToken(StarRocksParser.USE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUseDatabaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUseDatabaseStatement(this);
		}
	}


}



class UseCatalogStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_useCatalogStatement;
    }

	USE() {
	    return this.getToken(StarRocksParser.USE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUseCatalogStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUseCatalogStatement(this);
		}
	}


}



class SetCatalogStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_setCatalogStatement;
    }

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetCatalogStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetCatalogStatement(this);
		}
	}


}



class ShowDatabasesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showDatabasesStatement;
        this.catalog = null;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	DATABASES() {
	    return this.getToken(StarRocksParser.DATABASES, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	SCHEMAS() {
	    return this.getToken(StarRocksParser.SCHEMAS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowDatabasesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowDatabasesStatement(this);
		}
	}


}



class AlterDbQuotaStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterDbQuotaStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	DATA() {
	    return this.getToken(StarRocksParser.DATA, 0);
	};

	QUOTA() {
	    return this.getToken(StarRocksParser.QUOTA, 0);
	};

	REPLICA() {
	    return this.getToken(StarRocksParser.REPLICA, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterDbQuotaStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterDbQuotaStatement(this);
		}
	}


}



class CreateDbStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createDbStatement;
        this.catalog = null;
        this.database = null;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(StarRocksParser.SCHEMA, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	charsetDesc() {
	    return this.getTypedRuleContext(CharsetDescContext,0);
	};

	collateDesc() {
	    return this.getTypedRuleContext(CollateDescContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateDbStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateDbStatement(this);
		}
	}


}



class DropDbStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropDbStatement;
        this.catalog = null;
        this.database = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(StarRocksParser.SCHEMA, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	FORCE() {
	    return this.getToken(StarRocksParser.FORCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropDbStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropDbStatement(this);
		}
	}


}



class ShowCreateDbStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showCreateDbStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(StarRocksParser.SCHEMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowCreateDbStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowCreateDbStatement(this);
		}
	}


}



class AlterDatabaseRenameStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterDatabaseRenameStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RENAME() {
	    return this.getToken(StarRocksParser.RENAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterDatabaseRenameStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterDatabaseRenameStatement(this);
		}
	}


}



class RecoverDbStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_recoverDbStmt;
    }

	RECOVER() {
	    return this.getToken(StarRocksParser.RECOVER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(StarRocksParser.SCHEMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRecoverDbStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRecoverDbStmt(this);
		}
	}


}



class ShowDataStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showDataStmt;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	DATA() {
	    return this.getToken(StarRocksParser.DATA, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowDataStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowDataStmt(this);
		}
	}


}



class CreateTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createTableStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	columnDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnDescContext);
	    } else {
	        return this.getTypedRuleContext(ColumnDescContext,i);
	    }
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	indexDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexDescContext);
	    } else {
	        return this.getTypedRuleContext(IndexDescContext,i);
	    }
	};

	engineDesc() {
	    return this.getTypedRuleContext(EngineDescContext,0);
	};

	charsetDesc() {
	    return this.getTypedRuleContext(CharsetDescContext,0);
	};

	keyDesc() {
	    return this.getTypedRuleContext(KeyDescContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	partitionDesc() {
	    return this.getTypedRuleContext(PartitionDescContext,0);
	};

	distributionDesc() {
	    return this.getTypedRuleContext(DistributionDescContext,0);
	};

	orderByDesc() {
	    return this.getTypedRuleContext(OrderByDescContext,0);
	};

	rollupDesc() {
	    return this.getTypedRuleContext(RollupDescContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	extProperties() {
	    return this.getTypedRuleContext(ExtPropertiesContext,0);
	};

	TEMPORARY() {
	    return this.getToken(StarRocksParser.TEMPORARY, 0);
	};

	EXTERNAL() {
	    return this.getToken(StarRocksParser.EXTERNAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateTableStatement(this);
		}
	}


}



class ColumnDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_columnDesc;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	KEY() {
	    return this.getToken(StarRocksParser.KEY, 0);
	};

	aggDesc() {
	    return this.getTypedRuleContext(AggDescContext,0);
	};

	columnNullable() {
	    return this.getTypedRuleContext(ColumnNullableContext,0);
	};

	defaultDesc() {
	    return this.getTypedRuleContext(DefaultDescContext,0);
	};

	AUTO_INCREMENT() {
	    return this.getToken(StarRocksParser.AUTO_INCREMENT, 0);
	};

	generatedColumnDesc() {
	    return this.getTypedRuleContext(GeneratedColumnDescContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterColumnDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitColumnDesc(this);
		}
	}


}



class CharsetNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_charsetName;
    }

	CHAR() {
	    return this.getToken(StarRocksParser.CHAR, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CHARSET() {
	    return this.getToken(StarRocksParser.CHARSET, 0);
	};

	CHARACTER() {
	    return this.getToken(StarRocksParser.CHARACTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCharsetName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCharsetName(this);
		}
	}


}



class DefaultDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_defaultDesc;
    }

	DEFAULT() {
	    return this.getToken(StarRocksParser.DEFAULT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	NULL() {
	    return this.getToken(StarRocksParser.NULL, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(StarRocksParser.CURRENT_TIMESTAMP, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDefaultDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDefaultDesc(this);
		}
	}


}



class GeneratedColumnDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_generatedColumnDesc;
    }

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterGeneratedColumnDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitGeneratedColumnDesc(this);
		}
	}


}



class IndexDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_indexDesc;
        this.indexName = null;
    }

	INDEX() {
	    return this.getToken(StarRocksParser.INDEX, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIndexDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIndexDesc(this);
		}
	}


}



class EngineDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_engineDesc;
    }

	ENGINE() {
	    return this.getToken(StarRocksParser.ENGINE, 0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterEngineDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitEngineDesc(this);
		}
	}


}



class CharsetDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_charsetDesc;
    }

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	CHAR() {
	    return this.getToken(StarRocksParser.CHAR, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	CHARSET() {
	    return this.getToken(StarRocksParser.CHARSET, 0);
	};

	CHARACTER() {
	    return this.getToken(StarRocksParser.CHARACTER, 0);
	};

	DEFAULT() {
	    return this.getToken(StarRocksParser.DEFAULT, 0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCharsetDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCharsetDesc(this);
		}
	}


}



class CollateDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_collateDesc;
    }

	COLLATE() {
	    return this.getToken(StarRocksParser.COLLATE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	DEFAULT() {
	    return this.getToken(StarRocksParser.DEFAULT, 0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCollateDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCollateDesc(this);
		}
	}


}



class KeyDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_keyDesc;
    }

	KEY() {
	    return this.getToken(StarRocksParser.KEY, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	AGGREGATE() {
	    return this.getToken(StarRocksParser.AGGREGATE, 0);
	};

	UNIQUE() {
	    return this.getToken(StarRocksParser.UNIQUE, 0);
	};

	PRIMARY() {
	    return this.getToken(StarRocksParser.PRIMARY, 0);
	};

	DUPLICATE() {
	    return this.getToken(StarRocksParser.DUPLICATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterKeyDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitKeyDesc(this);
		}
	}


}



class OrderByDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_orderByDesc;
    }

	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterOrderByDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitOrderByDesc(this);
		}
	}


}



class ColumnNullableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_columnNullable;
    }

	NULL() {
	    return this.getToken(StarRocksParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterColumnNullable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitColumnNullable(this);
		}
	}


}



class TypeWithNullableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_typeWithNullable;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	columnNullable() {
	    return this.getTypedRuleContext(ColumnNullableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTypeWithNullable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTypeWithNullable(this);
		}
	}


}



class AggStateDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_aggStateDesc;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeWithNullable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeWithNullableContext);
	    } else {
	        return this.getTypedRuleContext(TypeWithNullableContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAggStateDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAggStateDesc(this);
		}
	}


}



class AggDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_aggDesc;
    }

	SUM() {
	    return this.getToken(StarRocksParser.SUM, 0);
	};

	MAX() {
	    return this.getToken(StarRocksParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(StarRocksParser.MIN, 0);
	};

	REPLACE() {
	    return this.getToken(StarRocksParser.REPLACE, 0);
	};

	HLL_UNION() {
	    return this.getToken(StarRocksParser.HLL_UNION, 0);
	};

	BITMAP_UNION() {
	    return this.getToken(StarRocksParser.BITMAP_UNION, 0);
	};

	PERCENTILE_UNION() {
	    return this.getToken(StarRocksParser.PERCENTILE_UNION, 0);
	};

	REPLACE_IF_NOT_NULL() {
	    return this.getToken(StarRocksParser.REPLACE_IF_NOT_NULL, 0);
	};

	aggStateDesc() {
	    return this.getTypedRuleContext(AggStateDescContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAggDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAggDesc(this);
		}
	}


}



class RollupDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_rollupDesc;
    }

	ROLLUP() {
	    return this.getToken(StarRocksParser.ROLLUP, 0);
	};

	rollupItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RollupItemContext);
	    } else {
	        return this.getTypedRuleContext(RollupItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRollupDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRollupDesc(this);
		}
	}


}



class RollupItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_rollupItem;
        this.rollupName = null;
    }

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	dupKeys() {
	    return this.getTypedRuleContext(DupKeysContext,0);
	};

	fromRollup() {
	    return this.getTypedRuleContext(FromRollupContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRollupItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRollupItem(this);
		}
	}


}



class DupKeysContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dupKeys;
    }

	DUPLICATE() {
	    return this.getToken(StarRocksParser.DUPLICATE, 0);
	};

	KEY() {
	    return this.getToken(StarRocksParser.KEY, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDupKeys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDupKeys(this);
		}
	}


}



class FromRollupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_fromRollup;
    }

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterFromRollup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitFromRollup(this);
		}
	}


}



class OrReplaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_orReplace;
    }

	OR() {
	    return this.getToken(StarRocksParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(StarRocksParser.REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterOrReplace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitOrReplace(this);
		}
	}


}



class IfNotExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_ifNotExists;
    }

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIfNotExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIfNotExists(this);
		}
	}


}



class CreateTableAsSelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createTableAsSelectStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	queryStatement() {
	    return this.getTypedRuleContext(QueryStatementContext,0);
	};

	TEMPORARY() {
	    return this.getToken(StarRocksParser.TEMPORARY, 0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	keyDesc() {
	    return this.getTypedRuleContext(KeyDescContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	partitionDesc() {
	    return this.getTypedRuleContext(PartitionDescContext,0);
	};

	distributionDesc() {
	    return this.getTypedRuleContext(DistributionDescContext,0);
	};

	orderByDesc() {
	    return this.getTypedRuleContext(OrderByDescContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	indexDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexDescContext);
	    } else {
	        return this.getTypedRuleContext(IndexDescContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateTableAsSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateTableAsSelectStatement(this);
		}
	}


}



class DropTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropTableStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	TEMPORARY() {
	    return this.getToken(StarRocksParser.TEMPORARY, 0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	FORCE() {
	    return this.getToken(StarRocksParser.FORCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropTableStatement(this);
		}
	}


}



class CleanTemporaryTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cleanTemporaryTableStatement;
    }

	CLEAN() {
	    return this.getToken(StarRocksParser.CLEAN, 0);
	};

	TEMPORARY() {
	    return this.getToken(StarRocksParser.TEMPORARY, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	SESSION() {
	    return this.getToken(StarRocksParser.SESSION, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCleanTemporaryTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCleanTemporaryTableStatement(this);
		}
	}


}



class AlterTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterTableStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	alterClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterClauseContext);
	    } else {
	        return this.getTypedRuleContext(AlterClauseContext,i);
	    }
	};

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	ROLLUP() {
	    return this.getToken(StarRocksParser.ROLLUP, 0);
	};

	rollupItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RollupItemContext);
	    } else {
	        return this.getTypedRuleContext(RollupItemContext,i);
	    }
	};

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterTableStatement(this);
		}
	}


}



class CreateIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createIndexStatement;
        this.indexName = null;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	INDEX() {
	    return this.getToken(StarRocksParser.INDEX, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateIndexStatement(this);
		}
	}


}



class DropIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropIndexStatement;
        this.indexName = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	INDEX() {
	    return this.getToken(StarRocksParser.INDEX, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropIndexStatement(this);
		}
	}


}



class IndexTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_indexType;
    }

	USING() {
	    return this.getToken(StarRocksParser.USING, 0);
	};

	BITMAP() {
	    return this.getToken(StarRocksParser.BITMAP, 0);
	};

	GIN() {
	    return this.getToken(StarRocksParser.GIN, 0);
	};

	NGRAMBF() {
	    return this.getToken(StarRocksParser.NGRAMBF, 0);
	};

	VECTOR() {
	    return this.getToken(StarRocksParser.VECTOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIndexType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIndexType(this);
		}
	}


}



class ShowTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showTableStatement;
        this.db = null;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	TABLES() {
	    return this.getToken(StarRocksParser.TABLES, 0);
	};

	FULL() {
	    return this.getToken(StarRocksParser.FULL, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowTableStatement(this);
		}
	}


}



class ShowTemporaryTablesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showTemporaryTablesStatement;
        this.db = null;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	TEMPORARY() {
	    return this.getToken(StarRocksParser.TEMPORARY, 0);
	};

	TABLES() {
	    return this.getToken(StarRocksParser.TABLES, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowTemporaryTablesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowTemporaryTablesStatement(this);
		}
	}


}



class ShowCreateTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showCreateTableStatement;
        this.table = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowCreateTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowCreateTableStatement(this);
		}
	}


}



class ShowColumnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showColumnStatement;
        this.table = null;
        this.db = null;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	COLUMNS() {
	    return this.getToken(StarRocksParser.COLUMNS, 0);
	};

	FIELDS() {
	    return this.getToken(StarRocksParser.FIELDS, 0);
	};

	FULL() {
	    return this.getToken(StarRocksParser.FULL, 0);
	};

	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.FROM);
	    } else {
	        return this.getToken(StarRocksParser.FROM, i);
	    }
	};


	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.IN);
	    } else {
	        return this.getToken(StarRocksParser.IN, i);
	    }
	};


	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowColumnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowColumnStatement(this);
		}
	}


}



class ShowTableStatusStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showTableStatusStatement;
        this.db = null;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	STATUS() {
	    return this.getToken(StarRocksParser.STATUS, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowTableStatusStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowTableStatusStatement(this);
		}
	}


}



class RefreshTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_refreshTableStatement;
    }

	REFRESH() {
	    return this.getToken(StarRocksParser.REFRESH, 0);
	};

	EXTERNAL() {
	    return this.getToken(StarRocksParser.EXTERNAL, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRefreshTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRefreshTableStatement(this);
		}
	}


}



class ShowAlterStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showAlterStatement;
        this.db = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	COLUMN() {
	    return this.getToken(StarRocksParser.COLUMN, 0);
	};

	ROLLUP() {
	    return this.getToken(StarRocksParser.ROLLUP, 0);
	};

	OPTIMIZE() {
	    return this.getToken(StarRocksParser.OPTIMIZE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	limitElement() {
	    return this.getTypedRuleContext(LimitElementContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowAlterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowAlterStatement(this);
		}
	}


}



class DescTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_descTableStatement;
        this.table = null;
    }

	DESC() {
	    return this.getToken(StarRocksParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(StarRocksParser.DESCRIBE, 0);
	};

	FILES() {
	    return this.getToken(StarRocksParser.FILES, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDescTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDescTableStatement(this);
		}
	}


}



class CreateTableLikeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createTableLikeStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	partitionDesc() {
	    return this.getTypedRuleContext(PartitionDescContext,0);
	};

	distributionDesc() {
	    return this.getTypedRuleContext(DistributionDescContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	TEMPORARY() {
	    return this.getToken(StarRocksParser.TEMPORARY, 0);
	};

	EXTERNAL() {
	    return this.getToken(StarRocksParser.EXTERNAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateTableLikeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateTableLikeStatement(this);
		}
	}


}



class ShowIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showIndexStatement;
        this.table = null;
        this.db = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	INDEX() {
	    return this.getToken(StarRocksParser.INDEX, 0);
	};

	INDEXES() {
	    return this.getToken(StarRocksParser.INDEXES, 0);
	};

	KEY() {
	    return this.getToken(StarRocksParser.KEY, 0);
	};

	KEYS() {
	    return this.getToken(StarRocksParser.KEYS, 0);
	};

	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.FROM);
	    } else {
	        return this.getToken(StarRocksParser.FROM, i);
	    }
	};


	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.IN);
	    } else {
	        return this.getToken(StarRocksParser.IN, i);
	    }
	};


	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowIndexStatement(this);
		}
	}


}



class RecoverTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_recoverTableStatement;
    }

	RECOVER() {
	    return this.getToken(StarRocksParser.RECOVER, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRecoverTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRecoverTableStatement(this);
		}
	}


}



class TruncateTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_truncateTableStatement;
    }

	TRUNCATE() {
	    return this.getToken(StarRocksParser.TRUNCATE, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTruncateTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTruncateTableStatement(this);
		}
	}


}



class CancelAlterTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cancelAlterTableStatement;
    }

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(StarRocksParser.INTEGER_VALUE, i);
	    }
	};


	COLUMN() {
	    return this.getToken(StarRocksParser.COLUMN, 0);
	};

	ROLLUP() {
	    return this.getToken(StarRocksParser.ROLLUP, 0);
	};

	OPTIMIZE() {
	    return this.getToken(StarRocksParser.OPTIMIZE, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCancelAlterTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCancelAlterTableStatement(this);
		}
	}


}



class ShowPartitionsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showPartitionsStatement;
        this.table = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	PARTITIONS() {
	    return this.getToken(StarRocksParser.PARTITIONS, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	TEMPORARY() {
	    return this.getToken(StarRocksParser.TEMPORARY, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	limitElement() {
	    return this.getTypedRuleContext(LimitElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowPartitionsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowPartitionsStatement(this);
		}
	}


}



class RecoverPartitionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_recoverPartitionStatement;
        this.table = null;
    }

	RECOVER() {
	    return this.getToken(StarRocksParser.RECOVER, 0);
	};

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRecoverPartitionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRecoverPartitionStatement(this);
		}
	}


}



class CreateViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createViewStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	queryStatement() {
	    return this.getTypedRuleContext(QueryStatementContext,0);
	};

	OR() {
	    return this.getToken(StarRocksParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(StarRocksParser.REPLACE, 0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	columnNameWithComment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameWithCommentContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameWithCommentContext,i);
	    }
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	SECURITY() {
	    return this.getToken(StarRocksParser.SECURITY, 0);
	};

	NONE() {
	    return this.getToken(StarRocksParser.NONE, 0);
	};

	INVOKER() {
	    return this.getToken(StarRocksParser.INVOKER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateViewStatement(this);
		}
	}


}



class AlterViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterViewStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	queryStatement() {
	    return this.getTypedRuleContext(QueryStatementContext,0);
	};

	columnNameWithComment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameWithCommentContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameWithCommentContext,i);
	    }
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	SECURITY() {
	    return this.getToken(StarRocksParser.SECURITY, 0);
	};

	NONE() {
	    return this.getToken(StarRocksParser.NONE, 0);
	};

	INVOKER() {
	    return this.getToken(StarRocksParser.INVOKER, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	DIALECT() {
	    return this.getToken(StarRocksParser.DIALECT, 0);
	};

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	MODIFY() {
	    return this.getToken(StarRocksParser.MODIFY, 0);
	};

	STARROCKS() {
	    return this.getToken(StarRocksParser.STARROCKS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterViewStatement(this);
		}
	}


}



class DropViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropViewStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropViewStatement(this);
		}
	}


}



class ColumnNameWithCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_columnNameWithComment;
        this.columnName = null;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterColumnNameWithComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitColumnNameWithComment(this);
		}
	}


}



class SubmitTaskStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_submitTaskStatement;
    }

	SUBMIT() {
	    return this.getToken(StarRocksParser.SUBMIT, 0);
	};

	TASK() {
	    return this.getToken(StarRocksParser.TASK, 0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	createTableAsSelectStatement() {
	    return this.getTypedRuleContext(CreateTableAsSelectStatementContext,0);
	};

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	dataCacheSelectStatement() {
	    return this.getTypedRuleContext(DataCacheSelectStatementContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	taskClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TaskClauseContext);
	    } else {
	        return this.getTypedRuleContext(TaskClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSubmitTaskStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSubmitTaskStatement(this);
		}
	}


}



class TaskClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_taskClause;
    }

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	taskScheduleDesc() {
	    return this.getTypedRuleContext(TaskScheduleDescContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTaskClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTaskClause(this);
		}
	}


}



class DropTaskStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropTaskStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	TASK() {
	    return this.getToken(StarRocksParser.TASK, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	FORCE() {
	    return this.getToken(StarRocksParser.FORCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropTaskStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropTaskStatement(this);
		}
	}


}



class TaskScheduleDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_taskScheduleDesc;
    }

	SCHEDULE() {
	    return this.getToken(StarRocksParser.SCHEDULE, 0);
	};

	EVERY() {
	    return this.getToken(StarRocksParser.EVERY, 0);
	};

	taskInterval() {
	    return this.getTypedRuleContext(TaskIntervalContext,0);
	};

	START() {
	    return this.getToken(StarRocksParser.START, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTaskScheduleDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTaskScheduleDesc(this);
		}
	}


}



class CreateMaterializedViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createMaterializedViewStatement;
        this.mvName = null;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	queryStatement() {
	    return this.getTypedRuleContext(QueryStatementContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	columnNameWithComment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnNameWithCommentContext);
	    } else {
	        return this.getTypedRuleContext(ColumnNameWithCommentContext,i);
	    }
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	materializedViewDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MaterializedViewDescContext);
	    } else {
	        return this.getTypedRuleContext(MaterializedViewDescContext,i);
	    }
	};

	indexDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexDescContext);
	    } else {
	        return this.getTypedRuleContext(IndexDescContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateMaterializedViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateMaterializedViewStatement(this);
		}
	}


}



class MvPartitionExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_mvPartitionExprs;
    }

	primaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMvPartitionExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMvPartitionExprs(this);
		}
	}


}



class MaterializedViewDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_materializedViewDesc;
    }

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	mvPartitionExprs() {
	    return this.getTypedRuleContext(MvPartitionExprsContext,0);
	};

	distributionDesc() {
	    return this.getTypedRuleContext(DistributionDescContext,0);
	};

	orderByDesc() {
	    return this.getTypedRuleContext(OrderByDescContext,0);
	};

	refreshSchemeDesc() {
	    return this.getTypedRuleContext(RefreshSchemeDescContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMaterializedViewDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMaterializedViewDesc(this);
		}
	}


}



class ShowMaterializedViewsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showMaterializedViewsStatement;
        this.db = null;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	VIEWS() {
	    return this.getToken(StarRocksParser.VIEWS, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowMaterializedViewsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowMaterializedViewsStatement(this);
		}
	}


}



class DropMaterializedViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropMaterializedViewStatement;
        this.mvName = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropMaterializedViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropMaterializedViewStatement(this);
		}
	}


}



class AlterMaterializedViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterMaterializedViewStatement;
        this.mvName = null;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	refreshSchemeDesc() {
	    return this.getTypedRuleContext(RefreshSchemeDescContext,0);
	};

	tableRenameClause() {
	    return this.getTypedRuleContext(TableRenameClauseContext,0);
	};

	modifyPropertiesClause() {
	    return this.getTypedRuleContext(ModifyPropertiesClauseContext,0);
	};

	swapTableClause() {
	    return this.getTypedRuleContext(SwapTableClauseContext,0);
	};

	statusDesc() {
	    return this.getTypedRuleContext(StatusDescContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterMaterializedViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterMaterializedViewStatement(this);
		}
	}


}



class RefreshMaterializedViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_refreshMaterializedViewStatement;
        this.mvName = null;
        this.priority = null;
    }

	REFRESH() {
	    return this.getToken(StarRocksParser.REFRESH, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	FORCE() {
	    return this.getToken(StarRocksParser.FORCE, 0);
	};

	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.WITH);
	    } else {
	        return this.getToken(StarRocksParser.WITH, i);
	    }
	};


	MODE() {
	    return this.getToken(StarRocksParser.MODE, 0);
	};

	PRIORITY() {
	    return this.getToken(StarRocksParser.PRIORITY, 0);
	};

	SYNC() {
	    return this.getToken(StarRocksParser.SYNC, 0);
	};

	ASYNC() {
	    return this.getToken(StarRocksParser.ASYNC, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	partitionRangeDesc() {
	    return this.getTypedRuleContext(PartitionRangeDescContext,0);
	};

	listPartitionValues() {
	    return this.getTypedRuleContext(ListPartitionValuesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRefreshMaterializedViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRefreshMaterializedViewStatement(this);
		}
	}


}



class CancelRefreshMaterializedViewStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cancelRefreshMaterializedViewStatement;
        this.mvName = null;
    }

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	REFRESH() {
	    return this.getToken(StarRocksParser.REFRESH, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	FORCE() {
	    return this.getToken(StarRocksParser.FORCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCancelRefreshMaterializedViewStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCancelRefreshMaterializedViewStatement(this);
		}
	}


}



class AdminSetConfigStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_adminSetConfigStatement;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	FRONTEND() {
	    return this.getToken(StarRocksParser.FRONTEND, 0);
	};

	CONFIG() {
	    return this.getToken(StarRocksParser.CONFIG, 0);
	};

	property() {
	    return this.getTypedRuleContext(PropertyContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	PERSISTENT() {
	    return this.getToken(StarRocksParser.PERSISTENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAdminSetConfigStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAdminSetConfigStatement(this);
		}
	}


}



class AdminSetReplicaStatusStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_adminSetReplicaStatusStatement;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	REPLICA() {
	    return this.getToken(StarRocksParser.REPLICA, 0);
	};

	STATUS() {
	    return this.getToken(StarRocksParser.STATUS, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAdminSetReplicaStatusStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAdminSetReplicaStatusStatement(this);
		}
	}


}



class AdminShowConfigStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_adminShowConfigStatement;
        this.pattern = null;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	FRONTEND() {
	    return this.getToken(StarRocksParser.FRONTEND, 0);
	};

	CONFIG() {
	    return this.getToken(StarRocksParser.CONFIG, 0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAdminShowConfigStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAdminShowConfigStatement(this);
		}
	}


}



class AdminShowReplicaDistributionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_adminShowReplicaDistributionStatement;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	REPLICA() {
	    return this.getToken(StarRocksParser.REPLICA, 0);
	};

	DISTRIBUTION() {
	    return this.getToken(StarRocksParser.DISTRIBUTION, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAdminShowReplicaDistributionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAdminShowReplicaDistributionStatement(this);
		}
	}


}



class AdminShowReplicaStatusStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_adminShowReplicaStatusStatement;
        this.where = null;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	REPLICA() {
	    return this.getToken(StarRocksParser.REPLICA, 0);
	};

	STATUS() {
	    return this.getToken(StarRocksParser.STATUS, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAdminShowReplicaStatusStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAdminShowReplicaStatusStatement(this);
		}
	}


}



class AdminRepairTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_adminRepairTableStatement;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	REPAIR() {
	    return this.getToken(StarRocksParser.REPAIR, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAdminRepairTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAdminRepairTableStatement(this);
		}
	}


}



class AdminCancelRepairTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_adminCancelRepairTableStatement;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	REPAIR() {
	    return this.getToken(StarRocksParser.REPAIR, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAdminCancelRepairTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAdminCancelRepairTableStatement(this);
		}
	}


}



class AdminCheckTabletsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_adminCheckTabletsStatement;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	CHECK() {
	    return this.getToken(StarRocksParser.CHECK, 0);
	};

	tabletList() {
	    return this.getTypedRuleContext(TabletListContext,0);
	};

	PROPERTIES() {
	    return this.getToken(StarRocksParser.PROPERTIES, 0);
	};

	property() {
	    return this.getTypedRuleContext(PropertyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAdminCheckTabletsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAdminCheckTabletsStatement(this);
		}
	}


}



class AdminSetPartitionVersionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_adminSetPartitionVersion;
        this.partitionName = null;
        this.partitionId = null;
        this.version = null;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	VERSION() {
	    return this.getToken(StarRocksParser.VERSION, 0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(StarRocksParser.INTEGER_VALUE, i);
	    }
	};


	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAdminSetPartitionVersion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAdminSetPartitionVersion(this);
		}
	}


}



class KillStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_killStatement;
        this.connId = null;
        this.queryId = null;
    }

	KILL() {
	    return this.getToken(StarRocksParser.KILL, 0);
	};

	QUERY() {
	    return this.getToken(StarRocksParser.QUERY, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	CONNECTION() {
	    return this.getToken(StarRocksParser.CONNECTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterKillStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitKillStatement(this);
		}
	}


}



class SyncStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_syncStatement;
    }

	SYNC() {
	    return this.getToken(StarRocksParser.SYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSyncStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSyncStatement(this);
		}
	}


}



class AdminSetAutomatedSnapshotOnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_adminSetAutomatedSnapshotOnStatement;
        this.svName = null;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	AUTOMATED() {
	    return this.getToken(StarRocksParser.AUTOMATED, 0);
	};

	CLUSTER() {
	    return this.getToken(StarRocksParser.CLUSTER, 0);
	};

	SNAPSHOT() {
	    return this.getToken(StarRocksParser.SNAPSHOT, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	STORAGE() {
	    return this.getToken(StarRocksParser.STORAGE, 0);
	};

	VOLUME() {
	    return this.getToken(StarRocksParser.VOLUME, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAdminSetAutomatedSnapshotOnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAdminSetAutomatedSnapshotOnStatement(this);
		}
	}


}



class AdminSetAutomatedSnapshotOffStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_adminSetAutomatedSnapshotOffStatement;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	AUTOMATED() {
	    return this.getToken(StarRocksParser.AUTOMATED, 0);
	};

	CLUSTER() {
	    return this.getToken(StarRocksParser.CLUSTER, 0);
	};

	SNAPSHOT() {
	    return this.getToken(StarRocksParser.SNAPSHOT, 0);
	};

	OFF() {
	    return this.getToken(StarRocksParser.OFF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAdminSetAutomatedSnapshotOffStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAdminSetAutomatedSnapshotOffStatement(this);
		}
	}


}



class AlterSystemStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterSystemStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	SYSTEM() {
	    return this.getToken(StarRocksParser.SYSTEM, 0);
	};

	alterClause() {
	    return this.getTypedRuleContext(AlterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterSystemStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterSystemStatement(this);
		}
	}


}



class CancelAlterSystemStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cancelAlterSystemStatement;
    }

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	DECOMMISSION() {
	    return this.getToken(StarRocksParser.DECOMMISSION, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCancelAlterSystemStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCancelAlterSystemStatement(this);
		}
	}


}



class ShowComputeNodesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showComputeNodesStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	COMPUTE() {
	    return this.getToken(StarRocksParser.COMPUTE, 0);
	};

	NODES() {
	    return this.getToken(StarRocksParser.NODES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowComputeNodesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowComputeNodesStatement(this);
		}
	}


}



class CreateExternalCatalogStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createExternalCatalogStatement;
        this.catalogName = null;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	EXTERNAL() {
	    return this.getToken(StarRocksParser.EXTERNAL, 0);
	};

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateExternalCatalogStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateExternalCatalogStatement(this);
		}
	}


}



class ShowCreateExternalCatalogStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showCreateExternalCatalogStatement;
        this.catalogName = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowCreateExternalCatalogStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowCreateExternalCatalogStatement(this);
		}
	}


}



class DropExternalCatalogStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropExternalCatalogStatement;
        this.catalogName = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropExternalCatalogStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropExternalCatalogStatement(this);
		}
	}


}



class ShowCatalogsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showCatalogsStatement;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	CATALOGS() {
	    return this.getToken(StarRocksParser.CATALOGS, 0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowCatalogsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowCatalogsStatement(this);
		}
	}


}



class AlterCatalogStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterCatalogStatement;
        this.catalogName = null;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	modifyPropertiesClause() {
	    return this.getTypedRuleContext(ModifyPropertiesClauseContext,0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterCatalogStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterCatalogStatement(this);
		}
	}


}



class CreateStorageVolumeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createStorageVolumeStatement;
        this.storageVolumeName = null;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	STORAGE() {
	    return this.getToken(StarRocksParser.STORAGE, 0);
	};

	VOLUME() {
	    return this.getToken(StarRocksParser.VOLUME, 0);
	};

	typeDesc() {
	    return this.getTypedRuleContext(TypeDescContext,0);
	};

	locationsDesc() {
	    return this.getTypedRuleContext(LocationsDescContext,0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateStorageVolumeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateStorageVolumeStatement(this);
		}
	}


}



class TypeDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_typeDesc;
    }

	TYPE() {
	    return this.getToken(StarRocksParser.TYPE, 0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTypeDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTypeDesc(this);
		}
	}


}



class LocationsDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_locationsDesc;
    }

	LOCATIONS() {
	    return this.getToken(StarRocksParser.LOCATIONS, 0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	stringList() {
	    return this.getTypedRuleContext(StringListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLocationsDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLocationsDesc(this);
		}
	}


}



class ShowStorageVolumesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showStorageVolumesStatement;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	STORAGE() {
	    return this.getToken(StarRocksParser.STORAGE, 0);
	};

	VOLUMES() {
	    return this.getToken(StarRocksParser.VOLUMES, 0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowStorageVolumesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowStorageVolumesStatement(this);
		}
	}


}



class DropStorageVolumeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropStorageVolumeStatement;
        this.storageVolumeName = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	STORAGE() {
	    return this.getToken(StarRocksParser.STORAGE, 0);
	};

	VOLUME() {
	    return this.getToken(StarRocksParser.VOLUME, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropStorageVolumeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropStorageVolumeStatement(this);
		}
	}


}



class AlterStorageVolumeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterStorageVolumeStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	STORAGE() {
	    return this.getToken(StarRocksParser.STORAGE, 0);
	};

	VOLUME() {
	    return this.getToken(StarRocksParser.VOLUME, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	alterStorageVolumeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterStorageVolumeClauseContext);
	    } else {
	        return this.getTypedRuleContext(AlterStorageVolumeClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterStorageVolumeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterStorageVolumeStatement(this);
		}
	}


}



class AlterStorageVolumeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterStorageVolumeClause;
    }

	modifyStorageVolumeCommentClause() {
	    return this.getTypedRuleContext(ModifyStorageVolumeCommentClauseContext,0);
	};

	modifyStorageVolumePropertiesClause() {
	    return this.getTypedRuleContext(ModifyStorageVolumePropertiesClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterStorageVolumeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterStorageVolumeClause(this);
		}
	}


}



class ModifyStorageVolumePropertiesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_modifyStorageVolumePropertiesClause;
    }

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterModifyStorageVolumePropertiesClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitModifyStorageVolumePropertiesClause(this);
		}
	}


}



class ModifyStorageVolumeCommentClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_modifyStorageVolumeCommentClause;
    }

	COMMENT() {
	    return this.getToken(StarRocksParser.COMMENT, 0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterModifyStorageVolumeCommentClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitModifyStorageVolumeCommentClause(this);
		}
	}


}



class DescStorageVolumeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_descStorageVolumeStatement;
    }

	STORAGE() {
	    return this.getToken(StarRocksParser.STORAGE, 0);
	};

	VOLUME() {
	    return this.getToken(StarRocksParser.VOLUME, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	DESC() {
	    return this.getToken(StarRocksParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(StarRocksParser.DESCRIBE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDescStorageVolumeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDescStorageVolumeStatement(this);
		}
	}


}



class SetDefaultStorageVolumeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_setDefaultStorageVolumeStatement;
    }

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	DEFAULT() {
	    return this.getToken(StarRocksParser.DEFAULT, 0);
	};

	STORAGE() {
	    return this.getToken(StarRocksParser.STORAGE, 0);
	};

	VOLUME() {
	    return this.getToken(StarRocksParser.VOLUME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetDefaultStorageVolumeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetDefaultStorageVolumeStatement(this);
		}
	}


}



class UpdateFailPointStatusStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_updateFailPointStatusStatement;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	DISABLE() {
	    return this.getToken(StarRocksParser.DISABLE, 0);
	};

	FAILPOINT() {
	    return this.getToken(StarRocksParser.FAILPOINT, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	ENABLE() {
	    return this.getToken(StarRocksParser.ENABLE, 0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	TIMES() {
	    return this.getToken(StarRocksParser.TIMES, 0);
	};

	DECIMAL_VALUE() {
	    return this.getToken(StarRocksParser.DECIMAL_VALUE, 0);
	};

	PROBABILITY() {
	    return this.getToken(StarRocksParser.PROBABILITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUpdateFailPointStatusStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUpdateFailPointStatusStatement(this);
		}
	}


}



class ShowFailPointStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showFailPointStatement;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	FAILPOINTS() {
	    return this.getToken(StarRocksParser.FAILPOINTS, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowFailPointStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowFailPointStatement(this);
		}
	}


}



class CreateDictionaryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createDictionaryStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	DICTIONARY() {
	    return this.getToken(StarRocksParser.DICTIONARY, 0);
	};

	dictionaryName() {
	    return this.getTypedRuleContext(DictionaryNameContext,0);
	};

	USING() {
	    return this.getToken(StarRocksParser.USING, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	dictionaryColumnDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DictionaryColumnDescContext);
	    } else {
	        return this.getTypedRuleContext(DictionaryColumnDescContext,i);
	    }
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateDictionaryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateDictionaryStatement(this);
		}
	}


}



class DropDictionaryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropDictionaryStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	DICTIONARY() {
	    return this.getToken(StarRocksParser.DICTIONARY, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	CACHE() {
	    return this.getToken(StarRocksParser.CACHE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropDictionaryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropDictionaryStatement(this);
		}
	}


}



class RefreshDictionaryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_refreshDictionaryStatement;
    }

	REFRESH() {
	    return this.getToken(StarRocksParser.REFRESH, 0);
	};

	DICTIONARY() {
	    return this.getToken(StarRocksParser.DICTIONARY, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRefreshDictionaryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRefreshDictionaryStatement(this);
		}
	}


}



class ShowDictionaryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showDictionaryStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	DICTIONARY() {
	    return this.getToken(StarRocksParser.DICTIONARY, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowDictionaryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowDictionaryStatement(this);
		}
	}


}



class CancelRefreshDictionaryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cancelRefreshDictionaryStatement;
    }

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	REFRESH() {
	    return this.getToken(StarRocksParser.REFRESH, 0);
	};

	DICTIONARY() {
	    return this.getToken(StarRocksParser.DICTIONARY, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCancelRefreshDictionaryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCancelRefreshDictionaryStatement(this);
		}
	}


}



class DictionaryColumnDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dictionaryColumnDesc;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	KEY() {
	    return this.getToken(StarRocksParser.KEY, 0);
	};

	VALUE() {
	    return this.getToken(StarRocksParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDictionaryColumnDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDictionaryColumnDesc(this);
		}
	}


}



class DictionaryNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dictionaryName;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDictionaryName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDictionaryName(this);
		}
	}


}



class AlterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterClause;
    }

	addFrontendClause() {
	    return this.getTypedRuleContext(AddFrontendClauseContext,0);
	};

	dropFrontendClause() {
	    return this.getTypedRuleContext(DropFrontendClauseContext,0);
	};

	modifyFrontendHostClause() {
	    return this.getTypedRuleContext(ModifyFrontendHostClauseContext,0);
	};

	addBackendClause() {
	    return this.getTypedRuleContext(AddBackendClauseContext,0);
	};

	dropBackendClause() {
	    return this.getTypedRuleContext(DropBackendClauseContext,0);
	};

	decommissionBackendClause() {
	    return this.getTypedRuleContext(DecommissionBackendClauseContext,0);
	};

	modifyBackendClause() {
	    return this.getTypedRuleContext(ModifyBackendClauseContext,0);
	};

	addComputeNodeClause() {
	    return this.getTypedRuleContext(AddComputeNodeClauseContext,0);
	};

	dropComputeNodeClause() {
	    return this.getTypedRuleContext(DropComputeNodeClauseContext,0);
	};

	modifyBrokerClause() {
	    return this.getTypedRuleContext(ModifyBrokerClauseContext,0);
	};

	alterLoadErrorUrlClause() {
	    return this.getTypedRuleContext(AlterLoadErrorUrlClauseContext,0);
	};

	createImageClause() {
	    return this.getTypedRuleContext(CreateImageClauseContext,0);
	};

	cleanTabletSchedQClause() {
	    return this.getTypedRuleContext(CleanTabletSchedQClauseContext,0);
	};

	decommissionDiskClause() {
	    return this.getTypedRuleContext(DecommissionDiskClauseContext,0);
	};

	cancelDecommissionDiskClause() {
	    return this.getTypedRuleContext(CancelDecommissionDiskClauseContext,0);
	};

	disableDiskClause() {
	    return this.getTypedRuleContext(DisableDiskClauseContext,0);
	};

	cancelDisableDiskClause() {
	    return this.getTypedRuleContext(CancelDisableDiskClauseContext,0);
	};

	createIndexClause() {
	    return this.getTypedRuleContext(CreateIndexClauseContext,0);
	};

	dropIndexClause() {
	    return this.getTypedRuleContext(DropIndexClauseContext,0);
	};

	tableRenameClause() {
	    return this.getTypedRuleContext(TableRenameClauseContext,0);
	};

	swapTableClause() {
	    return this.getTypedRuleContext(SwapTableClauseContext,0);
	};

	modifyPropertiesClause() {
	    return this.getTypedRuleContext(ModifyPropertiesClauseContext,0);
	};

	addColumnClause() {
	    return this.getTypedRuleContext(AddColumnClauseContext,0);
	};

	addColumnsClause() {
	    return this.getTypedRuleContext(AddColumnsClauseContext,0);
	};

	dropColumnClause() {
	    return this.getTypedRuleContext(DropColumnClauseContext,0);
	};

	modifyColumnClause() {
	    return this.getTypedRuleContext(ModifyColumnClauseContext,0);
	};

	columnRenameClause() {
	    return this.getTypedRuleContext(ColumnRenameClauseContext,0);
	};

	reorderColumnsClause() {
	    return this.getTypedRuleContext(ReorderColumnsClauseContext,0);
	};

	rollupRenameClause() {
	    return this.getTypedRuleContext(RollupRenameClauseContext,0);
	};

	compactionClause() {
	    return this.getTypedRuleContext(CompactionClauseContext,0);
	};

	modifyCommentClause() {
	    return this.getTypedRuleContext(ModifyCommentClauseContext,0);
	};

	optimizeClause() {
	    return this.getTypedRuleContext(OptimizeClauseContext,0);
	};

	addFieldClause() {
	    return this.getTypedRuleContext(AddFieldClauseContext,0);
	};

	dropFieldClause() {
	    return this.getTypedRuleContext(DropFieldClauseContext,0);
	};

	createOrReplaceBranchClause() {
	    return this.getTypedRuleContext(CreateOrReplaceBranchClauseContext,0);
	};

	createOrReplaceTagClause() {
	    return this.getTypedRuleContext(CreateOrReplaceTagClauseContext,0);
	};

	dropBranchClause() {
	    return this.getTypedRuleContext(DropBranchClauseContext,0);
	};

	dropTagClause() {
	    return this.getTypedRuleContext(DropTagClauseContext,0);
	};

	tableOperationClause() {
	    return this.getTypedRuleContext(TableOperationClauseContext,0);
	};

	dropPersistentIndexClause() {
	    return this.getTypedRuleContext(DropPersistentIndexClauseContext,0);
	};

	addPartitionClause() {
	    return this.getTypedRuleContext(AddPartitionClauseContext,0);
	};

	dropPartitionClause() {
	    return this.getTypedRuleContext(DropPartitionClauseContext,0);
	};

	distributionClause() {
	    return this.getTypedRuleContext(DistributionClauseContext,0);
	};

	truncatePartitionClause() {
	    return this.getTypedRuleContext(TruncatePartitionClauseContext,0);
	};

	modifyPartitionClause() {
	    return this.getTypedRuleContext(ModifyPartitionClauseContext,0);
	};

	replacePartitionClause() {
	    return this.getTypedRuleContext(ReplacePartitionClauseContext,0);
	};

	partitionRenameClause() {
	    return this.getTypedRuleContext(PartitionRenameClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterClause(this);
		}
	}


}



class AddFrontendClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_addFrontendClause;
    }

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	FOLLOWER() {
	    return this.getToken(StarRocksParser.FOLLOWER, 0);
	};

	OBSERVER() {
	    return this.getToken(StarRocksParser.OBSERVER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAddFrontendClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAddFrontendClause(this);
		}
	}


}



class DropFrontendClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropFrontendClause;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	FOLLOWER() {
	    return this.getToken(StarRocksParser.FOLLOWER, 0);
	};

	OBSERVER() {
	    return this.getToken(StarRocksParser.OBSERVER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropFrontendClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropFrontendClause(this);
		}
	}


}



class ModifyFrontendHostClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_modifyFrontendHostClause;
    }

	MODIFY() {
	    return this.getToken(StarRocksParser.MODIFY, 0);
	};

	FRONTEND() {
	    return this.getToken(StarRocksParser.FRONTEND, 0);
	};

	HOST() {
	    return this.getToken(StarRocksParser.HOST, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterModifyFrontendHostClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitModifyFrontendHostClause(this);
		}
	}


}



class AddBackendClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_addBackendClause;
        this.warehouseName = null;
    }

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	INTO() {
	    return this.getToken(StarRocksParser.INTO, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAddBackendClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAddBackendClause(this);
		}
	}


}



class DropBackendClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropBackendClause;
        this.warehouseName = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	FORCE() {
	    return this.getToken(StarRocksParser.FORCE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropBackendClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropBackendClause(this);
		}
	}


}



class DecommissionBackendClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_decommissionBackendClause;
    }

	DECOMMISSION() {
	    return this.getToken(StarRocksParser.DECOMMISSION, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDecommissionBackendClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDecommissionBackendClause(this);
		}
	}


}



class ModifyBackendClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_modifyBackendClause;
    }

	MODIFY() {
	    return this.getToken(StarRocksParser.MODIFY, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	HOST() {
	    return this.getToken(StarRocksParser.HOST, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterModifyBackendClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitModifyBackendClause(this);
		}
	}


}



class AddComputeNodeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_addComputeNodeClause;
        this.warehouseName = null;
    }

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	COMPUTE() {
	    return this.getToken(StarRocksParser.COMPUTE, 0);
	};

	NODE() {
	    return this.getToken(StarRocksParser.NODE, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	INTO() {
	    return this.getToken(StarRocksParser.INTO, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAddComputeNodeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAddComputeNodeClause(this);
		}
	}


}



class DropComputeNodeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropComputeNodeClause;
        this.warehouseName = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	COMPUTE() {
	    return this.getToken(StarRocksParser.COMPUTE, 0);
	};

	NODE() {
	    return this.getToken(StarRocksParser.NODE, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropComputeNodeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropComputeNodeClause(this);
		}
	}


}



class ModifyBrokerClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_modifyBrokerClause;
    }

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	BROKER() {
	    return this.getToken(StarRocksParser.BROKER, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterModifyBrokerClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitModifyBrokerClause(this);
		}
	}


}



class AlterLoadErrorUrlClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterLoadErrorUrlClause;
    }

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	ERRORS() {
	    return this.getToken(StarRocksParser.ERRORS, 0);
	};

	HUB() {
	    return this.getToken(StarRocksParser.HUB, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterLoadErrorUrlClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterLoadErrorUrlClause(this);
		}
	}


}



class CreateImageClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createImageClause;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	IMAGE() {
	    return this.getToken(StarRocksParser.IMAGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateImageClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateImageClause(this);
		}
	}


}



class CleanTabletSchedQClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cleanTabletSchedQClause;
    }

	CLEAN() {
	    return this.getToken(StarRocksParser.CLEAN, 0);
	};

	TABLET() {
	    return this.getToken(StarRocksParser.TABLET, 0);
	};

	SCHEDULER() {
	    return this.getToken(StarRocksParser.SCHEDULER, 0);
	};

	QUEUE() {
	    return this.getToken(StarRocksParser.QUEUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCleanTabletSchedQClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCleanTabletSchedQClause(this);
		}
	}


}



class DecommissionDiskClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_decommissionDiskClause;
    }

	DECOMMISSION() {
	    return this.getToken(StarRocksParser.DECOMMISSION, 0);
	};

	DISK() {
	    return this.getToken(StarRocksParser.DISK, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDecommissionDiskClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDecommissionDiskClause(this);
		}
	}


}



class CancelDecommissionDiskClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cancelDecommissionDiskClause;
    }

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	DECOMMISSION() {
	    return this.getToken(StarRocksParser.DECOMMISSION, 0);
	};

	DISK() {
	    return this.getToken(StarRocksParser.DISK, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCancelDecommissionDiskClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCancelDecommissionDiskClause(this);
		}
	}


}



class DisableDiskClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_disableDiskClause;
    }

	DISABLE() {
	    return this.getToken(StarRocksParser.DISABLE, 0);
	};

	DISK() {
	    return this.getToken(StarRocksParser.DISK, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDisableDiskClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDisableDiskClause(this);
		}
	}


}



class CancelDisableDiskClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cancelDisableDiskClause;
    }

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	DISABLE() {
	    return this.getToken(StarRocksParser.DISABLE, 0);
	};

	DISK() {
	    return this.getToken(StarRocksParser.DISK, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCancelDisableDiskClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCancelDisableDiskClause(this);
		}
	}


}



class CreateIndexClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createIndexClause;
        this.indexName = null;
    }

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	INDEX() {
	    return this.getToken(StarRocksParser.INDEX, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateIndexClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateIndexClause(this);
		}
	}


}



class DropIndexClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropIndexClause;
        this.indexName = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	INDEX() {
	    return this.getToken(StarRocksParser.INDEX, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropIndexClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropIndexClause(this);
		}
	}


}



class TableRenameClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_tableRenameClause;
    }

	RENAME() {
	    return this.getToken(StarRocksParser.RENAME, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTableRenameClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTableRenameClause(this);
		}
	}


}



class SwapTableClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_swapTableClause;
    }

	SWAP() {
	    return this.getToken(StarRocksParser.SWAP, 0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSwapTableClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSwapTableClause(this);
		}
	}


}



class ModifyPropertiesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_modifyPropertiesClause;
    }

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterModifyPropertiesClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitModifyPropertiesClause(this);
		}
	}


}



class ModifyCommentClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_modifyCommentClause;
    }

	COMMENT() {
	    return this.getToken(StarRocksParser.COMMENT, 0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterModifyCommentClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitModifyCommentClause(this);
		}
	}


}



class OptimizeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_optimizeClause;
    }

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	keyDesc() {
	    return this.getTypedRuleContext(KeyDescContext,0);
	};

	partitionDesc() {
	    return this.getTypedRuleContext(PartitionDescContext,0);
	};

	orderByDesc() {
	    return this.getTypedRuleContext(OrderByDescContext,0);
	};

	distributionDesc() {
	    return this.getTypedRuleContext(DistributionDescContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterOptimizeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitOptimizeClause(this);
		}
	}


}



class AddColumnClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_addColumnClause;
        this.rollupName = null;
    }

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	COLUMN() {
	    return this.getToken(StarRocksParser.COLUMN, 0);
	};

	columnDesc() {
	    return this.getTypedRuleContext(ColumnDescContext,0);
	};

	FIRST() {
	    return this.getToken(StarRocksParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(StarRocksParser.AFTER, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAddColumnClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAddColumnClause(this);
		}
	}


}



class AddColumnsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_addColumnsClause;
        this.rollupName = null;
    }

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	COLUMN() {
	    return this.getToken(StarRocksParser.COLUMN, 0);
	};

	columnDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnDescContext);
	    } else {
	        return this.getTypedRuleContext(ColumnDescContext,i);
	    }
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAddColumnsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAddColumnsClause(this);
		}
	}


}



class DropColumnClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropColumnClause;
        this.rollupName = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	COLUMN() {
	    return this.getToken(StarRocksParser.COLUMN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropColumnClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropColumnClause(this);
		}
	}


}



class ModifyColumnClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_modifyColumnClause;
        this.rollupName = null;
    }

	MODIFY() {
	    return this.getToken(StarRocksParser.MODIFY, 0);
	};

	COLUMN() {
	    return this.getToken(StarRocksParser.COLUMN, 0);
	};

	columnDesc() {
	    return this.getTypedRuleContext(ColumnDescContext,0);
	};

	FIRST() {
	    return this.getToken(StarRocksParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(StarRocksParser.AFTER, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterModifyColumnClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitModifyColumnClause(this);
		}
	}


}



class ColumnRenameClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_columnRenameClause;
        this.oldColumn = null;
        this.newColumn = null;
    }

	RENAME() {
	    return this.getToken(StarRocksParser.RENAME, 0);
	};

	COLUMN() {
	    return this.getToken(StarRocksParser.COLUMN, 0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterColumnRenameClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitColumnRenameClause(this);
		}
	}


}



class ReorderColumnsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_reorderColumnsClause;
        this.rollupName = null;
    }

	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterReorderColumnsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitReorderColumnsClause(this);
		}
	}


}



class RollupRenameClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_rollupRenameClause;
        this.rollupName = null;
        this.newRollupName = null;
    }

	RENAME() {
	    return this.getToken(StarRocksParser.RENAME, 0);
	};

	ROLLUP() {
	    return this.getToken(StarRocksParser.ROLLUP, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRollupRenameClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRollupRenameClause(this);
		}
	}


}



class CompactionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_compactionClause;
    }

	COMPACT() {
	    return this.getToken(StarRocksParser.COMPACT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	BASE() {
	    return this.getToken(StarRocksParser.BASE, 0);
	};

	CUMULATIVE() {
	    return this.getToken(StarRocksParser.CUMULATIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCompactionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCompactionClause(this);
		}
	}


}



class SubfieldNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_subfieldName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ARRAY_ELEMENT() {
	    return this.getToken(StarRocksParser.ARRAY_ELEMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSubfieldName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSubfieldName(this);
		}
	}


}



class NestedFieldNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_nestedFieldName;
    }

	subfieldName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubfieldNameContext);
	    } else {
	        return this.getTypedRuleContext(SubfieldNameContext,i);
	    }
	};

	DOT_IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.DOT_IDENTIFIER);
	    } else {
	        return this.getToken(StarRocksParser.DOT_IDENTIFIER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterNestedFieldName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitNestedFieldName(this);
		}
	}


}



class AddFieldClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_addFieldClause;
    }

	MODIFY() {
	    return this.getToken(StarRocksParser.MODIFY, 0);
	};

	COLUMN() {
	    return this.getToken(StarRocksParser.COLUMN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	FIELD() {
	    return this.getToken(StarRocksParser.FIELD, 0);
	};

	subfieldDesc() {
	    return this.getTypedRuleContext(SubfieldDescContext,0);
	};

	FIRST() {
	    return this.getToken(StarRocksParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(StarRocksParser.AFTER, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAddFieldClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAddFieldClause(this);
		}
	}


}



class DropFieldClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropFieldClause;
    }

	MODIFY() {
	    return this.getToken(StarRocksParser.MODIFY, 0);
	};

	COLUMN() {
	    return this.getToken(StarRocksParser.COLUMN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	FIELD() {
	    return this.getToken(StarRocksParser.FIELD, 0);
	};

	nestedFieldName() {
	    return this.getTypedRuleContext(NestedFieldNameContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropFieldClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropFieldClause(this);
		}
	}


}



class CreateOrReplaceTagClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createOrReplaceTagClause;
    }

	REPLACE() {
	    return this.getToken(StarRocksParser.REPLACE, 0);
	};

	TAG() {
	    return this.getToken(StarRocksParser.TAG, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	tagOptions() {
	    return this.getTypedRuleContext(TagOptionsContext,0);
	};

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	OR() {
	    return this.getToken(StarRocksParser.OR, 0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateOrReplaceTagClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateOrReplaceTagClause(this);
		}
	}


}



class CreateOrReplaceBranchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createOrReplaceBranchClause;
    }

	REPLACE() {
	    return this.getToken(StarRocksParser.REPLACE, 0);
	};

	BRANCH() {
	    return this.getToken(StarRocksParser.BRANCH, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	branchOptions() {
	    return this.getTypedRuleContext(BranchOptionsContext,0);
	};

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	OR() {
	    return this.getToken(StarRocksParser.OR, 0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateOrReplaceBranchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateOrReplaceBranchClause(this);
		}
	}


}



class DropBranchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropBranchClause;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	BRANCH() {
	    return this.getToken(StarRocksParser.BRANCH, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropBranchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropBranchClause(this);
		}
	}


}



class DropTagClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropTagClause;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	TAG() {
	    return this.getToken(StarRocksParser.TAG, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropTagClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropTagClause(this);
		}
	}


}



class TableOperationClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_tableOperationClause;
    }

	EXECUTE() {
	    return this.getToken(StarRocksParser.EXECUTE, 0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTableOperationClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTableOperationClause(this);
		}
	}


}



class TagOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_tagOptions;
    }

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	OF() {
	    return this.getToken(StarRocksParser.OF, 0);
	};

	VERSION() {
	    return this.getToken(StarRocksParser.VERSION, 0);
	};

	snapshotId() {
	    return this.getTypedRuleContext(SnapshotIdContext,0);
	};

	refRetain() {
	    return this.getTypedRuleContext(RefRetainContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTagOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTagOptions(this);
		}
	}


}



class BranchOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_branchOptions;
    }

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	OF() {
	    return this.getToken(StarRocksParser.OF, 0);
	};

	VERSION() {
	    return this.getToken(StarRocksParser.VERSION, 0);
	};

	snapshotId() {
	    return this.getTypedRuleContext(SnapshotIdContext,0);
	};

	refRetain() {
	    return this.getTypedRuleContext(RefRetainContext,0);
	};

	snapshotRetention() {
	    return this.getTypedRuleContext(SnapshotRetentionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBranchOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBranchOptions(this);
		}
	}


}



class SnapshotRetentionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_snapshotRetention;
    }

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	SNAPSHOT() {
	    return this.getToken(StarRocksParser.SNAPSHOT, 0);
	};

	RETENTION() {
	    return this.getToken(StarRocksParser.RETENTION, 0);
	};

	minSnapshotsToKeep() {
	    return this.getTypedRuleContext(MinSnapshotsToKeepContext,0);
	};

	maxSnapshotAge() {
	    return this.getTypedRuleContext(MaxSnapshotAgeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSnapshotRetention(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSnapshotRetention(this);
		}
	}


}



class RefRetainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_refRetain;
    }

	RETAIN() {
	    return this.getToken(StarRocksParser.RETAIN, 0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	timeUnit() {
	    return this.getTypedRuleContext(TimeUnitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRefRetain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRefRetain(this);
		}
	}


}



class MaxSnapshotAgeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_maxSnapshotAge;
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	timeUnit() {
	    return this.getTypedRuleContext(TimeUnitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMaxSnapshotAge(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMaxSnapshotAge(this);
		}
	}


}



class MinSnapshotsToKeepContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_minSnapshotsToKeep;
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	SNAPSHOTS() {
	    return this.getToken(StarRocksParser.SNAPSHOTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMinSnapshotsToKeep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMinSnapshotsToKeep(this);
		}
	}


}



class SnapshotIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_snapshotId;
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSnapshotId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSnapshotId(this);
		}
	}


}



class TimeUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_timeUnit;
    }

	DAYS() {
	    return this.getToken(StarRocksParser.DAYS, 0);
	};

	HOURS() {
	    return this.getToken(StarRocksParser.HOURS, 0);
	};

	MINUTES() {
	    return this.getToken(StarRocksParser.MINUTES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTimeUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTimeUnit(this);
		}
	}


}



class Integer_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_integer_list;
    }

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(StarRocksParser.INTEGER_VALUE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInteger_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInteger_list(this);
		}
	}


}



class DropPersistentIndexClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropPersistentIndexClause;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	PERSISTENT() {
	    return this.getToken(StarRocksParser.PERSISTENT, 0);
	};

	INDEX() {
	    return this.getToken(StarRocksParser.INDEX, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	TABLETS() {
	    return this.getToken(StarRocksParser.TABLETS, 0);
	};

	integer_list() {
	    return this.getTypedRuleContext(Integer_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropPersistentIndexClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropPersistentIndexClause(this);
		}
	}


}



class AddPartitionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_addPartitionClause;
    }

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	singleRangePartition() {
	    return this.getTypedRuleContext(SingleRangePartitionContext,0);
	};

	PARTITIONS() {
	    return this.getToken(StarRocksParser.PARTITIONS, 0);
	};

	multiRangePartition() {
	    return this.getTypedRuleContext(MultiRangePartitionContext,0);
	};

	TEMPORARY() {
	    return this.getToken(StarRocksParser.TEMPORARY, 0);
	};

	distributionDesc() {
	    return this.getTypedRuleContext(DistributionDescContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	singleItemListPartitionDesc() {
	    return this.getTypedRuleContext(SingleItemListPartitionDescContext,0);
	};

	multiItemListPartitionDesc() {
	    return this.getTypedRuleContext(MultiItemListPartitionDescContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAddPartitionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAddPartitionClause(this);
		}
	}


}



class DropPartitionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropPartitionClause;
        this.where = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	PARTITIONS() {
	    return this.getToken(StarRocksParser.PARTITIONS, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	TEMPORARY() {
	    return this.getToken(StarRocksParser.TEMPORARY, 0);
	};

	FORCE() {
	    return this.getToken(StarRocksParser.FORCE, 0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	multiRangePartition() {
	    return this.getTypedRuleContext(MultiRangePartitionContext,0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropPartitionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropPartitionClause(this);
		}
	}


}



class TruncatePartitionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_truncatePartitionClause;
    }

	TRUNCATE() {
	    return this.getToken(StarRocksParser.TRUNCATE, 0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTruncatePartitionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTruncatePartitionClause(this);
		}
	}


}



class ModifyPartitionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_modifyPartitionClause;
    }

	MODIFY() {
	    return this.getToken(StarRocksParser.MODIFY, 0);
	};

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	ASTERISK_SYMBOL() {
	    return this.getToken(StarRocksParser.ASTERISK_SYMBOL, 0);
	};

	distributionDesc() {
	    return this.getTypedRuleContext(DistributionDescContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterModifyPartitionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitModifyPartitionClause(this);
		}
	}


}



class ReplacePartitionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_replacePartitionClause;
        this.parName = null;
        this.tempParName = null;
    }

	REPLACE() {
	    return this.getToken(StarRocksParser.REPLACE, 0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	partitionNames = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionNamesContext);
	    } else {
	        return this.getTypedRuleContext(PartitionNamesContext,i);
	    }
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterReplacePartitionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitReplacePartitionClause(this);
		}
	}


}



class PartitionRenameClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_partitionRenameClause;
        this.parName = null;
        this.newParName = null;
    }

	RENAME() {
	    return this.getToken(StarRocksParser.RENAME, 0);
	};

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPartitionRenameClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPartitionRenameClause(this);
		}
	}


}



class InsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_insertStatement;
    }

	INSERT() {
	    return this.getToken(StarRocksParser.INSERT, 0);
	};

	INTO() {
	    return this.getToken(StarRocksParser.INTO, 0);
	};

	OVERWRITE() {
	    return this.getToken(StarRocksParser.OVERWRITE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	queryStatement() {
	    return this.getTypedRuleContext(QueryStatementContext,0);
	};

	explainDesc() {
	    return this.getTypedRuleContext(ExplainDescContext,0);
	};

	insertLabelOrColumnAliases = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertLabelOrColumnAliasesContext);
	    } else {
	        return this.getTypedRuleContext(InsertLabelOrColumnAliasesContext,i);
	    }
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	FILES() {
	    return this.getToken(StarRocksParser.FILES, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	BLACKHOLE() {
	    return this.getToken(StarRocksParser.BLACKHOLE, 0);
	};

	VALUES() {
	    return this.getToken(StarRocksParser.VALUES, 0);
	};

	expressionsWithDefault = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionsWithDefaultContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionsWithDefaultContext,i);
	    }
	};

	writeBranch() {
	    return this.getTypedRuleContext(WriteBranchContext,0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInsertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInsertStatement(this);
		}
	}


}



class InsertLabelOrColumnAliasesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_insertLabelOrColumnAliases;
        this.label = null;
    }

	columnAliasesOrByName() {
	    return this.getTypedRuleContext(ColumnAliasesOrByNameContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	LABEL() {
	    return this.getToken(StarRocksParser.LABEL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInsertLabelOrColumnAliases(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInsertLabelOrColumnAliases(this);
		}
	}


}



class ColumnAliasesOrByNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_columnAliasesOrByName;
    }

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	NAME() {
	    return this.getToken(StarRocksParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterColumnAliasesOrByName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitColumnAliasesOrByName(this);
		}
	}


}



class UpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_updateStatement;
        this.where = null;
    }

	UPDATE() {
	    return this.getToken(StarRocksParser.UPDATE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	assignmentList() {
	    return this.getTypedRuleContext(AssignmentListContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	explainDesc() {
	    return this.getTypedRuleContext(ExplainDescContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUpdateStatement(this);
		}
	}


}



class DeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_deleteStatement;
        this.using = null;
        this.where = null;
    }

	DELETE() {
	    return this.getToken(StarRocksParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	explainDesc() {
	    return this.getTypedRuleContext(ExplainDescContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	USING() {
	    return this.getToken(StarRocksParser.USING, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	relations() {
	    return this.getTypedRuleContext(RelationsContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDeleteStatement(this);
		}
	}


}



class CreateRoutineLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createRoutineLoadStatement;
        this.db = null;
        this.name = null;
        this.table = null;
        this.source = null;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	ROUTINE() {
	    return this.getToken(StarRocksParser.ROUTINE, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	loadProperties = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LoadPropertiesContext);
	    } else {
	        return this.getTypedRuleContext(LoadPropertiesContext,i);
	    }
	};

	jobProperties() {
	    return this.getTypedRuleContext(JobPropertiesContext,0);
	};

	dataSourceProperties() {
	    return this.getTypedRuleContext(DataSourcePropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateRoutineLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateRoutineLoadStatement(this);
		}
	}


}



class AlterRoutineLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterRoutineLoadStatement;
        this.db = null;
        this.name = null;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	ROUTINE() {
	    return this.getToken(StarRocksParser.ROUTINE, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	loadProperties = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LoadPropertiesContext);
	    } else {
	        return this.getTypedRuleContext(LoadPropertiesContext,i);
	    }
	};

	jobProperties() {
	    return this.getTypedRuleContext(JobPropertiesContext,0);
	};

	dataSource() {
	    return this.getTypedRuleContext(DataSourceContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterRoutineLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterRoutineLoadStatement(this);
		}
	}


}



class DataSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dataSource;
        this.source = null;
    }

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	dataSourceProperties() {
	    return this.getTypedRuleContext(DataSourcePropertiesContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDataSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDataSource(this);
		}
	}


}



class LoadPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_loadProperties;
    }

	colSeparatorProperty() {
	    return this.getTypedRuleContext(ColSeparatorPropertyContext,0);
	};

	rowDelimiterProperty() {
	    return this.getTypedRuleContext(RowDelimiterPropertyContext,0);
	};

	importColumns() {
	    return this.getTypedRuleContext(ImportColumnsContext,0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLoadProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLoadProperties(this);
		}
	}


}



class ColSeparatorPropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_colSeparatorProperty;
    }

	COLUMNS() {
	    return this.getToken(StarRocksParser.COLUMNS, 0);
	};

	TERMINATED() {
	    return this.getToken(StarRocksParser.TERMINATED, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterColSeparatorProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitColSeparatorProperty(this);
		}
	}


}



class RowDelimiterPropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_rowDelimiterProperty;
    }

	ROWS() {
	    return this.getToken(StarRocksParser.ROWS, 0);
	};

	TERMINATED() {
	    return this.getToken(StarRocksParser.TERMINATED, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRowDelimiterProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRowDelimiterProperty(this);
		}
	}


}



class ImportColumnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_importColumns;
    }

	COLUMNS() {
	    return this.getToken(StarRocksParser.COLUMNS, 0);
	};

	columnProperties() {
	    return this.getTypedRuleContext(ColumnPropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterImportColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitImportColumns(this);
		}
	}


}



class ColumnPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_columnProperties;
    }

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	assignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterColumnProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitColumnProperties(this);
		}
	}


}



class JobPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_jobProperties;
    }

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterJobProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitJobProperties(this);
		}
	}


}



class DataSourcePropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dataSourceProperties;
    }

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDataSourceProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDataSourceProperties(this);
		}
	}


}



class StopRoutineLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_stopRoutineLoadStatement;
        this.db = null;
        this.name = null;
    }

	STOP() {
	    return this.getToken(StarRocksParser.STOP, 0);
	};

	ROUTINE() {
	    return this.getToken(StarRocksParser.ROUTINE, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterStopRoutineLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitStopRoutineLoadStatement(this);
		}
	}


}



class ResumeRoutineLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_resumeRoutineLoadStatement;
        this.db = null;
        this.name = null;
    }

	RESUME() {
	    return this.getToken(StarRocksParser.RESUME, 0);
	};

	ROUTINE() {
	    return this.getToken(StarRocksParser.ROUTINE, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterResumeRoutineLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitResumeRoutineLoadStatement(this);
		}
	}


}



class PauseRoutineLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_pauseRoutineLoadStatement;
        this.db = null;
        this.name = null;
    }

	PAUSE() {
	    return this.getToken(StarRocksParser.PAUSE, 0);
	};

	ROUTINE() {
	    return this.getToken(StarRocksParser.ROUTINE, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPauseRoutineLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPauseRoutineLoadStatement(this);
		}
	}


}



class ShowRoutineLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showRoutineLoadStatement;
        this.db = null;
        this.name = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	ROUTINE() {
	    return this.getToken(StarRocksParser.ROUTINE, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	limitElement() {
	    return this.getTypedRuleContext(LimitElementContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowRoutineLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowRoutineLoadStatement(this);
		}
	}


}



class ShowRoutineLoadTaskStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showRoutineLoadTaskStatement;
        this.db = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	ROUTINE() {
	    return this.getToken(StarRocksParser.ROUTINE, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	TASK() {
	    return this.getToken(StarRocksParser.TASK, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowRoutineLoadTaskStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowRoutineLoadTaskStatement(this);
		}
	}


}



class ShowCreateRoutineLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showCreateRoutineLoadStatement;
        this.db = null;
        this.name = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	ROUTINE() {
	    return this.getToken(StarRocksParser.ROUTINE, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowCreateRoutineLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowCreateRoutineLoadStatement(this);
		}
	}


}



class ShowStreamLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showStreamLoadStatement;
        this.db = null;
        this.name = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	STREAM() {
	    return this.getToken(StarRocksParser.STREAM, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	limitElement() {
	    return this.getTypedRuleContext(LimitElementContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowStreamLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowStreamLoadStatement(this);
		}
	}


}



class AnalyzeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_analyzeStatement;
    }

	ANALYZE() {
	    return this.getToken(StarRocksParser.ANALYZE, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	analyzeColumnClause() {
	    return this.getTypedRuleContext(AnalyzeColumnClauseContext,0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	MODE() {
	    return this.getToken(StarRocksParser.MODE, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	FULL() {
	    return this.getToken(StarRocksParser.FULL, 0);
	};

	SAMPLE() {
	    return this.getToken(StarRocksParser.SAMPLE, 0);
	};

	SYNC() {
	    return this.getToken(StarRocksParser.SYNC, 0);
	};

	ASYNC() {
	    return this.getToken(StarRocksParser.ASYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAnalyzeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAnalyzeStatement(this);
		}
	}


}



class AnalyzeColumnClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_analyzeColumnClause;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PredicateColumnsContext extends AnalyzeColumnClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PREDICATE() {
	    return this.getToken(StarRocksParser.PREDICATE, 0);
	};

	COLUMNS() {
	    return this.getToken(StarRocksParser.COLUMNS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPredicateColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPredicateColumns(this);
		}
	}


}

StarRocksParser.PredicateColumnsContext = PredicateColumnsContext;

class RegularColumnsContext extends AnalyzeColumnClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRegularColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRegularColumns(this);
		}
	}


}

StarRocksParser.RegularColumnsContext = RegularColumnsContext;

class AllColumnsContext extends AnalyzeColumnClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	COLUMNS() {
	    return this.getToken(StarRocksParser.COLUMNS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAllColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAllColumns(this);
		}
	}


}

StarRocksParser.AllColumnsContext = AllColumnsContext;

class DropStatsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropStatsStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	STATS() {
	    return this.getToken(StarRocksParser.STATS, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropStatsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropStatsStatement(this);
		}
	}


}



class HistogramStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_histogramStatement;
        this.bucket = null;
    }

	ANALYZE() {
	    return this.getToken(StarRocksParser.ANALYZE, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	UPDATE() {
	    return this.getToken(StarRocksParser.UPDATE, 0);
	};

	HISTOGRAM() {
	    return this.getToken(StarRocksParser.HISTOGRAM, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	analyzeColumnClause() {
	    return this.getTypedRuleContext(AnalyzeColumnClauseContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	BUCKETS() {
	    return this.getToken(StarRocksParser.BUCKETS, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterHistogramStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitHistogramStatement(this);
		}
	}


}



class AnalyzeHistogramStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_analyzeHistogramStatement;
    }

	histogramStatement() {
	    return this.getTypedRuleContext(HistogramStatementContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	MODE() {
	    return this.getToken(StarRocksParser.MODE, 0);
	};

	SYNC() {
	    return this.getToken(StarRocksParser.SYNC, 0);
	};

	ASYNC() {
	    return this.getToken(StarRocksParser.ASYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAnalyzeHistogramStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAnalyzeHistogramStatement(this);
		}
	}


}



class DropHistogramStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropHistogramStatement;
    }

	ANALYZE() {
	    return this.getToken(StarRocksParser.ANALYZE, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	HISTOGRAM() {
	    return this.getToken(StarRocksParser.HISTOGRAM, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropHistogramStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropHistogramStatement(this);
		}
	}


}



class CreateAnalyzeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createAnalyzeStatement;
        this.db = null;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	ANALYZE() {
	    return this.getToken(StarRocksParser.ANALYZE, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	FULL() {
	    return this.getToken(StarRocksParser.FULL, 0);
	};

	SAMPLE() {
	    return this.getToken(StarRocksParser.SAMPLE, 0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	histogramStatement() {
	    return this.getTypedRuleContext(HistogramStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateAnalyzeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateAnalyzeStatement(this);
		}
	}


}



class DropAnalyzeJobStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropAnalyzeJobStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	ANALYZE() {
	    return this.getToken(StarRocksParser.ANALYZE, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropAnalyzeJobStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropAnalyzeJobStatement(this);
		}
	}


}



class ShowAnalyzeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showAnalyzeStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	ANALYZE() {
	    return this.getToken(StarRocksParser.ANALYZE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	JOB() {
	    return this.getToken(StarRocksParser.JOB, 0);
	};

	STATUS() {
	    return this.getToken(StarRocksParser.STATUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowAnalyzeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowAnalyzeStatement(this);
		}
	}


}



class ShowStatsMetaStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showStatsMetaStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	STATS() {
	    return this.getToken(StarRocksParser.STATS, 0);
	};

	META() {
	    return this.getToken(StarRocksParser.META, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowStatsMetaStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowStatsMetaStatement(this);
		}
	}


}



class ShowHistogramMetaStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showHistogramMetaStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	HISTOGRAM() {
	    return this.getToken(StarRocksParser.HISTOGRAM, 0);
	};

	META() {
	    return this.getToken(StarRocksParser.META, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowHistogramMetaStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowHistogramMetaStatement(this);
		}
	}


}



class KillAnalyzeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_killAnalyzeStatement;
    }

	KILL() {
	    return this.getToken(StarRocksParser.KILL, 0);
	};

	ANALYZE() {
	    return this.getToken(StarRocksParser.ANALYZE, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterKillAnalyzeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitKillAnalyzeStatement(this);
		}
	}


}



class AnalyzeProfileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_analyzeProfileStatement;
    }

	ANALYZE() {
	    return this.getToken(StarRocksParser.ANALYZE, 0);
	};

	PROFILE() {
	    return this.getToken(StarRocksParser.PROFILE, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(StarRocksParser.INTEGER_VALUE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAnalyzeProfileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAnalyzeProfileStatement(this);
		}
	}


}



class CreateBaselinePlanStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createBaselinePlanStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	BASELINE() {
	    return this.getToken(StarRocksParser.BASELINE, 0);
	};

	USING() {
	    return this.getToken(StarRocksParser.USING, 0);
	};

	queryRelation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryRelationContext);
	    } else {
	        return this.getTypedRuleContext(QueryRelationContext,i);
	    }
	};

	GLOBAL() {
	    return this.getToken(StarRocksParser.GLOBAL, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateBaselinePlanStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateBaselinePlanStatement(this);
		}
	}


}



class DropBaselinePlanStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropBaselinePlanStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	BASELINE() {
	    return this.getToken(StarRocksParser.BASELINE, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropBaselinePlanStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropBaselinePlanStatement(this);
		}
	}


}



class ShowBaselinePlanStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showBaselinePlanStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	BASELINE() {
	    return this.getToken(StarRocksParser.BASELINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowBaselinePlanStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowBaselinePlanStatement(this);
		}
	}


}



class CreateResourceGroupStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createResourceGroupStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	GROUP() {
	    return this.getToken(StarRocksParser.GROUP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyContext);
	    } else {
	        return this.getTypedRuleContext(PropertyContext,i);
	    }
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	OR() {
	    return this.getToken(StarRocksParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(StarRocksParser.REPLACE, 0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	classifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateResourceGroupStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateResourceGroupStatement(this);
		}
	}


}



class DropResourceGroupStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropResourceGroupStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	GROUP() {
	    return this.getToken(StarRocksParser.GROUP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropResourceGroupStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropResourceGroupStatement(this);
		}
	}


}



class AlterResourceGroupStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterResourceGroupStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	GROUP() {
	    return this.getToken(StarRocksParser.GROUP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	classifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassifierContext,i);
	    }
	};

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(StarRocksParser.INTEGER_VALUE, i);
	    }
	};


	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyContext);
	    } else {
	        return this.getTypedRuleContext(PropertyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterResourceGroupStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterResourceGroupStatement(this);
		}
	}


}



class ShowResourceGroupStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showResourceGroupStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	GROUP() {
	    return this.getToken(StarRocksParser.GROUP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	VERBOSE() {
	    return this.getToken(StarRocksParser.VERBOSE, 0);
	};

	GROUPS() {
	    return this.getToken(StarRocksParser.GROUPS, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowResourceGroupStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowResourceGroupStatement(this);
		}
	}


}



class ShowResourceGroupUsageStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showResourceGroupUsageStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	USAGE() {
	    return this.getToken(StarRocksParser.USAGE, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	GROUP() {
	    return this.getToken(StarRocksParser.GROUP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	GROUPS() {
	    return this.getToken(StarRocksParser.GROUPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowResourceGroupUsageStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowResourceGroupUsageStatement(this);
		}
	}


}



class CreateResourceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createResourceStatement;
        this.resourceName = null;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	EXTERNAL() {
	    return this.getToken(StarRocksParser.EXTERNAL, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateResourceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateResourceStatement(this);
		}
	}


}



class AlterResourceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterResourceStatement;
        this.resourceName = null;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterResourceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterResourceStatement(this);
		}
	}


}



class DropResourceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropResourceStatement;
        this.resourceName = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropResourceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropResourceStatement(this);
		}
	}


}



class ShowResourceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showResourceStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	RESOURCES() {
	    return this.getToken(StarRocksParser.RESOURCES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowResourceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowResourceStatement(this);
		}
	}


}



class ClassifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_classifier;
    }

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterClassifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitClassifier(this);
		}
	}


}



class ShowFunctionsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showFunctionsStatement;
        this.db = null;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	FUNCTIONS() {
	    return this.getToken(StarRocksParser.FUNCTIONS, 0);
	};

	FULL() {
	    return this.getToken(StarRocksParser.FULL, 0);
	};

	BUILTIN() {
	    return this.getToken(StarRocksParser.BUILTIN, 0);
	};

	GLOBAL() {
	    return this.getToken(StarRocksParser.GLOBAL, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowFunctionsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowFunctionsStatement(this);
		}
	}


}



class DropFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropFunctionStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	FUNCTION() {
	    return this.getToken(StarRocksParser.FUNCTION, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	GLOBAL() {
	    return this.getToken(StarRocksParser.GLOBAL, 0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropFunctionStatement(this);
		}
	}


}



class CreateFunctionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createFunctionStatement;
        this.functionType = null;
        this.returnType = null;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	orReplace() {
	    return this.getTypedRuleContext(OrReplaceContext,0);
	};

	FUNCTION() {
	    return this.getToken(StarRocksParser.FUNCTION, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	RETURNS() {
	    return this.getToken(StarRocksParser.RETURNS, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	GLOBAL() {
	    return this.getToken(StarRocksParser.GLOBAL, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	inlineProperties() {
	    return this.getTypedRuleContext(InlinePropertiesContext,0);
	};

	inlineFunction() {
	    return this.getTypedRuleContext(InlineFunctionContext,0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	AGGREGATE() {
	    return this.getToken(StarRocksParser.AGGREGATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateFunctionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateFunctionStatement(this);
		}
	}


}



class InlineFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_inlineFunction;
    }

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	ATTACHMENT() {
	    return this.getToken(StarRocksParser.ATTACHMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInlineFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInlineFunction(this);
		}
	}


}



class TypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_typeList;
    }

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	DOTDOTDOT() {
	    return this.getToken(StarRocksParser.DOTDOTDOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTypeList(this);
		}
	}


}



class LoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_loadStatement;
        this.label = null;
        this.data = null;
        this.broker = null;
        this.system = null;
        this.props = null;
        this.resource = null;
    }

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	LABEL() {
	    return this.getToken(StarRocksParser.LABEL, 0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	PROPERTIES() {
	    return this.getToken(StarRocksParser.PROPERTIES, 0);
	};

	dataDescList() {
	    return this.getTypedRuleContext(DataDescListContext,0);
	};

	brokerDesc() {
	    return this.getTypedRuleContext(BrokerDescContext,0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	resourceDesc() {
	    return this.getTypedRuleContext(ResourceDescContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLoadStatement(this);
		}
	}


}



class LabelNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_labelName;
        this.db = null;
        this.label = null;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLabelName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLabelName(this);
		}
	}


}



class DataDescListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dataDescList;
    }

	dataDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataDescContext);
	    } else {
	        return this.getTypedRuleContext(DataDescContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDataDescList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDataDescList(this);
		}
	}


}



class DataDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dataDesc;
        this.srcFiles = null;
        this.dstTableName = null;
        this.partitions = null;
        this.colSep = null;
        this.rowSep = null;
        this.format = null;
        this.formatPropsField = null;
        this.colList = null;
        this.colFromPath = null;
        this.colMappingList = null;
        this.where = null;
        this.srcTableName = null;
    }

	DATA() {
	    return this.getToken(StarRocksParser.DATA, 0);
	};

	INFILE() {
	    return this.getToken(StarRocksParser.INFILE, 0);
	};

	INTO() {
	    return this.getToken(StarRocksParser.INTO, 0);
	};

	TABLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.TABLE);
	    } else {
	        return this.getToken(StarRocksParser.TABLE, i);
	    }
	};


	stringList() {
	    return this.getTypedRuleContext(StringListContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	NEGATIVE() {
	    return this.getToken(StarRocksParser.NEGATIVE, 0);
	};

	COLUMNS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.COLUMNS);
	    } else {
	        return this.getToken(StarRocksParser.COLUMNS, i);
	    }
	};


	TERMINATED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.TERMINATED);
	    } else {
	        return this.getToken(StarRocksParser.TERMINATED, i);
	    }
	};


	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.BY);
	    } else {
	        return this.getToken(StarRocksParser.BY, i);
	    }
	};


	ROWS() {
	    return this.getToken(StarRocksParser.ROWS, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	PATH() {
	    return this.getToken(StarRocksParser.PATH, 0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	fileFormat() {
	    return this.getTypedRuleContext(FileFormatContext,0);
	};

	formatProps() {
	    return this.getTypedRuleContext(FormatPropsContext,0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	classifier() {
	    return this.getTypedRuleContext(ClassifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDataDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDataDesc(this);
		}
	}


}



class FormatPropsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_formatProps;
        this.encloseCharacter = null;
        this.escapeCharacter = null;
    }

	SKIP_HEADER() {
	    return this.getToken(StarRocksParser.SKIP_HEADER, 0);
	};

	EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.EQ);
	    } else {
	        return this.getToken(StarRocksParser.EQ, i);
	    }
	};


	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	TRIM_SPACE() {
	    return this.getToken(StarRocksParser.TRIM_SPACE, 0);
	};

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	ENCLOSE() {
	    return this.getToken(StarRocksParser.ENCLOSE, 0);
	};

	ESCAPE() {
	    return this.getToken(StarRocksParser.ESCAPE, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterFormatProps(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitFormatProps(this);
		}
	}


}



class BrokerDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_brokerDesc;
        this.props = null;
        this.name = null;
    }

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	BROKER() {
	    return this.getToken(StarRocksParser.BROKER, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBrokerDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBrokerDesc(this);
		}
	}


}



class ResourceDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_resourceDesc;
        this.name = null;
        this.props = null;
    }

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterResourceDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitResourceDesc(this);
		}
	}


}



class ShowLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showLoadStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	limitElement() {
	    return this.getTypedRuleContext(LimitElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowLoadStatement(this);
		}
	}


}



class ShowLoadWarningsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showLoadWarningsStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	WARNINGS() {
	    return this.getToken(StarRocksParser.WARNINGS, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	limitElement() {
	    return this.getTypedRuleContext(LimitElementContext,0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowLoadWarningsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowLoadWarningsStatement(this);
		}
	}


}



class CancelLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cancelLoadStatement;
    }

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCancelLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCancelLoadStatement(this);
		}
	}


}



class AlterLoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterLoadStatement;
        this.db = null;
        this.name = null;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	LOAD() {
	    return this.getToken(StarRocksParser.LOAD, 0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	jobProperties() {
	    return this.getTypedRuleContext(JobPropertiesContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterLoadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterLoadStatement(this);
		}
	}


}



class CancelCompactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cancelCompactionStatement;
    }

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	COMPACTION() {
	    return this.getToken(StarRocksParser.COMPACTION, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCancelCompactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCancelCompactionStatement(this);
		}
	}


}



class ShowAuthorStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showAuthorStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	AUTHORS() {
	    return this.getToken(StarRocksParser.AUTHORS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowAuthorStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowAuthorStatement(this);
		}
	}


}



class ShowBackendsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showBackendsStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	BACKENDS() {
	    return this.getToken(StarRocksParser.BACKENDS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowBackendsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowBackendsStatement(this);
		}
	}


}



class ShowBrokerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showBrokerStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	BROKER() {
	    return this.getToken(StarRocksParser.BROKER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowBrokerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowBrokerStatement(this);
		}
	}


}



class ShowCharsetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showCharsetStatement;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	CHAR() {
	    return this.getToken(StarRocksParser.CHAR, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	CHARSET() {
	    return this.getToken(StarRocksParser.CHARSET, 0);
	};

	CHARACTER() {
	    return this.getToken(StarRocksParser.CHARACTER, 0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowCharsetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowCharsetStatement(this);
		}
	}


}



class ShowCollationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showCollationStatement;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	COLLATION() {
	    return this.getToken(StarRocksParser.COLLATION, 0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowCollationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowCollationStatement(this);
		}
	}


}



class ShowDeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showDeleteStatement;
        this.db = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	DELETE() {
	    return this.getToken(StarRocksParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowDeleteStatement(this);
		}
	}


}



class ShowDynamicPartitionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showDynamicPartitionStatement;
        this.db = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	DYNAMIC() {
	    return this.getToken(StarRocksParser.DYNAMIC, 0);
	};

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	TABLES() {
	    return this.getToken(StarRocksParser.TABLES, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowDynamicPartitionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowDynamicPartitionStatement(this);
		}
	}


}



class ShowEventsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showEventsStatement;
        this.catalog = null;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	EVENTS() {
	    return this.getToken(StarRocksParser.EVENTS, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowEventsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowEventsStatement(this);
		}
	}


}



class ShowEnginesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showEnginesStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	ENGINES() {
	    return this.getToken(StarRocksParser.ENGINES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowEnginesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowEnginesStatement(this);
		}
	}


}



class ShowFrontendsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showFrontendsStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	FRONTENDS() {
	    return this.getToken(StarRocksParser.FRONTENDS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowFrontendsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowFrontendsStatement(this);
		}
	}


}



class ShowPluginsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showPluginsStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	PLUGINS() {
	    return this.getToken(StarRocksParser.PLUGINS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowPluginsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowPluginsStatement(this);
		}
	}


}



class ShowRepositoriesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showRepositoriesStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	REPOSITORIES() {
	    return this.getToken(StarRocksParser.REPOSITORIES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowRepositoriesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowRepositoriesStatement(this);
		}
	}


}



class ShowOpenTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showOpenTableStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	OPEN() {
	    return this.getToken(StarRocksParser.OPEN, 0);
	};

	TABLES() {
	    return this.getToken(StarRocksParser.TABLES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowOpenTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowOpenTableStatement(this);
		}
	}


}



class ShowPrivilegesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showPrivilegesStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	PRIVILEGES() {
	    return this.getToken(StarRocksParser.PRIVILEGES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowPrivilegesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowPrivilegesStatement(this);
		}
	}


}



class ShowProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showProcedureStatement;
        this.pattern = null;
        this.where = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	STATUS() {
	    return this.getToken(StarRocksParser.STATUS, 0);
	};

	PROCEDURE() {
	    return this.getToken(StarRocksParser.PROCEDURE, 0);
	};

	FUNCTION() {
	    return this.getToken(StarRocksParser.FUNCTION, 0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowProcedureStatement(this);
		}
	}


}



class ShowProcStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showProcStatement;
        this.path = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	PROC() {
	    return this.getToken(StarRocksParser.PROC, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowProcStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowProcStatement(this);
		}
	}


}



class ShowProcesslistStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showProcesslistStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	PROCESSLIST() {
	    return this.getToken(StarRocksParser.PROCESSLIST, 0);
	};

	FULL() {
	    return this.getToken(StarRocksParser.FULL, 0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowProcesslistStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowProcesslistStatement(this);
		}
	}


}



class ShowProfilelistStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showProfilelistStatement;
        this.limit = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	PROFILELIST() {
	    return this.getToken(StarRocksParser.PROFILELIST, 0);
	};

	LIMIT() {
	    return this.getToken(StarRocksParser.LIMIT, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowProfilelistStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowProfilelistStatement(this);
		}
	}


}



class ShowRunningQueriesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showRunningQueriesStatement;
        this.limit = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	RUNNING() {
	    return this.getToken(StarRocksParser.RUNNING, 0);
	};

	QUERIES() {
	    return this.getToken(StarRocksParser.QUERIES, 0);
	};

	LIMIT() {
	    return this.getToken(StarRocksParser.LIMIT, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowRunningQueriesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowRunningQueriesStatement(this);
		}
	}


}



class ShowStatusStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showStatusStatement;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	STATUS() {
	    return this.getToken(StarRocksParser.STATUS, 0);
	};

	varType() {
	    return this.getTypedRuleContext(VarTypeContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowStatusStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowStatusStatement(this);
		}
	}


}



class ShowTabletStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showTabletStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	TABLET() {
	    return this.getToken(StarRocksParser.TABLET, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	TABLETS() {
	    return this.getToken(StarRocksParser.TABLETS, 0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	limitElement() {
	    return this.getTypedRuleContext(LimitElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowTabletStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowTabletStatement(this);
		}
	}


}



class ShowTransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showTransactionStatement;
        this.db = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	TRANSACTION() {
	    return this.getToken(StarRocksParser.TRANSACTION, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowTransactionStatement(this);
		}
	}


}



class ShowTriggersStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showTriggersStatement;
        this.catalog = null;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	TRIGGERS() {
	    return this.getToken(StarRocksParser.TRIGGERS, 0);
	};

	FULL() {
	    return this.getToken(StarRocksParser.FULL, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowTriggersStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowTriggersStatement(this);
		}
	}


}



class ShowUserPropertyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showUserPropertyStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	PROPERTY() {
	    return this.getToken(StarRocksParser.PROPERTY, 0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	PROPERTIES() {
	    return this.getToken(StarRocksParser.PROPERTIES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowUserPropertyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowUserPropertyStatement(this);
		}
	}


}



class ShowVariablesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showVariablesStatement;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	VARIABLES() {
	    return this.getToken(StarRocksParser.VARIABLES, 0);
	};

	varType() {
	    return this.getTypedRuleContext(VarTypeContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowVariablesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowVariablesStatement(this);
		}
	}


}



class ShowWarningStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showWarningStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	WARNINGS() {
	    return this.getToken(StarRocksParser.WARNINGS, 0);
	};

	ERRORS() {
	    return this.getToken(StarRocksParser.ERRORS, 0);
	};

	limitElement() {
	    return this.getTypedRuleContext(LimitElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowWarningStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowWarningStatement(this);
		}
	}


}



class HelpStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_helpStatement;
    }

	HELP() {
	    return this.getToken(StarRocksParser.HELP, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterHelpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitHelpStatement(this);
		}
	}


}



class CreateUserStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createUserStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(StarRocksParser.USER, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	authOption() {
	    return this.getTypedRuleContext(AuthOptionContext,0);
	};

	DEFAULT() {
	    return this.getToken(StarRocksParser.DEFAULT, 0);
	};

	ROLE() {
	    return this.getToken(StarRocksParser.ROLE, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateUserStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateUserStatement(this);
		}
	}


}



class DropUserStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropUserStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	USER() {
	    return this.getToken(StarRocksParser.USER, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropUserStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropUserStatement(this);
		}
	}


}



class AlterUserStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterUserStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	USER() {
	    return this.getToken(StarRocksParser.USER, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	authOption() {
	    return this.getTypedRuleContext(AuthOptionContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	DEFAULT() {
	    return this.getToken(StarRocksParser.DEFAULT, 0);
	};

	ROLE() {
	    return this.getToken(StarRocksParser.ROLE, 0);
	};

	NONE() {
	    return this.getToken(StarRocksParser.NONE, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterUserStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterUserStatement(this);
		}
	}


}



class ShowUserStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showUserStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	USER() {
	    return this.getToken(StarRocksParser.USER, 0);
	};

	USERS() {
	    return this.getToken(StarRocksParser.USERS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowUserStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowUserStatement(this);
		}
	}


}



class ShowAuthenticationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showAuthenticationStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ShowAllAuthenticationContext extends ShowAuthenticationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	AUTHENTICATION() {
	    return this.getToken(StarRocksParser.AUTHENTICATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowAllAuthentication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowAllAuthentication(this);
		}
	}


}

StarRocksParser.ShowAllAuthenticationContext = ShowAllAuthenticationContext;

class ShowAuthenticationForUserContext extends ShowAuthenticationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	AUTHENTICATION() {
	    return this.getToken(StarRocksParser.AUTHENTICATION, 0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowAuthenticationForUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowAuthenticationForUser(this);
		}
	}


}

StarRocksParser.ShowAuthenticationForUserContext = ShowAuthenticationForUserContext;

class ExecuteAsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_executeAsStatement;
    }

	EXECUTE() {
	    return this.getToken(StarRocksParser.EXECUTE, 0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	NO() {
	    return this.getToken(StarRocksParser.NO, 0);
	};

	REVERT() {
	    return this.getToken(StarRocksParser.REVERT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExecuteAsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExecuteAsStatement(this);
		}
	}


}



class CreateRoleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createRoleStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	ROLE() {
	    return this.getToken(StarRocksParser.ROLE, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateRoleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateRoleStatement(this);
		}
	}


}



class AlterRoleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterRoleStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	ROLE() {
	    return this.getToken(StarRocksParser.ROLE, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	COMMENT() {
	    return this.getToken(StarRocksParser.COMMENT, 0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterRoleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterRoleStatement(this);
		}
	}


}



class DropRoleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropRoleStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	ROLE() {
	    return this.getToken(StarRocksParser.ROLE, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropRoleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropRoleStatement(this);
		}
	}


}



class ShowRolesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showRolesStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	ROLES() {
	    return this.getToken(StarRocksParser.ROLES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowRolesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowRolesStatement(this);
		}
	}


}



class GrantRoleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_grantRoleStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GrantRoleToUserContext extends GrantRoleStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GRANT() {
	    return this.getToken(StarRocksParser.GRANT, 0);
	};

	identifierOrStringList() {
	    return this.getTypedRuleContext(IdentifierOrStringListContext,0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	USER() {
	    return this.getToken(StarRocksParser.USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterGrantRoleToUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitGrantRoleToUser(this);
		}
	}


}

StarRocksParser.GrantRoleToUserContext = GrantRoleToUserContext;

class GrantRoleToRoleContext extends GrantRoleStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GRANT() {
	    return this.getToken(StarRocksParser.GRANT, 0);
	};

	identifierOrStringList() {
	    return this.getTypedRuleContext(IdentifierOrStringListContext,0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	ROLE() {
	    return this.getToken(StarRocksParser.ROLE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterGrantRoleToRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitGrantRoleToRole(this);
		}
	}


}

StarRocksParser.GrantRoleToRoleContext = GrantRoleToRoleContext;

class RevokeRoleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_revokeRoleStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RevokeRoleFromUserContext extends RevokeRoleStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(StarRocksParser.REVOKE, 0);
	};

	identifierOrStringList() {
	    return this.getTypedRuleContext(IdentifierOrStringListContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	USER() {
	    return this.getToken(StarRocksParser.USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRevokeRoleFromUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRevokeRoleFromUser(this);
		}
	}


}

StarRocksParser.RevokeRoleFromUserContext = RevokeRoleFromUserContext;

class RevokeRoleFromRoleContext extends RevokeRoleStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(StarRocksParser.REVOKE, 0);
	};

	identifierOrStringList() {
	    return this.getTypedRuleContext(IdentifierOrStringListContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	ROLE() {
	    return this.getToken(StarRocksParser.ROLE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRevokeRoleFromRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRevokeRoleFromRole(this);
		}
	}


}

StarRocksParser.RevokeRoleFromRoleContext = RevokeRoleFromRoleContext;

class SetRoleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_setRoleStatement;
    }

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	ROLE() {
	    return this.getToken(StarRocksParser.ROLE, 0);
	};

	DEFAULT() {
	    return this.getToken(StarRocksParser.DEFAULT, 0);
	};

	NONE() {
	    return this.getToken(StarRocksParser.NONE, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	EXCEPT() {
	    return this.getToken(StarRocksParser.EXCEPT, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetRoleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetRoleStatement(this);
		}
	}


}



class SetDefaultRoleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_setDefaultRoleStatement;
    }

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	DEFAULT() {
	    return this.getToken(StarRocksParser.DEFAULT, 0);
	};

	ROLE() {
	    return this.getToken(StarRocksParser.ROLE, 0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	NONE() {
	    return this.getToken(StarRocksParser.NONE, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetDefaultRoleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetDefaultRoleStatement(this);
		}
	}


}



class GrantRevokeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_grantRevokeClause;
    }

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	ROLE() {
	    return this.getToken(StarRocksParser.ROLE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	USER() {
	    return this.getToken(StarRocksParser.USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterGrantRevokeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitGrantRevokeClause(this);
		}
	}


}



class GrantPrivilegeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_grantPrivilegeStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GrantOnAllContext extends GrantPrivilegeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.isAll = null;;
        super.copyFrom(ctx);
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.GRANT);
	    } else {
	        return this.getToken(StarRocksParser.GRANT, i);
	    }
	};


	privilegeTypeList() {
	    return this.getTypedRuleContext(PrivilegeTypeListContext,0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	ALL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.ALL);
	    } else {
	        return this.getToken(StarRocksParser.ALL, i);
	    }
	};


	privObjectTypePlural() {
	    return this.getTypedRuleContext(PrivObjectTypePluralContext,0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	grantRevokeClause() {
	    return this.getTypedRuleContext(GrantRevokeClauseContext,0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	DATABASES() {
	    return this.getToken(StarRocksParser.DATABASES, 0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(StarRocksParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterGrantOnAll(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitGrantOnAll(this);
		}
	}


}

StarRocksParser.GrantOnAllContext = GrantOnAllContext;

class GrantOnFuncContext extends GrantPrivilegeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.GRANT);
	    } else {
	        return this.getToken(StarRocksParser.GRANT, i);
	    }
	};


	privilegeTypeList() {
	    return this.getTypedRuleContext(PrivilegeTypeListContext,0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	FUNCTION() {
	    return this.getToken(StarRocksParser.FUNCTION, 0);
	};

	privFunctionObjectNameList() {
	    return this.getTypedRuleContext(PrivFunctionObjectNameListContext,0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	grantRevokeClause() {
	    return this.getTypedRuleContext(GrantRevokeClauseContext,0);
	};

	GLOBAL() {
	    return this.getToken(StarRocksParser.GLOBAL, 0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(StarRocksParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterGrantOnFunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitGrantOnFunc(this);
		}
	}


}

StarRocksParser.GrantOnFuncContext = GrantOnFuncContext;

class GrantOnPrimaryObjContext extends GrantPrivilegeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.GRANT);
	    } else {
	        return this.getToken(StarRocksParser.GRANT, i);
	    }
	};


	privilegeTypeList() {
	    return this.getTypedRuleContext(PrivilegeTypeListContext,0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	privObjectType() {
	    return this.getTypedRuleContext(PrivObjectTypeContext,0);
	};

	privObjectNameList() {
	    return this.getTypedRuleContext(PrivObjectNameListContext,0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	grantRevokeClause() {
	    return this.getTypedRuleContext(GrantRevokeClauseContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(StarRocksParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterGrantOnPrimaryObj(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitGrantOnPrimaryObj(this);
		}
	}


}

StarRocksParser.GrantOnPrimaryObjContext = GrantOnPrimaryObjContext;

class GrantOnTableBriefContext extends GrantPrivilegeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.GRANT);
	    } else {
	        return this.getToken(StarRocksParser.GRANT, i);
	    }
	};


	privilegeTypeList() {
	    return this.getTypedRuleContext(PrivilegeTypeListContext,0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	privObjectNameList() {
	    return this.getTypedRuleContext(PrivObjectNameListContext,0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	grantRevokeClause() {
	    return this.getTypedRuleContext(GrantRevokeClauseContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(StarRocksParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterGrantOnTableBrief(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitGrantOnTableBrief(this);
		}
	}


}

StarRocksParser.GrantOnTableBriefContext = GrantOnTableBriefContext;

class GrantOnUserContext extends GrantPrivilegeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.GRANT);
	    } else {
	        return this.getToken(StarRocksParser.GRANT, i);
	    }
	};


	IMPERSONATE() {
	    return this.getToken(StarRocksParser.IMPERSONATE, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	USER() {
	    return this.getToken(StarRocksParser.USER, 0);
	};

	user = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserContext);
	    } else {
	        return this.getTypedRuleContext(UserContext,i);
	    }
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	grantRevokeClause() {
	    return this.getTypedRuleContext(GrantRevokeClauseContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(StarRocksParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterGrantOnUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitGrantOnUser(this);
		}
	}


}

StarRocksParser.GrantOnUserContext = GrantOnUserContext;

class GrantOnSystemContext extends GrantPrivilegeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.GRANT);
	    } else {
	        return this.getToken(StarRocksParser.GRANT, i);
	    }
	};


	privilegeTypeList() {
	    return this.getTypedRuleContext(PrivilegeTypeListContext,0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	SYSTEM() {
	    return this.getToken(StarRocksParser.SYSTEM, 0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	grantRevokeClause() {
	    return this.getTypedRuleContext(GrantRevokeClauseContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(StarRocksParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterGrantOnSystem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitGrantOnSystem(this);
		}
	}


}

StarRocksParser.GrantOnSystemContext = GrantOnSystemContext;

class RevokePrivilegeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_revokePrivilegeStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RevokeOnPrimaryObjContext extends RevokePrivilegeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(StarRocksParser.REVOKE, 0);
	};

	privilegeTypeList() {
	    return this.getTypedRuleContext(PrivilegeTypeListContext,0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	privObjectType() {
	    return this.getTypedRuleContext(PrivObjectTypeContext,0);
	};

	privObjectNameList() {
	    return this.getTypedRuleContext(PrivObjectNameListContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	grantRevokeClause() {
	    return this.getTypedRuleContext(GrantRevokeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRevokeOnPrimaryObj(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRevokeOnPrimaryObj(this);
		}
	}


}

StarRocksParser.RevokeOnPrimaryObjContext = RevokeOnPrimaryObjContext;

class RevokeOnTableBriefContext extends RevokePrivilegeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(StarRocksParser.REVOKE, 0);
	};

	privilegeTypeList() {
	    return this.getTypedRuleContext(PrivilegeTypeListContext,0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	privObjectNameList() {
	    return this.getTypedRuleContext(PrivObjectNameListContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	grantRevokeClause() {
	    return this.getTypedRuleContext(GrantRevokeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRevokeOnTableBrief(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRevokeOnTableBrief(this);
		}
	}


}

StarRocksParser.RevokeOnTableBriefContext = RevokeOnTableBriefContext;

class RevokeOnAllContext extends RevokePrivilegeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.isAll = null;;
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(StarRocksParser.REVOKE, 0);
	};

	privilegeTypeList() {
	    return this.getTypedRuleContext(PrivilegeTypeListContext,0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	ALL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.ALL);
	    } else {
	        return this.getToken(StarRocksParser.ALL, i);
	    }
	};


	privObjectTypePlural() {
	    return this.getTypedRuleContext(PrivObjectTypePluralContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	grantRevokeClause() {
	    return this.getTypedRuleContext(GrantRevokeClauseContext,0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	DATABASES() {
	    return this.getToken(StarRocksParser.DATABASES, 0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRevokeOnAll(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRevokeOnAll(this);
		}
	}


}

StarRocksParser.RevokeOnAllContext = RevokeOnAllContext;

class RevokeOnUserContext extends RevokePrivilegeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(StarRocksParser.REVOKE, 0);
	};

	IMPERSONATE() {
	    return this.getToken(StarRocksParser.IMPERSONATE, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	USER() {
	    return this.getToken(StarRocksParser.USER, 0);
	};

	user = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserContext);
	    } else {
	        return this.getTypedRuleContext(UserContext,i);
	    }
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	grantRevokeClause() {
	    return this.getTypedRuleContext(GrantRevokeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRevokeOnUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRevokeOnUser(this);
		}
	}


}

StarRocksParser.RevokeOnUserContext = RevokeOnUserContext;

class RevokeOnFuncContext extends RevokePrivilegeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(StarRocksParser.REVOKE, 0);
	};

	privilegeTypeList() {
	    return this.getTypedRuleContext(PrivilegeTypeListContext,0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	FUNCTION() {
	    return this.getToken(StarRocksParser.FUNCTION, 0);
	};

	privFunctionObjectNameList() {
	    return this.getTypedRuleContext(PrivFunctionObjectNameListContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	grantRevokeClause() {
	    return this.getTypedRuleContext(GrantRevokeClauseContext,0);
	};

	GLOBAL() {
	    return this.getToken(StarRocksParser.GLOBAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRevokeOnFunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRevokeOnFunc(this);
		}
	}


}

StarRocksParser.RevokeOnFuncContext = RevokeOnFuncContext;

class RevokeOnSystemContext extends RevokePrivilegeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(StarRocksParser.REVOKE, 0);
	};

	privilegeTypeList() {
	    return this.getTypedRuleContext(PrivilegeTypeListContext,0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	SYSTEM() {
	    return this.getToken(StarRocksParser.SYSTEM, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	grantRevokeClause() {
	    return this.getTypedRuleContext(GrantRevokeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRevokeOnSystem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRevokeOnSystem(this);
		}
	}


}

StarRocksParser.RevokeOnSystemContext = RevokeOnSystemContext;

class ShowGrantsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showGrantsStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	GRANTS() {
	    return this.getToken(StarRocksParser.GRANTS, 0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	USER() {
	    return this.getToken(StarRocksParser.USER, 0);
	};

	ROLE() {
	    return this.getToken(StarRocksParser.ROLE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowGrantsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowGrantsStatement(this);
		}
	}


}



class AuthOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_authOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AuthWithPluginContext extends AuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IDENTIFIED() {
	    return this.getToken(StarRocksParser.IDENTIFIED, 0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAuthWithPlugin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAuthWithPlugin(this);
		}
	}


}

StarRocksParser.AuthWithPluginContext = AuthWithPluginContext;

class AuthWithoutPluginContext extends AuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IDENTIFIED() {
	    return this.getToken(StarRocksParser.IDENTIFIED, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	PASSWORD() {
	    return this.getToken(StarRocksParser.PASSWORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAuthWithoutPlugin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAuthWithoutPlugin(this);
		}
	}


}

StarRocksParser.AuthWithoutPluginContext = AuthWithoutPluginContext;

class PrivObjectNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_privObjectName;
    }

	identifierOrStringOrStar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierOrStringOrStarContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierOrStringOrStarContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPrivObjectName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPrivObjectName(this);
		}
	}


}



class PrivObjectNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_privObjectNameList;
    }

	privObjectName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivObjectNameContext);
	    } else {
	        return this.getTypedRuleContext(PrivObjectNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPrivObjectNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPrivObjectNameList(this);
		}
	}


}



class PrivFunctionObjectNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_privFunctionObjectNameList;
    }

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	typeList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeListContext);
	    } else {
	        return this.getTypedRuleContext(TypeListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPrivFunctionObjectNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPrivFunctionObjectNameList(this);
		}
	}


}



class PrivilegeTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_privilegeTypeList;
    }

	privilegeType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivilegeTypeContext);
	    } else {
	        return this.getTypedRuleContext(PrivilegeTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPrivilegeTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPrivilegeTypeList(this);
		}
	}


}



class PrivilegeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_privilegeType;
    }

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	PRIVILEGES() {
	    return this.getToken(StarRocksParser.PRIVILEGES, 0);
	};

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	APPLY() {
	    return this.getToken(StarRocksParser.APPLY, 0);
	};

	BLACKLIST() {
	    return this.getToken(StarRocksParser.BLACKLIST, 0);
	};

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	FUNCTION() {
	    return this.getToken(StarRocksParser.FUNCTION, 0);
	};

	GLOBAL() {
	    return this.getToken(StarRocksParser.GLOBAL, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	GROUP() {
	    return this.getToken(StarRocksParser.GROUP, 0);
	};

	EXTERNAL() {
	    return this.getToken(StarRocksParser.EXTERNAL, 0);
	};

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	STORAGE() {
	    return this.getToken(StarRocksParser.STORAGE, 0);
	};

	VOLUME() {
	    return this.getToken(StarRocksParser.VOLUME, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	PIPE() {
	    return this.getToken(StarRocksParser.PIPE, 0);
	};

	DELETE() {
	    return this.getToken(StarRocksParser.DELETE, 0);
	};

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	EXPORT() {
	    return this.getToken(StarRocksParser.EXPORT, 0);
	};

	FILE() {
	    return this.getToken(StarRocksParser.FILE, 0);
	};

	IMPERSONATE() {
	    return this.getToken(StarRocksParser.IMPERSONATE, 0);
	};

	INSERT() {
	    return this.getToken(StarRocksParser.INSERT, 0);
	};

	GRANT() {
	    return this.getToken(StarRocksParser.GRANT, 0);
	};

	NODE() {
	    return this.getToken(StarRocksParser.NODE, 0);
	};

	OPERATE() {
	    return this.getToken(StarRocksParser.OPERATE, 0);
	};

	PLUGIN() {
	    return this.getToken(StarRocksParser.PLUGIN, 0);
	};

	REPOSITORY() {
	    return this.getToken(StarRocksParser.REPOSITORY, 0);
	};

	REFRESH() {
	    return this.getToken(StarRocksParser.REFRESH, 0);
	};

	SELECT() {
	    return this.getToken(StarRocksParser.SELECT, 0);
	};

	UPDATE() {
	    return this.getToken(StarRocksParser.UPDATE, 0);
	};

	USAGE() {
	    return this.getToken(StarRocksParser.USAGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPrivilegeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPrivilegeType(this);
		}
	}


}



class PrivObjectTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_privObjectType;
    }

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	GROUP() {
	    return this.getToken(StarRocksParser.GROUP, 0);
	};

	STORAGE() {
	    return this.getToken(StarRocksParser.STORAGE, 0);
	};

	VOLUME() {
	    return this.getToken(StarRocksParser.VOLUME, 0);
	};

	SYSTEM() {
	    return this.getToken(StarRocksParser.SYSTEM, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	PIPE() {
	    return this.getToken(StarRocksParser.PIPE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPrivObjectType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPrivObjectType(this);
		}
	}


}



class PrivObjectTypePluralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_privObjectTypePlural;
    }

	CATALOGS() {
	    return this.getToken(StarRocksParser.CATALOGS, 0);
	};

	DATABASES() {
	    return this.getToken(StarRocksParser.DATABASES, 0);
	};

	FUNCTIONS() {
	    return this.getToken(StarRocksParser.FUNCTIONS, 0);
	};

	GLOBAL() {
	    return this.getToken(StarRocksParser.GLOBAL, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	VIEWS() {
	    return this.getToken(StarRocksParser.VIEWS, 0);
	};

	POLICIES() {
	    return this.getToken(StarRocksParser.POLICIES, 0);
	};

	RESOURCES() {
	    return this.getToken(StarRocksParser.RESOURCES, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	GROUPS() {
	    return this.getToken(StarRocksParser.GROUPS, 0);
	};

	STORAGE() {
	    return this.getToken(StarRocksParser.STORAGE, 0);
	};

	VOLUMES() {
	    return this.getToken(StarRocksParser.VOLUMES, 0);
	};

	TABLES() {
	    return this.getToken(StarRocksParser.TABLES, 0);
	};

	USERS() {
	    return this.getToken(StarRocksParser.USERS, 0);
	};

	WAREHOUSES() {
	    return this.getToken(StarRocksParser.WAREHOUSES, 0);
	};

	PIPES() {
	    return this.getToken(StarRocksParser.PIPES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPrivObjectTypePlural(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPrivObjectTypePlural(this);
		}
	}


}



class CreateSecurityIntegrationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createSecurityIntegrationStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	SECURITY() {
	    return this.getToken(StarRocksParser.SECURITY, 0);
	};

	INTEGRATION() {
	    return this.getToken(StarRocksParser.INTEGRATION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateSecurityIntegrationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateSecurityIntegrationStatement(this);
		}
	}


}



class AlterSecurityIntegrationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterSecurityIntegrationStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	SECURITY() {
	    return this.getToken(StarRocksParser.SECURITY, 0);
	};

	INTEGRATION() {
	    return this.getToken(StarRocksParser.INTEGRATION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterSecurityIntegrationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterSecurityIntegrationStatement(this);
		}
	}


}



class DropSecurityIntegrationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropSecurityIntegrationStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	SECURITY() {
	    return this.getToken(StarRocksParser.SECURITY, 0);
	};

	INTEGRATION() {
	    return this.getToken(StarRocksParser.INTEGRATION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropSecurityIntegrationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropSecurityIntegrationStatement(this);
		}
	}


}



class ShowSecurityIntegrationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showSecurityIntegrationStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	SECURITY() {
	    return this.getToken(StarRocksParser.SECURITY, 0);
	};

	INTEGRATIONS() {
	    return this.getToken(StarRocksParser.INTEGRATIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowSecurityIntegrationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowSecurityIntegrationStatement(this);
		}
	}


}



class ShowCreateSecurityIntegrationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showCreateSecurityIntegrationStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	SECURITY() {
	    return this.getToken(StarRocksParser.SECURITY, 0);
	};

	INTEGRATION() {
	    return this.getToken(StarRocksParser.INTEGRATION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowCreateSecurityIntegrationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowCreateSecurityIntegrationStatement(this);
		}
	}


}



class CreateGroupProviderStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createGroupProviderStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	GROUP() {
	    return this.getToken(StarRocksParser.GROUP, 0);
	};

	PROVIDER() {
	    return this.getToken(StarRocksParser.PROVIDER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateGroupProviderStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateGroupProviderStatement(this);
		}
	}


}



class DropGroupProviderStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropGroupProviderStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	GROUP() {
	    return this.getToken(StarRocksParser.GROUP, 0);
	};

	PROVIDER() {
	    return this.getToken(StarRocksParser.PROVIDER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropGroupProviderStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropGroupProviderStatement(this);
		}
	}


}



class ShowGroupProvidersStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showGroupProvidersStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	GROUP() {
	    return this.getToken(StarRocksParser.GROUP, 0);
	};

	PROVIDERS() {
	    return this.getToken(StarRocksParser.PROVIDERS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowGroupProvidersStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowGroupProvidersStatement(this);
		}
	}


}



class ShowCreateGroupProviderStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showCreateGroupProviderStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	GROUP() {
	    return this.getToken(StarRocksParser.GROUP, 0);
	};

	PROVIDER() {
	    return this.getToken(StarRocksParser.PROVIDER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowCreateGroupProviderStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowCreateGroupProviderStatement(this);
		}
	}


}



class BackupStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_backupStatement;
        this.dbName = null;
        this.repoName = null;
    }

	BACKUP() {
	    return this.getToken(StarRocksParser.BACKUP, 0);
	};

	SNAPSHOT() {
	    return this.getToken(StarRocksParser.SNAPSHOT, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	EXTERNAL() {
	    return this.getToken(StarRocksParser.EXTERNAL, 0);
	};

	CATALOGS() {
	    return this.getToken(StarRocksParser.CATALOGS, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	backupRestoreObjectDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BackupRestoreObjectDescContext);
	    } else {
	        return this.getTypedRuleContext(BackupRestoreObjectDescContext,i);
	    }
	};

	PROPERTIES() {
	    return this.getToken(StarRocksParser.PROPERTIES, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBackupStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBackupStatement(this);
		}
	}


}



class CancelBackupStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cancelBackupStatement;
    }

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	BACKUP() {
	    return this.getToken(StarRocksParser.BACKUP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	EXTERNAL() {
	    return this.getToken(StarRocksParser.EXTERNAL, 0);
	};

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCancelBackupStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCancelBackupStatement(this);
		}
	}


}



class ShowBackupStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showBackupStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	BACKUP() {
	    return this.getToken(StarRocksParser.BACKUP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowBackupStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowBackupStatement(this);
		}
	}


}



class RestoreStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_restoreStatement;
        this.repoName = null;
        this.dbName = null;
        this.dbAlias = null;
    }

	RESTORE() {
	    return this.getToken(StarRocksParser.RESTORE, 0);
	};

	SNAPSHOT() {
	    return this.getToken(StarRocksParser.SNAPSHOT, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	EXTERNAL() {
	    return this.getToken(StarRocksParser.EXTERNAL, 0);
	};

	CATALOGS() {
	    return this.getToken(StarRocksParser.CATALOGS, 0);
	};

	identifierWithAliasList() {
	    return this.getTypedRuleContext(IdentifierWithAliasListContext,0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	backupRestoreObjectDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BackupRestoreObjectDescContext);
	    } else {
	        return this.getTypedRuleContext(BackupRestoreObjectDescContext,i);
	    }
	};

	PROPERTIES() {
	    return this.getToken(StarRocksParser.PROPERTIES, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRestoreStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRestoreStatement(this);
		}
	}


}



class CancelRestoreStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cancelRestoreStatement;
    }

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	RESTORE() {
	    return this.getToken(StarRocksParser.RESTORE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	EXTERNAL() {
	    return this.getToken(StarRocksParser.EXTERNAL, 0);
	};

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCancelRestoreStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCancelRestoreStatement(this);
		}
	}


}



class ShowRestoreStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showRestoreStatement;
        this.where = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	RESTORE() {
	    return this.getToken(StarRocksParser.RESTORE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowRestoreStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowRestoreStatement(this);
		}
	}


}



class ShowSnapshotStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showSnapshotStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	SNAPSHOT() {
	    return this.getToken(StarRocksParser.SNAPSHOT, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowSnapshotStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowSnapshotStatement(this);
		}
	}


}



class CreateRepositoryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createRepositoryStatement;
        this.repoName = null;
        this.brokerName = null;
        this.location = null;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	REPOSITORY() {
	    return this.getToken(StarRocksParser.REPOSITORY, 0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	BROKER() {
	    return this.getToken(StarRocksParser.BROKER, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	LOCATION() {
	    return this.getToken(StarRocksParser.LOCATION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	READ() {
	    return this.getToken(StarRocksParser.READ, 0);
	};

	ONLY() {
	    return this.getToken(StarRocksParser.ONLY, 0);
	};

	PROPERTIES() {
	    return this.getToken(StarRocksParser.PROPERTIES, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateRepositoryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateRepositoryStatement(this);
		}
	}


}



class DropRepositoryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropRepositoryStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	REPOSITORY() {
	    return this.getToken(StarRocksParser.REPOSITORY, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropRepositoryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropRepositoryStatement(this);
		}
	}


}



class AddSqlBlackListStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_addSqlBlackListStatement;
    }

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	SQLBLACKLIST() {
	    return this.getToken(StarRocksParser.SQLBLACKLIST, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAddSqlBlackListStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAddSqlBlackListStatement(this);
		}
	}


}



class DelSqlBlackListStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_delSqlBlackListStatement;
    }

	DELETE() {
	    return this.getToken(StarRocksParser.DELETE, 0);
	};

	SQLBLACKLIST() {
	    return this.getToken(StarRocksParser.SQLBLACKLIST, 0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(StarRocksParser.INTEGER_VALUE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDelSqlBlackListStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDelSqlBlackListStatement(this);
		}
	}


}



class ShowSqlBlackListStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showSqlBlackListStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	SQLBLACKLIST() {
	    return this.getToken(StarRocksParser.SQLBLACKLIST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowSqlBlackListStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowSqlBlackListStatement(this);
		}
	}


}



class ShowWhiteListStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showWhiteListStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	WHITELIST() {
	    return this.getToken(StarRocksParser.WHITELIST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowWhiteListStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowWhiteListStatement(this);
		}
	}


}



class AddBackendBlackListStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_addBackendBlackListStatement;
    }

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	BLACKLIST() {
	    return this.getToken(StarRocksParser.BLACKLIST, 0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(StarRocksParser.INTEGER_VALUE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAddBackendBlackListStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAddBackendBlackListStatement(this);
		}
	}


}



class DelBackendBlackListStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_delBackendBlackListStatement;
    }

	DELETE() {
	    return this.getToken(StarRocksParser.DELETE, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	BLACKLIST() {
	    return this.getToken(StarRocksParser.BLACKLIST, 0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(StarRocksParser.INTEGER_VALUE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDelBackendBlackListStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDelBackendBlackListStatement(this);
		}
	}


}



class ShowBackendBlackListStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showBackendBlackListStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	BLACKLIST() {
	    return this.getToken(StarRocksParser.BLACKLIST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowBackendBlackListStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowBackendBlackListStatement(this);
		}
	}


}



class DataCacheTargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dataCacheTarget;
    }

	identifierOrStringOrStar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierOrStringOrStarContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierOrStringOrStarContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDataCacheTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDataCacheTarget(this);
		}
	}


}



class CreateDataCacheRuleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createDataCacheRuleStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	DATACACHE() {
	    return this.getToken(StarRocksParser.DATACACHE, 0);
	};

	RULE() {
	    return this.getToken(StarRocksParser.RULE, 0);
	};

	dataCacheTarget() {
	    return this.getTypedRuleContext(DataCacheTargetContext,0);
	};

	PRIORITY() {
	    return this.getToken(StarRocksParser.PRIORITY, 0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	MINUS_SYMBOL() {
	    return this.getToken(StarRocksParser.MINUS_SYMBOL, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateDataCacheRuleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateDataCacheRuleStatement(this);
		}
	}


}



class ShowDataCacheRulesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showDataCacheRulesStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	DATACACHE() {
	    return this.getToken(StarRocksParser.DATACACHE, 0);
	};

	RULES() {
	    return this.getToken(StarRocksParser.RULES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowDataCacheRulesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowDataCacheRulesStatement(this);
		}
	}


}



class DropDataCacheRuleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropDataCacheRuleStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	DATACACHE() {
	    return this.getToken(StarRocksParser.DATACACHE, 0);
	};

	RULE() {
	    return this.getToken(StarRocksParser.RULE, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropDataCacheRuleStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropDataCacheRuleStatement(this);
		}
	}


}



class ClearDataCacheRulesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_clearDataCacheRulesStatement;
    }

	CLEAR() {
	    return this.getToken(StarRocksParser.CLEAR, 0);
	};

	DATACACHE() {
	    return this.getToken(StarRocksParser.DATACACHE, 0);
	};

	RULES() {
	    return this.getToken(StarRocksParser.RULES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterClearDataCacheRulesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitClearDataCacheRulesStatement(this);
		}
	}


}



class DataCacheSelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dataCacheSelectStatement;
        this.where = null;
    }

	CACHE() {
	    return this.getToken(StarRocksParser.CACHE, 0);
	};

	SELECT() {
	    return this.getToken(StarRocksParser.SELECT, 0);
	};

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDataCacheSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDataCacheSelectStatement(this);
		}
	}


}



class ExportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_exportStatement;
    }

	EXPORT() {
	    return this.getToken(StarRocksParser.EXPORT, 0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	tableDesc() {
	    return this.getTypedRuleContext(TableDescContext,0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	MODE() {
	    return this.getToken(StarRocksParser.MODE, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	brokerDesc() {
	    return this.getTypedRuleContext(BrokerDescContext,0);
	};

	SYNC() {
	    return this.getToken(StarRocksParser.SYNC, 0);
	};

	ASYNC() {
	    return this.getToken(StarRocksParser.ASYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExportStatement(this);
		}
	}


}



class CancelExportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_cancelExportStatement;
        this.catalog = null;
        this.pattern = null;
    }

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	EXPORT() {
	    return this.getToken(StarRocksParser.EXPORT, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCancelExportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCancelExportStatement(this);
		}
	}


}



class ShowExportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showExportStatement;
        this.catalog = null;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	EXPORT() {
	    return this.getToken(StarRocksParser.EXPORT, 0);
	};

	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	limitElement() {
	    return this.getTypedRuleContext(LimitElementContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowExportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowExportStatement(this);
		}
	}


}



class InstallPluginStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_installPluginStatement;
    }

	INSTALL() {
	    return this.getToken(StarRocksParser.INSTALL, 0);
	};

	PLUGIN() {
	    return this.getToken(StarRocksParser.PLUGIN, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInstallPluginStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInstallPluginStatement(this);
		}
	}


}



class UninstallPluginStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_uninstallPluginStatement;
    }

	UNINSTALL() {
	    return this.getToken(StarRocksParser.UNINSTALL, 0);
	};

	PLUGIN() {
	    return this.getToken(StarRocksParser.PLUGIN, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUninstallPluginStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUninstallPluginStatement(this);
		}
	}


}



class CreateFileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createFileStatement;
        this.catalog = null;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	FILE() {
	    return this.getToken(StarRocksParser.FILE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateFileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateFileStatement(this);
		}
	}


}



class DropFileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropFileStatement;
        this.catalog = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	FILE() {
	    return this.getToken(StarRocksParser.FILE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropFileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropFileStatement(this);
		}
	}


}



class ShowSmallFilesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showSmallFilesStatement;
        this.catalog = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	FILE() {
	    return this.getToken(StarRocksParser.FILE, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowSmallFilesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowSmallFilesStatement(this);
		}
	}


}



class CreatePipeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createPipeStatement;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	orReplace() {
	    return this.getTypedRuleContext(OrReplaceContext,0);
	};

	PIPE() {
	    return this.getToken(StarRocksParser.PIPE, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreatePipeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreatePipeStatement(this);
		}
	}


}



class DropPipeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropPipeStatement;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	PIPE() {
	    return this.getToken(StarRocksParser.PIPE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropPipeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropPipeStatement(this);
		}
	}


}



class AlterPipeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterPipeClause;
        this.fileName = null;
    }

	SUSPEND() {
	    return this.getToken(StarRocksParser.SUSPEND, 0);
	};

	RESUME() {
	    return this.getToken(StarRocksParser.RESUME, 0);
	};

	RETRY() {
	    return this.getToken(StarRocksParser.RETRY, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	FILE() {
	    return this.getToken(StarRocksParser.FILE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterPipeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterPipeClause(this);
		}
	}


}



class AlterPipeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterPipeStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	PIPE() {
	    return this.getToken(StarRocksParser.PIPE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	alterPipeClause() {
	    return this.getTypedRuleContext(AlterPipeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterPipeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterPipeStatement(this);
		}
	}


}



class DescPipeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_descPipeStatement;
    }

	PIPE() {
	    return this.getToken(StarRocksParser.PIPE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	DESC() {
	    return this.getToken(StarRocksParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(StarRocksParser.DESCRIBE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDescPipeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDescPipeStatement(this);
		}
	}


}



class ShowPipeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showPipeStatement;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	PIPES() {
	    return this.getToken(StarRocksParser.PIPES, 0);
	};

	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	limitElement() {
	    return this.getTypedRuleContext(LimitElementContext,0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowPipeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowPipeStatement(this);
		}
	}


}



class SetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_setStatement;
    }

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	setVar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetVarContext);
	    } else {
	        return this.getTypedRuleContext(SetVarContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetStatement(this);
		}
	}


}



class SetVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_setVar;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SetTransactionContext extends SetVarContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRANSACTION() {
	    return this.getToken(StarRocksParser.TRANSACTION, 0);
	};

	transaction_characteristics() {
	    return this.getTypedRuleContext(Transaction_characteristicsContext,0);
	};

	varType() {
	    return this.getTypedRuleContext(VarTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetTransaction(this);
		}
	}


}

StarRocksParser.SetTransactionContext = SetTransactionContext;

class SetNamesContext extends SetVarContext {

    constructor(parser, ctx) {
        super(parser);
        this.charset = null;;
        this.collate = null;;
        super.copyFrom(ctx);
    }

	CHAR() {
	    return this.getToken(StarRocksParser.CHAR, 0);
	};

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	CHARSET() {
	    return this.getToken(StarRocksParser.CHARSET, 0);
	};

	CHARACTER() {
	    return this.getToken(StarRocksParser.CHARACTER, 0);
	};

	identifierOrString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierOrStringContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierOrStringContext,i);
	    }
	};

	DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.DEFAULT);
	    } else {
	        return this.getToken(StarRocksParser.DEFAULT, i);
	    }
	};


	NAMES() {
	    return this.getToken(StarRocksParser.NAMES, 0);
	};

	COLLATE() {
	    return this.getToken(StarRocksParser.COLLATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetNames(this);
		}
	}


}

StarRocksParser.SetNamesContext = SetNamesContext;

class SetPasswordContext extends SetVarContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PASSWORD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.PASSWORD);
	    } else {
	        return this.getToken(StarRocksParser.PASSWORD, i);
	    }
	};


	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetPassword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetPassword(this);
		}
	}


}

StarRocksParser.SetPasswordContext = SetPasswordContext;

class SetUserVarContext extends SetVarContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	userVariable() {
	    return this.getTypedRuleContext(UserVariableContext,0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetUserVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetUserVar(this);
		}
	}


}

StarRocksParser.SetUserVarContext = SetUserVarContext;

class SetSystemVarContext extends SetVarContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	setExprOrDefault() {
	    return this.getTypedRuleContext(SetExprOrDefaultContext,0);
	};

	varType() {
	    return this.getTypedRuleContext(VarTypeContext,0);
	};

	systemVariable() {
	    return this.getTypedRuleContext(SystemVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetSystemVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetSystemVar(this);
		}
	}


}

StarRocksParser.SetSystemVarContext = SetSystemVarContext;

class Transaction_characteristicsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_transaction_characteristics;
    }

	transaction_access_mode() {
	    return this.getTypedRuleContext(Transaction_access_modeContext,0);
	};

	isolation_level() {
	    return this.getTypedRuleContext(Isolation_levelContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTransaction_characteristics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTransaction_characteristics(this);
		}
	}


}



class Transaction_access_modeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_transaction_access_mode;
    }

	READ() {
	    return this.getToken(StarRocksParser.READ, 0);
	};

	ONLY() {
	    return this.getToken(StarRocksParser.ONLY, 0);
	};

	WRITE() {
	    return this.getToken(StarRocksParser.WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTransaction_access_mode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTransaction_access_mode(this);
		}
	}


}



class Isolation_levelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_isolation_level;
    }

	ISOLATION() {
	    return this.getToken(StarRocksParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(StarRocksParser.LEVEL, 0);
	};

	isolation_types() {
	    return this.getTypedRuleContext(Isolation_typesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIsolation_level(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIsolation_level(this);
		}
	}


}



class Isolation_typesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_isolation_types;
    }

	READ() {
	    return this.getToken(StarRocksParser.READ, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(StarRocksParser.UNCOMMITTED, 0);
	};

	COMMITTED() {
	    return this.getToken(StarRocksParser.COMMITTED, 0);
	};

	REPEATABLE() {
	    return this.getToken(StarRocksParser.REPEATABLE, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(StarRocksParser.SERIALIZABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIsolation_types(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIsolation_types(this);
		}
	}


}



class SetExprOrDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_setExprOrDefault;
    }

	DEFAULT() {
	    return this.getToken(StarRocksParser.DEFAULT, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetExprOrDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetExprOrDefault(this);
		}
	}


}



class SetUserPropertyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_setUserPropertyStatement;
    }

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	PROPERTY() {
	    return this.getToken(StarRocksParser.PROPERTY, 0);
	};

	userPropertyList() {
	    return this.getTypedRuleContext(UserPropertyListContext,0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetUserPropertyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetUserPropertyStatement(this);
		}
	}


}



class RoleListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_roleList;
    }

	identifierOrString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierOrStringContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierOrStringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRoleList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRoleList(this);
		}
	}


}



class ExecuteScriptStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_executeScriptStatement;
    }

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	EXECUTE() {
	    return this.getToken(StarRocksParser.EXECUTE, 0);
	};

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	FRONTEND() {
	    return this.getToken(StarRocksParser.FRONTEND, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExecuteScriptStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExecuteScriptStatement(this);
		}
	}


}



class UnsupportedStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_unsupportedStatement;
    }

	LOCK() {
	    return this.getToken(StarRocksParser.LOCK, 0);
	};

	TABLES() {
	    return this.getToken(StarRocksParser.TABLES, 0);
	};

	lock_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lock_itemContext);
	    } else {
	        return this.getTypedRuleContext(Lock_itemContext,i);
	    }
	};

	UNLOCK() {
	    return this.getToken(StarRocksParser.UNLOCK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUnsupportedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUnsupportedStatement(this);
		}
	}


}



class Lock_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_lock_item;
        this.alias = null;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	lock_type() {
	    return this.getTypedRuleContext(Lock_typeContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLock_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLock_item(this);
		}
	}


}



class Lock_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_lock_type;
    }

	READ() {
	    return this.getToken(StarRocksParser.READ, 0);
	};

	LOCAL() {
	    return this.getToken(StarRocksParser.LOCAL, 0);
	};

	WRITE() {
	    return this.getToken(StarRocksParser.WRITE, 0);
	};

	LOW_PRIORITY() {
	    return this.getToken(StarRocksParser.LOW_PRIORITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLock_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLock_type(this);
		}
	}


}



class AlterPlanAdvisorAddStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterPlanAdvisorAddStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	PLAN() {
	    return this.getToken(StarRocksParser.PLAN, 0);
	};

	ADVISOR() {
	    return this.getToken(StarRocksParser.ADVISOR, 0);
	};

	ADD() {
	    return this.getToken(StarRocksParser.ADD, 0);
	};

	queryStatement() {
	    return this.getTypedRuleContext(QueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterPlanAdvisorAddStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterPlanAdvisorAddStatement(this);
		}
	}


}



class TruncatePlanAdvisorStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_truncatePlanAdvisorStatement;
    }

	TRUNCATE() {
	    return this.getToken(StarRocksParser.TRUNCATE, 0);
	};

	PLAN() {
	    return this.getToken(StarRocksParser.PLAN, 0);
	};

	ADVISOR() {
	    return this.getToken(StarRocksParser.ADVISOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTruncatePlanAdvisorStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTruncatePlanAdvisorStatement(this);
		}
	}


}



class AlterPlanAdvisorDropStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterPlanAdvisorDropStatement;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	PLAN() {
	    return this.getToken(StarRocksParser.PLAN, 0);
	};

	ADVISOR() {
	    return this.getToken(StarRocksParser.ADVISOR, 0);
	};

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterPlanAdvisorDropStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterPlanAdvisorDropStatement(this);
		}
	}


}



class ShowPlanAdvisorStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showPlanAdvisorStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	PLAN() {
	    return this.getToken(StarRocksParser.PLAN, 0);
	};

	ADVISOR() {
	    return this.getToken(StarRocksParser.ADVISOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowPlanAdvisorStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowPlanAdvisorStatement(this);
		}
	}


}



class CreateWarehouseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_createWarehouseStatement;
        this.warehouseName = null;
    }

	CREATE() {
	    return this.getToken(StarRocksParser.CREATE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	comment() {
	    return this.getTypedRuleContext(CommentContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCreateWarehouseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCreateWarehouseStatement(this);
		}
	}


}



class DropWarehouseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dropWarehouseStatement;
        this.warehouseName = null;
    }

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDropWarehouseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDropWarehouseStatement(this);
		}
	}


}



class SuspendWarehouseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_suspendWarehouseStatement;
    }

	SUSPEND() {
	    return this.getToken(StarRocksParser.SUSPEND, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSuspendWarehouseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSuspendWarehouseStatement(this);
		}
	}


}



class ResumeWarehouseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_resumeWarehouseStatement;
    }

	RESUME() {
	    return this.getToken(StarRocksParser.RESUME, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterResumeWarehouseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitResumeWarehouseStatement(this);
		}
	}


}



class SetWarehouseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_setWarehouseStatement;
    }

	SET() {
	    return this.getToken(StarRocksParser.SET, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	SESSION() {
	    return this.getToken(StarRocksParser.SESSION, 0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetWarehouseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetWarehouseStatement(this);
		}
	}


}



class ShowWarehousesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showWarehousesStatement;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	WAREHOUSES() {
	    return this.getToken(StarRocksParser.WAREHOUSES, 0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowWarehousesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowWarehousesStatement(this);
		}
	}


}



class ShowClustersStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showClustersStatement;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	CLUSTERS() {
	    return this.getToken(StarRocksParser.CLUSTERS, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowClustersStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowClustersStatement(this);
		}
	}


}



class ShowNodesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_showNodesStatement;
        this.pattern = null;
    }

	SHOW() {
	    return this.getToken(StarRocksParser.SHOW, 0);
	};

	NODES() {
	    return this.getToken(StarRocksParser.NODES, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	WAREHOUSES() {
	    return this.getToken(StarRocksParser.WAREHOUSES, 0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterShowNodesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitShowNodesStatement(this);
		}
	}


}



class AlterWarehouseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_alterWarehouseStatement;
        this.warehouseName = null;
    }

	ALTER() {
	    return this.getToken(StarRocksParser.ALTER, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	modifyPropertiesClause() {
	    return this.getTypedRuleContext(ModifyPropertiesClauseContext,0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAlterWarehouseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAlterWarehouseStatement(this);
		}
	}


}



class BeginStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_beginStatement;
    }

	START() {
	    return this.getToken(StarRocksParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(StarRocksParser.TRANSACTION, 0);
	};

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	CONSISTENT() {
	    return this.getToken(StarRocksParser.CONSISTENT, 0);
	};

	SNAPSHOT() {
	    return this.getToken(StarRocksParser.SNAPSHOT, 0);
	};

	BEGIN() {
	    return this.getToken(StarRocksParser.BEGIN, 0);
	};

	WORK() {
	    return this.getToken(StarRocksParser.WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBeginStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBeginStatement(this);
		}
	}


}



class CommitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_commitStatement;
    }

	COMMIT() {
	    return this.getToken(StarRocksParser.COMMIT, 0);
	};

	WORK() {
	    return this.getToken(StarRocksParser.WORK, 0);
	};

	AND() {
	    return this.getToken(StarRocksParser.AND, 0);
	};

	CHAIN() {
	    return this.getToken(StarRocksParser.CHAIN, 0);
	};

	RELEASE() {
	    return this.getToken(StarRocksParser.RELEASE, 0);
	};

	NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.NO);
	    } else {
	        return this.getToken(StarRocksParser.NO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCommitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCommitStatement(this);
		}
	}


}



class RollbackStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_rollbackStatement;
    }

	ROLLBACK() {
	    return this.getToken(StarRocksParser.ROLLBACK, 0);
	};

	WORK() {
	    return this.getToken(StarRocksParser.WORK, 0);
	};

	AND() {
	    return this.getToken(StarRocksParser.AND, 0);
	};

	CHAIN() {
	    return this.getToken(StarRocksParser.CHAIN, 0);
	};

	RELEASE() {
	    return this.getToken(StarRocksParser.RELEASE, 0);
	};

	NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.NO);
	    } else {
	        return this.getToken(StarRocksParser.NO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRollbackStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRollbackStatement(this);
		}
	}


}



class TranslateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_translateStatement;
    }

	TRANSLATE() {
	    return this.getToken(StarRocksParser.TRANSLATE, 0);
	};

	dialect() {
	    return this.getTypedRuleContext(DialectContext,0);
	};

	translateSQL() {
	    return this.getTypedRuleContext(TranslateSQLContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTranslateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTranslateStatement(this);
		}
	}


}



class DialectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_dialect;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDialect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDialect(this);
		}
	}


}



class TranslateSQLContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_translateSQL;
    }


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTranslateSQL(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTranslateSQL(this);
		}
	}


}



class QueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_queryStatement;
    }

	queryRelation() {
	    return this.getTypedRuleContext(QueryRelationContext,0);
	};

	explainDesc() {
	    return this.getTypedRuleContext(ExplainDescContext,0);
	};

	optimizerTrace() {
	    return this.getTypedRuleContext(OptimizerTraceContext,0);
	};

	outfile() {
	    return this.getTypedRuleContext(OutfileContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitQueryStatement(this);
		}
	}


}



class QueryRelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_queryRelation;
    }

	queryNoWith() {
	    return this.getTypedRuleContext(QueryNoWithContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterQueryRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitQueryRelation(this);
		}
	}


}



class WithClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_withClause;
    }

	WITH() {
	    return this.getToken(StarRocksParser.WITH, 0);
	};

	commonTableExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommonTableExpressionContext);
	    } else {
	        return this.getTypedRuleContext(CommonTableExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterWithClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitWithClause(this);
		}
	}


}



class QueryNoWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_queryNoWith;
    }

	queryPrimary() {
	    return this.getTypedRuleContext(QueryPrimaryContext,0);
	};

	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	limitElement() {
	    return this.getTypedRuleContext(LimitElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterQueryNoWith(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitQueryNoWith(this);
		}
	}


}



class QueryPeriodContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_queryPeriod;
        this.end = null;
    }

	periodType() {
	    return this.getTypedRuleContext(PeriodTypeContext,0);
	};

	BETWEEN() {
	    return this.getToken(StarRocksParser.BETWEEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	AND() {
	    return this.getToken(StarRocksParser.AND, 0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	TO() {
	    return this.getToken(StarRocksParser.TO, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	OF() {
	    return this.getToken(StarRocksParser.OF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterQueryPeriod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitQueryPeriod(this);
		}
	}


}



class PeriodTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_periodType;
    }

	SYSTEM_TIME() {
	    return this.getToken(StarRocksParser.SYSTEM_TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(StarRocksParser.TIMESTAMP, 0);
	};

	VERSION() {
	    return this.getToken(StarRocksParser.VERSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPeriodType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPeriodType(this);
		}
	}


}



class QueryPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_queryPrimary;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class QueryWithParenthesesContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterQueryWithParentheses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitQueryWithParentheses(this);
		}
	}


}

StarRocksParser.QueryWithParenthesesContext = QueryWithParenthesesContext;

class SetOperationContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.operator = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	queryPrimary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryPrimaryContext);
	    } else {
	        return this.getTypedRuleContext(QueryPrimaryContext,i);
	    }
	};

	INTERSECT() {
	    return this.getToken(StarRocksParser.INTERSECT, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	UNION() {
	    return this.getToken(StarRocksParser.UNION, 0);
	};

	EXCEPT() {
	    return this.getToken(StarRocksParser.EXCEPT, 0);
	};

	MINUS() {
	    return this.getToken(StarRocksParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetOperation(this);
		}
	}


}

StarRocksParser.SetOperationContext = SetOperationContext;

class QueryPrimaryDefaultContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterQueryPrimaryDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitQueryPrimaryDefault(this);
		}
	}


}

StarRocksParser.QueryPrimaryDefaultContext = QueryPrimaryDefaultContext;

class SubqueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_subquery;
    }

	queryRelation() {
	    return this.getTypedRuleContext(QueryRelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSubquery(this);
		}
	}


}



class RowConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_rowConstructor;
    }

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRowConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRowConstructor(this);
		}
	}


}



class SortItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_sortItem;
        this.ordering = null;
        this.nullOrdering = null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	NULLS() {
	    return this.getToken(StarRocksParser.NULLS, 0);
	};

	ASC() {
	    return this.getToken(StarRocksParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(StarRocksParser.DESC, 0);
	};

	FIRST() {
	    return this.getToken(StarRocksParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(StarRocksParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSortItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSortItem(this);
		}
	}


}



class LimitConstExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_limitConstExpr;
    }

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	PARAMETER() {
	    return this.getToken(StarRocksParser.PARAMETER, 0);
	};

	userVariable() {
	    return this.getTypedRuleContext(UserVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLimitConstExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLimitConstExpr(this);
		}
	}


}



class LimitElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_limitElement;
        this.limit = null;
        this.offset = null;
    }

	LIMIT() {
	    return this.getToken(StarRocksParser.LIMIT, 0);
	};

	limitConstExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LimitConstExprContext);
	    } else {
	        return this.getTypedRuleContext(LimitConstExprContext,i);
	    }
	};

	OFFSET() {
	    return this.getToken(StarRocksParser.OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLimitElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLimitElement(this);
		}
	}


}



class QuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_querySpecification;
        this.where = null;
        this.having = null;
        this.qualifyFunction = null;
        this.limit = null;
    }

	SELECT() {
	    return this.getToken(StarRocksParser.SELECT, 0);
	};

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	WHERE() {
	    return this.getToken(StarRocksParser.WHERE, 0);
	};

	GROUP() {
	    return this.getToken(StarRocksParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	groupingElement() {
	    return this.getTypedRuleContext(GroupingElementContext,0);
	};

	HAVING() {
	    return this.getToken(StarRocksParser.HAVING, 0);
	};

	QUALIFY() {
	    return this.getToken(StarRocksParser.QUALIFY, 0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitQuerySpecification(this);
		}
	}


}



class FromClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_fromClause;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DualContext extends FromClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	DUAL() {
	    return this.getToken(StarRocksParser.DUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDual(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDual(this);
		}
	}


}

StarRocksParser.DualContext = DualContext;

class FromContext extends FromClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	relations() {
	    return this.getTypedRuleContext(RelationsContext,0);
	};

	pivotClause() {
	    return this.getTypedRuleContext(PivotClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitFrom(this);
		}
	}


}

StarRocksParser.FromContext = FromContext;

class GroupingElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_groupingElement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MultipleGroupingSetsContext extends GroupingElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GROUPING() {
	    return this.getToken(StarRocksParser.GROUPING, 0);
	};

	SETS() {
	    return this.getToken(StarRocksParser.SETS, 0);
	};

	groupingSet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingSetContext);
	    } else {
	        return this.getTypedRuleContext(GroupingSetContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMultipleGroupingSets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMultipleGroupingSets(this);
		}
	}


}

StarRocksParser.MultipleGroupingSetsContext = MultipleGroupingSetsContext;

class SingleGroupingSetContext extends GroupingElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSingleGroupingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSingleGroupingSet(this);
		}
	}


}

StarRocksParser.SingleGroupingSetContext = SingleGroupingSetContext;

class CubeContext extends GroupingElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CUBE() {
	    return this.getToken(StarRocksParser.CUBE, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCube(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCube(this);
		}
	}


}

StarRocksParser.CubeContext = CubeContext;

class RollupContext extends GroupingElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROLLUP() {
	    return this.getToken(StarRocksParser.ROLLUP, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRollup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRollup(this);
		}
	}


}

StarRocksParser.RollupContext = RollupContext;

class GroupingSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_groupingSet;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterGroupingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitGroupingSet(this);
		}
	}


}



class CommonTableExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_commonTableExpression;
        this.name = null;
    }

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	queryRelation() {
	    return this.getTypedRuleContext(QueryRelationContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCommonTableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCommonTableExpression(this);
		}
	}


}



class SetQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_setQuantifier;
    }

	DISTINCT() {
	    return this.getToken(StarRocksParser.DISTINCT, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSetQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSetQuantifier(this);
		}
	}


}



class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_selectItem;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectAllContext extends SelectItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	ASTERISK_SYMBOL() {
	    return this.getToken(StarRocksParser.ASTERISK_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSelectAll(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSelectAll(this);
		}
	}


}

StarRocksParser.SelectAllContext = SelectAllContext;

class SelectSingleContext extends SelectItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSelectSingle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSelectSingle(this);
		}
	}


}

StarRocksParser.SelectSingleContext = SelectSingleContext;

class RelationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_relations;
    }

	relation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationContext);
	    } else {
	        return this.getTypedRuleContext(RelationContext,i);
	    }
	};

	LATERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.LATERAL);
	    } else {
	        return this.getToken(StarRocksParser.LATERAL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRelations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRelations(this);
		}
	}


}



class RelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_relation;
    }

	relationPrimary() {
	    return this.getTypedRuleContext(RelationPrimaryContext,0);
	};

	joinRelation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinRelationContext);
	    } else {
	        return this.getTypedRuleContext(JoinRelationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRelation(this);
		}
	}


}



class RelationPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_relationPrimary;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubqueryWithAliasContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        this.alias = null;;
        super.copyFrom(ctx);
    }

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSubqueryWithAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSubqueryWithAlias(this);
		}
	}


}

StarRocksParser.SubqueryWithAliasContext = SubqueryWithAliasContext;

class NormalizedTableFunctionContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        this.alias = null;;
        super.copyFrom(ctx);
    }

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterNormalizedTableFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitNormalizedTableFunction(this);
		}
	}


}

StarRocksParser.NormalizedTableFunctionContext = NormalizedTableFunctionContext;

class TableFunctionContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        this.alias = null;;
        super.copyFrom(ctx);
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTableFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTableFunction(this);
		}
	}


}

StarRocksParser.TableFunctionContext = TableFunctionContext;

class ParenthesizedRelationContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	relations() {
	    return this.getTypedRuleContext(RelationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterParenthesizedRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitParenthesizedRelation(this);
		}
	}


}

StarRocksParser.ParenthesizedRelationContext = ParenthesizedRelationContext;

class FileTableFunctionContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        this.alias = null;;
        super.copyFrom(ctx);
    }

	FILES() {
	    return this.getToken(StarRocksParser.FILES, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterFileTableFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitFileTableFunction(this);
		}
	}


}

StarRocksParser.FileTableFunctionContext = FileTableFunctionContext;

class TableAtomContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        this.alias = null;;
        this.ts = null;;
        super.copyFrom(ctx);
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	queryPeriod() {
	    return this.getTypedRuleContext(QueryPeriodContext,0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	tabletList() {
	    return this.getTypedRuleContext(TabletListContext,0);
	};

	replicaList() {
	    return this.getTypedRuleContext(ReplicaListContext,0);
	};

	sampleClause() {
	    return this.getTypedRuleContext(SampleClauseContext,0);
	};

	bracketHint() {
	    return this.getTypedRuleContext(BracketHintContext,0);
	};

	BEFORE() {
	    return this.getToken(StarRocksParser.BEFORE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTableAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTableAtom(this);
		}
	}


}

StarRocksParser.TableAtomContext = TableAtomContext;

class InlineTableContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        this.alias = null;;
        super.copyFrom(ctx);
    }

	VALUES() {
	    return this.getToken(StarRocksParser.VALUES, 0);
	};

	rowConstructor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RowConstructorContext);
	    } else {
	        return this.getTypedRuleContext(RowConstructorContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	columnAliases() {
	    return this.getTypedRuleContext(ColumnAliasesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInlineTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInlineTable(this);
		}
	}


}

StarRocksParser.InlineTableContext = InlineTableContext;

class PivotClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_pivotClause;
    }

	PIVOT() {
	    return this.getToken(StarRocksParser.PIVOT, 0);
	};

	pivotAggregationExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PivotAggregationExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PivotAggregationExpressionContext,i);
	    }
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	pivotValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PivotValueContext);
	    } else {
	        return this.getTypedRuleContext(PivotValueContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPivotClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPivotClause(this);
		}
	}


}



class PivotAggregationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_pivotAggregationExpression;
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPivotAggregationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPivotAggregationExpression(this);
		}
	}


}



class PivotValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_pivotValue;
    }

	literalExpression() {
	    return this.getTypedRuleContext(LiteralExpressionContext,0);
	};

	literalExpressionList() {
	    return this.getTypedRuleContext(LiteralExpressionListContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPivotValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPivotValue(this);
		}
	}


}



class SampleClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_sampleClause;
    }

	SAMPLE() {
	    return this.getToken(StarRocksParser.SAMPLE, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSampleClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSampleClause(this);
		}
	}


}



class ArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_argumentList;
    }

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	namedArgumentList() {
	    return this.getTypedRuleContext(NamedArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitArgumentList(this);
		}
	}


}



class NamedArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_namedArgumentList;
    }

	namedArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedArgumentContext);
	    } else {
	        return this.getTypedRuleContext(NamedArgumentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterNamedArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitNamedArgumentList(this);
		}
	}


}



class NamedArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_namedArgument;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class NamedArgumentsContext extends NamedArgumentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterNamedArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitNamedArguments(this);
		}
	}


}

StarRocksParser.NamedArgumentsContext = NamedArgumentsContext;

class JoinRelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_joinRelation;
        this.rightRelation = null;
    }

	crossOrInnerJoinType() {
	    return this.getTypedRuleContext(CrossOrInnerJoinTypeContext,0);
	};

	relationPrimary() {
	    return this.getTypedRuleContext(RelationPrimaryContext,0);
	};

	bracketHint() {
	    return this.getTypedRuleContext(BracketHintContext,0);
	};

	LATERAL() {
	    return this.getToken(StarRocksParser.LATERAL, 0);
	};

	joinCriteria() {
	    return this.getTypedRuleContext(JoinCriteriaContext,0);
	};

	outerAndSemiJoinType() {
	    return this.getTypedRuleContext(OuterAndSemiJoinTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterJoinRelation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitJoinRelation(this);
		}
	}


}



class CrossOrInnerJoinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_crossOrInnerJoinType;
    }

	JOIN() {
	    return this.getToken(StarRocksParser.JOIN, 0);
	};

	INNER() {
	    return this.getToken(StarRocksParser.INNER, 0);
	};

	CROSS() {
	    return this.getToken(StarRocksParser.CROSS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCrossOrInnerJoinType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCrossOrInnerJoinType(this);
		}
	}


}



class OuterAndSemiJoinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_outerAndSemiJoinType;
    }

	LEFT() {
	    return this.getToken(StarRocksParser.LEFT, 0);
	};

	JOIN() {
	    return this.getToken(StarRocksParser.JOIN, 0);
	};

	RIGHT() {
	    return this.getToken(StarRocksParser.RIGHT, 0);
	};

	FULL() {
	    return this.getToken(StarRocksParser.FULL, 0);
	};

	OUTER() {
	    return this.getToken(StarRocksParser.OUTER, 0);
	};

	SEMI() {
	    return this.getToken(StarRocksParser.SEMI, 0);
	};

	ANTI() {
	    return this.getToken(StarRocksParser.ANTI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterOuterAndSemiJoinType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitOuterAndSemiJoinType(this);
		}
	}


}



class BracketHintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_bracketHint;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	BITOR() {
	    return this.getToken(StarRocksParser.BITOR, 0);
	};

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	literalExpressionList() {
	    return this.getTypedRuleContext(LiteralExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBracketHint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBracketHint(this);
		}
	}


}



class HintMapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_hintMap;
        this.k = null;
        this.v = null;
    }

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	literalExpression() {
	    return this.getTypedRuleContext(LiteralExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterHintMap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitHintMap(this);
		}
	}


}



class JoinCriteriaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_joinCriteria;
    }

	ON() {
	    return this.getToken(StarRocksParser.ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	USING() {
	    return this.getToken(StarRocksParser.USING, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterJoinCriteria(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitJoinCriteria(this);
		}
	}


}



class ColumnAliasesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_columnAliases;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterColumnAliases(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitColumnAliases(this);
		}
	}


}



class PartitionNamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_partitionNames;
    }

	identifierOrString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierOrStringContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierOrStringContext,i);
	    }
	};

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	PARTITIONS() {
	    return this.getToken(StarRocksParser.PARTITIONS, 0);
	};

	TEMPORARY() {
	    return this.getToken(StarRocksParser.TEMPORARY, 0);
	};

	keyPartitions() {
	    return this.getTypedRuleContext(KeyPartitionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPartitionNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPartitionNames(this);
		}
	}


}



class KeyPartitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_keyPartitions;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class KeyPartitionListContext extends KeyPartitionsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	keyPartition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyPartitionContext);
	    } else {
	        return this.getTypedRuleContext(KeyPartitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterKeyPartitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitKeyPartitionList(this);
		}
	}


}

StarRocksParser.KeyPartitionListContext = KeyPartitionListContext;

class TabletListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_tabletList;
    }

	TABLET() {
	    return this.getToken(StarRocksParser.TABLET, 0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(StarRocksParser.INTEGER_VALUE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTabletList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTabletList(this);
		}
	}


}



class PrepareStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_prepareStatement;
    }

	PREPARE() {
	    return this.getToken(StarRocksParser.PREPARE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	prepareSql() {
	    return this.getTypedRuleContext(PrepareSqlContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPrepareStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPrepareStatement(this);
		}
	}


}



class PrepareSqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_prepareSql;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	SINGLE_QUOTED_TEXT() {
	    return this.getToken(StarRocksParser.SINGLE_QUOTED_TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPrepareSql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPrepareSql(this);
		}
	}


}



class ExecuteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_executeStatement;
    }

	EXECUTE() {
	    return this.getToken(StarRocksParser.EXECUTE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	USING() {
	    return this.getToken(StarRocksParser.USING, 0);
	};

	AT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.AT);
	    } else {
	        return this.getToken(StarRocksParser.AT, i);
	    }
	};


	identifierOrString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierOrStringContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierOrStringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExecuteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExecuteStatement(this);
		}
	}


}



class DeallocateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_deallocateStatement;
    }

	PREPARE() {
	    return this.getToken(StarRocksParser.PREPARE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DEALLOCATE() {
	    return this.getToken(StarRocksParser.DEALLOCATE, 0);
	};

	DROP() {
	    return this.getToken(StarRocksParser.DROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDeallocateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDeallocateStatement(this);
		}
	}


}



class ReplicaListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_replicaList;
    }

	REPLICA() {
	    return this.getToken(StarRocksParser.REPLICA, 0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(StarRocksParser.INTEGER_VALUE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterReplicaList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitReplicaList(this);
		}
	}


}



class ExpressionsWithDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_expressionsWithDefault;
    }

	expressionOrDefault = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionOrDefaultContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionOrDefaultContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExpressionsWithDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExpressionsWithDefault(this);
		}
	}


}



class ExpressionOrDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_expressionOrDefault;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DEFAULT() {
	    return this.getToken(StarRocksParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExpressionOrDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExpressionOrDefault(this);
		}
	}


}



class MapExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_mapExpressionList;
    }

	mapExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MapExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MapExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMapExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMapExpressionList(this);
		}
	}


}



class MapExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_mapExpression;
        this.key = null;
        this.value = null;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMapExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMapExpression(this);
		}
	}


}



class ExpressionSingletonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_expressionSingleton;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EOF() {
	    return this.getToken(StarRocksParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExpressionSingleton(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExpressionSingleton(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExpressionDefaultContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	BINARY() {
	    return this.getToken(StarRocksParser.BINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExpressionDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExpressionDefault(this);
		}
	}


}

StarRocksParser.ExpressionDefaultContext = ExpressionDefaultContext;

class LogicalNotContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLogicalNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLogicalNot(this);
		}
	}


}

StarRocksParser.LogicalNotContext = LogicalNotContext;

class LogicalBinaryContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.operator = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	AND() {
	    return this.getToken(StarRocksParser.AND, 0);
	};

	LOGICAL_AND() {
	    return this.getToken(StarRocksParser.LOGICAL_AND, 0);
	};

	OR() {
	    return this.getToken(StarRocksParser.OR, 0);
	};

	LOGICAL_OR() {
	    return this.getToken(StarRocksParser.LOGICAL_OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLogicalBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLogicalBinary(this);
		}
	}


}

StarRocksParser.LogicalBinaryContext = LogicalBinaryContext;

class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExpressionList(this);
		}
	}


}



class BooleanExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_booleanExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ComparisonContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitComparison(this);
		}
	}


}

StarRocksParser.ComparisonContext = ComparisonContext;

class BooleanExpressionDefaultContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBooleanExpressionDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBooleanExpressionDefault(this);
		}
	}


}

StarRocksParser.BooleanExpressionDefaultContext = BooleanExpressionDefaultContext;

class IsNullContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	IS() {
	    return this.getToken(StarRocksParser.IS, 0);
	};

	NULL() {
	    return this.getToken(StarRocksParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIsNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIsNull(this);
		}
	}


}

StarRocksParser.IsNullContext = IsNullContext;

class ScalarSubqueryContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	queryRelation() {
	    return this.getTypedRuleContext(QueryRelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterScalarSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitScalarSubquery(this);
		}
	}


}

StarRocksParser.ScalarSubqueryContext = ScalarSubqueryContext;

class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_predicate;
        this._valueExpression = null;
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	predicateOperations() {
	    return this.getTypedRuleContext(PredicateOperationsContext,0);
	};

	tupleInSubquery() {
	    return this.getTypedRuleContext(TupleInSubqueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPredicate(this);
		}
	}


}



class TupleInSubqueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_tupleInSubquery;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	queryRelation() {
	    return this.getTypedRuleContext(QueryRelationContext,0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTupleInSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTupleInSubquery(this);
		}
	}


}



class PredicateOperationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState, value) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_predicateOperations;
        this.value = null
        this.value = value || null;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
			this.value = ctx.value;
		}

}


class LikeContext extends PredicateOperationsContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null;;
        super.copyFrom(ctx);
    }

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	RLIKE() {
	    return this.getToken(StarRocksParser.RLIKE, 0);
	};

	REGEXP() {
	    return this.getToken(StarRocksParser.REGEXP, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLike(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLike(this);
		}
	}


}

StarRocksParser.LikeContext = LikeContext;

class InSubqueryContext extends PredicateOperationsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	queryRelation() {
	    return this.getTypedRuleContext(QueryRelationContext,0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInSubquery(this);
		}
	}


}

StarRocksParser.InSubqueryContext = InSubqueryContext;

class InListContext extends PredicateOperationsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInList(this);
		}
	}


}

StarRocksParser.InListContext = InListContext;

class BetweenContext extends PredicateOperationsContext {

    constructor(parser, ctx) {
        super(parser);
        this.lower = null;;
        this.upper = null;;
        super.copyFrom(ctx);
    }

	BETWEEN() {
	    return this.getToken(StarRocksParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(StarRocksParser.AND, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBetween(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBetween(this);
		}
	}


}

StarRocksParser.BetweenContext = BetweenContext;

class ValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_valueExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ValueExpressionDefaultContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterValueExpressionDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitValueExpressionDefault(this);
		}
	}


}

StarRocksParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

class ArithmeticBinaryContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.operator = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	BITXOR() {
	    return this.getToken(StarRocksParser.BITXOR, 0);
	};

	ASTERISK_SYMBOL() {
	    return this.getToken(StarRocksParser.ASTERISK_SYMBOL, 0);
	};

	SLASH_SYMBOL() {
	    return this.getToken(StarRocksParser.SLASH_SYMBOL, 0);
	};

	PERCENT_SYMBOL() {
	    return this.getToken(StarRocksParser.PERCENT_SYMBOL, 0);
	};

	INT_DIV() {
	    return this.getToken(StarRocksParser.INT_DIV, 0);
	};

	MOD() {
	    return this.getToken(StarRocksParser.MOD, 0);
	};

	PLUS_SYMBOL() {
	    return this.getToken(StarRocksParser.PLUS_SYMBOL, 0);
	};

	MINUS_SYMBOL() {
	    return this.getToken(StarRocksParser.MINUS_SYMBOL, 0);
	};

	BITAND() {
	    return this.getToken(StarRocksParser.BITAND, 0);
	};

	BITOR() {
	    return this.getToken(StarRocksParser.BITOR, 0);
	};

	BIT_SHIFT_LEFT() {
	    return this.getToken(StarRocksParser.BIT_SHIFT_LEFT, 0);
	};

	BIT_SHIFT_RIGHT() {
	    return this.getToken(StarRocksParser.BIT_SHIFT_RIGHT, 0);
	};

	BIT_SHIFT_RIGHT_LOGICAL() {
	    return this.getToken(StarRocksParser.BIT_SHIFT_RIGHT_LOGICAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterArithmeticBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitArithmeticBinary(this);
		}
	}


}

StarRocksParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_primaryExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DereferenceContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.base = null;;
        this.fieldName = null;;
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	DOT_IDENTIFIER() {
	    return this.getToken(StarRocksParser.DOT_IDENTIFIER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDereference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDereference(this);
		}
	}


}

StarRocksParser.DereferenceContext = DereferenceContext;

class OdbcFunctionCallExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FN() {
	    return this.getToken(StarRocksParser.FN, 0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterOdbcFunctionCallExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitOdbcFunctionCallExpression(this);
		}
	}


}

StarRocksParser.OdbcFunctionCallExpressionContext = OdbcFunctionCallExpressionContext;

class MatchExprContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	MATCH() {
	    return this.getToken(StarRocksParser.MATCH, 0);
	};

	primaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMatchExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMatchExpr(this);
		}
	}


}

StarRocksParser.MatchExprContext = MatchExprContext;

class ColumnRefContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnReference() {
	    return this.getTypedRuleContext(ColumnReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterColumnRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitColumnRef(this);
		}
	}


}

StarRocksParser.ColumnRefContext = ColumnRefContext;

class ConvertContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONVERT() {
	    return this.getToken(StarRocksParser.CONVERT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterConvert(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitConvert(this);
		}
	}


}

StarRocksParser.ConvertContext = ConvertContext;

class CollectionSubscriptContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.value = null;;
        this.index = null;;
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCollectionSubscript(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCollectionSubscript(this);
		}
	}


}

StarRocksParser.CollectionSubscriptContext = CollectionSubscriptContext;

class LiteralContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literalExpression() {
	    return this.getTypedRuleContext(LiteralExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLiteral(this);
		}
	}


}

StarRocksParser.LiteralContext = LiteralContext;

class CastContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CAST() {
	    return this.getToken(StarRocksParser.CAST, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCast(this);
		}
	}


}

StarRocksParser.CastContext = CastContext;

class ParenthesizedExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}


}

StarRocksParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class UserVariableExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	userVariable() {
	    return this.getTypedRuleContext(UserVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUserVariableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUserVariableExpression(this);
		}
	}


}

StarRocksParser.UserVariableExpressionContext = UserVariableExpressionContext;

class FunctionCallExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterFunctionCallExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitFunctionCallExpression(this);
		}
	}


}

StarRocksParser.FunctionCallExpressionContext = FunctionCallExpressionContext;

class SimpleCaseContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.caseExpr = null;;
        this.elseExpression = null;;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(StarRocksParser.CASE, 0);
	};

	END() {
	    return this.getToken(StarRocksParser.END, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	whenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(WhenClauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(StarRocksParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSimpleCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSimpleCase(this);
		}
	}


}

StarRocksParser.SimpleCaseContext = SimpleCaseContext;

class ArrowExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	ARROW() {
	    return this.getToken(StarRocksParser.ARROW, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterArrowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitArrowExpression(this);
		}
	}


}

StarRocksParser.ArrowExpressionContext = ArrowExpressionContext;

class SystemVariableExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	systemVariable() {
	    return this.getTypedRuleContext(SystemVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSystemVariableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSystemVariableExpression(this);
		}
	}


}

StarRocksParser.SystemVariableExpressionContext = SystemVariableExpressionContext;

class ConcatContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	CONCAT() {
	    return this.getToken(StarRocksParser.CONCAT, 0);
	};

	primaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterConcat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitConcat(this);
		}
	}


}

StarRocksParser.ConcatContext = ConcatContext;

class SubqueryExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSubqueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSubqueryExpression(this);
		}
	}


}

StarRocksParser.SubqueryExpressionContext = SubqueryExpressionContext;

class LambdaFunctionExprContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ARROW() {
	    return this.getToken(StarRocksParser.ARROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLambdaFunctionExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLambdaFunctionExpr(this);
		}
	}


}

StarRocksParser.LambdaFunctionExprContext = LambdaFunctionExprContext;

class DictionaryGetExprContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DICTIONARY_GET() {
	    return this.getToken(StarRocksParser.DICTIONARY_GET, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDictionaryGetExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDictionaryGetExpr(this);
		}
	}


}

StarRocksParser.DictionaryGetExprContext = DictionaryGetExprContext;

class CollateContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	COLLATE() {
	    return this.getToken(StarRocksParser.COLLATE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCollate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCollate(this);
		}
	}


}

StarRocksParser.CollateContext = CollateContext;

class ArrayConstructorContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterArrayConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitArrayConstructor(this);
		}
	}


}

StarRocksParser.ArrayConstructorContext = ArrayConstructorContext;

class MapConstructorContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	mapType() {
	    return this.getTypedRuleContext(MapTypeContext,0);
	};

	mapExpressionList() {
	    return this.getTypedRuleContext(MapExpressionListContext,0);
	};

	MAP() {
	    return this.getToken(StarRocksParser.MAP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMapConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMapConstructor(this);
		}
	}


}

StarRocksParser.MapConstructorContext = MapConstructorContext;

class ArraySliceContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.start = null;;
        this.end = null;;
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(StarRocksParser.INTEGER_VALUE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterArraySlice(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitArraySlice(this);
		}
	}


}

StarRocksParser.ArraySliceContext = ArraySliceContext;

class ExistsContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	queryRelation() {
	    return this.getTypedRuleContext(QueryRelationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExists(this);
		}
	}


}

StarRocksParser.ExistsContext = ExistsContext;

class SearchedCaseContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.elseExpression = null;;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(StarRocksParser.CASE, 0);
	};

	END() {
	    return this.getToken(StarRocksParser.END, 0);
	};

	whenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(WhenClauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(StarRocksParser.ELSE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSearchedCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSearchedCase(this);
		}
	}


}

StarRocksParser.SearchedCaseContext = SearchedCaseContext;

class ArithmeticUnaryContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	MINUS_SYMBOL() {
	    return this.getToken(StarRocksParser.MINUS_SYMBOL, 0);
	};

	PLUS_SYMBOL() {
	    return this.getToken(StarRocksParser.PLUS_SYMBOL, 0);
	};

	BITNOT() {
	    return this.getToken(StarRocksParser.BITNOT, 0);
	};

	LOGICAL_NOT() {
	    return this.getToken(StarRocksParser.LOGICAL_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterArithmeticUnary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitArithmeticUnary(this);
		}
	}


}

StarRocksParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

class LiteralExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_literalExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BinaryLiteralContext extends LiteralExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	binary() {
	    return this.getTypedRuleContext(BinaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBinaryLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBinaryLiteral(this);
		}
	}


}

StarRocksParser.BinaryLiteralContext = BinaryLiteralContext;

class NullLiteralContext extends LiteralExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NULL() {
	    return this.getToken(StarRocksParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitNullLiteral(this);
		}
	}


}

StarRocksParser.NullLiteralContext = NullLiteralContext;

class StringLiteralContext extends LiteralExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}

StarRocksParser.StringLiteralContext = StringLiteralContext;

class ParameterContext extends LiteralExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARAMETER() {
	    return this.getToken(StarRocksParser.PARAMETER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitParameter(this);
		}
	}


}

StarRocksParser.ParameterContext = ParameterContext;

class DateLiteralContext extends LiteralExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	DATE() {
	    return this.getToken(StarRocksParser.DATE, 0);
	};

	DATETIME() {
	    return this.getToken(StarRocksParser.DATETIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDateLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDateLiteral(this);
		}
	}


}

StarRocksParser.DateLiteralContext = DateLiteralContext;

class BooleanLiteralContext extends LiteralExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}

StarRocksParser.BooleanLiteralContext = BooleanLiteralContext;

class NumericLiteralContext extends LiteralExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitNumericLiteral(this);
		}
	}


}

StarRocksParser.NumericLiteralContext = NumericLiteralContext;

class IntervalLiteralContext extends LiteralExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIntervalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIntervalLiteral(this);
		}
	}


}

StarRocksParser.IntervalLiteralContext = IntervalLiteralContext;

class UnitBoundaryLiteralContext extends LiteralExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	unitBoundary() {
	    return this.getTypedRuleContext(UnitBoundaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUnitBoundaryLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUnitBoundaryLiteral(this);
		}
	}


}

StarRocksParser.UnitBoundaryLiteralContext = UnitBoundaryLiteralContext;

class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_functionCall;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AggregationFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	aggregationFunction() {
	    return this.getTypedRuleContext(AggregationFunctionContext,0);
	};

	over() {
	    return this.getTypedRuleContext(OverContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAggregationFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAggregationFunctionCall(this);
		}
	}


}

StarRocksParser.AggregationFunctionCallContext = AggregationFunctionCallContext;

class ExtractContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXTRACT() {
	    return this.getToken(StarRocksParser.EXTRACT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(StarRocksParser.FROM, 0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExtract(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExtract(this);
		}
	}


}

StarRocksParser.ExtractContext = ExtractContext;

class SpecialFunctionContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	specialFunctionExpression() {
	    return this.getTypedRuleContext(SpecialFunctionExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSpecialFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSpecialFunction(this);
		}
	}


}

StarRocksParser.SpecialFunctionContext = SpecialFunctionContext;

class SimpleFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	over() {
	    return this.getTypedRuleContext(OverContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSimpleFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSimpleFunctionCall(this);
		}
	}


}

StarRocksParser.SimpleFunctionCallContext = SimpleFunctionCallContext;

class SpecialDateTimeContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	specialDateTimeExpression() {
	    return this.getTypedRuleContext(SpecialDateTimeExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSpecialDateTime(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSpecialDateTime(this);
		}
	}


}

StarRocksParser.SpecialDateTimeContext = SpecialDateTimeContext;

class WindowFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	windowFunction() {
	    return this.getTypedRuleContext(WindowFunctionContext,0);
	};

	over() {
	    return this.getTypedRuleContext(OverContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterWindowFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitWindowFunctionCall(this);
		}
	}


}

StarRocksParser.WindowFunctionCallContext = WindowFunctionCallContext;

class InformationFunctionContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	informationFunctionExpression() {
	    return this.getTypedRuleContext(InformationFunctionExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInformationFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInformationFunction(this);
		}
	}


}

StarRocksParser.InformationFunctionContext = InformationFunctionContext;

class TranslateFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRANSLATE() {
	    return this.getToken(StarRocksParser.TRANSLATE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTranslateFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTranslateFunctionCall(this);
		}
	}


}

StarRocksParser.TranslateFunctionCallContext = TranslateFunctionCallContext;

class GroupingOperationContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GROUPING() {
	    return this.getToken(StarRocksParser.GROUPING, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	GROUPING_ID() {
	    return this.getToken(StarRocksParser.GROUPING_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterGroupingOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitGroupingOperation(this);
		}
	}


}

StarRocksParser.GroupingOperationContext = GroupingOperationContext;

class AggregationFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_aggregationFunction;
    }

	AVG() {
	    return this.getToken(StarRocksParser.AVG, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	COUNT() {
	    return this.getToken(StarRocksParser.COUNT, 0);
	};

	ASTERISK_SYMBOL() {
	    return this.getToken(StarRocksParser.ASTERISK_SYMBOL, 0);
	};

	bracketHint() {
	    return this.getTypedRuleContext(BracketHintContext,0);
	};

	MAX() {
	    return this.getToken(StarRocksParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(StarRocksParser.MIN, 0);
	};

	SUM() {
	    return this.getToken(StarRocksParser.SUM, 0);
	};

	ARRAY_AGG() {
	    return this.getToken(StarRocksParser.ARRAY_AGG, 0);
	};

	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	ARRAY_AGG_DISTINCT() {
	    return this.getToken(StarRocksParser.ARRAY_AGG_DISTINCT, 0);
	};

	GROUP_CONCAT() {
	    return this.getToken(StarRocksParser.GROUP_CONCAT, 0);
	};

	SEPARATOR() {
	    return this.getToken(StarRocksParser.SEPARATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAggregationFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAggregationFunction(this);
		}
	}


}



class UserVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_userVariable;
    }

	AT() {
	    return this.getToken(StarRocksParser.AT, 0);
	};

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUserVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUserVariable(this);
		}
	}


}



class SystemVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_systemVariable;
    }

	AT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.AT);
	    } else {
	        return this.getToken(StarRocksParser.AT, i);
	    }
	};


	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	varType() {
	    return this.getTypedRuleContext(VarTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSystemVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSystemVariable(this);
		}
	}


}



class ColumnReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_columnReference;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterColumnReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitColumnReference(this);
		}
	}


}



class InformationFunctionExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_informationFunctionExpression;
        this.name = null;
    }

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	DATABASE() {
	    return this.getToken(StarRocksParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(StarRocksParser.SCHEMA, 0);
	};

	USER() {
	    return this.getToken(StarRocksParser.USER, 0);
	};

	CURRENT_USER() {
	    return this.getToken(StarRocksParser.CURRENT_USER, 0);
	};

	CURRENT_ROLE() {
	    return this.getToken(StarRocksParser.CURRENT_ROLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInformationFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInformationFunctionExpression(this);
		}
	}


}



class SpecialDateTimeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_specialDateTimeExpression;
        this.name = null;
    }

	CURRENT_DATE() {
	    return this.getToken(StarRocksParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(StarRocksParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(StarRocksParser.CURRENT_TIMESTAMP, 0);
	};

	LOCALTIME() {
	    return this.getToken(StarRocksParser.LOCALTIME, 0);
	};

	LOCALTIMESTAMP() {
	    return this.getToken(StarRocksParser.LOCALTIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSpecialDateTimeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSpecialDateTimeExpression(this);
		}
	}


}



class SpecialFunctionExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_specialFunctionExpression;
    }

	CHAR() {
	    return this.getToken(StarRocksParser.CHAR, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	DAY() {
	    return this.getToken(StarRocksParser.DAY, 0);
	};

	HOUR() {
	    return this.getToken(StarRocksParser.HOUR, 0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	LEFT() {
	    return this.getToken(StarRocksParser.LEFT, 0);
	};

	LIKE() {
	    return this.getToken(StarRocksParser.LIKE, 0);
	};

	MINUTE() {
	    return this.getToken(StarRocksParser.MINUTE, 0);
	};

	MOD() {
	    return this.getToken(StarRocksParser.MOD, 0);
	};

	MONTH() {
	    return this.getToken(StarRocksParser.MONTH, 0);
	};

	QUARTER() {
	    return this.getToken(StarRocksParser.QUARTER, 0);
	};

	REGEXP() {
	    return this.getToken(StarRocksParser.REGEXP, 0);
	};

	REPLACE() {
	    return this.getToken(StarRocksParser.REPLACE, 0);
	};

	RIGHT() {
	    return this.getToken(StarRocksParser.RIGHT, 0);
	};

	RLIKE() {
	    return this.getToken(StarRocksParser.RLIKE, 0);
	};

	SECOND() {
	    return this.getToken(StarRocksParser.SECOND, 0);
	};

	TIMESTAMPADD() {
	    return this.getToken(StarRocksParser.TIMESTAMPADD, 0);
	};

	unitIdentifier() {
	    return this.getTypedRuleContext(UnitIdentifierContext,0);
	};

	TIMESTAMPDIFF() {
	    return this.getToken(StarRocksParser.TIMESTAMPDIFF, 0);
	};

	YEAR() {
	    return this.getToken(StarRocksParser.YEAR, 0);
	};

	PASSWORD() {
	    return this.getToken(StarRocksParser.PASSWORD, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	FLOOR() {
	    return this.getToken(StarRocksParser.FLOOR, 0);
	};

	CEIL() {
	    return this.getToken(StarRocksParser.CEIL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSpecialFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSpecialFunctionExpression(this);
		}
	}


}



class WindowFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_windowFunction;
        this.name = null;
    }

	ROW_NUMBER() {
	    return this.getToken(StarRocksParser.ROW_NUMBER, 0);
	};

	RANK() {
	    return this.getToken(StarRocksParser.RANK, 0);
	};

	DENSE_RANK() {
	    return this.getToken(StarRocksParser.DENSE_RANK, 0);
	};

	CUME_DIST() {
	    return this.getToken(StarRocksParser.CUME_DIST, 0);
	};

	PERCENT_RANK() {
	    return this.getToken(StarRocksParser.PERCENT_RANK, 0);
	};

	NTILE() {
	    return this.getToken(StarRocksParser.NTILE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LEAD() {
	    return this.getToken(StarRocksParser.LEAD, 0);
	};

	ignoreNulls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IgnoreNullsContext);
	    } else {
	        return this.getTypedRuleContext(IgnoreNullsContext,i);
	    }
	};

	LAG() {
	    return this.getToken(StarRocksParser.LAG, 0);
	};

	FIRST_VALUE() {
	    return this.getToken(StarRocksParser.FIRST_VALUE, 0);
	};

	LAST_VALUE() {
	    return this.getToken(StarRocksParser.LAST_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterWindowFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitWindowFunction(this);
		}
	}


}



class WhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_whenClause;
        this.condition = null;
        this.result = null;
    }

	WHEN() {
	    return this.getToken(StarRocksParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(StarRocksParser.THEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitWhenClause(this);
		}
	}


}



class OverContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_over;
        this._expression = null;
        this.partition = [];
    }

	OVER() {
	    return this.getToken(StarRocksParser.OVER, 0);
	};

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.BY);
	    } else {
	        return this.getToken(StarRocksParser.BY, i);
	    }
	};


	ORDER() {
	    return this.getToken(StarRocksParser.ORDER, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	windowFrame() {
	    return this.getTypedRuleContext(WindowFrameContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	bracketHint() {
	    return this.getTypedRuleContext(BracketHintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterOver(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitOver(this);
		}
	}


}



class IgnoreNullsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_ignoreNulls;
    }

	IGNORE() {
	    return this.getToken(StarRocksParser.IGNORE, 0);
	};

	NULLS() {
	    return this.getToken(StarRocksParser.NULLS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIgnoreNulls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIgnoreNulls(this);
		}
	}


}



class WindowFrameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_windowFrame;
        this.frameType = null;
        this.start = null;
        this.end = null;
    }

	RANGE() {
	    return this.getToken(StarRocksParser.RANGE, 0);
	};

	frameBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FrameBoundContext);
	    } else {
	        return this.getTypedRuleContext(FrameBoundContext,i);
	    }
	};

	ROWS() {
	    return this.getToken(StarRocksParser.ROWS, 0);
	};

	BETWEEN() {
	    return this.getToken(StarRocksParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(StarRocksParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterWindowFrame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitWindowFrame(this);
		}
	}


}



class FrameBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_frameBound;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BoundedFrameContext extends FrameBoundContext {

    constructor(parser, ctx) {
        super(parser);
        this.boundType = null;;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	PRECEDING() {
	    return this.getToken(StarRocksParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(StarRocksParser.FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBoundedFrame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBoundedFrame(this);
		}
	}


}

StarRocksParser.BoundedFrameContext = BoundedFrameContext;

class UnboundedFrameContext extends FrameBoundContext {

    constructor(parser, ctx) {
        super(parser);
        this.boundType = null;;
        super.copyFrom(ctx);
    }

	UNBOUNDED() {
	    return this.getToken(StarRocksParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(StarRocksParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(StarRocksParser.FOLLOWING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUnboundedFrame(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUnboundedFrame(this);
		}
	}


}

StarRocksParser.UnboundedFrameContext = UnboundedFrameContext;

class CurrentRowBoundContext extends FrameBoundContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT() {
	    return this.getToken(StarRocksParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(StarRocksParser.ROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterCurrentRowBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitCurrentRowBound(this);
		}
	}


}

StarRocksParser.CurrentRowBoundContext = CurrentRowBoundContext;

class BackupRestoreObjectDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_backupRestoreObjectDesc;
    }

	backupRestoreTableDesc() {
	    return this.getTypedRuleContext(BackupRestoreTableDescContext,0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	FUNCTION() {
	    return this.getToken(StarRocksParser.FUNCTION, 0);
	};

	FUNCTIONS() {
	    return this.getToken(StarRocksParser.FUNCTIONS, 0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	TABLE() {
	    return this.getToken(StarRocksParser.TABLE, 0);
	};

	TABLES() {
	    return this.getToken(StarRocksParser.TABLES, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	VIEWS() {
	    return this.getToken(StarRocksParser.VIEWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBackupRestoreObjectDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBackupRestoreObjectDesc(this);
		}
	}


}



class TableDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_tableDesc;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTableDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTableDesc(this);
		}
	}


}



class BackupRestoreTableDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_backupRestoreTableDesc;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	partitionNames() {
	    return this.getTypedRuleContext(PartitionNamesContext,0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBackupRestoreTableDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBackupRestoreTableDesc(this);
		}
	}


}



class ExplainDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_explainDesc;
    }

	DESC() {
	    return this.getToken(StarRocksParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(StarRocksParser.DESCRIBE, 0);
	};

	EXPLAIN() {
	    return this.getToken(StarRocksParser.EXPLAIN, 0);
	};

	LOGICAL() {
	    return this.getToken(StarRocksParser.LOGICAL, 0);
	};

	ANALYZE() {
	    return this.getToken(StarRocksParser.ANALYZE, 0);
	};

	VERBOSE() {
	    return this.getToken(StarRocksParser.VERBOSE, 0);
	};

	COSTS() {
	    return this.getToken(StarRocksParser.COSTS, 0);
	};

	SCHEDULER() {
	    return this.getToken(StarRocksParser.SCHEDULER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExplainDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExplainDesc(this);
		}
	}


}



class OptimizerTraceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_optimizerTrace;
    }

	TRACE() {
	    return this.getToken(StarRocksParser.TRACE, 0);
	};

	ALL() {
	    return this.getToken(StarRocksParser.ALL, 0);
	};

	LOGS() {
	    return this.getToken(StarRocksParser.LOGS, 0);
	};

	TIMES() {
	    return this.getToken(StarRocksParser.TIMES, 0);
	};

	VALUES() {
	    return this.getToken(StarRocksParser.VALUES, 0);
	};

	REASON() {
	    return this.getToken(StarRocksParser.REASON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterOptimizerTrace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitOptimizerTrace(this);
		}
	}


}



class PartitionExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_partitionExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPartitionExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPartitionExpr(this);
		}
	}


}



class PartitionDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_partitionDesc;
    }

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	RANGE() {
	    return this.getToken(StarRocksParser.RANGE, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	rangePartitionDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RangePartitionDescContext);
	    } else {
	        return this.getTypedRuleContext(RangePartitionDescContext,i);
	    }
	};

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	LIST() {
	    return this.getToken(StarRocksParser.LIST, 0);
	};

	listPartitionDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListPartitionDescContext);
	    } else {
	        return this.getTypedRuleContext(ListPartitionDescContext,i);
	    }
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	partitionExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionExprContext);
	    } else {
	        return this.getTypedRuleContext(PartitionExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPartitionDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPartitionDesc(this);
		}
	}


}



class ListPartitionDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_listPartitionDesc;
    }

	singleItemListPartitionDesc() {
	    return this.getTypedRuleContext(SingleItemListPartitionDescContext,0);
	};

	multiItemListPartitionDesc() {
	    return this.getTypedRuleContext(MultiItemListPartitionDescContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterListPartitionDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitListPartitionDesc(this);
		}
	}


}



class SingleItemListPartitionDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_singleItemListPartitionDesc;
    }

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	VALUES() {
	    return this.getToken(StarRocksParser.VALUES, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	singleListPartitionValues() {
	    return this.getTypedRuleContext(SingleListPartitionValuesContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSingleItemListPartitionDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSingleItemListPartitionDesc(this);
		}
	}


}



class MultiItemListPartitionDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_multiItemListPartitionDesc;
    }

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	VALUES() {
	    return this.getToken(StarRocksParser.VALUES, 0);
	};

	IN() {
	    return this.getToken(StarRocksParser.IN, 0);
	};

	multiListPartitionValues() {
	    return this.getTypedRuleContext(MultiListPartitionValuesContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMultiItemListPartitionDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMultiItemListPartitionDesc(this);
		}
	}


}



class MultiListPartitionValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_multiListPartitionValues;
    }

	singleListPartitionValues = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleListPartitionValuesContext);
	    } else {
	        return this.getTypedRuleContext(SingleListPartitionValuesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMultiListPartitionValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMultiListPartitionValues(this);
		}
	}


}



class SingleListPartitionValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_singleListPartitionValues;
    }

	listPartitionValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ListPartitionValueContext);
	    } else {
	        return this.getTypedRuleContext(ListPartitionValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSingleListPartitionValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSingleListPartitionValues(this);
		}
	}


}



class ListPartitionValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_listPartitionValues;
    }

	singleListPartitionValues() {
	    return this.getTypedRuleContext(SingleListPartitionValuesContext,0);
	};

	multiListPartitionValues() {
	    return this.getTypedRuleContext(MultiListPartitionValuesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterListPartitionValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitListPartitionValues(this);
		}
	}


}



class ListPartitionValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_listPartitionValue;
    }

	NULL() {
	    return this.getToken(StarRocksParser.NULL, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterListPartitionValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitListPartitionValue(this);
		}
	}


}



class StringListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_stringList;
    }

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterStringList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitStringList(this);
		}
	}


}



class LiteralExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_literalExpressionList;
    }

	literalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LiteralExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterLiteralExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitLiteralExpressionList(this);
		}
	}


}



class RangePartitionDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_rangePartitionDesc;
    }

	singleRangePartition() {
	    return this.getTypedRuleContext(SingleRangePartitionContext,0);
	};

	multiRangePartition() {
	    return this.getTypedRuleContext(MultiRangePartitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRangePartitionDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRangePartitionDesc(this);
		}
	}


}



class SingleRangePartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_singleRangePartition;
    }

	PARTITION() {
	    return this.getToken(StarRocksParser.PARTITION, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	VALUES() {
	    return this.getToken(StarRocksParser.VALUES, 0);
	};

	partitionKeyDesc() {
	    return this.getTypedRuleContext(PartitionKeyDescContext,0);
	};

	IF() {
	    return this.getToken(StarRocksParser.IF, 0);
	};

	NOT() {
	    return this.getToken(StarRocksParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(StarRocksParser.EXISTS, 0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSingleRangePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSingleRangePartition(this);
		}
	}


}



class MultiRangePartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_multiRangePartition;
    }

	START() {
	    return this.getToken(StarRocksParser.START, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	END() {
	    return this.getToken(StarRocksParser.END, 0);
	};

	EVERY() {
	    return this.getToken(StarRocksParser.EVERY, 0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMultiRangePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMultiRangePartition(this);
		}
	}


}



class PartitionRangeDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_partitionRangeDesc;
    }

	START() {
	    return this.getToken(StarRocksParser.START, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	END() {
	    return this.getToken(StarRocksParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPartitionRangeDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPartitionRangeDesc(this);
		}
	}


}



class PartitionKeyDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_partitionKeyDesc;
    }

	LESS() {
	    return this.getToken(StarRocksParser.LESS, 0);
	};

	THAN() {
	    return this.getToken(StarRocksParser.THAN, 0);
	};

	MAXVALUE() {
	    return this.getToken(StarRocksParser.MAXVALUE, 0);
	};

	partitionValueList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionValueListContext);
	    } else {
	        return this.getTypedRuleContext(PartitionValueListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPartitionKeyDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPartitionKeyDesc(this);
		}
	}


}



class PartitionValueListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_partitionValueList;
    }

	partitionValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionValueContext);
	    } else {
	        return this.getTypedRuleContext(PartitionValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPartitionValueList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPartitionValueList(this);
		}
	}


}



class KeyPartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_keyPartition;
        this.partitionColName = null;
        this.partitionColValue = null;
    }

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	literalExpression() {
	    return this.getTypedRuleContext(LiteralExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterKeyPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitKeyPartition(this);
		}
	}


}



class PartitionValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_partitionValue;
    }

	MAXVALUE() {
	    return this.getToken(StarRocksParser.MAXVALUE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPartitionValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPartitionValue(this);
		}
	}


}



class DistributionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_distributionClause;
    }

	DISTRIBUTED() {
	    return this.getToken(StarRocksParser.DISTRIBUTED, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	HASH() {
	    return this.getToken(StarRocksParser.HASH, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	BUCKETS() {
	    return this.getToken(StarRocksParser.BUCKETS, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDistributionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDistributionClause(this);
		}
	}


}



class DistributionDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_distributionDesc;
    }

	DISTRIBUTED() {
	    return this.getToken(StarRocksParser.DISTRIBUTED, 0);
	};

	BY() {
	    return this.getToken(StarRocksParser.BY, 0);
	};

	HASH() {
	    return this.getToken(StarRocksParser.HASH, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	BUCKETS() {
	    return this.getToken(StarRocksParser.BUCKETS, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	RANDOM() {
	    return this.getToken(StarRocksParser.RANDOM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDistributionDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDistributionDesc(this);
		}
	}


}



class RefreshSchemeDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_refreshSchemeDesc;
    }

	REFRESH() {
	    return this.getToken(StarRocksParser.REFRESH, 0);
	};

	ASYNC() {
	    return this.getToken(StarRocksParser.ASYNC, 0);
	};

	EVERY() {
	    return this.getToken(StarRocksParser.EVERY, 0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	INCREMENTAL() {
	    return this.getToken(StarRocksParser.INCREMENTAL, 0);
	};

	MANUAL() {
	    return this.getToken(StarRocksParser.MANUAL, 0);
	};

	IMMEDIATE() {
	    return this.getToken(StarRocksParser.IMMEDIATE, 0);
	};

	DEFERRED() {
	    return this.getToken(StarRocksParser.DEFERRED, 0);
	};

	START() {
	    return this.getToken(StarRocksParser.START, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterRefreshSchemeDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitRefreshSchemeDesc(this);
		}
	}


}



class StatusDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_statusDesc;
    }

	ACTIVE() {
	    return this.getToken(StarRocksParser.ACTIVE, 0);
	};

	INACTIVE() {
	    return this.getToken(StarRocksParser.INACTIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterStatusDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitStatusDesc(this);
		}
	}


}



class PropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_properties;
    }

	PROPERTIES() {
	    return this.getToken(StarRocksParser.PROPERTIES, 0);
	};

	property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyContext);
	    } else {
	        return this.getTypedRuleContext(PropertyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitProperties(this);
		}
	}


}



class ExtPropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_extProperties;
    }

	BROKER() {
	    return this.getToken(StarRocksParser.BROKER, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterExtProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitExtProperties(this);
		}
	}


}



class PropertyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_propertyList;
    }

	property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyContext);
	    } else {
	        return this.getTypedRuleContext(PropertyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterPropertyList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitPropertyList(this);
		}
	}


}



class UserPropertyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_userPropertyList;
    }

	property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyContext);
	    } else {
	        return this.getTypedRuleContext(PropertyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUserPropertyList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUserPropertyList(this);
		}
	}


}



class PropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_property;
        this.key = null;
        this.value = null;
    }

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitProperty(this);
		}
	}


}



class InlinePropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_inlineProperties;
    }

	inlineProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InlinePropertyContext);
	    } else {
	        return this.getTypedRuleContext(InlinePropertyContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInlineProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInlineProperties(this);
		}
	}


}



class InlinePropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_inlineProperty;
        this.key = null;
        this.value = null;
    }

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInlineProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInlineProperty(this);
		}
	}


}



class VarTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_varType;
    }

	GLOBAL() {
	    return this.getToken(StarRocksParser.GLOBAL, 0);
	};

	LOCAL() {
	    return this.getToken(StarRocksParser.LOCAL, 0);
	};

	SESSION() {
	    return this.getToken(StarRocksParser.SESSION, 0);
	};

	VERBOSE() {
	    return this.getToken(StarRocksParser.VERBOSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterVarType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitVarType(this);
		}
	}


}



class CommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_comment;
    }

	COMMENT() {
	    return this.getToken(StarRocksParser.COMMENT, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitComment(this);
		}
	}


}



class OutfileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_outfile;
        this.file = null;
    }

	INTO() {
	    return this.getToken(StarRocksParser.INTO, 0);
	};

	OUTFILE() {
	    return this.getToken(StarRocksParser.OUTFILE, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	fileFormat() {
	    return this.getTypedRuleContext(FileFormatContext,0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterOutfile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitOutfile(this);
		}
	}


}



class FileFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_fileFormat;
    }

	FORMAT() {
	    return this.getToken(StarRocksParser.FORMAT, 0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterFileFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitFileFormat(this);
		}
	}


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_string;
    }

	SINGLE_QUOTED_TEXT() {
	    return this.getToken(StarRocksParser.SINGLE_QUOTED_TEXT, 0);
	};

	DOUBLE_QUOTED_TEXT() {
	    return this.getToken(StarRocksParser.DOUBLE_QUOTED_TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitString(this);
		}
	}


}



class BinaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_binary;
    }

	BINARY_SINGLE_QUOTED_TEXT() {
	    return this.getToken(StarRocksParser.BINARY_SINGLE_QUOTED_TEXT, 0);
	};

	BINARY_DOUBLE_QUOTED_TEXT() {
	    return this.getToken(StarRocksParser.BINARY_DOUBLE_QUOTED_TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBinary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBinary(this);
		}
	}


}



class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_comparisonOperator;
    }

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(StarRocksParser.NEQ, 0);
	};

	LT() {
	    return this.getToken(StarRocksParser.LT, 0);
	};

	LTE() {
	    return this.getToken(StarRocksParser.LTE, 0);
	};

	GT() {
	    return this.getToken(StarRocksParser.GT, 0);
	};

	GTE() {
	    return this.getToken(StarRocksParser.GTE, 0);
	};

	EQ_FOR_NULL() {
	    return this.getToken(StarRocksParser.EQ_FOR_NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitComparisonOperator(this);
		}
	}


}



class BooleanValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_booleanValue;
    }

	TRUE() {
	    return this.getToken(StarRocksParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(StarRocksParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBooleanValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBooleanValue(this);
		}
	}


}



class IntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_interval;
        this.value = null;
        this.from = null;
    }

	INTERVAL() {
	    return this.getToken(StarRocksParser.INTERVAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	unitIdentifier() {
	    return this.getTypedRuleContext(UnitIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitInterval(this);
		}
	}


}



class TaskIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_taskInterval;
        this.value = null;
        this.from = null;
    }

	INTERVAL() {
	    return this.getToken(StarRocksParser.INTERVAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	taskUnitIdentifier() {
	    return this.getTypedRuleContext(TaskUnitIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTaskInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTaskInterval(this);
		}
	}


}



class TaskUnitIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_taskUnitIdentifier;
    }

	DAY() {
	    return this.getToken(StarRocksParser.DAY, 0);
	};

	HOUR() {
	    return this.getToken(StarRocksParser.HOUR, 0);
	};

	MINUTE() {
	    return this.getToken(StarRocksParser.MINUTE, 0);
	};

	SECOND() {
	    return this.getToken(StarRocksParser.SECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTaskUnitIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTaskUnitIdentifier(this);
		}
	}


}



class UnitIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_unitIdentifier;
    }

	YEAR() {
	    return this.getToken(StarRocksParser.YEAR, 0);
	};

	MONTH() {
	    return this.getToken(StarRocksParser.MONTH, 0);
	};

	WEEK() {
	    return this.getToken(StarRocksParser.WEEK, 0);
	};

	DAY() {
	    return this.getToken(StarRocksParser.DAY, 0);
	};

	HOUR() {
	    return this.getToken(StarRocksParser.HOUR, 0);
	};

	MINUTE() {
	    return this.getToken(StarRocksParser.MINUTE, 0);
	};

	SECOND() {
	    return this.getToken(StarRocksParser.SECOND, 0);
	};

	QUARTER() {
	    return this.getToken(StarRocksParser.QUARTER, 0);
	};

	MILLISECOND() {
	    return this.getToken(StarRocksParser.MILLISECOND, 0);
	};

	MICROSECOND() {
	    return this.getToken(StarRocksParser.MICROSECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUnitIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUnitIdentifier(this);
		}
	}


}



class UnitBoundaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_unitBoundary;
    }

	FLOOR() {
	    return this.getToken(StarRocksParser.FLOOR, 0);
	};

	CEIL() {
	    return this.getToken(StarRocksParser.CEIL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUnitBoundary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUnitBoundary(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_type;
    }

	baseType() {
	    return this.getTypedRuleContext(BaseTypeContext,0);
	};

	decimalType() {
	    return this.getTypedRuleContext(DecimalTypeContext,0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	structType() {
	    return this.getTypedRuleContext(StructTypeContext,0);
	};

	mapType() {
	    return this.getTypedRuleContext(MapTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitType(this);
		}
	}


}



class ArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_arrayType;
    }

	ARRAY() {
	    return this.getToken(StarRocksParser.ARRAY, 0);
	};

	LT() {
	    return this.getToken(StarRocksParser.LT, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	GT() {
	    return this.getToken(StarRocksParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitArrayType(this);
		}
	}


}



class MapTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_mapType;
    }

	MAP() {
	    return this.getToken(StarRocksParser.MAP, 0);
	};

	LT() {
	    return this.getToken(StarRocksParser.LT, 0);
	};

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	GT() {
	    return this.getToken(StarRocksParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterMapType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitMapType(this);
		}
	}


}



class SubfieldDescContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_subfieldDesc;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	nestedFieldName() {
	    return this.getTypedRuleContext(NestedFieldNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSubfieldDesc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSubfieldDesc(this);
		}
	}


}



class SubfieldDescsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_subfieldDescs;
    }

	subfieldDesc = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubfieldDescContext);
	    } else {
	        return this.getTypedRuleContext(SubfieldDescContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterSubfieldDescs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitSubfieldDescs(this);
		}
	}


}



class StructTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_structType;
    }

	STRUCT() {
	    return this.getToken(StarRocksParser.STRUCT, 0);
	};

	LT() {
	    return this.getToken(StarRocksParser.LT, 0);
	};

	subfieldDescs() {
	    return this.getTypedRuleContext(SubfieldDescsContext,0);
	};

	GT() {
	    return this.getToken(StarRocksParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterStructType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitStructType(this);
		}
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_typeParameter;
    }

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTypeParameter(this);
		}
	}


}



class BaseTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_baseType;
    }

	BOOLEAN() {
	    return this.getToken(StarRocksParser.BOOLEAN, 0);
	};

	TINYINT() {
	    return this.getToken(StarRocksParser.TINYINT, 0);
	};

	typeParameter() {
	    return this.getTypedRuleContext(TypeParameterContext,0);
	};

	SMALLINT() {
	    return this.getToken(StarRocksParser.SMALLINT, 0);
	};

	SIGNED() {
	    return this.getToken(StarRocksParser.SIGNED, 0);
	};

	INT() {
	    return this.getToken(StarRocksParser.INT, 0);
	};

	INTEGER() {
	    return this.getToken(StarRocksParser.INTEGER, 0);
	};

	UNSIGNED() {
	    return this.getToken(StarRocksParser.UNSIGNED, 0);
	};

	BIGINT() {
	    return this.getToken(StarRocksParser.BIGINT, 0);
	};

	LARGEINT() {
	    return this.getToken(StarRocksParser.LARGEINT, 0);
	};

	FLOAT() {
	    return this.getToken(StarRocksParser.FLOAT, 0);
	};

	DOUBLE() {
	    return this.getToken(StarRocksParser.DOUBLE, 0);
	};

	DATE() {
	    return this.getToken(StarRocksParser.DATE, 0);
	};

	DATETIME() {
	    return this.getToken(StarRocksParser.DATETIME, 0);
	};

	TIME() {
	    return this.getToken(StarRocksParser.TIME, 0);
	};

	CHAR() {
	    return this.getToken(StarRocksParser.CHAR, 0);
	};

	VARCHAR() {
	    return this.getToken(StarRocksParser.VARCHAR, 0);
	};

	STRING() {
	    return this.getToken(StarRocksParser.STRING, 0);
	};

	TEXT() {
	    return this.getToken(StarRocksParser.TEXT, 0);
	};

	BITMAP() {
	    return this.getToken(StarRocksParser.BITMAP, 0);
	};

	HLL() {
	    return this.getToken(StarRocksParser.HLL, 0);
	};

	PERCENTILE() {
	    return this.getToken(StarRocksParser.PERCENTILE, 0);
	};

	JSON() {
	    return this.getToken(StarRocksParser.JSON, 0);
	};

	VARBINARY() {
	    return this.getToken(StarRocksParser.VARBINARY, 0);
	};

	BINARY() {
	    return this.getToken(StarRocksParser.BINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBaseType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBaseType(this);
		}
	}


}



class DecimalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_decimalType;
        this.precision = null;
        this.scale = null;
    }

	DECIMAL() {
	    return this.getToken(StarRocksParser.DECIMAL, 0);
	};

	DECIMALV2() {
	    return this.getToken(StarRocksParser.DECIMALV2, 0);
	};

	DECIMAL32() {
	    return this.getToken(StarRocksParser.DECIMAL32, 0);
	};

	DECIMAL64() {
	    return this.getToken(StarRocksParser.DECIMAL64, 0);
	};

	DECIMAL128() {
	    return this.getToken(StarRocksParser.DECIMAL128, 0);
	};

	NUMERIC() {
	    return this.getToken(StarRocksParser.NUMERIC, 0);
	};

	NUMBER() {
	    return this.getToken(StarRocksParser.NUMBER, 0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(StarRocksParser.INTEGER_VALUE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDecimalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDecimalType(this);
		}
	}


}



class QualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_qualifiedName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT_IDENTIFIER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(StarRocksParser.DOT_IDENTIFIER);
	    } else {
	        return this.getToken(StarRocksParser.DOT_IDENTIFIER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterQualifiedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitQualifiedName(this);
		}
	}


}



class TableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_tableName;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitTableName(this);
		}
	}


}



class WriteBranchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_writeBranch;
    }

	VERSION() {
	    return this.getToken(StarRocksParser.VERSION, 0);
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	OF() {
	    return this.getToken(StarRocksParser.OF, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FOR() {
	    return this.getToken(StarRocksParser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterWriteBranch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitWriteBranch(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_identifier;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BackQuotedIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BACKQUOTED_IDENTIFIER() {
	    return this.getToken(StarRocksParser.BACKQUOTED_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterBackQuotedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitBackQuotedIdentifier(this);
		}
	}


}

StarRocksParser.BackQuotedIdentifierContext = BackQuotedIdentifierContext;

class DigitIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DIGIT_IDENTIFIER() {
	    return this.getToken(StarRocksParser.DIGIT_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDigitIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDigitIdentifier(this);
		}
	}


}

StarRocksParser.DigitIdentifierContext = DigitIdentifierContext;

class UnquotedIdentifierContext extends IdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LETTER_IDENTIFIER() {
	    return this.getToken(StarRocksParser.LETTER_IDENTIFIER, 0);
	};

	nonReserved() {
	    return this.getTypedRuleContext(NonReservedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUnquotedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUnquotedIdentifier(this);
		}
	}


}

StarRocksParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

class IdentifierWithAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_identifierWithAlias;
        this.originalName = null;
        this.alias = null;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	AS() {
	    return this.getToken(StarRocksParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIdentifierWithAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIdentifierWithAlias(this);
		}
	}


}



class IdentifierWithAliasListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_identifierWithAliasList;
    }

	identifierWithAlias = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierWithAliasContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierWithAliasContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIdentifierWithAliasList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIdentifierWithAliasList(this);
		}
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_identifierList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIdentifierList(this);
		}
	}


}



class IdentifierOrStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_identifierOrString;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIdentifierOrString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIdentifierOrString(this);
		}
	}


}



class IdentifierOrStringListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_identifierOrStringList;
    }

	identifierOrString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierOrStringContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierOrStringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIdentifierOrStringList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIdentifierOrStringList(this);
		}
	}


}



class IdentifierOrStringOrStarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_identifierOrStringOrStar;
    }

	ASTERISK_SYMBOL() {
	    return this.getToken(StarRocksParser.ASTERISK_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIdentifierOrStringOrStar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIdentifierOrStringOrStar(this);
		}
	}


}



class UserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_user;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UserWithHostAndBlanketContext extends UserContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifierOrString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierOrStringContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierOrStringContext,i);
	    }
	};

	AT() {
	    return this.getToken(StarRocksParser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUserWithHostAndBlanket(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUserWithHostAndBlanket(this);
		}
	}


}

StarRocksParser.UserWithHostAndBlanketContext = UserWithHostAndBlanketContext;

class UserWithHostContext extends UserContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifierOrString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierOrStringContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierOrStringContext,i);
	    }
	};

	AT() {
	    return this.getToken(StarRocksParser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUserWithHost(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUserWithHost(this);
		}
	}


}

StarRocksParser.UserWithHostContext = UserWithHostContext;

class UserWithoutHostContext extends UserContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifierOrString() {
	    return this.getTypedRuleContext(IdentifierOrStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterUserWithoutHost(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitUserWithoutHost(this);
		}
	}


}

StarRocksParser.UserWithoutHostContext = UserWithoutHostContext;

class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_assignment;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQ() {
	    return this.getToken(StarRocksParser.EQ, 0);
	};

	expressionOrDefault() {
	    return this.getTypedRuleContext(ExpressionOrDefaultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAssignment(this);
		}
	}


}



class AssignmentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_assignmentList;
    }

	assignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterAssignmentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitAssignmentList(this);
		}
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_number;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DecimalValueContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DECIMAL_VALUE() {
	    return this.getToken(StarRocksParser.DECIMAL_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDecimalValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDecimalValue(this);
		}
	}


}

StarRocksParser.DecimalValueContext = DecimalValueContext;

class IntegerValueContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTEGER_VALUE() {
	    return this.getToken(StarRocksParser.INTEGER_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterIntegerValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitIntegerValue(this);
		}
	}


}

StarRocksParser.IntegerValueContext = IntegerValueContext;

class DoubleValueContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOUBLE_VALUE() {
	    return this.getToken(StarRocksParser.DOUBLE_VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterDoubleValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitDoubleValue(this);
		}
	}


}

StarRocksParser.DoubleValueContext = DoubleValueContext;

class NonReservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = StarRocksParser.RULE_nonReserved;
    }

	ACCESS() {
	    return this.getToken(StarRocksParser.ACCESS, 0);
	};

	ACTIVE() {
	    return this.getToken(StarRocksParser.ACTIVE, 0);
	};

	ADVISOR() {
	    return this.getToken(StarRocksParser.ADVISOR, 0);
	};

	AFTER() {
	    return this.getToken(StarRocksParser.AFTER, 0);
	};

	AGGREGATE() {
	    return this.getToken(StarRocksParser.AGGREGATE, 0);
	};

	APPLY() {
	    return this.getToken(StarRocksParser.APPLY, 0);
	};

	ASYNC() {
	    return this.getToken(StarRocksParser.ASYNC, 0);
	};

	AUTHORS() {
	    return this.getToken(StarRocksParser.AUTHORS, 0);
	};

	AVG() {
	    return this.getToken(StarRocksParser.AVG, 0);
	};

	ADMIN() {
	    return this.getToken(StarRocksParser.ADMIN, 0);
	};

	ANTI() {
	    return this.getToken(StarRocksParser.ANTI, 0);
	};

	AUTHENTICATION() {
	    return this.getToken(StarRocksParser.AUTHENTICATION, 0);
	};

	AUTO_INCREMENT() {
	    return this.getToken(StarRocksParser.AUTO_INCREMENT, 0);
	};

	AUTOMATED() {
	    return this.getToken(StarRocksParser.AUTOMATED, 0);
	};

	ARRAY_AGG() {
	    return this.getToken(StarRocksParser.ARRAY_AGG, 0);
	};

	ARRAY_AGG_DISTINCT() {
	    return this.getToken(StarRocksParser.ARRAY_AGG_DISTINCT, 0);
	};

	BACKEND() {
	    return this.getToken(StarRocksParser.BACKEND, 0);
	};

	BACKENDS() {
	    return this.getToken(StarRocksParser.BACKENDS, 0);
	};

	BACKUP() {
	    return this.getToken(StarRocksParser.BACKUP, 0);
	};

	BEGIN() {
	    return this.getToken(StarRocksParser.BEGIN, 0);
	};

	BITMAP_UNION() {
	    return this.getToken(StarRocksParser.BITMAP_UNION, 0);
	};

	BLACKLIST() {
	    return this.getToken(StarRocksParser.BLACKLIST, 0);
	};

	BLACKHOLE() {
	    return this.getToken(StarRocksParser.BLACKHOLE, 0);
	};

	BINARY() {
	    return this.getToken(StarRocksParser.BINARY, 0);
	};

	BODY() {
	    return this.getToken(StarRocksParser.BODY, 0);
	};

	BOOLEAN() {
	    return this.getToken(StarRocksParser.BOOLEAN, 0);
	};

	BRANCH() {
	    return this.getToken(StarRocksParser.BRANCH, 0);
	};

	BROKER() {
	    return this.getToken(StarRocksParser.BROKER, 0);
	};

	BUCKETS() {
	    return this.getToken(StarRocksParser.BUCKETS, 0);
	};

	BUILTIN() {
	    return this.getToken(StarRocksParser.BUILTIN, 0);
	};

	BASE() {
	    return this.getToken(StarRocksParser.BASE, 0);
	};

	BEFORE() {
	    return this.getToken(StarRocksParser.BEFORE, 0);
	};

	BASELINE() {
	    return this.getToken(StarRocksParser.BASELINE, 0);
	};

	CACHE() {
	    return this.getToken(StarRocksParser.CACHE, 0);
	};

	CAST() {
	    return this.getToken(StarRocksParser.CAST, 0);
	};

	CANCEL() {
	    return this.getToken(StarRocksParser.CANCEL, 0);
	};

	CATALOG() {
	    return this.getToken(StarRocksParser.CATALOG, 0);
	};

	CATALOGS() {
	    return this.getToken(StarRocksParser.CATALOGS, 0);
	};

	CEIL() {
	    return this.getToken(StarRocksParser.CEIL, 0);
	};

	CHAIN() {
	    return this.getToken(StarRocksParser.CHAIN, 0);
	};

	CHARSET() {
	    return this.getToken(StarRocksParser.CHARSET, 0);
	};

	CLEAN() {
	    return this.getToken(StarRocksParser.CLEAN, 0);
	};

	CLEAR() {
	    return this.getToken(StarRocksParser.CLEAR, 0);
	};

	CLUSTER() {
	    return this.getToken(StarRocksParser.CLUSTER, 0);
	};

	CLUSTERS() {
	    return this.getToken(StarRocksParser.CLUSTERS, 0);
	};

	CURRENT() {
	    return this.getToken(StarRocksParser.CURRENT, 0);
	};

	COLLATION() {
	    return this.getToken(StarRocksParser.COLLATION, 0);
	};

	COLUMNS() {
	    return this.getToken(StarRocksParser.COLUMNS, 0);
	};

	CUME_DIST() {
	    return this.getToken(StarRocksParser.CUME_DIST, 0);
	};

	CUMULATIVE() {
	    return this.getToken(StarRocksParser.CUMULATIVE, 0);
	};

	COMMENT() {
	    return this.getToken(StarRocksParser.COMMENT, 0);
	};

	COMMIT() {
	    return this.getToken(StarRocksParser.COMMIT, 0);
	};

	COMMITTED() {
	    return this.getToken(StarRocksParser.COMMITTED, 0);
	};

	COMPUTE() {
	    return this.getToken(StarRocksParser.COMPUTE, 0);
	};

	CONNECTION() {
	    return this.getToken(StarRocksParser.CONNECTION, 0);
	};

	CONSISTENT() {
	    return this.getToken(StarRocksParser.CONSISTENT, 0);
	};

	COSTS() {
	    return this.getToken(StarRocksParser.COSTS, 0);
	};

	COUNT() {
	    return this.getToken(StarRocksParser.COUNT, 0);
	};

	CONFIG() {
	    return this.getToken(StarRocksParser.CONFIG, 0);
	};

	COMPACT() {
	    return this.getToken(StarRocksParser.COMPACT, 0);
	};

	DATA() {
	    return this.getToken(StarRocksParser.DATA, 0);
	};

	DATE() {
	    return this.getToken(StarRocksParser.DATE, 0);
	};

	DATACACHE() {
	    return this.getToken(StarRocksParser.DATACACHE, 0);
	};

	DATETIME() {
	    return this.getToken(StarRocksParser.DATETIME, 0);
	};

	DAY() {
	    return this.getToken(StarRocksParser.DAY, 0);
	};

	DAYS() {
	    return this.getToken(StarRocksParser.DAYS, 0);
	};

	DECOMMISSION() {
	    return this.getToken(StarRocksParser.DECOMMISSION, 0);
	};

	DIALECT() {
	    return this.getToken(StarRocksParser.DIALECT, 0);
	};

	DISABLE() {
	    return this.getToken(StarRocksParser.DISABLE, 0);
	};

	DISK() {
	    return this.getToken(StarRocksParser.DISK, 0);
	};

	DISTRIBUTION() {
	    return this.getToken(StarRocksParser.DISTRIBUTION, 0);
	};

	DUPLICATE() {
	    return this.getToken(StarRocksParser.DUPLICATE, 0);
	};

	DYNAMIC() {
	    return this.getToken(StarRocksParser.DYNAMIC, 0);
	};

	DISTRIBUTED() {
	    return this.getToken(StarRocksParser.DISTRIBUTED, 0);
	};

	DICTIONARY() {
	    return this.getToken(StarRocksParser.DICTIONARY, 0);
	};

	DICTIONARY_GET() {
	    return this.getToken(StarRocksParser.DICTIONARY_GET, 0);
	};

	DEALLOCATE() {
	    return this.getToken(StarRocksParser.DEALLOCATE, 0);
	};

	ENABLE() {
	    return this.getToken(StarRocksParser.ENABLE, 0);
	};

	END() {
	    return this.getToken(StarRocksParser.END, 0);
	};

	ENGINE() {
	    return this.getToken(StarRocksParser.ENGINE, 0);
	};

	ENGINES() {
	    return this.getToken(StarRocksParser.ENGINES, 0);
	};

	ERRORS() {
	    return this.getToken(StarRocksParser.ERRORS, 0);
	};

	EVENTS() {
	    return this.getToken(StarRocksParser.EVENTS, 0);
	};

	EXECUTE() {
	    return this.getToken(StarRocksParser.EXECUTE, 0);
	};

	EXTERNAL() {
	    return this.getToken(StarRocksParser.EXTERNAL, 0);
	};

	EXTRACT() {
	    return this.getToken(StarRocksParser.EXTRACT, 0);
	};

	EVERY() {
	    return this.getToken(StarRocksParser.EVERY, 0);
	};

	ENCLOSE() {
	    return this.getToken(StarRocksParser.ENCLOSE, 0);
	};

	ESCAPE() {
	    return this.getToken(StarRocksParser.ESCAPE, 0);
	};

	EXPORT() {
	    return this.getToken(StarRocksParser.EXPORT, 0);
	};

	FAILPOINT() {
	    return this.getToken(StarRocksParser.FAILPOINT, 0);
	};

	FAILPOINTS() {
	    return this.getToken(StarRocksParser.FAILPOINTS, 0);
	};

	FIELDS() {
	    return this.getToken(StarRocksParser.FIELDS, 0);
	};

	FILE() {
	    return this.getToken(StarRocksParser.FILE, 0);
	};

	FILTER() {
	    return this.getToken(StarRocksParser.FILTER, 0);
	};

	FIRST() {
	    return this.getToken(StarRocksParser.FIRST, 0);
	};

	FLOOR() {
	    return this.getToken(StarRocksParser.FLOOR, 0);
	};

	FOLLOWING() {
	    return this.getToken(StarRocksParser.FOLLOWING, 0);
	};

	FORMAT() {
	    return this.getToken(StarRocksParser.FORMAT, 0);
	};

	FN() {
	    return this.getToken(StarRocksParser.FN, 0);
	};

	FRONTEND() {
	    return this.getToken(StarRocksParser.FRONTEND, 0);
	};

	FRONTENDS() {
	    return this.getToken(StarRocksParser.FRONTENDS, 0);
	};

	FOLLOWER() {
	    return this.getToken(StarRocksParser.FOLLOWER, 0);
	};

	FREE() {
	    return this.getToken(StarRocksParser.FREE, 0);
	};

	FUNCTIONS() {
	    return this.getToken(StarRocksParser.FUNCTIONS, 0);
	};

	GLOBAL() {
	    return this.getToken(StarRocksParser.GLOBAL, 0);
	};

	GRANTS() {
	    return this.getToken(StarRocksParser.GRANTS, 0);
	};

	GROUP_CONCAT() {
	    return this.getToken(StarRocksParser.GROUP_CONCAT, 0);
	};

	HASH() {
	    return this.getToken(StarRocksParser.HASH, 0);
	};

	HISTOGRAM() {
	    return this.getToken(StarRocksParser.HISTOGRAM, 0);
	};

	HELP() {
	    return this.getToken(StarRocksParser.HELP, 0);
	};

	HLL_UNION() {
	    return this.getToken(StarRocksParser.HLL_UNION, 0);
	};

	HOST() {
	    return this.getToken(StarRocksParser.HOST, 0);
	};

	HOUR() {
	    return this.getToken(StarRocksParser.HOUR, 0);
	};

	HOURS() {
	    return this.getToken(StarRocksParser.HOURS, 0);
	};

	HUB() {
	    return this.getToken(StarRocksParser.HUB, 0);
	};

	IDENTIFIED() {
	    return this.getToken(StarRocksParser.IDENTIFIED, 0);
	};

	IMAGE() {
	    return this.getToken(StarRocksParser.IMAGE, 0);
	};

	IMPERSONATE() {
	    return this.getToken(StarRocksParser.IMPERSONATE, 0);
	};

	INACTIVE() {
	    return this.getToken(StarRocksParser.INACTIVE, 0);
	};

	INCREMENTAL() {
	    return this.getToken(StarRocksParser.INCREMENTAL, 0);
	};

	INDEXES() {
	    return this.getToken(StarRocksParser.INDEXES, 0);
	};

	INSTALL() {
	    return this.getToken(StarRocksParser.INSTALL, 0);
	};

	INTEGRATION() {
	    return this.getToken(StarRocksParser.INTEGRATION, 0);
	};

	INTEGRATIONS() {
	    return this.getToken(StarRocksParser.INTEGRATIONS, 0);
	};

	INTERMEDIATE() {
	    return this.getToken(StarRocksParser.INTERMEDIATE, 0);
	};

	INTERVAL() {
	    return this.getToken(StarRocksParser.INTERVAL, 0);
	};

	ISOLATION() {
	    return this.getToken(StarRocksParser.ISOLATION, 0);
	};

	JOB() {
	    return this.getToken(StarRocksParser.JOB, 0);
	};

	LABEL() {
	    return this.getToken(StarRocksParser.LABEL, 0);
	};

	LAST() {
	    return this.getToken(StarRocksParser.LAST, 0);
	};

	LESS() {
	    return this.getToken(StarRocksParser.LESS, 0);
	};

	LEVEL() {
	    return this.getToken(StarRocksParser.LEVEL, 0);
	};

	LIST() {
	    return this.getToken(StarRocksParser.LIST, 0);
	};

	LOCAL() {
	    return this.getToken(StarRocksParser.LOCAL, 0);
	};

	LOCATION() {
	    return this.getToken(StarRocksParser.LOCATION, 0);
	};

	LOGS() {
	    return this.getToken(StarRocksParser.LOGS, 0);
	};

	LOGICAL() {
	    return this.getToken(StarRocksParser.LOGICAL, 0);
	};

	LOW_PRIORITY() {
	    return this.getToken(StarRocksParser.LOW_PRIORITY, 0);
	};

	LOCK() {
	    return this.getToken(StarRocksParser.LOCK, 0);
	};

	LOCATIONS() {
	    return this.getToken(StarRocksParser.LOCATIONS, 0);
	};

	MANUAL() {
	    return this.getToken(StarRocksParser.MANUAL, 0);
	};

	MAP() {
	    return this.getToken(StarRocksParser.MAP, 0);
	};

	MAPPING() {
	    return this.getToken(StarRocksParser.MAPPING, 0);
	};

	MAPPINGS() {
	    return this.getToken(StarRocksParser.MAPPINGS, 0);
	};

	MASKING() {
	    return this.getToken(StarRocksParser.MASKING, 0);
	};

	MATCH() {
	    return this.getToken(StarRocksParser.MATCH, 0);
	};

	MATERIALIZED() {
	    return this.getToken(StarRocksParser.MATERIALIZED, 0);
	};

	MAX() {
	    return this.getToken(StarRocksParser.MAX, 0);
	};

	META() {
	    return this.getToken(StarRocksParser.META, 0);
	};

	MIN() {
	    return this.getToken(StarRocksParser.MIN, 0);
	};

	MINUTE() {
	    return this.getToken(StarRocksParser.MINUTE, 0);
	};

	MINUTES() {
	    return this.getToken(StarRocksParser.MINUTES, 0);
	};

	MODE() {
	    return this.getToken(StarRocksParser.MODE, 0);
	};

	MODIFY() {
	    return this.getToken(StarRocksParser.MODIFY, 0);
	};

	MONTH() {
	    return this.getToken(StarRocksParser.MONTH, 0);
	};

	MERGE() {
	    return this.getToken(StarRocksParser.MERGE, 0);
	};

	MINUS() {
	    return this.getToken(StarRocksParser.MINUS, 0);
	};

	NAME() {
	    return this.getToken(StarRocksParser.NAME, 0);
	};

	NAMES() {
	    return this.getToken(StarRocksParser.NAMES, 0);
	};

	NEGATIVE() {
	    return this.getToken(StarRocksParser.NEGATIVE, 0);
	};

	NO() {
	    return this.getToken(StarRocksParser.NO, 0);
	};

	NODE() {
	    return this.getToken(StarRocksParser.NODE, 0);
	};

	NODES() {
	    return this.getToken(StarRocksParser.NODES, 0);
	};

	NONE() {
	    return this.getToken(StarRocksParser.NONE, 0);
	};

	NULLS() {
	    return this.getToken(StarRocksParser.NULLS, 0);
	};

	NUMBER() {
	    return this.getToken(StarRocksParser.NUMBER, 0);
	};

	NUMERIC() {
	    return this.getToken(StarRocksParser.NUMERIC, 0);
	};

	OBSERVER() {
	    return this.getToken(StarRocksParser.OBSERVER, 0);
	};

	OF() {
	    return this.getToken(StarRocksParser.OF, 0);
	};

	OFFSET() {
	    return this.getToken(StarRocksParser.OFFSET, 0);
	};

	ONLY() {
	    return this.getToken(StarRocksParser.ONLY, 0);
	};

	OPTIMIZER() {
	    return this.getToken(StarRocksParser.OPTIMIZER, 0);
	};

	OPEN() {
	    return this.getToken(StarRocksParser.OPEN, 0);
	};

	OPERATE() {
	    return this.getToken(StarRocksParser.OPERATE, 0);
	};

	OPTION() {
	    return this.getToken(StarRocksParser.OPTION, 0);
	};

	OVERWRITE() {
	    return this.getToken(StarRocksParser.OVERWRITE, 0);
	};

	OFF() {
	    return this.getToken(StarRocksParser.OFF, 0);
	};

	PARTITIONS() {
	    return this.getToken(StarRocksParser.PARTITIONS, 0);
	};

	PASSWORD() {
	    return this.getToken(StarRocksParser.PASSWORD, 0);
	};

	PATH() {
	    return this.getToken(StarRocksParser.PATH, 0);
	};

	PAUSE() {
	    return this.getToken(StarRocksParser.PAUSE, 0);
	};

	PENDING() {
	    return this.getToken(StarRocksParser.PENDING, 0);
	};

	PERCENTILE_UNION() {
	    return this.getToken(StarRocksParser.PERCENTILE_UNION, 0);
	};

	PIVOT() {
	    return this.getToken(StarRocksParser.PIVOT, 0);
	};

	PLAN() {
	    return this.getToken(StarRocksParser.PLAN, 0);
	};

	PLUGIN() {
	    return this.getToken(StarRocksParser.PLUGIN, 0);
	};

	PLUGINS() {
	    return this.getToken(StarRocksParser.PLUGINS, 0);
	};

	POLICY() {
	    return this.getToken(StarRocksParser.POLICY, 0);
	};

	POLICIES() {
	    return this.getToken(StarRocksParser.POLICIES, 0);
	};

	PERCENT_RANK() {
	    return this.getToken(StarRocksParser.PERCENT_RANK, 0);
	};

	PREDICATE() {
	    return this.getToken(StarRocksParser.PREDICATE, 0);
	};

	PRECEDING() {
	    return this.getToken(StarRocksParser.PRECEDING, 0);
	};

	PRIORITY() {
	    return this.getToken(StarRocksParser.PRIORITY, 0);
	};

	PROC() {
	    return this.getToken(StarRocksParser.PROC, 0);
	};

	PROCESSLIST() {
	    return this.getToken(StarRocksParser.PROCESSLIST, 0);
	};

	PROFILE() {
	    return this.getToken(StarRocksParser.PROFILE, 0);
	};

	PROFILELIST() {
	    return this.getToken(StarRocksParser.PROFILELIST, 0);
	};

	PROVIDER() {
	    return this.getToken(StarRocksParser.PROVIDER, 0);
	};

	PROVIDERS() {
	    return this.getToken(StarRocksParser.PROVIDERS, 0);
	};

	PRIVILEGES() {
	    return this.getToken(StarRocksParser.PRIVILEGES, 0);
	};

	PROBABILITY() {
	    return this.getToken(StarRocksParser.PROBABILITY, 0);
	};

	PROPERTIES() {
	    return this.getToken(StarRocksParser.PROPERTIES, 0);
	};

	PROPERTY() {
	    return this.getToken(StarRocksParser.PROPERTY, 0);
	};

	PIPE() {
	    return this.getToken(StarRocksParser.PIPE, 0);
	};

	PIPES() {
	    return this.getToken(StarRocksParser.PIPES, 0);
	};

	QUARTER() {
	    return this.getToken(StarRocksParser.QUARTER, 0);
	};

	QUERY() {
	    return this.getToken(StarRocksParser.QUERY, 0);
	};

	QUERIES() {
	    return this.getToken(StarRocksParser.QUERIES, 0);
	};

	QUEUE() {
	    return this.getToken(StarRocksParser.QUEUE, 0);
	};

	QUOTA() {
	    return this.getToken(StarRocksParser.QUOTA, 0);
	};

	QUALIFY() {
	    return this.getToken(StarRocksParser.QUALIFY, 0);
	};

	REASON() {
	    return this.getToken(StarRocksParser.REASON, 0);
	};

	REMOVE() {
	    return this.getToken(StarRocksParser.REMOVE, 0);
	};

	REWRITE() {
	    return this.getToken(StarRocksParser.REWRITE, 0);
	};

	RANDOM() {
	    return this.getToken(StarRocksParser.RANDOM, 0);
	};

	RANK() {
	    return this.getToken(StarRocksParser.RANK, 0);
	};

	RECOVER() {
	    return this.getToken(StarRocksParser.RECOVER, 0);
	};

	REFRESH() {
	    return this.getToken(StarRocksParser.REFRESH, 0);
	};

	REPAIR() {
	    return this.getToken(StarRocksParser.REPAIR, 0);
	};

	REPEATABLE() {
	    return this.getToken(StarRocksParser.REPEATABLE, 0);
	};

	REPLACE_IF_NOT_NULL() {
	    return this.getToken(StarRocksParser.REPLACE_IF_NOT_NULL, 0);
	};

	REPLICA() {
	    return this.getToken(StarRocksParser.REPLICA, 0);
	};

	REPOSITORY() {
	    return this.getToken(StarRocksParser.REPOSITORY, 0);
	};

	REPOSITORIES() {
	    return this.getToken(StarRocksParser.REPOSITORIES, 0);
	};

	RESOURCE() {
	    return this.getToken(StarRocksParser.RESOURCE, 0);
	};

	RESOURCES() {
	    return this.getToken(StarRocksParser.RESOURCES, 0);
	};

	RESTORE() {
	    return this.getToken(StarRocksParser.RESTORE, 0);
	};

	RESUME() {
	    return this.getToken(StarRocksParser.RESUME, 0);
	};

	RETAIN() {
	    return this.getToken(StarRocksParser.RETAIN, 0);
	};

	RETENTION() {
	    return this.getToken(StarRocksParser.RETENTION, 0);
	};

	RETURNS() {
	    return this.getToken(StarRocksParser.RETURNS, 0);
	};

	RETRY() {
	    return this.getToken(StarRocksParser.RETRY, 0);
	};

	REVERT() {
	    return this.getToken(StarRocksParser.REVERT, 0);
	};

	ROLE() {
	    return this.getToken(StarRocksParser.ROLE, 0);
	};

	ROLES() {
	    return this.getToken(StarRocksParser.ROLES, 0);
	};

	ROLLUP() {
	    return this.getToken(StarRocksParser.ROLLUP, 0);
	};

	ROLLBACK() {
	    return this.getToken(StarRocksParser.ROLLBACK, 0);
	};

	ROUTINE() {
	    return this.getToken(StarRocksParser.ROUTINE, 0);
	};

	ROW() {
	    return this.getToken(StarRocksParser.ROW, 0);
	};

	RUNNING() {
	    return this.getToken(StarRocksParser.RUNNING, 0);
	};

	RULE() {
	    return this.getToken(StarRocksParser.RULE, 0);
	};

	RULES() {
	    return this.getToken(StarRocksParser.RULES, 0);
	};

	SAMPLE() {
	    return this.getToken(StarRocksParser.SAMPLE, 0);
	};

	SCHEDULE() {
	    return this.getToken(StarRocksParser.SCHEDULE, 0);
	};

	SCHEDULER() {
	    return this.getToken(StarRocksParser.SCHEDULER, 0);
	};

	SECOND() {
	    return this.getToken(StarRocksParser.SECOND, 0);
	};

	SECURITY() {
	    return this.getToken(StarRocksParser.SECURITY, 0);
	};

	SEPARATOR() {
	    return this.getToken(StarRocksParser.SEPARATOR, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(StarRocksParser.SERIALIZABLE, 0);
	};

	SEMI() {
	    return this.getToken(StarRocksParser.SEMI, 0);
	};

	SESSION() {
	    return this.getToken(StarRocksParser.SESSION, 0);
	};

	SETS() {
	    return this.getToken(StarRocksParser.SETS, 0);
	};

	SIGNED() {
	    return this.getToken(StarRocksParser.SIGNED, 0);
	};

	SNAPSHOT() {
	    return this.getToken(StarRocksParser.SNAPSHOT, 0);
	};

	SNAPSHOTS() {
	    return this.getToken(StarRocksParser.SNAPSHOTS, 0);
	};

	SQLBLACKLIST() {
	    return this.getToken(StarRocksParser.SQLBLACKLIST, 0);
	};

	START() {
	    return this.getToken(StarRocksParser.START, 0);
	};

	STARROCKS() {
	    return this.getToken(StarRocksParser.STARROCKS, 0);
	};

	STREAM() {
	    return this.getToken(StarRocksParser.STREAM, 0);
	};

	SUM() {
	    return this.getToken(StarRocksParser.SUM, 0);
	};

	STATUS() {
	    return this.getToken(StarRocksParser.STATUS, 0);
	};

	STOP() {
	    return this.getToken(StarRocksParser.STOP, 0);
	};

	SKIP_HEADER() {
	    return this.getToken(StarRocksParser.SKIP_HEADER, 0);
	};

	SWAP() {
	    return this.getToken(StarRocksParser.SWAP, 0);
	};

	STORAGE() {
	    return this.getToken(StarRocksParser.STORAGE, 0);
	};

	STRING() {
	    return this.getToken(StarRocksParser.STRING, 0);
	};

	STRUCT() {
	    return this.getToken(StarRocksParser.STRUCT, 0);
	};

	STATS() {
	    return this.getToken(StarRocksParser.STATS, 0);
	};

	SUBMIT() {
	    return this.getToken(StarRocksParser.SUBMIT, 0);
	};

	SUSPEND() {
	    return this.getToken(StarRocksParser.SUSPEND, 0);
	};

	SYNC() {
	    return this.getToken(StarRocksParser.SYNC, 0);
	};

	SYSTEM_TIME() {
	    return this.getToken(StarRocksParser.SYSTEM_TIME, 0);
	};

	TABLES() {
	    return this.getToken(StarRocksParser.TABLES, 0);
	};

	TABLET() {
	    return this.getToken(StarRocksParser.TABLET, 0);
	};

	TABLETS() {
	    return this.getToken(StarRocksParser.TABLETS, 0);
	};

	TAG() {
	    return this.getToken(StarRocksParser.TAG, 0);
	};

	TASK() {
	    return this.getToken(StarRocksParser.TASK, 0);
	};

	TEMPORARY() {
	    return this.getToken(StarRocksParser.TEMPORARY, 0);
	};

	TIMESTAMP() {
	    return this.getToken(StarRocksParser.TIMESTAMP, 0);
	};

	TIMESTAMPADD() {
	    return this.getToken(StarRocksParser.TIMESTAMPADD, 0);
	};

	TIMESTAMPDIFF() {
	    return this.getToken(StarRocksParser.TIMESTAMPDIFF, 0);
	};

	THAN() {
	    return this.getToken(StarRocksParser.THAN, 0);
	};

	TIME() {
	    return this.getToken(StarRocksParser.TIME, 0);
	};

	TIMES() {
	    return this.getToken(StarRocksParser.TIMES, 0);
	};

	TRANSACTION() {
	    return this.getToken(StarRocksParser.TRANSACTION, 0);
	};

	TRACE() {
	    return this.getToken(StarRocksParser.TRACE, 0);
	};

	TRANSLATE() {
	    return this.getToken(StarRocksParser.TRANSLATE, 0);
	};

	TRIM_SPACE() {
	    return this.getToken(StarRocksParser.TRIM_SPACE, 0);
	};

	TRIGGERS() {
	    return this.getToken(StarRocksParser.TRIGGERS, 0);
	};

	TRUNCATE() {
	    return this.getToken(StarRocksParser.TRUNCATE, 0);
	};

	TYPE() {
	    return this.getToken(StarRocksParser.TYPE, 0);
	};

	TYPES() {
	    return this.getToken(StarRocksParser.TYPES, 0);
	};

	UNBOUNDED() {
	    return this.getToken(StarRocksParser.UNBOUNDED, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(StarRocksParser.UNCOMMITTED, 0);
	};

	UNSET() {
	    return this.getToken(StarRocksParser.UNSET, 0);
	};

	UNINSTALL() {
	    return this.getToken(StarRocksParser.UNINSTALL, 0);
	};

	USAGE() {
	    return this.getToken(StarRocksParser.USAGE, 0);
	};

	USER() {
	    return this.getToken(StarRocksParser.USER, 0);
	};

	USERS() {
	    return this.getToken(StarRocksParser.USERS, 0);
	};

	UNLOCK() {
	    return this.getToken(StarRocksParser.UNLOCK, 0);
	};

	VALUE() {
	    return this.getToken(StarRocksParser.VALUE, 0);
	};

	VARBINARY() {
	    return this.getToken(StarRocksParser.VARBINARY, 0);
	};

	VARIABLES() {
	    return this.getToken(StarRocksParser.VARIABLES, 0);
	};

	VIEW() {
	    return this.getToken(StarRocksParser.VIEW, 0);
	};

	VIEWS() {
	    return this.getToken(StarRocksParser.VIEWS, 0);
	};

	VERBOSE() {
	    return this.getToken(StarRocksParser.VERBOSE, 0);
	};

	VERSION() {
	    return this.getToken(StarRocksParser.VERSION, 0);
	};

	VOLUME() {
	    return this.getToken(StarRocksParser.VOLUME, 0);
	};

	VOLUMES() {
	    return this.getToken(StarRocksParser.VOLUMES, 0);
	};

	WARNINGS() {
	    return this.getToken(StarRocksParser.WARNINGS, 0);
	};

	WEEK() {
	    return this.getToken(StarRocksParser.WEEK, 0);
	};

	WHITELIST() {
	    return this.getToken(StarRocksParser.WHITELIST, 0);
	};

	WORK() {
	    return this.getToken(StarRocksParser.WORK, 0);
	};

	WRITE() {
	    return this.getToken(StarRocksParser.WRITE, 0);
	};

	WAREHOUSE() {
	    return this.getToken(StarRocksParser.WAREHOUSE, 0);
	};

	WAREHOUSES() {
	    return this.getToken(StarRocksParser.WAREHOUSES, 0);
	};

	YEAR() {
	    return this.getToken(StarRocksParser.YEAR, 0);
	};

	DOTDOTDOT() {
	    return this.getToken(StarRocksParser.DOTDOTDOT, 0);
	};

	NGRAMBF() {
	    return this.getToken(StarRocksParser.NGRAMBF, 0);
	};

	VECTOR() {
	    return this.getToken(StarRocksParser.VECTOR, 0);
	};

	FIELD() {
	    return this.getToken(StarRocksParser.FIELD, 0);
	};

	ARRAY_ELEMENT() {
	    return this.getToken(StarRocksParser.ARRAY_ELEMENT, 0);
	};

	PERSISTENT() {
	    return this.getToken(StarRocksParser.PERSISTENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.enterNonReserved(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof StarRocksListener ) {
	        listener.exitNonReserved(this);
		}
	}


}




StarRocksParser.SqlStatementsContext = SqlStatementsContext; 
StarRocksParser.SingleStatementContext = SingleStatementContext; 
StarRocksParser.EmptyStatementContext = EmptyStatementContext; 
StarRocksParser.StatementContext = StatementContext; 
StarRocksParser.UseDatabaseStatementContext = UseDatabaseStatementContext; 
StarRocksParser.UseCatalogStatementContext = UseCatalogStatementContext; 
StarRocksParser.SetCatalogStatementContext = SetCatalogStatementContext; 
StarRocksParser.ShowDatabasesStatementContext = ShowDatabasesStatementContext; 
StarRocksParser.AlterDbQuotaStatementContext = AlterDbQuotaStatementContext; 
StarRocksParser.CreateDbStatementContext = CreateDbStatementContext; 
StarRocksParser.DropDbStatementContext = DropDbStatementContext; 
StarRocksParser.ShowCreateDbStatementContext = ShowCreateDbStatementContext; 
StarRocksParser.AlterDatabaseRenameStatementContext = AlterDatabaseRenameStatementContext; 
StarRocksParser.RecoverDbStmtContext = RecoverDbStmtContext; 
StarRocksParser.ShowDataStmtContext = ShowDataStmtContext; 
StarRocksParser.CreateTableStatementContext = CreateTableStatementContext; 
StarRocksParser.ColumnDescContext = ColumnDescContext; 
StarRocksParser.CharsetNameContext = CharsetNameContext; 
StarRocksParser.DefaultDescContext = DefaultDescContext; 
StarRocksParser.GeneratedColumnDescContext = GeneratedColumnDescContext; 
StarRocksParser.IndexDescContext = IndexDescContext; 
StarRocksParser.EngineDescContext = EngineDescContext; 
StarRocksParser.CharsetDescContext = CharsetDescContext; 
StarRocksParser.CollateDescContext = CollateDescContext; 
StarRocksParser.KeyDescContext = KeyDescContext; 
StarRocksParser.OrderByDescContext = OrderByDescContext; 
StarRocksParser.ColumnNullableContext = ColumnNullableContext; 
StarRocksParser.TypeWithNullableContext = TypeWithNullableContext; 
StarRocksParser.AggStateDescContext = AggStateDescContext; 
StarRocksParser.AggDescContext = AggDescContext; 
StarRocksParser.RollupDescContext = RollupDescContext; 
StarRocksParser.RollupItemContext = RollupItemContext; 
StarRocksParser.DupKeysContext = DupKeysContext; 
StarRocksParser.FromRollupContext = FromRollupContext; 
StarRocksParser.OrReplaceContext = OrReplaceContext; 
StarRocksParser.IfNotExistsContext = IfNotExistsContext; 
StarRocksParser.CreateTableAsSelectStatementContext = CreateTableAsSelectStatementContext; 
StarRocksParser.DropTableStatementContext = DropTableStatementContext; 
StarRocksParser.CleanTemporaryTableStatementContext = CleanTemporaryTableStatementContext; 
StarRocksParser.AlterTableStatementContext = AlterTableStatementContext; 
StarRocksParser.CreateIndexStatementContext = CreateIndexStatementContext; 
StarRocksParser.DropIndexStatementContext = DropIndexStatementContext; 
StarRocksParser.IndexTypeContext = IndexTypeContext; 
StarRocksParser.ShowTableStatementContext = ShowTableStatementContext; 
StarRocksParser.ShowTemporaryTablesStatementContext = ShowTemporaryTablesStatementContext; 
StarRocksParser.ShowCreateTableStatementContext = ShowCreateTableStatementContext; 
StarRocksParser.ShowColumnStatementContext = ShowColumnStatementContext; 
StarRocksParser.ShowTableStatusStatementContext = ShowTableStatusStatementContext; 
StarRocksParser.RefreshTableStatementContext = RefreshTableStatementContext; 
StarRocksParser.ShowAlterStatementContext = ShowAlterStatementContext; 
StarRocksParser.DescTableStatementContext = DescTableStatementContext; 
StarRocksParser.CreateTableLikeStatementContext = CreateTableLikeStatementContext; 
StarRocksParser.ShowIndexStatementContext = ShowIndexStatementContext; 
StarRocksParser.RecoverTableStatementContext = RecoverTableStatementContext; 
StarRocksParser.TruncateTableStatementContext = TruncateTableStatementContext; 
StarRocksParser.CancelAlterTableStatementContext = CancelAlterTableStatementContext; 
StarRocksParser.ShowPartitionsStatementContext = ShowPartitionsStatementContext; 
StarRocksParser.RecoverPartitionStatementContext = RecoverPartitionStatementContext; 
StarRocksParser.CreateViewStatementContext = CreateViewStatementContext; 
StarRocksParser.AlterViewStatementContext = AlterViewStatementContext; 
StarRocksParser.DropViewStatementContext = DropViewStatementContext; 
StarRocksParser.ColumnNameWithCommentContext = ColumnNameWithCommentContext; 
StarRocksParser.SubmitTaskStatementContext = SubmitTaskStatementContext; 
StarRocksParser.TaskClauseContext = TaskClauseContext; 
StarRocksParser.DropTaskStatementContext = DropTaskStatementContext; 
StarRocksParser.TaskScheduleDescContext = TaskScheduleDescContext; 
StarRocksParser.CreateMaterializedViewStatementContext = CreateMaterializedViewStatementContext; 
StarRocksParser.MvPartitionExprsContext = MvPartitionExprsContext; 
StarRocksParser.MaterializedViewDescContext = MaterializedViewDescContext; 
StarRocksParser.ShowMaterializedViewsStatementContext = ShowMaterializedViewsStatementContext; 
StarRocksParser.DropMaterializedViewStatementContext = DropMaterializedViewStatementContext; 
StarRocksParser.AlterMaterializedViewStatementContext = AlterMaterializedViewStatementContext; 
StarRocksParser.RefreshMaterializedViewStatementContext = RefreshMaterializedViewStatementContext; 
StarRocksParser.CancelRefreshMaterializedViewStatementContext = CancelRefreshMaterializedViewStatementContext; 
StarRocksParser.AdminSetConfigStatementContext = AdminSetConfigStatementContext; 
StarRocksParser.AdminSetReplicaStatusStatementContext = AdminSetReplicaStatusStatementContext; 
StarRocksParser.AdminShowConfigStatementContext = AdminShowConfigStatementContext; 
StarRocksParser.AdminShowReplicaDistributionStatementContext = AdminShowReplicaDistributionStatementContext; 
StarRocksParser.AdminShowReplicaStatusStatementContext = AdminShowReplicaStatusStatementContext; 
StarRocksParser.AdminRepairTableStatementContext = AdminRepairTableStatementContext; 
StarRocksParser.AdminCancelRepairTableStatementContext = AdminCancelRepairTableStatementContext; 
StarRocksParser.AdminCheckTabletsStatementContext = AdminCheckTabletsStatementContext; 
StarRocksParser.AdminSetPartitionVersionContext = AdminSetPartitionVersionContext; 
StarRocksParser.KillStatementContext = KillStatementContext; 
StarRocksParser.SyncStatementContext = SyncStatementContext; 
StarRocksParser.AdminSetAutomatedSnapshotOnStatementContext = AdminSetAutomatedSnapshotOnStatementContext; 
StarRocksParser.AdminSetAutomatedSnapshotOffStatementContext = AdminSetAutomatedSnapshotOffStatementContext; 
StarRocksParser.AlterSystemStatementContext = AlterSystemStatementContext; 
StarRocksParser.CancelAlterSystemStatementContext = CancelAlterSystemStatementContext; 
StarRocksParser.ShowComputeNodesStatementContext = ShowComputeNodesStatementContext; 
StarRocksParser.CreateExternalCatalogStatementContext = CreateExternalCatalogStatementContext; 
StarRocksParser.ShowCreateExternalCatalogStatementContext = ShowCreateExternalCatalogStatementContext; 
StarRocksParser.DropExternalCatalogStatementContext = DropExternalCatalogStatementContext; 
StarRocksParser.ShowCatalogsStatementContext = ShowCatalogsStatementContext; 
StarRocksParser.AlterCatalogStatementContext = AlterCatalogStatementContext; 
StarRocksParser.CreateStorageVolumeStatementContext = CreateStorageVolumeStatementContext; 
StarRocksParser.TypeDescContext = TypeDescContext; 
StarRocksParser.LocationsDescContext = LocationsDescContext; 
StarRocksParser.ShowStorageVolumesStatementContext = ShowStorageVolumesStatementContext; 
StarRocksParser.DropStorageVolumeStatementContext = DropStorageVolumeStatementContext; 
StarRocksParser.AlterStorageVolumeStatementContext = AlterStorageVolumeStatementContext; 
StarRocksParser.AlterStorageVolumeClauseContext = AlterStorageVolumeClauseContext; 
StarRocksParser.ModifyStorageVolumePropertiesClauseContext = ModifyStorageVolumePropertiesClauseContext; 
StarRocksParser.ModifyStorageVolumeCommentClauseContext = ModifyStorageVolumeCommentClauseContext; 
StarRocksParser.DescStorageVolumeStatementContext = DescStorageVolumeStatementContext; 
StarRocksParser.SetDefaultStorageVolumeStatementContext = SetDefaultStorageVolumeStatementContext; 
StarRocksParser.UpdateFailPointStatusStatementContext = UpdateFailPointStatusStatementContext; 
StarRocksParser.ShowFailPointStatementContext = ShowFailPointStatementContext; 
StarRocksParser.CreateDictionaryStatementContext = CreateDictionaryStatementContext; 
StarRocksParser.DropDictionaryStatementContext = DropDictionaryStatementContext; 
StarRocksParser.RefreshDictionaryStatementContext = RefreshDictionaryStatementContext; 
StarRocksParser.ShowDictionaryStatementContext = ShowDictionaryStatementContext; 
StarRocksParser.CancelRefreshDictionaryStatementContext = CancelRefreshDictionaryStatementContext; 
StarRocksParser.DictionaryColumnDescContext = DictionaryColumnDescContext; 
StarRocksParser.DictionaryNameContext = DictionaryNameContext; 
StarRocksParser.AlterClauseContext = AlterClauseContext; 
StarRocksParser.AddFrontendClauseContext = AddFrontendClauseContext; 
StarRocksParser.DropFrontendClauseContext = DropFrontendClauseContext; 
StarRocksParser.ModifyFrontendHostClauseContext = ModifyFrontendHostClauseContext; 
StarRocksParser.AddBackendClauseContext = AddBackendClauseContext; 
StarRocksParser.DropBackendClauseContext = DropBackendClauseContext; 
StarRocksParser.DecommissionBackendClauseContext = DecommissionBackendClauseContext; 
StarRocksParser.ModifyBackendClauseContext = ModifyBackendClauseContext; 
StarRocksParser.AddComputeNodeClauseContext = AddComputeNodeClauseContext; 
StarRocksParser.DropComputeNodeClauseContext = DropComputeNodeClauseContext; 
StarRocksParser.ModifyBrokerClauseContext = ModifyBrokerClauseContext; 
StarRocksParser.AlterLoadErrorUrlClauseContext = AlterLoadErrorUrlClauseContext; 
StarRocksParser.CreateImageClauseContext = CreateImageClauseContext; 
StarRocksParser.CleanTabletSchedQClauseContext = CleanTabletSchedQClauseContext; 
StarRocksParser.DecommissionDiskClauseContext = DecommissionDiskClauseContext; 
StarRocksParser.CancelDecommissionDiskClauseContext = CancelDecommissionDiskClauseContext; 
StarRocksParser.DisableDiskClauseContext = DisableDiskClauseContext; 
StarRocksParser.CancelDisableDiskClauseContext = CancelDisableDiskClauseContext; 
StarRocksParser.CreateIndexClauseContext = CreateIndexClauseContext; 
StarRocksParser.DropIndexClauseContext = DropIndexClauseContext; 
StarRocksParser.TableRenameClauseContext = TableRenameClauseContext; 
StarRocksParser.SwapTableClauseContext = SwapTableClauseContext; 
StarRocksParser.ModifyPropertiesClauseContext = ModifyPropertiesClauseContext; 
StarRocksParser.ModifyCommentClauseContext = ModifyCommentClauseContext; 
StarRocksParser.OptimizeClauseContext = OptimizeClauseContext; 
StarRocksParser.AddColumnClauseContext = AddColumnClauseContext; 
StarRocksParser.AddColumnsClauseContext = AddColumnsClauseContext; 
StarRocksParser.DropColumnClauseContext = DropColumnClauseContext; 
StarRocksParser.ModifyColumnClauseContext = ModifyColumnClauseContext; 
StarRocksParser.ColumnRenameClauseContext = ColumnRenameClauseContext; 
StarRocksParser.ReorderColumnsClauseContext = ReorderColumnsClauseContext; 
StarRocksParser.RollupRenameClauseContext = RollupRenameClauseContext; 
StarRocksParser.CompactionClauseContext = CompactionClauseContext; 
StarRocksParser.SubfieldNameContext = SubfieldNameContext; 
StarRocksParser.NestedFieldNameContext = NestedFieldNameContext; 
StarRocksParser.AddFieldClauseContext = AddFieldClauseContext; 
StarRocksParser.DropFieldClauseContext = DropFieldClauseContext; 
StarRocksParser.CreateOrReplaceTagClauseContext = CreateOrReplaceTagClauseContext; 
StarRocksParser.CreateOrReplaceBranchClauseContext = CreateOrReplaceBranchClauseContext; 
StarRocksParser.DropBranchClauseContext = DropBranchClauseContext; 
StarRocksParser.DropTagClauseContext = DropTagClauseContext; 
StarRocksParser.TableOperationClauseContext = TableOperationClauseContext; 
StarRocksParser.TagOptionsContext = TagOptionsContext; 
StarRocksParser.BranchOptionsContext = BranchOptionsContext; 
StarRocksParser.SnapshotRetentionContext = SnapshotRetentionContext; 
StarRocksParser.RefRetainContext = RefRetainContext; 
StarRocksParser.MaxSnapshotAgeContext = MaxSnapshotAgeContext; 
StarRocksParser.MinSnapshotsToKeepContext = MinSnapshotsToKeepContext; 
StarRocksParser.SnapshotIdContext = SnapshotIdContext; 
StarRocksParser.TimeUnitContext = TimeUnitContext; 
StarRocksParser.Integer_listContext = Integer_listContext; 
StarRocksParser.DropPersistentIndexClauseContext = DropPersistentIndexClauseContext; 
StarRocksParser.AddPartitionClauseContext = AddPartitionClauseContext; 
StarRocksParser.DropPartitionClauseContext = DropPartitionClauseContext; 
StarRocksParser.TruncatePartitionClauseContext = TruncatePartitionClauseContext; 
StarRocksParser.ModifyPartitionClauseContext = ModifyPartitionClauseContext; 
StarRocksParser.ReplacePartitionClauseContext = ReplacePartitionClauseContext; 
StarRocksParser.PartitionRenameClauseContext = PartitionRenameClauseContext; 
StarRocksParser.InsertStatementContext = InsertStatementContext; 
StarRocksParser.InsertLabelOrColumnAliasesContext = InsertLabelOrColumnAliasesContext; 
StarRocksParser.ColumnAliasesOrByNameContext = ColumnAliasesOrByNameContext; 
StarRocksParser.UpdateStatementContext = UpdateStatementContext; 
StarRocksParser.DeleteStatementContext = DeleteStatementContext; 
StarRocksParser.CreateRoutineLoadStatementContext = CreateRoutineLoadStatementContext; 
StarRocksParser.AlterRoutineLoadStatementContext = AlterRoutineLoadStatementContext; 
StarRocksParser.DataSourceContext = DataSourceContext; 
StarRocksParser.LoadPropertiesContext = LoadPropertiesContext; 
StarRocksParser.ColSeparatorPropertyContext = ColSeparatorPropertyContext; 
StarRocksParser.RowDelimiterPropertyContext = RowDelimiterPropertyContext; 
StarRocksParser.ImportColumnsContext = ImportColumnsContext; 
StarRocksParser.ColumnPropertiesContext = ColumnPropertiesContext; 
StarRocksParser.JobPropertiesContext = JobPropertiesContext; 
StarRocksParser.DataSourcePropertiesContext = DataSourcePropertiesContext; 
StarRocksParser.StopRoutineLoadStatementContext = StopRoutineLoadStatementContext; 
StarRocksParser.ResumeRoutineLoadStatementContext = ResumeRoutineLoadStatementContext; 
StarRocksParser.PauseRoutineLoadStatementContext = PauseRoutineLoadStatementContext; 
StarRocksParser.ShowRoutineLoadStatementContext = ShowRoutineLoadStatementContext; 
StarRocksParser.ShowRoutineLoadTaskStatementContext = ShowRoutineLoadTaskStatementContext; 
StarRocksParser.ShowCreateRoutineLoadStatementContext = ShowCreateRoutineLoadStatementContext; 
StarRocksParser.ShowStreamLoadStatementContext = ShowStreamLoadStatementContext; 
StarRocksParser.AnalyzeStatementContext = AnalyzeStatementContext; 
StarRocksParser.AnalyzeColumnClauseContext = AnalyzeColumnClauseContext; 
StarRocksParser.DropStatsStatementContext = DropStatsStatementContext; 
StarRocksParser.HistogramStatementContext = HistogramStatementContext; 
StarRocksParser.AnalyzeHistogramStatementContext = AnalyzeHistogramStatementContext; 
StarRocksParser.DropHistogramStatementContext = DropHistogramStatementContext; 
StarRocksParser.CreateAnalyzeStatementContext = CreateAnalyzeStatementContext; 
StarRocksParser.DropAnalyzeJobStatementContext = DropAnalyzeJobStatementContext; 
StarRocksParser.ShowAnalyzeStatementContext = ShowAnalyzeStatementContext; 
StarRocksParser.ShowStatsMetaStatementContext = ShowStatsMetaStatementContext; 
StarRocksParser.ShowHistogramMetaStatementContext = ShowHistogramMetaStatementContext; 
StarRocksParser.KillAnalyzeStatementContext = KillAnalyzeStatementContext; 
StarRocksParser.AnalyzeProfileStatementContext = AnalyzeProfileStatementContext; 
StarRocksParser.CreateBaselinePlanStatementContext = CreateBaselinePlanStatementContext; 
StarRocksParser.DropBaselinePlanStatementContext = DropBaselinePlanStatementContext; 
StarRocksParser.ShowBaselinePlanStatementContext = ShowBaselinePlanStatementContext; 
StarRocksParser.CreateResourceGroupStatementContext = CreateResourceGroupStatementContext; 
StarRocksParser.DropResourceGroupStatementContext = DropResourceGroupStatementContext; 
StarRocksParser.AlterResourceGroupStatementContext = AlterResourceGroupStatementContext; 
StarRocksParser.ShowResourceGroupStatementContext = ShowResourceGroupStatementContext; 
StarRocksParser.ShowResourceGroupUsageStatementContext = ShowResourceGroupUsageStatementContext; 
StarRocksParser.CreateResourceStatementContext = CreateResourceStatementContext; 
StarRocksParser.AlterResourceStatementContext = AlterResourceStatementContext; 
StarRocksParser.DropResourceStatementContext = DropResourceStatementContext; 
StarRocksParser.ShowResourceStatementContext = ShowResourceStatementContext; 
StarRocksParser.ClassifierContext = ClassifierContext; 
StarRocksParser.ShowFunctionsStatementContext = ShowFunctionsStatementContext; 
StarRocksParser.DropFunctionStatementContext = DropFunctionStatementContext; 
StarRocksParser.CreateFunctionStatementContext = CreateFunctionStatementContext; 
StarRocksParser.InlineFunctionContext = InlineFunctionContext; 
StarRocksParser.TypeListContext = TypeListContext; 
StarRocksParser.LoadStatementContext = LoadStatementContext; 
StarRocksParser.LabelNameContext = LabelNameContext; 
StarRocksParser.DataDescListContext = DataDescListContext; 
StarRocksParser.DataDescContext = DataDescContext; 
StarRocksParser.FormatPropsContext = FormatPropsContext; 
StarRocksParser.BrokerDescContext = BrokerDescContext; 
StarRocksParser.ResourceDescContext = ResourceDescContext; 
StarRocksParser.ShowLoadStatementContext = ShowLoadStatementContext; 
StarRocksParser.ShowLoadWarningsStatementContext = ShowLoadWarningsStatementContext; 
StarRocksParser.CancelLoadStatementContext = CancelLoadStatementContext; 
StarRocksParser.AlterLoadStatementContext = AlterLoadStatementContext; 
StarRocksParser.CancelCompactionStatementContext = CancelCompactionStatementContext; 
StarRocksParser.ShowAuthorStatementContext = ShowAuthorStatementContext; 
StarRocksParser.ShowBackendsStatementContext = ShowBackendsStatementContext; 
StarRocksParser.ShowBrokerStatementContext = ShowBrokerStatementContext; 
StarRocksParser.ShowCharsetStatementContext = ShowCharsetStatementContext; 
StarRocksParser.ShowCollationStatementContext = ShowCollationStatementContext; 
StarRocksParser.ShowDeleteStatementContext = ShowDeleteStatementContext; 
StarRocksParser.ShowDynamicPartitionStatementContext = ShowDynamicPartitionStatementContext; 
StarRocksParser.ShowEventsStatementContext = ShowEventsStatementContext; 
StarRocksParser.ShowEnginesStatementContext = ShowEnginesStatementContext; 
StarRocksParser.ShowFrontendsStatementContext = ShowFrontendsStatementContext; 
StarRocksParser.ShowPluginsStatementContext = ShowPluginsStatementContext; 
StarRocksParser.ShowRepositoriesStatementContext = ShowRepositoriesStatementContext; 
StarRocksParser.ShowOpenTableStatementContext = ShowOpenTableStatementContext; 
StarRocksParser.ShowPrivilegesStatementContext = ShowPrivilegesStatementContext; 
StarRocksParser.ShowProcedureStatementContext = ShowProcedureStatementContext; 
StarRocksParser.ShowProcStatementContext = ShowProcStatementContext; 
StarRocksParser.ShowProcesslistStatementContext = ShowProcesslistStatementContext; 
StarRocksParser.ShowProfilelistStatementContext = ShowProfilelistStatementContext; 
StarRocksParser.ShowRunningQueriesStatementContext = ShowRunningQueriesStatementContext; 
StarRocksParser.ShowStatusStatementContext = ShowStatusStatementContext; 
StarRocksParser.ShowTabletStatementContext = ShowTabletStatementContext; 
StarRocksParser.ShowTransactionStatementContext = ShowTransactionStatementContext; 
StarRocksParser.ShowTriggersStatementContext = ShowTriggersStatementContext; 
StarRocksParser.ShowUserPropertyStatementContext = ShowUserPropertyStatementContext; 
StarRocksParser.ShowVariablesStatementContext = ShowVariablesStatementContext; 
StarRocksParser.ShowWarningStatementContext = ShowWarningStatementContext; 
StarRocksParser.HelpStatementContext = HelpStatementContext; 
StarRocksParser.CreateUserStatementContext = CreateUserStatementContext; 
StarRocksParser.DropUserStatementContext = DropUserStatementContext; 
StarRocksParser.AlterUserStatementContext = AlterUserStatementContext; 
StarRocksParser.ShowUserStatementContext = ShowUserStatementContext; 
StarRocksParser.ShowAuthenticationStatementContext = ShowAuthenticationStatementContext; 
StarRocksParser.ExecuteAsStatementContext = ExecuteAsStatementContext; 
StarRocksParser.CreateRoleStatementContext = CreateRoleStatementContext; 
StarRocksParser.AlterRoleStatementContext = AlterRoleStatementContext; 
StarRocksParser.DropRoleStatementContext = DropRoleStatementContext; 
StarRocksParser.ShowRolesStatementContext = ShowRolesStatementContext; 
StarRocksParser.GrantRoleStatementContext = GrantRoleStatementContext; 
StarRocksParser.RevokeRoleStatementContext = RevokeRoleStatementContext; 
StarRocksParser.SetRoleStatementContext = SetRoleStatementContext; 
StarRocksParser.SetDefaultRoleStatementContext = SetDefaultRoleStatementContext; 
StarRocksParser.GrantRevokeClauseContext = GrantRevokeClauseContext; 
StarRocksParser.GrantPrivilegeStatementContext = GrantPrivilegeStatementContext; 
StarRocksParser.RevokePrivilegeStatementContext = RevokePrivilegeStatementContext; 
StarRocksParser.ShowGrantsStatementContext = ShowGrantsStatementContext; 
StarRocksParser.AuthOptionContext = AuthOptionContext; 
StarRocksParser.PrivObjectNameContext = PrivObjectNameContext; 
StarRocksParser.PrivObjectNameListContext = PrivObjectNameListContext; 
StarRocksParser.PrivFunctionObjectNameListContext = PrivFunctionObjectNameListContext; 
StarRocksParser.PrivilegeTypeListContext = PrivilegeTypeListContext; 
StarRocksParser.PrivilegeTypeContext = PrivilegeTypeContext; 
StarRocksParser.PrivObjectTypeContext = PrivObjectTypeContext; 
StarRocksParser.PrivObjectTypePluralContext = PrivObjectTypePluralContext; 
StarRocksParser.CreateSecurityIntegrationStatementContext = CreateSecurityIntegrationStatementContext; 
StarRocksParser.AlterSecurityIntegrationStatementContext = AlterSecurityIntegrationStatementContext; 
StarRocksParser.DropSecurityIntegrationStatementContext = DropSecurityIntegrationStatementContext; 
StarRocksParser.ShowSecurityIntegrationStatementContext = ShowSecurityIntegrationStatementContext; 
StarRocksParser.ShowCreateSecurityIntegrationStatementContext = ShowCreateSecurityIntegrationStatementContext; 
StarRocksParser.CreateGroupProviderStatementContext = CreateGroupProviderStatementContext; 
StarRocksParser.DropGroupProviderStatementContext = DropGroupProviderStatementContext; 
StarRocksParser.ShowGroupProvidersStatementContext = ShowGroupProvidersStatementContext; 
StarRocksParser.ShowCreateGroupProviderStatementContext = ShowCreateGroupProviderStatementContext; 
StarRocksParser.BackupStatementContext = BackupStatementContext; 
StarRocksParser.CancelBackupStatementContext = CancelBackupStatementContext; 
StarRocksParser.ShowBackupStatementContext = ShowBackupStatementContext; 
StarRocksParser.RestoreStatementContext = RestoreStatementContext; 
StarRocksParser.CancelRestoreStatementContext = CancelRestoreStatementContext; 
StarRocksParser.ShowRestoreStatementContext = ShowRestoreStatementContext; 
StarRocksParser.ShowSnapshotStatementContext = ShowSnapshotStatementContext; 
StarRocksParser.CreateRepositoryStatementContext = CreateRepositoryStatementContext; 
StarRocksParser.DropRepositoryStatementContext = DropRepositoryStatementContext; 
StarRocksParser.AddSqlBlackListStatementContext = AddSqlBlackListStatementContext; 
StarRocksParser.DelSqlBlackListStatementContext = DelSqlBlackListStatementContext; 
StarRocksParser.ShowSqlBlackListStatementContext = ShowSqlBlackListStatementContext; 
StarRocksParser.ShowWhiteListStatementContext = ShowWhiteListStatementContext; 
StarRocksParser.AddBackendBlackListStatementContext = AddBackendBlackListStatementContext; 
StarRocksParser.DelBackendBlackListStatementContext = DelBackendBlackListStatementContext; 
StarRocksParser.ShowBackendBlackListStatementContext = ShowBackendBlackListStatementContext; 
StarRocksParser.DataCacheTargetContext = DataCacheTargetContext; 
StarRocksParser.CreateDataCacheRuleStatementContext = CreateDataCacheRuleStatementContext; 
StarRocksParser.ShowDataCacheRulesStatementContext = ShowDataCacheRulesStatementContext; 
StarRocksParser.DropDataCacheRuleStatementContext = DropDataCacheRuleStatementContext; 
StarRocksParser.ClearDataCacheRulesStatementContext = ClearDataCacheRulesStatementContext; 
StarRocksParser.DataCacheSelectStatementContext = DataCacheSelectStatementContext; 
StarRocksParser.ExportStatementContext = ExportStatementContext; 
StarRocksParser.CancelExportStatementContext = CancelExportStatementContext; 
StarRocksParser.ShowExportStatementContext = ShowExportStatementContext; 
StarRocksParser.InstallPluginStatementContext = InstallPluginStatementContext; 
StarRocksParser.UninstallPluginStatementContext = UninstallPluginStatementContext; 
StarRocksParser.CreateFileStatementContext = CreateFileStatementContext; 
StarRocksParser.DropFileStatementContext = DropFileStatementContext; 
StarRocksParser.ShowSmallFilesStatementContext = ShowSmallFilesStatementContext; 
StarRocksParser.CreatePipeStatementContext = CreatePipeStatementContext; 
StarRocksParser.DropPipeStatementContext = DropPipeStatementContext; 
StarRocksParser.AlterPipeClauseContext = AlterPipeClauseContext; 
StarRocksParser.AlterPipeStatementContext = AlterPipeStatementContext; 
StarRocksParser.DescPipeStatementContext = DescPipeStatementContext; 
StarRocksParser.ShowPipeStatementContext = ShowPipeStatementContext; 
StarRocksParser.SetStatementContext = SetStatementContext; 
StarRocksParser.SetVarContext = SetVarContext; 
StarRocksParser.Transaction_characteristicsContext = Transaction_characteristicsContext; 
StarRocksParser.Transaction_access_modeContext = Transaction_access_modeContext; 
StarRocksParser.Isolation_levelContext = Isolation_levelContext; 
StarRocksParser.Isolation_typesContext = Isolation_typesContext; 
StarRocksParser.SetExprOrDefaultContext = SetExprOrDefaultContext; 
StarRocksParser.SetUserPropertyStatementContext = SetUserPropertyStatementContext; 
StarRocksParser.RoleListContext = RoleListContext; 
StarRocksParser.ExecuteScriptStatementContext = ExecuteScriptStatementContext; 
StarRocksParser.UnsupportedStatementContext = UnsupportedStatementContext; 
StarRocksParser.Lock_itemContext = Lock_itemContext; 
StarRocksParser.Lock_typeContext = Lock_typeContext; 
StarRocksParser.AlterPlanAdvisorAddStatementContext = AlterPlanAdvisorAddStatementContext; 
StarRocksParser.TruncatePlanAdvisorStatementContext = TruncatePlanAdvisorStatementContext; 
StarRocksParser.AlterPlanAdvisorDropStatementContext = AlterPlanAdvisorDropStatementContext; 
StarRocksParser.ShowPlanAdvisorStatementContext = ShowPlanAdvisorStatementContext; 
StarRocksParser.CreateWarehouseStatementContext = CreateWarehouseStatementContext; 
StarRocksParser.DropWarehouseStatementContext = DropWarehouseStatementContext; 
StarRocksParser.SuspendWarehouseStatementContext = SuspendWarehouseStatementContext; 
StarRocksParser.ResumeWarehouseStatementContext = ResumeWarehouseStatementContext; 
StarRocksParser.SetWarehouseStatementContext = SetWarehouseStatementContext; 
StarRocksParser.ShowWarehousesStatementContext = ShowWarehousesStatementContext; 
StarRocksParser.ShowClustersStatementContext = ShowClustersStatementContext; 
StarRocksParser.ShowNodesStatementContext = ShowNodesStatementContext; 
StarRocksParser.AlterWarehouseStatementContext = AlterWarehouseStatementContext; 
StarRocksParser.BeginStatementContext = BeginStatementContext; 
StarRocksParser.CommitStatementContext = CommitStatementContext; 
StarRocksParser.RollbackStatementContext = RollbackStatementContext; 
StarRocksParser.TranslateStatementContext = TranslateStatementContext; 
StarRocksParser.DialectContext = DialectContext; 
StarRocksParser.TranslateSQLContext = TranslateSQLContext; 
StarRocksParser.QueryStatementContext = QueryStatementContext; 
StarRocksParser.QueryRelationContext = QueryRelationContext; 
StarRocksParser.WithClauseContext = WithClauseContext; 
StarRocksParser.QueryNoWithContext = QueryNoWithContext; 
StarRocksParser.QueryPeriodContext = QueryPeriodContext; 
StarRocksParser.PeriodTypeContext = PeriodTypeContext; 
StarRocksParser.QueryPrimaryContext = QueryPrimaryContext; 
StarRocksParser.SubqueryContext = SubqueryContext; 
StarRocksParser.RowConstructorContext = RowConstructorContext; 
StarRocksParser.SortItemContext = SortItemContext; 
StarRocksParser.LimitConstExprContext = LimitConstExprContext; 
StarRocksParser.LimitElementContext = LimitElementContext; 
StarRocksParser.QuerySpecificationContext = QuerySpecificationContext; 
StarRocksParser.FromClauseContext = FromClauseContext; 
StarRocksParser.GroupingElementContext = GroupingElementContext; 
StarRocksParser.GroupingSetContext = GroupingSetContext; 
StarRocksParser.CommonTableExpressionContext = CommonTableExpressionContext; 
StarRocksParser.SetQuantifierContext = SetQuantifierContext; 
StarRocksParser.SelectItemContext = SelectItemContext; 
StarRocksParser.RelationsContext = RelationsContext; 
StarRocksParser.RelationContext = RelationContext; 
StarRocksParser.RelationPrimaryContext = RelationPrimaryContext; 
StarRocksParser.PivotClauseContext = PivotClauseContext; 
StarRocksParser.PivotAggregationExpressionContext = PivotAggregationExpressionContext; 
StarRocksParser.PivotValueContext = PivotValueContext; 
StarRocksParser.SampleClauseContext = SampleClauseContext; 
StarRocksParser.ArgumentListContext = ArgumentListContext; 
StarRocksParser.NamedArgumentListContext = NamedArgumentListContext; 
StarRocksParser.NamedArgumentContext = NamedArgumentContext; 
StarRocksParser.JoinRelationContext = JoinRelationContext; 
StarRocksParser.CrossOrInnerJoinTypeContext = CrossOrInnerJoinTypeContext; 
StarRocksParser.OuterAndSemiJoinTypeContext = OuterAndSemiJoinTypeContext; 
StarRocksParser.BracketHintContext = BracketHintContext; 
StarRocksParser.HintMapContext = HintMapContext; 
StarRocksParser.JoinCriteriaContext = JoinCriteriaContext; 
StarRocksParser.ColumnAliasesContext = ColumnAliasesContext; 
StarRocksParser.PartitionNamesContext = PartitionNamesContext; 
StarRocksParser.KeyPartitionsContext = KeyPartitionsContext; 
StarRocksParser.TabletListContext = TabletListContext; 
StarRocksParser.PrepareStatementContext = PrepareStatementContext; 
StarRocksParser.PrepareSqlContext = PrepareSqlContext; 
StarRocksParser.ExecuteStatementContext = ExecuteStatementContext; 
StarRocksParser.DeallocateStatementContext = DeallocateStatementContext; 
StarRocksParser.ReplicaListContext = ReplicaListContext; 
StarRocksParser.ExpressionsWithDefaultContext = ExpressionsWithDefaultContext; 
StarRocksParser.ExpressionOrDefaultContext = ExpressionOrDefaultContext; 
StarRocksParser.MapExpressionListContext = MapExpressionListContext; 
StarRocksParser.MapExpressionContext = MapExpressionContext; 
StarRocksParser.ExpressionSingletonContext = ExpressionSingletonContext; 
StarRocksParser.ExpressionContext = ExpressionContext; 
StarRocksParser.ExpressionListContext = ExpressionListContext; 
StarRocksParser.BooleanExpressionContext = BooleanExpressionContext; 
StarRocksParser.PredicateContext = PredicateContext; 
StarRocksParser.TupleInSubqueryContext = TupleInSubqueryContext; 
StarRocksParser.PredicateOperationsContext = PredicateOperationsContext; 
StarRocksParser.ValueExpressionContext = ValueExpressionContext; 
StarRocksParser.PrimaryExpressionContext = PrimaryExpressionContext; 
StarRocksParser.LiteralExpressionContext = LiteralExpressionContext; 
StarRocksParser.FunctionCallContext = FunctionCallContext; 
StarRocksParser.AggregationFunctionContext = AggregationFunctionContext; 
StarRocksParser.UserVariableContext = UserVariableContext; 
StarRocksParser.SystemVariableContext = SystemVariableContext; 
StarRocksParser.ColumnReferenceContext = ColumnReferenceContext; 
StarRocksParser.InformationFunctionExpressionContext = InformationFunctionExpressionContext; 
StarRocksParser.SpecialDateTimeExpressionContext = SpecialDateTimeExpressionContext; 
StarRocksParser.SpecialFunctionExpressionContext = SpecialFunctionExpressionContext; 
StarRocksParser.WindowFunctionContext = WindowFunctionContext; 
StarRocksParser.WhenClauseContext = WhenClauseContext; 
StarRocksParser.OverContext = OverContext; 
StarRocksParser.IgnoreNullsContext = IgnoreNullsContext; 
StarRocksParser.WindowFrameContext = WindowFrameContext; 
StarRocksParser.FrameBoundContext = FrameBoundContext; 
StarRocksParser.BackupRestoreObjectDescContext = BackupRestoreObjectDescContext; 
StarRocksParser.TableDescContext = TableDescContext; 
StarRocksParser.BackupRestoreTableDescContext = BackupRestoreTableDescContext; 
StarRocksParser.ExplainDescContext = ExplainDescContext; 
StarRocksParser.OptimizerTraceContext = OptimizerTraceContext; 
StarRocksParser.PartitionExprContext = PartitionExprContext; 
StarRocksParser.PartitionDescContext = PartitionDescContext; 
StarRocksParser.ListPartitionDescContext = ListPartitionDescContext; 
StarRocksParser.SingleItemListPartitionDescContext = SingleItemListPartitionDescContext; 
StarRocksParser.MultiItemListPartitionDescContext = MultiItemListPartitionDescContext; 
StarRocksParser.MultiListPartitionValuesContext = MultiListPartitionValuesContext; 
StarRocksParser.SingleListPartitionValuesContext = SingleListPartitionValuesContext; 
StarRocksParser.ListPartitionValuesContext = ListPartitionValuesContext; 
StarRocksParser.ListPartitionValueContext = ListPartitionValueContext; 
StarRocksParser.StringListContext = StringListContext; 
StarRocksParser.LiteralExpressionListContext = LiteralExpressionListContext; 
StarRocksParser.RangePartitionDescContext = RangePartitionDescContext; 
StarRocksParser.SingleRangePartitionContext = SingleRangePartitionContext; 
StarRocksParser.MultiRangePartitionContext = MultiRangePartitionContext; 
StarRocksParser.PartitionRangeDescContext = PartitionRangeDescContext; 
StarRocksParser.PartitionKeyDescContext = PartitionKeyDescContext; 
StarRocksParser.PartitionValueListContext = PartitionValueListContext; 
StarRocksParser.KeyPartitionContext = KeyPartitionContext; 
StarRocksParser.PartitionValueContext = PartitionValueContext; 
StarRocksParser.DistributionClauseContext = DistributionClauseContext; 
StarRocksParser.DistributionDescContext = DistributionDescContext; 
StarRocksParser.RefreshSchemeDescContext = RefreshSchemeDescContext; 
StarRocksParser.StatusDescContext = StatusDescContext; 
StarRocksParser.PropertiesContext = PropertiesContext; 
StarRocksParser.ExtPropertiesContext = ExtPropertiesContext; 
StarRocksParser.PropertyListContext = PropertyListContext; 
StarRocksParser.UserPropertyListContext = UserPropertyListContext; 
StarRocksParser.PropertyContext = PropertyContext; 
StarRocksParser.InlinePropertiesContext = InlinePropertiesContext; 
StarRocksParser.InlinePropertyContext = InlinePropertyContext; 
StarRocksParser.VarTypeContext = VarTypeContext; 
StarRocksParser.CommentContext = CommentContext; 
StarRocksParser.OutfileContext = OutfileContext; 
StarRocksParser.FileFormatContext = FileFormatContext; 
StarRocksParser.StringContext = StringContext; 
StarRocksParser.BinaryContext = BinaryContext; 
StarRocksParser.ComparisonOperatorContext = ComparisonOperatorContext; 
StarRocksParser.BooleanValueContext = BooleanValueContext; 
StarRocksParser.IntervalContext = IntervalContext; 
StarRocksParser.TaskIntervalContext = TaskIntervalContext; 
StarRocksParser.TaskUnitIdentifierContext = TaskUnitIdentifierContext; 
StarRocksParser.UnitIdentifierContext = UnitIdentifierContext; 
StarRocksParser.UnitBoundaryContext = UnitBoundaryContext; 
StarRocksParser.TypeContext = TypeContext; 
StarRocksParser.ArrayTypeContext = ArrayTypeContext; 
StarRocksParser.MapTypeContext = MapTypeContext; 
StarRocksParser.SubfieldDescContext = SubfieldDescContext; 
StarRocksParser.SubfieldDescsContext = SubfieldDescsContext; 
StarRocksParser.StructTypeContext = StructTypeContext; 
StarRocksParser.TypeParameterContext = TypeParameterContext; 
StarRocksParser.BaseTypeContext = BaseTypeContext; 
StarRocksParser.DecimalTypeContext = DecimalTypeContext; 
StarRocksParser.QualifiedNameContext = QualifiedNameContext; 
StarRocksParser.TableNameContext = TableNameContext; 
StarRocksParser.WriteBranchContext = WriteBranchContext; 
StarRocksParser.IdentifierContext = IdentifierContext; 
StarRocksParser.IdentifierWithAliasContext = IdentifierWithAliasContext; 
StarRocksParser.IdentifierWithAliasListContext = IdentifierWithAliasListContext; 
StarRocksParser.IdentifierListContext = IdentifierListContext; 
StarRocksParser.IdentifierOrStringContext = IdentifierOrStringContext; 
StarRocksParser.IdentifierOrStringListContext = IdentifierOrStringListContext; 
StarRocksParser.IdentifierOrStringOrStarContext = IdentifierOrStringOrStarContext; 
StarRocksParser.UserContext = UserContext; 
StarRocksParser.AssignmentContext = AssignmentContext; 
StarRocksParser.AssignmentListContext = AssignmentListContext; 
StarRocksParser.NumberContext = NumberContext; 
StarRocksParser.NonReservedContext = NonReservedContext; 
